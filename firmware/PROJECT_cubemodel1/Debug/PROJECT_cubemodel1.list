
PROJECT_cubemodel1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018fa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007af54  08019180  08019180  00029180  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080940d4  080940d4  000b5240  2**0
                  CONTENTS
  4 .ARM          00000008  080940d4  080940d4  000a40d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080940dc  080940dc  000b5240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080940dc  080940dc  000a40dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080940e0  080940e0  000a40e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005100  20000000  080940e4  000b0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20005100  080991e4  000b5100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200051a0  08099284  000b51a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00021618  20005240  08099324  000b5240  2**5
                  ALLOC
 12 ._user_heap_stack 00001000  20026858  08099324  000b6858  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000b5240  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  000b5270  2**0
                  CONTENTS, READONLY
 15 .debug_info   00055c0f  00000000  00000000  000b5303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008b80  00000000  00000000  0010af12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0002eeca  00000000  00000000  00113a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002480  00000000  00000000  00142960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000054f7  00000000  00000000  00144de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00035a5f  00000000  00000000  0014a2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005c5ff  00000000  00000000  0017fd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0013de19  00000000  00000000  001dc335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000934c  00000000  00000000  0031a150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  0032349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20005240 	.word	0x20005240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019160 	.word	0x08019160

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20005244 	.word	0x20005244
 800020c:	08019160 	.word	0x08019160

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a4 	b.w	8000f48 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83a 	bl	8000c80 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_f2lz>:
 8000c18:	ee07 0a90 	vmov	s15, r0
 8000c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	d401      	bmi.n	8000c2a <__aeabi_f2lz+0x12>
 8000c26:	f000 b80b 	b.w	8000c40 <__aeabi_f2ulz>
 8000c2a:	eef1 7a67 	vneg.f32	s15, s15
 8000c2e:	b508      	push	{r3, lr}
 8000c30:	ee17 0a90 	vmov	r0, s15
 8000c34:	f000 f804 	bl	8000c40 <__aeabi_f2ulz>
 8000c38:	4240      	negs	r0, r0
 8000c3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3e:	bd08      	pop	{r3, pc}

08000c40 <__aeabi_f2ulz>:
 8000c40:	b5d0      	push	{r4, r6, r7, lr}
 8000c42:	f7ff fca1 	bl	8000588 <__aeabi_f2d>
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__aeabi_f2ulz+0x38>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	460f      	mov	r7, r1
 8000c4e:	f7ff fcf3 	bl	8000638 <__aeabi_dmul>
 8000c52:	f000 f97b 	bl	8000f4c <__aeabi_d2uiz>
 8000c56:	4604      	mov	r4, r0
 8000c58:	f7ff fc74 	bl	8000544 <__aeabi_ui2d>
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <__aeabi_f2ulz+0x3c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f7ff fcea 	bl	8000638 <__aeabi_dmul>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4630      	mov	r0, r6
 8000c6a:	4639      	mov	r1, r7
 8000c6c:	f7ff fb2c 	bl	80002c8 <__aeabi_dsub>
 8000c70:	f000 f96c 	bl	8000f4c <__aeabi_d2uiz>
 8000c74:	4621      	mov	r1, r4
 8000c76:	bdd0      	pop	{r4, r6, r7, pc}
 8000c78:	3df00000 	.word	0x3df00000
 8000c7c:	41f00000 	.word	0x41f00000

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9e08      	ldr	r6, [sp, #32]
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	460f      	mov	r7, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14a      	bne.n	8000d26 <__udivmoddi4+0xa6>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4694      	mov	ip, r2
 8000c94:	d965      	bls.n	8000d62 <__udivmoddi4+0xe2>
 8000c96:	fab2 f382 	clz	r3, r2
 8000c9a:	b143      	cbz	r3, 8000cae <__udivmoddi4+0x2e>
 8000c9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca0:	f1c3 0220 	rsb	r2, r3, #32
 8000ca4:	409f      	lsls	r7, r3
 8000ca6:	fa20 f202 	lsr.w	r2, r0, r2
 8000caa:	4317      	orrs	r7, r2
 8000cac:	409c      	lsls	r4, r3
 8000cae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb2:	fa1f f58c 	uxth.w	r5, ip
 8000cb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cba:	0c22      	lsrs	r2, r4, #16
 8000cbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc4:	fb01 f005 	mul.w	r0, r1, r5
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x62>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd4:	f080 811c 	bcs.w	8000f10 <__udivmoddi4+0x290>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f240 8119 	bls.w	8000f10 <__udivmoddi4+0x290>
 8000cde:	3902      	subs	r1, #2
 8000ce0:	4462      	add	r2, ip
 8000ce2:	1a12      	subs	r2, r2, r0
 8000ce4:	b2a4      	uxth	r4, r4
 8000ce6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf2:	fb00 f505 	mul.w	r5, r0, r5
 8000cf6:	42a5      	cmp	r5, r4
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x90>
 8000cfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d02:	f080 8107 	bcs.w	8000f14 <__udivmoddi4+0x294>
 8000d06:	42a5      	cmp	r5, r4
 8000d08:	f240 8104 	bls.w	8000f14 <__udivmoddi4+0x294>
 8000d0c:	4464      	add	r4, ip
 8000d0e:	3802      	subs	r0, #2
 8000d10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d14:	1b64      	subs	r4, r4, r5
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11e      	cbz	r6, 8000d22 <__udivmoddi4+0xa2>
 8000d1a:	40dc      	lsrs	r4, r3
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0xbc>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	f000 80ed 	beq.w	8000f0a <__udivmoddi4+0x28a>
 8000d30:	2100      	movs	r1, #0
 8000d32:	e9c6 0500 	strd	r0, r5, [r6]
 8000d36:	4608      	mov	r0, r1
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	fab3 f183 	clz	r1, r3
 8000d40:	2900      	cmp	r1, #0
 8000d42:	d149      	bne.n	8000dd8 <__udivmoddi4+0x158>
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	d302      	bcc.n	8000d4e <__udivmoddi4+0xce>
 8000d48:	4282      	cmp	r2, r0
 8000d4a:	f200 80f8 	bhi.w	8000f3e <__udivmoddi4+0x2be>
 8000d4e:	1a84      	subs	r4, r0, r2
 8000d50:	eb65 0203 	sbc.w	r2, r5, r3
 8000d54:	2001      	movs	r0, #1
 8000d56:	4617      	mov	r7, r2
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d0e2      	beq.n	8000d22 <__udivmoddi4+0xa2>
 8000d5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d60:	e7df      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000d62:	b902      	cbnz	r2, 8000d66 <__udivmoddi4+0xe6>
 8000d64:	deff      	udf	#255	; 0xff
 8000d66:	fab2 f382 	clz	r3, r2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8090 	bne.w	8000e90 <__udivmoddi4+0x210>
 8000d70:	1a8a      	subs	r2, r1, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d80:	fb07 2015 	mls	r0, r7, r5, r2
 8000d84:	0c22      	lsrs	r2, r4, #16
 8000d86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d8a:	fb0e f005 	mul.w	r0, lr, r5
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d92:	eb1c 0202 	adds.w	r2, ip, r2
 8000d96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x122>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2b8>
 8000da2:	4645      	mov	r5, r8
 8000da4:	1a12      	subs	r2, r2, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dac:	fb07 2210 	mls	r2, r7, r0, r2
 8000db0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x14e>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x14c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2c2>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd6:	e79f      	b.n	8000d18 <__udivmoddi4+0x98>
 8000dd8:	f1c1 0720 	rsb	r7, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa05 f401 	lsl.w	r4, r5, r1
 8000dea:	fa20 f307 	lsr.w	r3, r0, r7
 8000dee:	40fd      	lsrs	r5, r7
 8000df0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df4:	4323      	orrs	r3, r4
 8000df6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dfa:	fa1f fe8c 	uxth.w	lr, ip
 8000dfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000e02:	0c1c      	lsrs	r4, r3, #16
 8000e04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e08:	fb08 f50e 	mul.w	r5, r8, lr
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	fa00 f001 	lsl.w	r0, r0, r1
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b0>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2b4>
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2b4>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4464      	add	r4, ip
 8000e30:	1b64      	subs	r4, r4, r5
 8000e32:	b29d      	uxth	r5, r3
 8000e34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e38:	fb09 4413 	mls	r4, r9, r3, r4
 8000e3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e44:	45a6      	cmp	lr, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1da>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2ac>
 8000e52:	45a6      	cmp	lr, r4
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2ac>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e62:	eba4 040e 	sub.w	r4, r4, lr
 8000e66:	42ac      	cmp	r4, r5
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46ae      	mov	lr, r5
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x29c>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x298>
 8000e70:	b156      	cbz	r6, 8000e88 <__udivmoddi4+0x208>
 8000e72:	ebb0 0208 	subs.w	r2, r0, r8
 8000e76:	eb64 040e 	sbc.w	r4, r4, lr
 8000e7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7e:	40ca      	lsrs	r2, r1
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	4317      	orrs	r7, r2
 8000e84:	e9c6 7400 	strd	r7, r4, [r6]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	f1c3 0120 	rsb	r1, r3, #32
 8000e94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e98:	fa20 f201 	lsr.w	r2, r0, r1
 8000e9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea0:	409d      	lsls	r5, r3
 8000ea2:	432a      	orrs	r2, r5
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb0:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb4:	0c11      	lsrs	r1, r2, #16
 8000eb6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eba:	fb00 f50e 	mul.w	r5, r0, lr
 8000ebe:	428d      	cmp	r5, r1
 8000ec0:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x258>
 8000ec6:	eb1c 0101 	adds.w	r1, ip, r1
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b0>
 8000ed0:	428d      	cmp	r5, r1
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b0>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4461      	add	r1, ip
 8000ed8:	1b49      	subs	r1, r1, r5
 8000eda:	b292      	uxth	r2, r2
 8000edc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee0:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee8:	fb05 f10e 	mul.w	r1, r5, lr
 8000eec:	4291      	cmp	r1, r2
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x282>
 8000ef0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2a8>
 8000efa:	4291      	cmp	r1, r2
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2a8>
 8000efe:	3d02      	subs	r5, #2
 8000f00:	4462      	add	r2, ip
 8000f02:	1a52      	subs	r2, r2, r1
 8000f04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0xfc>
 8000f0a:	4631      	mov	r1, r6
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e708      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000f10:	4639      	mov	r1, r7
 8000f12:	e6e6      	b.n	8000ce2 <__udivmoddi4+0x62>
 8000f14:	4610      	mov	r0, r2
 8000f16:	e6fb      	b.n	8000d10 <__udivmoddi4+0x90>
 8000f18:	4548      	cmp	r0, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f0>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f24:	3b01      	subs	r3, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f0>
 8000f28:	4645      	mov	r5, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x282>
 8000f2c:	462b      	mov	r3, r5
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1da>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x258>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b0>
 8000f38:	3d02      	subs	r5, #2
 8000f3a:	4462      	add	r2, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x124>
 8000f3e:	4608      	mov	r0, r1
 8000f40:	e70a      	b.n	8000d58 <__udivmoddi4+0xd8>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x14e>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__aeabi_d2uiz>:
 8000f4c:	004a      	lsls	r2, r1, #1
 8000f4e:	d211      	bcs.n	8000f74 <__aeabi_d2uiz+0x28>
 8000f50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f54:	d211      	bcs.n	8000f7a <__aeabi_d2uiz+0x2e>
 8000f56:	d50d      	bpl.n	8000f74 <__aeabi_d2uiz+0x28>
 8000f58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f60:	d40e      	bmi.n	8000f80 <__aeabi_d2uiz+0x34>
 8000f62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f72:	4770      	bx	lr
 8000f74:	f04f 0000 	mov.w	r0, #0
 8000f78:	4770      	bx	lr
 8000f7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f7e:	d102      	bne.n	8000f86 <__aeabi_d2uiz+0x3a>
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <camWriteReg.constprop.0>:
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);

  return rbuff;
}

void camWriteReg(const uint8_t reg, const uint8_t val) {
 8000f8c:	b510      	push	{r4, lr}
  uint8_t buff[2] = {reg | 0x80, val};
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
void camWriteReg(const uint8_t reg, const uint8_t val) {
 8000f90:	b082      	sub	sp, #8
 8000f92:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f94:	2101      	movs	r1, #1
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <camWriteReg.constprop.0+0x58>)
 8000f98:	f004 fad4 	bl	8005544 <HAL_GPIO_WritePin>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <camWriteReg.constprop.0+0x5c>)
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8000fa2:	9a01      	ldr	r2, [sp, #4]
  tmpreg = SPIx->SR;
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8000fa8:	9a01      	ldr	r2, [sp, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	0790      	lsls	r0, r2, #30
 8000fae:	d5fc      	bpl.n	8000faa <camWriteReg.constprop.0+0x1e>
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8000fb0:	2184      	movs	r1, #132	; 0x84
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <camWriteReg.constprop.0+0x5c>)
  *spidr = TxData;
 8000fb4:	7319      	strb	r1, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fb6:	6893      	ldr	r3, [r2, #8]
 8000fb8:	0799      	lsls	r1, r3, #30
 8000fba:	d5fc      	bpl.n	8000fb6 <camWriteReg.constprop.0+0x2a>
 8000fbc:	490a      	ldr	r1, [pc, #40]	; (8000fe8 <camWriteReg.constprop.0+0x5c>)
  *spidr = TxData;
 8000fbe:	7314      	strb	r4, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fc0:	688b      	ldr	r3, [r1, #8]
 8000fc2:	079a      	lsls	r2, r3, #30
 8000fc4:	d5fc      	bpl.n	8000fc0 <camWriteReg.constprop.0+0x34>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <camWriteReg.constprop.0+0x5c>)
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	d4fc      	bmi.n	8000fc8 <camWriteReg.constprop.0+0x3c>
  LL_SPI_ClearFlag_OVR(SPI2);
  SPI_Transmit((uint8_t *)buff, 2);
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <camWriteReg.constprop.0+0x58>)
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	f004 fab6 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fd8:	2001      	movs	r0, #1
}
 8000fda:	b002      	add	sp, #8
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(1);
 8000fe0:	f003 ba5a 	b.w	8004498 <HAL_Delay>
 8000fe4:	40022000 	.word	0x40022000
 8000fe8:	40003800 	.word	0x40003800

08000fec <read_fifo_burst.part.0>:
    return color_avg;
}

#define camw 320
#define camh 240
uint8_t read_fifo_burst() {
 8000fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if (length >= 0x7FFFFF || length == 0) {

    return 0;
  }
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000ff0:	487d      	ldr	r0, [pc, #500]	; (80011e8 <read_fifo_burst.part.0+0x1fc>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2200      	movs	r2, #0
uint8_t read_fifo_burst() {
 8000ff6:	ed2d 8b02 	vpush	{d8}
 8000ffa:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000ffe:	f004 faa1 	bl	8005544 <HAL_GPIO_WritePin>
  uint8_t dummy_single_tx = 0x3d;

  if(curr_buffer == 1)
 8001002:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <read_fifo_burst.part.0+0x200>)
 8001004:	ae80      	add	r6, sp, #512	; 0x200
 8001006:	f50d 67b8 	add.w	r7, sp, #1472	; 0x5c0
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
  {
	  BSP_LCD_SelectLayer(0);
 800100e:	bf0c      	ite	eq
 8001010:	2000      	moveq	r0, #0
  }else
  {
	  BSP_LCD_SelectLayer(1);
 8001012:	2001      	movne	r0, #1
 8001014:	f001 fe7a 	bl	8002d0c <BSP_LCD_SelectLayer>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001018:	4b75      	ldr	r3, [pc, #468]	; (80011f0 <read_fifo_burst.part.0+0x204>)
  *spidr = TxData;
 800101a:	213d      	movs	r1, #61	; 0x3d
 800101c:	46b6      	mov	lr, r6
uint8_t read_fifo_burst() {
 800101e:	f06f 0427 	mvn.w	r4, #39	; 0x27
 8001022:	2501      	movs	r5, #1
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	0796      	lsls	r6, r2, #30
 8001028:	d5fc      	bpl.n	8001024 <read_fifo_burst.part.0+0x38>
  *spidr = TxData;
 800102a:	7319      	strb	r1, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	0790      	lsls	r0, r2, #30
 8001030:	d5fc      	bpl.n	800102c <read_fifo_burst.part.0+0x40>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	0612      	lsls	r2, r2, #24
 8001036:	d4fc      	bmi.n	8001032 <read_fifo_burst.part.0+0x46>
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	0616      	lsls	r6, r2, #24
 800103c:	d4fc      	bmi.n	8001038 <read_fifo_burst.part.0+0x4c>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	07d0      	lsls	r0, r2, #31
 8001042:	d5fc      	bpl.n	800103e <read_fifo_burst.part.0+0x52>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001044:	7b18      	ldrb	r0, [r3, #12]
  tmpreg = SPIx->DR;
 8001046:	68da      	ldr	r2, [r3, #12]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001048:	b2c0      	uxtb	r0, r0
  tmpreg = SPIx->DR;
 800104a:	9204      	str	r2, [sp, #16]
  (void) tmpreg;
 800104c:	9a04      	ldr	r2, [sp, #16]
  tmpreg = SPIx->SR;
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	9204      	str	r2, [sp, #16]
  (void) tmpreg;
 8001052:	9a04      	ldr	r2, [sp, #16]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	0792      	lsls	r2, r2, #30
 8001058:	d5fc      	bpl.n	8001054 <read_fifo_burst.part.0+0x68>
  *spidr = TxData;
 800105a:	7319      	strb	r1, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	0796      	lsls	r6, r2, #30
 8001060:	d5fc      	bpl.n	800105c <read_fifo_burst.part.0+0x70>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	0612      	lsls	r2, r2, #24
 8001066:	d4fc      	bmi.n	8001062 <read_fifo_burst.part.0+0x76>
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	0616      	lsls	r6, r2, #24
 800106c:	d4fc      	bmi.n	8001068 <read_fifo_burst.part.0+0x7c>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	f012 0201 	ands.w	r2, r2, #1
 8001074:	d0fb      	beq.n	800106e <read_fifo_burst.part.0+0x82>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001076:	f893 c00c 	ldrb.w	ip, [r3, #12]
  {
	  for(int x=0;x<320;x++)
	  {
		SPI_TransmitReceive(&dummy_single_tx, &col2, 1);
		SPI_TransmitReceive(&dummy_single_tx, &col1, 1);
		if(x>=40&&x<=280)
 800107a:	2cf0      	cmp	r4, #240	; 0xf0
  tmpreg = SPIx->DR;
 800107c:	68de      	ldr	r6, [r3, #12]
  return (*((__IO uint8_t *)&SPIx->DR));
 800107e:	fa5f fc8c 	uxtb.w	ip, ip
  tmpreg = SPIx->DR;
 8001082:	9605      	str	r6, [sp, #20]
  (void) tmpreg;
 8001084:	9e05      	ldr	r6, [sp, #20]
  tmpreg = SPIx->SR;
 8001086:	689e      	ldr	r6, [r3, #8]
 8001088:	9605      	str	r6, [sp, #20]
  (void) tmpreg;
 800108a:	9e05      	ldr	r6, [sp, #20]
 800108c:	f240 8147 	bls.w	800131e <read_fifo_burst.part.0+0x332>
	  for(int x=0;x<320;x++)
 8001090:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8001094:	d002      	beq.n	800109c <read_fifo_burst.part.0+0xb0>
 8001096:	3501      	adds	r5, #1
 8001098:	3401      	adds	r4, #1
 800109a:	e7c3      	b.n	8001024 <read_fifo_burst.part.0+0x38>
  for(int y=0;y<2;y++)
 800109c:	f50e 7ef0 	add.w	lr, lr, #480	; 0x1e0
 80010a0:	45be      	cmp	lr, r7
 80010a2:	d1bc      	bne.n	800101e <read_fifo_burst.part.0+0x32>
  uint8_t modely = 0;
 80010a4:	f04f 0b00 	mov.w	fp, #0
  }


  while(modely < 128)
  {
	  if(camy < (int)(modely*step))
 80010a8:	ed9f 8a52 	vldr	s16, [pc, #328]	; 80011f4 <read_fifo_burst.part.0+0x208>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010ac:	4c50      	ldr	r4, [pc, #320]	; (80011f0 <read_fifo_burst.part.0+0x204>)
  uint8_t camy = 0;
 80010ae:	f8cd b000 	str.w	fp, [sp]
 80010b2:	9202      	str	r2, [sp, #8]
 80010b4:	e004      	b.n	80010c0 <read_fifo_burst.part.0+0xd4>
		  camy++;

	  }else if(camy > (int)(modely*step))
	  {
		  modely++;
	  }else if(camy == (int)(modely*step))
 80010b6:	f000 809f 	beq.w	80011f8 <read_fifo_burst.part.0+0x20c>
  while(modely < 128)
 80010ba:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80010be:	d114      	bne.n	80010ea <read_fifo_burst.part.0+0xfe>
	  if(camy < (int)(modely*step))
 80010c0:	ee07 ba90 	vmov	s15, fp
 80010c4:	9b00      	ldr	r3, [sp, #0]
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 2a90 	vmov	r2, s15
 80010d6:	4293      	cmp	r3, r2
 80010d8:	db22      	blt.n	8001120 <read_fifo_burst.part.0+0x134>
	  }else if(camy > (int)(modely*step))
 80010da:	ddec      	ble.n	80010b6 <read_fifo_burst.part.0+0xca>
			  uint8_t b = (col & 0x1F) *scale1;
			  in_data[(modely*128+modelx)*3+0] = r;
			  in_data[(modely*128+modelx)*3+1] = g;
			  in_data[(modely*128+modelx)*3+2] = b;
		  }
		  modely++;
 80010dc:	f10b 0b01 	add.w	fp, fp, #1
 80010e0:	fa5f fb8b 	uxtb.w	fp, fp
  while(modely < 128)
 80010e4:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80010e8:	d0ea      	beq.n	80010c0 <read_fifo_burst.part.0+0xd4>
	  }
  }

	if(curr_buffer == 1)
 80010ea:	4b40      	ldr	r3, [pc, #256]	; (80011ec <read_fifo_burst.part.0+0x200>)
 80010ec:	781c      	ldrb	r4, [r3, #0]
 80010ee:	2c01      	cmp	r4, #1
 80010f0:	d06f      	beq.n	80011d2 <read_fifo_burst.part.0+0x1e6>
		BSP_LCD_SetTransparency(0, 100);
		BSP_LCD_SetTransparency(1, 0);
		curr_buffer = 0;
	}else
	{
		BSP_LCD_SetTransparency(0, 0);
 80010f2:	2100      	movs	r1, #0
 80010f4:	4608      	mov	r0, r1
 80010f6:	f001 fe0f 	bl	8002d18 <BSP_LCD_SetTransparency>
		BSP_LCD_SetTransparency(1, 100);
 80010fa:	2164      	movs	r1, #100	; 0x64
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fe0b 	bl	8002d18 <BSP_LCD_SetTransparency>
 8001102:	2301      	movs	r3, #1
		curr_buffer = 1;
	}
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
		curr_buffer = 0;
 8001106:	4939      	ldr	r1, [pc, #228]	; (80011ec <read_fifo_burst.part.0+0x200>)
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001108:	4837      	ldr	r0, [pc, #220]	; (80011e8 <read_fifo_burst.part.0+0x1fc>)
		curr_buffer = 0;
 800110a:	700b      	strb	r3, [r1, #0]
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800110c:	4611      	mov	r1, r2
 800110e:	f004 fa19 	bl	8005544 <HAL_GPIO_WritePin>
  return 1;
}
 8001112:	2001      	movs	r0, #1
 8001114:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8001118:	ecbd 8b02 	vpop	{d8}
 800111c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001120:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001124:	f06f 0927 	mvn.w	r9, #39	; 0x27
  *spidr = TxData;
 8001128:	f04f 083d 	mov.w	r8, #61	; 0x3d
			  get_spi_temp = HAL_GetTick();
 800112c:	f003 f9ae 	bl	800448c <HAL_GetTick>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001130:	68a3      	ldr	r3, [r4, #8]
 8001132:	0798      	lsls	r0, r3, #30
 8001134:	d5fc      	bpl.n	8001130 <read_fifo_burst.part.0+0x144>
  *spidr = TxData;
 8001136:	f884 800c 	strb.w	r8, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800113a:	68a3      	ldr	r3, [r4, #8]
 800113c:	0799      	lsls	r1, r3, #30
 800113e:	d5fc      	bpl.n	800113a <read_fifo_burst.part.0+0x14e>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001140:	68a3      	ldr	r3, [r4, #8]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	d4fc      	bmi.n	8001140 <read_fifo_burst.part.0+0x154>
 8001146:	68a3      	ldr	r3, [r4, #8]
 8001148:	061b      	lsls	r3, r3, #24
 800114a:	d4fc      	bmi.n	8001146 <read_fifo_burst.part.0+0x15a>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800114c:	68a3      	ldr	r3, [r4, #8]
 800114e:	07df      	lsls	r7, r3, #31
 8001150:	d5fc      	bpl.n	800114c <read_fifo_burst.part.0+0x160>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001152:	7b25      	ldrb	r5, [r4, #12]
  tmpreg = SPIx->DR;
 8001154:	68e3      	ldr	r3, [r4, #12]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001156:	b2ed      	uxtb	r5, r5
  tmpreg = SPIx->DR;
 8001158:	9306      	str	r3, [sp, #24]
  (void) tmpreg;
 800115a:	9b06      	ldr	r3, [sp, #24]
  tmpreg = SPIx->SR;
 800115c:	68a3      	ldr	r3, [r4, #8]
 800115e:	9306      	str	r3, [sp, #24]
  (void) tmpreg;
 8001160:	9b06      	ldr	r3, [sp, #24]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001162:	68a3      	ldr	r3, [r4, #8]
 8001164:	079e      	lsls	r6, r3, #30
 8001166:	d5fc      	bpl.n	8001162 <read_fifo_burst.part.0+0x176>
  *spidr = TxData;
 8001168:	f884 800c 	strb.w	r8, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800116c:	68a3      	ldr	r3, [r4, #8]
 800116e:	0798      	lsls	r0, r3, #30
 8001170:	d5fc      	bpl.n	800116c <read_fifo_burst.part.0+0x180>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001172:	68a3      	ldr	r3, [r4, #8]
 8001174:	0619      	lsls	r1, r3, #24
 8001176:	d4fc      	bmi.n	8001172 <read_fifo_burst.part.0+0x186>
 8001178:	68a3      	ldr	r3, [r4, #8]
 800117a:	061a      	lsls	r2, r3, #24
 800117c:	d4fc      	bmi.n	8001178 <read_fifo_burst.part.0+0x18c>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800117e:	68a3      	ldr	r3, [r4, #8]
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	d5fc      	bpl.n	800117e <read_fifo_burst.part.0+0x192>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001184:	7b26      	ldrb	r6, [r4, #12]
  tmpreg = SPIx->DR;
 8001186:	68e3      	ldr	r3, [r4, #12]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001188:	b2f6      	uxtb	r6, r6
  tmpreg = SPIx->DR;
 800118a:	9307      	str	r3, [sp, #28]
  (void) tmpreg;
 800118c:	9b07      	ldr	r3, [sp, #28]
  tmpreg = SPIx->SR;
 800118e:	68a3      	ldr	r3, [r4, #8]
 8001190:	9307      	str	r3, [sp, #28]
  (void) tmpreg;
 8001192:	9b07      	ldr	r3, [sp, #28]
			get_spi_temp = HAL_GetTick()-get_spi_temp;
 8001194:	f003 f97a 	bl	800448c <HAL_GetTick>
			if(x>=40&&x<=280)
 8001198:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 800119c:	f240 80c4 	bls.w	8001328 <read_fifo_burst.part.0+0x33c>
		  for(int x=0;x<320;x++)
 80011a0:	f5ba 7fa0 	cmp.w	sl, #320	; 0x140
 80011a4:	d004      	beq.n	80011b0 <read_fifo_burst.part.0+0x1c4>
 80011a6:	f10a 0a01 	add.w	sl, sl, #1
 80011aa:	f109 0901 	add.w	r9, r9, #1
 80011ae:	e7bd      	b.n	800112c <read_fifo_burst.part.0+0x140>
		  memcpy(buff[0], buff[1], 240*2);
 80011b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011b4:	a9f8      	add	r1, sp, #992	; 0x3e0
 80011b6:	a880      	add	r0, sp, #512	; 0x200
 80011b8:	f016 f823 	bl	8017202 <memcpy>
		  memcpy(buff[1], tmp_buff, 240*2);
 80011bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011c0:	a908      	add	r1, sp, #32
 80011c2:	a8f8      	add	r0, sp, #992	; 0x3e0
 80011c4:	f016 f81d 	bl	8017202 <memcpy>
		  camy++;
 80011c8:	9b00      	ldr	r3, [sp, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	e773      	b.n	80010ba <read_fifo_burst.part.0+0xce>
		BSP_LCD_SetTransparency(0, 100);
 80011d2:	2164      	movs	r1, #100	; 0x64
 80011d4:	2000      	movs	r0, #0
 80011d6:	f001 fd9f 	bl	8002d18 <BSP_LCD_SetTransparency>
		BSP_LCD_SetTransparency(1, 0);
 80011da:	2100      	movs	r1, #0
 80011dc:	4620      	mov	r0, r4
 80011de:	f001 fd9b 	bl	8002d18 <BSP_LCD_SetTransparency>
		curr_buffer = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e78e      	b.n	8001104 <read_fifo_burst.part.0+0x118>
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	40003800 	.word	0x40003800
 80011f4:	3fefffff 	.word	0x3fefffff
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2, col);
 80011f8:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <read_fifo_burst.part.0+0x34c>)
 80011fe:	ea4f 270b 	mov.w	r7, fp, lsl #8
			  in_data[(modely*128+modelx)*3+0] = r;
 8001202:	f8cd b00c 	str.w	fp, [sp, #12]
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2+1, col);
 8001206:	f109 0a09 	add.w	sl, r9, #9
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2, col);
 800120a:	f109 0908 	add.w	r9, r9, #8
 800120e:	eb07 17cb 	add.w	r7, r7, fp, lsl #7
			  in_data[(modely*128+modelx)*3+0] = r;
 8001212:	2500      	movs	r5, #0
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2+1, col);
 8001214:	fa1f fa8a 	uxth.w	sl, sl
 8001218:	441f      	add	r7, r3
			  in_data[(modely*128+modelx)*3+0] = r;
 800121a:	46d3      	mov	fp, sl
 800121c:	46ca      	mov	sl, r9
			  uint8_t stepped_x = modelx*step;
 800121e:	ee07 5a90 	vmov	s15, r5
			  col = average_rgb565(buff[0][stepped_x],buff[0][stepped_x+1],buff[1][stepped_x],buff[1][stepped_x+1]);
 8001222:	a880      	add	r0, sp, #512	; 0x200
 8001224:	aa80      	add	r2, sp, #512	; 0x200
		  for(uint8_t modelx=0;modelx<128;modelx++)
 8001226:	3703      	adds	r7, #3
			  uint8_t stepped_x = modelx*step;
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001234:	edcd 7a01 	vstr	s15, [sp, #4]
			  col = average_rgb565(buff[0][stepped_x],buff[0][stepped_x+1],buff[1][stepped_x],buff[1][stepped_x+1]);
 8001238:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001242:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8001246:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800124a:	33f1      	adds	r3, #241	; 0xf1
 800124c:	f830 6011 	ldrh.w	r6, [r0, r1, lsl #1]
    uint16_t r_avg = (r1 + r2 + r3 + r4) / 4;
 8001250:	ea4f 21dc 	mov.w	r1, ip, lsr #11
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 8001254:	f00c 0e1f 	and.w	lr, ip, #31
			  col = average_rgb565(buff[0][stepped_x],buff[0][stepped_x+1],buff[1][stepped_x],buff[1][stepped_x+1]);
 8001258:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
    uint16_t r_avg = (r1 + r2 + r3 + r4) / 4;
 800125c:	eb01 21d2 	add.w	r1, r1, r2, lsr #11
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 8001260:	f002 031f 	and.w	r3, r2, #31
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001264:	f3cc 1c45 	ubfx	ip, ip, #5, #6
 8001268:	f3c2 1245 	ubfx	r2, r2, #5, #6
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 800126c:	4473      	add	r3, lr
    uint16_t r_avg = (r1 + r2 + r3 + r4) / 4;
 800126e:	eb01 21d6 	add.w	r1, r1, r6, lsr #11
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001272:	4462      	add	r2, ip
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 8001274:	f006 0c1f 	and.w	ip, r6, #31
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001278:	f3c6 1645 	ubfx	r6, r6, #5, #6
    uint16_t r_avg = (r1 + r2 + r3 + r4) / 4;
 800127c:	eb01 21d0 	add.w	r1, r1, r0, lsr #11
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 8001280:	4463      	add	r3, ip
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001282:	4432      	add	r2, r6
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 8001284:	f000 061f 	and.w	r6, r0, #31
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001288:	f3c0 1045 	ubfx	r0, r0, #5, #6
    uint16_t r_avg = (r1 + r2 + r3 + r4) / 4;
 800128c:	1089      	asrs	r1, r1, #2
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 800128e:	4433      	add	r3, r6
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001290:	4402      	add	r2, r0
    uint16_t b_avg = (b1 + b2 + b3 + b4) / 4;
 8001292:	109b      	asrs	r3, r3, #2
    uint16_t g_avg = (g1 + g2 + g3 + g4) / 4;
 8001294:	1092      	asrs	r2, r2, #2
    uint16_t color_avg = (r_avg << 11) | (g_avg << 5) | b_avg;
 8001296:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 800129a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800129e:	fa1f f883 	uxth.w	r8, r3
 80012a2:	b21e      	sxth	r6, r3
			  BSP_LCD_SetTextColor(col);
 80012a4:	4640      	mov	r0, r8
 80012a6:	f001 fd3d 	bl	8002d24 <BSP_LCD_SetTextColor>
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2, col);
 80012aa:	4642      	mov	r2, r8
 80012ac:	006b      	lsls	r3, r5, #1
 80012ae:	4651      	mov	r1, sl
		  for(uint8_t modelx=0;modelx<128;modelx++)
 80012b0:	3501      	adds	r5, #1
 80012b2:	b29b      	uxth	r3, r3
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2, col);
 80012b4:	f103 0970 	add.w	r9, r3, #112	; 0x70
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	fa1f f989 	uxth.w	r9, r9
 80012be:	4648      	mov	r0, r9
 80012c0:	f001 fe78 	bl	8002fb4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(112+modelx*2+1, 8+modely*2, col);
 80012c4:	9b01      	ldr	r3, [sp, #4]
 80012c6:	4642      	mov	r2, r8
 80012c8:	4651      	mov	r1, sl
 80012ca:	3371      	adds	r3, #113	; 0x71
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f001 fe6f 	bl	8002fb4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(112+modelx*2, 8+modely*2+1, col);
 80012d6:	4642      	mov	r2, r8
 80012d8:	4659      	mov	r1, fp
 80012da:	4648      	mov	r0, r9
 80012dc:	f001 fe6a 	bl	8002fb4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(112+modelx*2+1, 8+modely*2+1, col);
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	4642      	mov	r2, r8
 80012e4:	4659      	mov	r1, fp
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fe64 	bl	8002fb4 <BSP_LCD_DrawPixel>
			  uint8_t g = ((col >> 5) & 0x3F) *scale2;
 80012ec:	f3c8 1245 	ubfx	r2, r8, #5, #6
			  uint8_t r = ((col>> 11) & 0x1F) *scale1;
 80012f0:	ea4f 21d8 	mov.w	r1, r8, lsr #11
		  for(uint8_t modelx=0;modelx<128;modelx++)
 80012f4:	2d80      	cmp	r5, #128	; 0x80
			  uint8_t b = (col & 0x1F) *scale1;
 80012f6:	ea4f 03c6 	mov.w	r3, r6, lsl #3
			  uint8_t r = ((col>> 11) & 0x1F) *scale1;
 80012fa:	ea4f 01c1 	mov.w	r1, r1, lsl #3
			  uint8_t g = ((col >> 5) & 0x3F) *scale2;
 80012fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
			  in_data[(modely*128+modelx)*3+2] = b;
 8001302:	f807 3c01 	strb.w	r3, [r7, #-1]
			  in_data[(modely*128+modelx)*3+0] = r;
 8001306:	f807 1c03 	strb.w	r1, [r7, #-3]
			  in_data[(modely*128+modelx)*3+1] = g;
 800130a:	f807 2c02 	strb.w	r2, [r7, #-2]
		  for(uint8_t modelx=0;modelx<128;modelx++)
 800130e:	d186      	bne.n	800121e <read_fifo_burst.part.0+0x232>
		  modely++;
 8001310:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001314:	f10b 0b01 	add.w	fp, fp, #1
 8001318:	fa5f fb8b 	uxtb.w	fp, fp
 800131c:	e6e2      	b.n	80010e4 <read_fifo_burst.part.0+0xf8>
			buff[y][x-40] = (col1<<8)|col2;
 800131e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001322:	f82e 0014 	strh.w	r0, [lr, r4, lsl #1]
	  for(int x=0;x<320;x++)
 8001326:	e6b6      	b.n	8001096 <read_fifo_burst.part.0+0xaa>
				tmp_buff[x-40] = (col1<<8)|col2;
 8001328:	ab08      	add	r3, sp, #32
 800132a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800132e:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 8001332:	f823 5c52 	strh.w	r5, [r3, #-82]
		  for(int x=0;x<320;x++)
 8001336:	e736      	b.n	80011a6 <read_fifo_burst.part.0+0x1ba>
 8001338:	2001a0e0 	.word	0x2001a0e0

0800133c <camReadReg>:
uint8_t camReadReg(const uint8_t reg) {
 800133c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
uint8_t camReadReg(const uint8_t reg) {
 8001340:	b084      	sub	sp, #16
 8001342:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001344:	2101      	movs	r1, #1
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <camReadReg+0xa0>)
 8001348:	f004 f8fc 	bl	8005544 <HAL_GPIO_WritePin>
  tmpreg = SPIx->DR;
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <camReadReg+0xa4>)
 800134e:	68d3      	ldr	r3, [r2, #12]
 8001350:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8001352:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8001354:	6893      	ldr	r3, [r2, #8]
 8001356:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8001358:	9b01      	ldr	r3, [sp, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800135a:	6893      	ldr	r3, [r2, #8]
 800135c:	079b      	lsls	r3, r3, #30
 800135e:	d5fc      	bpl.n	800135a <camReadReg+0x1e>
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <camReadReg+0xa4>)
  *spidr = TxData;
 8001362:	7314      	strb	r4, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	0794      	lsls	r4, r2, #30
 8001368:	d5fc      	bpl.n	8001364 <camReadReg+0x28>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <camReadReg+0xa4>)
 800136c:	6893      	ldr	r3, [r2, #8]
 800136e:	0618      	lsls	r0, r3, #24
 8001370:	d4fc      	bmi.n	800136c <camReadReg+0x30>
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <camReadReg+0xa4>)
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	0619      	lsls	r1, r3, #24
 8001378:	d4fc      	bmi.n	8001374 <camReadReg+0x38>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <camReadReg+0xa4>)
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	07d2      	lsls	r2, r2, #31
 8001380:	d5fc      	bpl.n	800137c <camReadReg+0x40>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001382:	7b1a      	ldrb	r2, [r3, #12]
  tmpreg = SPIx->DR;
 8001384:	68d9      	ldr	r1, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <camReadReg+0xa4>)
  tmpreg = SPIx->DR;
 8001388:	9103      	str	r1, [sp, #12]
  (void) tmpreg;
 800138a:	9903      	ldr	r1, [sp, #12]
  tmpreg = SPIx->SR;
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8001390:	9b03      	ldr	r3, [sp, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001392:	6893      	ldr	r3, [r2, #8]
 8001394:	079b      	lsls	r3, r3, #30
 8001396:	d5fc      	bpl.n	8001392 <camReadReg+0x56>
  *spidr = TxData;
 8001398:	2300      	movs	r3, #0
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800139a:	4911      	ldr	r1, [pc, #68]	; (80013e0 <camReadReg+0xa4>)
  *spidr = TxData;
 800139c:	7313      	strb	r3, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800139e:	688b      	ldr	r3, [r1, #8]
 80013a0:	079c      	lsls	r4, r3, #30
 80013a2:	d5fc      	bpl.n	800139e <camReadReg+0x62>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <camReadReg+0xa4>)
 80013a6:	6893      	ldr	r3, [r2, #8]
 80013a8:	0618      	lsls	r0, r3, #24
 80013aa:	d4fc      	bmi.n	80013a6 <camReadReg+0x6a>
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <camReadReg+0xa4>)
 80013ae:	6893      	ldr	r3, [r2, #8]
 80013b0:	0619      	lsls	r1, r3, #24
 80013b2:	d4fc      	bmi.n	80013ae <camReadReg+0x72>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <camReadReg+0xa4>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	07d2      	lsls	r2, r2, #31
 80013ba:	d5fc      	bpl.n	80013b6 <camReadReg+0x7a>
  return (*((__IO uint8_t *)&SPIx->DR));
 80013bc:	7b1c      	ldrb	r4, [r3, #12]
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
  tmpreg = SPIx->DR;
 80013c0:	68d9      	ldr	r1, [r3, #12]
  return (*((__IO uint8_t *)&SPIx->DR));
 80013c2:	b2e4      	uxtb	r4, r4
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <camReadReg+0xa0>)
  tmpreg = SPIx->DR;
 80013c6:	9102      	str	r1, [sp, #8]
  (void) tmpreg;
 80013c8:	9902      	ldr	r1, [sp, #8]
 80013ca:	4611      	mov	r1, r2
  tmpreg = SPIx->SR;
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	9302      	str	r3, [sp, #8]
  (void) tmpreg;
 80013d0:	9b02      	ldr	r3, [sp, #8]
 80013d2:	f004 f8b7 	bl	8005544 <HAL_GPIO_WritePin>
}
 80013d6:	4620      	mov	r0, r4
 80013d8:	b004      	add	sp, #16
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40003800 	.word	0x40003800

080013e4 <camWriteReg>:
void camWriteReg(const uint8_t reg, const uint8_t val) {
 80013e4:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
void camWriteReg(const uint8_t reg, const uint8_t val) {
 80013e8:	b083      	sub	sp, #12
 80013ea:	4605      	mov	r5, r0
 80013ec:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <camWriteReg+0x5c>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	f004 f8a7 	bl	8005544 <HAL_GPIO_WritePin>
  tmpreg = SPIx->DR;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <camWriteReg+0x60>)
  uint8_t buff[2] = {reg | 0x80, val};
 80013f8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8001400:	9a01      	ldr	r2, [sp, #4]
  tmpreg = SPIx->SR;
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8001406:	9a01      	ldr	r2, [sp, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	0790      	lsls	r0, r2, #30
 800140c:	d5fc      	bpl.n	8001408 <camWriteReg+0x24>
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <camWriteReg+0x60>)
  *spidr = TxData;
 8001410:	731d      	strb	r5, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001412:	6893      	ldr	r3, [r2, #8]
 8001414:	0799      	lsls	r1, r3, #30
 8001416:	d5fc      	bpl.n	8001412 <camWriteReg+0x2e>
 8001418:	490a      	ldr	r1, [pc, #40]	; (8001444 <camWriteReg+0x60>)
  *spidr = TxData;
 800141a:	7314      	strb	r4, [r2, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800141c:	688b      	ldr	r3, [r1, #8]
 800141e:	079a      	lsls	r2, r3, #30
 8001420:	d5fc      	bpl.n	800141c <camWriteReg+0x38>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <camWriteReg+0x60>)
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	061b      	lsls	r3, r3, #24
 8001428:	d4fc      	bmi.n	8001424 <camWriteReg+0x40>
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <camWriteReg+0x5c>)
 800142e:	4611      	mov	r1, r2
 8001430:	f004 f888 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001434:	2001      	movs	r0, #1
}
 8001436:	b003      	add	sp, #12
 8001438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_Delay(1);
 800143c:	f003 b82c 	b.w	8004498 <HAL_Delay>
 8001440:	40022000 	.word	0x40022000
 8001444:	40003800 	.word	0x40003800

08001448 <wrSensorRegs16_8>:
    if (reg_addr == 0xffff)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_addr = next->reg;
 800144c:	8803      	ldrh	r3, [r0, #0]
    if (reg_addr == 0xffff)
 800144e:	4293      	cmp	r3, r2
int wrSensorRegs16_8(const struct sensor_reg reglist[]) {
 8001450:	b570      	push	{r4, r5, r6, lr}
    reg_val = next->val;
 8001452:	f890 e002 	ldrb.w	lr, [r0, #2]
int wrSensorRegs16_8(const struct sensor_reg reglist[]) {
 8001456:	b084      	sub	sp, #16
    if (reg_addr == 0xffff)
 8001458:	d027      	beq.n	80014aa <wrSensorRegs16_8+0x62>
 800145a:	4604      	mov	r4, r0
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800145c:	260a      	movs	r6, #10
 800145e:	4d14      	ldr	r5, [pc, #80]	; (80014b0 <wrSensorRegs16_8+0x68>)
  tx_buffer[0] = regID >> 8;
 8001460:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001464:	aa03      	add	r2, sp, #12
 8001466:	2303      	movs	r3, #3
 8001468:	2178      	movs	r1, #120	; 0x78
 800146a:	4628      	mov	r0, r5
 800146c:	9600      	str	r6, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 800146e:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 8001472:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001476:	f004 ff27 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800147a:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 800147c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 8001480:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001482:	b963      	cbnz	r3, 800149e <wrSensorRegs16_8+0x56>
  HAL_Delay(1);
 8001484:	f003 f808 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 8001488:	88a3      	ldrh	r3, [r4, #4]
    if (reg_addr == 0xffff)
 800148a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 800148e:	f894 e006 	ldrb.w	lr, [r4, #6]
    if (reg_addr == 0xffff)
 8001492:	3404      	adds	r4, #4
 8001494:	4293      	cmp	r3, r2
 8001496:	d1e3      	bne.n	8001460 <wrSensorRegs16_8+0x18>
  return 1;
 8001498:	2001      	movs	r0, #1
}
 800149a:	b004      	add	sp, #16
 800149c:	bd70      	pop	{r4, r5, r6, pc}
    reg_addr = next->reg;
 800149e:	88a3      	ldrh	r3, [r4, #4]
    if (reg_addr == 0xffff)
 80014a0:	3404      	adds	r4, #4
    reg_val = next->val;
 80014a2:	f894 e002 	ldrb.w	lr, [r4, #2]
    if (reg_addr == 0xffff)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d1da      	bne.n	8001460 <wrSensorRegs16_8+0x18>
    return 0;
 80014aa:	2000      	movs	r0, #0
}
 80014ac:	b004      	add	sp, #16
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	20019a30 	.word	0x20019a30

080014b4 <initCam>:
	switch(setting)
 80014b4:	2801      	cmp	r0, #1
{
 80014b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b8:	4605      	mov	r5, r0
 80014ba:	b085      	sub	sp, #20
	switch(setting)
 80014bc:	d006      	beq.n	80014cc <initCam+0x18>
 80014be:	2802      	cmp	r0, #2
 80014c0:	f000 8188 	beq.w	80017d4 <initCam+0x320>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d069      	beq.n	800159c <initCam+0xe8>
}
 80014c8:	b005      	add	sp, #20
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80014cc:	230a      	movs	r3, #10
  tx_buffer[0] = regID >> 8;
 80014ce:	f44f 6103 	mov.w	r1, #2096	; 0x830
  tx_buffer[2] = (uint8_t)regDat;
 80014d2:	2280      	movs	r2, #128	; 0x80
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80014d4:	ac03      	add	r4, sp, #12
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2303      	movs	r3, #3
  tx_buffer[0] = regID >> 8;
 80014da:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80014de:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80014e0:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80014e4:	4622      	mov	r2, r4
 80014e6:	48b5      	ldr	r0, [pc, #724]	; (80017bc <initCam+0x308>)
 80014e8:	f004 feee 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	f000 829c 	beq.w	8001a2a <initCam+0x576>
    if (reg_addr == 0xffff)
 80014f2:	4db3      	ldr	r5, [pc, #716]	; (80017c0 <initCam+0x30c>)
    reg_val = next->val;
 80014f4:	f04f 0e93 	mov.w	lr, #147	; 0x93
    reg_addr = next->reg;
 80014f8:	f243 1303 	movw	r3, #12547	; 0x3103
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80014fc:	270a      	movs	r7, #10
 80014fe:	4eaf      	ldr	r6, [pc, #700]	; (80017bc <initCam+0x308>)
  tx_buffer[0] = regID >> 8;
 8001500:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001504:	4622      	mov	r2, r4
 8001506:	2303      	movs	r3, #3
 8001508:	2178      	movs	r1, #120	; 0x78
 800150a:	4630      	mov	r0, r6
 800150c:	9700      	str	r7, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 800150e:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 8001512:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001516:	f004 fed7 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800151a:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 800151c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 8001520:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001522:	bba3      	cbnz	r3, 800158e <initCam+0xda>
  HAL_Delay(1);
 8001524:	f002 ffb8 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 8001528:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 800152a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 800152e:	f895 e006 	ldrb.w	lr, [r5, #6]
    if (reg_addr == 0xffff)
 8001532:	3504      	adds	r5, #4
 8001534:	4293      	cmp	r3, r2
 8001536:	d1e3      	bne.n	8001500 <initCam+0x4c>
 8001538:	4da2      	ldr	r5, [pc, #648]	; (80017c4 <initCam+0x310>)
    reg_val = next->val;
 800153a:	f04f 0e02 	mov.w	lr, #2
    reg_addr = next->reg;
 800153e:	f643 0308 	movw	r3, #14344	; 0x3808
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001542:	270a      	movs	r7, #10
 8001544:	4e9d      	ldr	r6, [pc, #628]	; (80017bc <initCam+0x308>)
  tx_buffer[0] = regID >> 8;
 8001546:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800154a:	4622      	mov	r2, r4
 800154c:	2303      	movs	r3, #3
 800154e:	2178      	movs	r1, #120	; 0x78
 8001550:	4630      	mov	r0, r6
 8001552:	9700      	str	r7, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 8001554:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 8001558:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800155c:	f004 feb4 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001560:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 8001562:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 8001566:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 8262 	bne.w	8001a32 <initCam+0x57e>
  HAL_Delay(1);
 800156e:	f002 ff93 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 8001572:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 8001574:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 8001578:	f895 e006 	ldrb.w	lr, [r5, #6]
    if (reg_addr == 0xffff)
 800157c:	3504      	adds	r5, #4
 800157e:	4293      	cmp	r3, r2
 8001580:	d1e1      	bne.n	8001546 <initCam+0x92>
		HAL_Delay(100);
 8001582:	2064      	movs	r0, #100	; 0x64
}
 8001584:	b005      	add	sp, #20
 8001586:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		HAL_Delay(100);
 800158a:	f002 bf85 	b.w	8004498 <HAL_Delay>
    reg_addr = next->reg;
 800158e:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 8001590:	3504      	adds	r5, #4
    reg_val = next->val;
 8001592:	f895 e002 	ldrb.w	lr, [r5, #2]
    if (reg_addr == 0xffff)
 8001596:	4293      	cmp	r3, r2
 8001598:	d1b2      	bne.n	8001500 <initCam+0x4c>
 800159a:	e7cd      	b.n	8001538 <initCam+0x84>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800159c:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 800159e:	f44f 6103 	mov.w	r1, #2096	; 0x830
  tx_buffer[2] = (uint8_t)regDat;
 80015a2:	2280      	movs	r2, #128	; 0x80
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015a4:	ac03      	add	r4, sp, #12
 80015a6:	9000      	str	r0, [sp, #0]
 80015a8:	2303      	movs	r3, #3
  tx_buffer[0] = regID >> 8;
 80015aa:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015ae:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80015b0:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015b4:	4622      	mov	r2, r4
 80015b6:	4881      	ldr	r0, [pc, #516]	; (80017bc <initCam+0x308>)
 80015b8:	f004 fe86 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80015bc:	2800      	cmp	r0, #0
 80015be:	f000 8230 	beq.w	8001a22 <initCam+0x56e>
    if (reg_addr == 0xffff)
 80015c2:	4d81      	ldr	r5, [pc, #516]	; (80017c8 <initCam+0x314>)
    reg_val = next->val;
 80015c4:	f04f 0e93 	mov.w	lr, #147	; 0x93
    reg_addr = next->reg;
 80015c8:	f243 1303 	movw	r3, #12547	; 0x3103
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015cc:	270a      	movs	r7, #10
 80015ce:	4e7b      	ldr	r6, [pc, #492]	; (80017bc <initCam+0x308>)
  tx_buffer[0] = regID >> 8;
 80015d0:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015d4:	4622      	mov	r2, r4
 80015d6:	2303      	movs	r3, #3
 80015d8:	2178      	movs	r1, #120	; 0x78
 80015da:	4630      	mov	r0, r6
 80015dc:	9700      	str	r7, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 80015de:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 80015e2:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015e6:	f004 fe6f 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80015ea:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 80015ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 80015f0:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80d2 	bne.w	800179c <initCam+0x2e8>
  HAL_Delay(1);
 80015f8:	f002 ff4e 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 80015fc:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 8001602:	f895 e006 	ldrb.w	lr, [r5, #6]
    if (reg_addr == 0xffff)
 8001606:	3504      	adds	r5, #4
 8001608:	4293      	cmp	r3, r2
 800160a:	d1e1      	bne.n	80015d0 <initCam+0x11c>
		HAL_Delay(100);
 800160c:	2064      	movs	r0, #100	; 0x64
 800160e:	4d6f      	ldr	r5, [pc, #444]	; (80017cc <initCam+0x318>)
 8001610:	f002 ff42 	bl	8004498 <HAL_Delay>
		HAL_Delay(100);
 8001614:	2064      	movs	r0, #100	; 0x64
 8001616:	f002 ff3f 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800161a:	270a      	movs	r7, #10
    reg_val = next->val;
 800161c:	f04f 0e07 	mov.w	lr, #7
    reg_addr = next->reg;
 8001620:	f243 5303 	movw	r3, #13571	; 0x3503
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001624:	4e65      	ldr	r6, [pc, #404]	; (80017bc <initCam+0x308>)
  tx_buffer[0] = regID >> 8;
 8001626:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800162a:	4622      	mov	r2, r4
 800162c:	2303      	movs	r3, #3
 800162e:	2178      	movs	r1, #120	; 0x78
 8001630:	4630      	mov	r0, r6
 8001632:	9700      	str	r7, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 8001634:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 8001638:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800163c:	f004 fe44 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001640:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 8001642:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 80af 	bne.w	80017ac <initCam+0x2f8>
  HAL_Delay(1);
 800164e:	f002 ff23 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 8001652:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 8001654:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 8001658:	f895 e006 	ldrb.w	lr, [r5, #6]
    if (reg_addr == 0xffff)
 800165c:	3504      	adds	r5, #4
 800165e:	4293      	cmp	r3, r2
 8001660:	d1e1      	bne.n	8001626 <initCam+0x172>
 8001662:	4d5b      	ldr	r5, [pc, #364]	; (80017d0 <initCam+0x31c>)
    reg_val = next->val;
 8001664:	f04f 0e01 	mov.w	lr, #1
    reg_addr = next->reg;
 8001668:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800166c:	270a      	movs	r7, #10
 800166e:	4e53      	ldr	r6, [pc, #332]	; (80017bc <initCam+0x308>)
  tx_buffer[0] = regID >> 8;
 8001670:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001674:	4622      	mov	r2, r4
 8001676:	2303      	movs	r3, #3
 8001678:	2178      	movs	r1, #120	; 0x78
 800167a:	4630      	mov	r0, r6
 800167c:	9700      	str	r7, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 800167e:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 8001682:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001686:	f004 fe1f 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800168a:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 81d5 	bne.w	8001a42 <initCam+0x58e>
  HAL_Delay(1);
 8001698:	f002 fefe 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 800169c:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 80016a2:	f895 e006 	ldrb.w	lr, [r5, #6]
    if (reg_addr == 0xffff)
 80016a6:	3504      	adds	r5, #4
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d1e1      	bne.n	8001670 <initCam+0x1bc>
		HAL_Delay(100);
 80016ac:	2064      	movs	r0, #100	; 0x64
 80016ae:	f002 fef3 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016b2:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 80016b4:	f641 0138 	movw	r1, #6200	; 0x1838
  tx_buffer[2] = (uint8_t)regDat;
 80016b8:	22a8      	movs	r2, #168	; 0xa8
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016ba:	9000      	str	r0, [sp, #0]
 80016bc:	2303      	movs	r3, #3
  tx_buffer[0] = regID >> 8;
 80016be:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016c2:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80016c4:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016c8:	4622      	mov	r2, r4
 80016ca:	483c      	ldr	r0, [pc, #240]	; (80017bc <initCam+0x308>)
 80016cc:	f004 fdfc 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80016d0:	b910      	cbnz	r0, 80016d8 <initCam+0x224>
  HAL_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f002 fee0 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016d8:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 80016da:	f242 1136 	movw	r1, #8502	; 0x2136
  tx_buffer[2] = (uint8_t)regDat;
 80016de:	2210      	movs	r2, #16
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016e0:	2303      	movs	r3, #3
 80016e2:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 80016e4:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016e8:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80016ea:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016ee:	4622      	mov	r2, r4
 80016f0:	4832      	ldr	r0, [pc, #200]	; (80017bc <initCam+0x308>)
 80016f2:	f004 fde9 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80016f6:	b910      	cbnz	r0, 80016fe <initCam+0x24a>
  HAL_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f002 fecd 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80016fe:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 8001700:	f44f 719c 	mov.w	r1, #312	; 0x138
  tx_buffer[2] = (uint8_t)regDat;
 8001704:	22b0      	movs	r2, #176	; 0xb0
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001706:	2303      	movs	r3, #3
 8001708:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 800170a:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800170e:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 8001710:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001714:	4622      	mov	r2, r4
 8001716:	4829      	ldr	r0, [pc, #164]	; (80017bc <initCam+0x308>)
 8001718:	f004 fdd6 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800171c:	b910      	cbnz	r0, 8001724 <initCam+0x270>
  HAL_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f002 feba 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001724:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 8001726:	f240 7144 	movw	r1, #1860	; 0x744
  tx_buffer[2] = (uint8_t)regDat;
 800172a:	2208      	movs	r2, #8
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800172c:	2303      	movs	r3, #3
 800172e:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 8001730:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001734:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 8001736:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800173a:	4622      	mov	r2, r4
 800173c:	481f      	ldr	r0, [pc, #124]	; (80017bc <initCam+0x308>)
 800173e:	f004 fdc3 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001742:	b910      	cbnz	r0, 800174a <initCam+0x296>
  HAL_Delay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f002 fea7 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800174a:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 800174c:	f648 0158 	movw	r1, #34904	; 0x8858
  tx_buffer[2] = (uint8_t)regDat;
 8001750:	2200      	movs	r2, #0
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001752:	2303      	movs	r3, #3
 8001754:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 8001756:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800175a:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 800175c:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001760:	4622      	mov	r2, r4
 8001762:	4816      	ldr	r0, [pc, #88]	; (80017bc <initCam+0x308>)
 8001764:	f004 fdb0 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001768:	b910      	cbnz	r0, 8001770 <initCam+0x2bc>
  HAL_Delay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f002 fe94 	bl	8004498 <HAL_Delay>
  tx_buffer[0] = regID >> 8;
 8001770:	2050      	movs	r0, #80	; 0x50
  tx_buffer[2] = (uint8_t)regDat;
 8001772:	21ff      	movs	r1, #255	; 0xff
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001774:	250a      	movs	r5, #10
 8001776:	2303      	movs	r3, #3
  tx_buffer[0] = regID >> 8;
 8001778:	f8ad 000c 	strh.w	r0, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800177c:	4622      	mov	r2, r4
  tx_buffer[2] = (uint8_t)regDat;
 800177e:	f88d 100e 	strb.w	r1, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001782:	2178      	movs	r1, #120	; 0x78
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <initCam+0x308>)
 8001786:	9500      	str	r5, [sp, #0]
 8001788:	f004 fd9e 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800178c:	2800      	cmp	r0, #0
 800178e:	f47f ae9b 	bne.w	80014c8 <initCam+0x14>
  HAL_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f002 fe80 	bl	8004498 <HAL_Delay>
}
 8001798:	b005      	add	sp, #20
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    reg_addr = next->reg;
 800179c:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 800179e:	3504      	adds	r5, #4
    reg_val = next->val;
 80017a0:	f895 e002 	ldrb.w	lr, [r5, #2]
    if (reg_addr == 0xffff)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	f47f af13 	bne.w	80015d0 <initCam+0x11c>
 80017aa:	e72f      	b.n	800160c <initCam+0x158>
    reg_addr = next->reg;
 80017ac:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 80017ae:	3504      	adds	r5, #4
    reg_val = next->val;
 80017b0:	f895 e002 	ldrb.w	lr, [r5, #2]
    if (reg_addr == 0xffff)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	f47f af36 	bne.w	8001626 <initCam+0x172>
 80017ba:	e752      	b.n	8001662 <initCam+0x1ae>
 80017bc:	20019a30 	.word	0x20019a30
 80017c0:	08019260 	.word	0x08019260
 80017c4:	080196a0 	.word	0x080196a0
 80017c8:	080197d4 	.word	0x080197d4
 80017cc:	080196b4 	.word	0x080196b4
 80017d0:	0801a110 	.word	0x0801a110
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80017d4:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 80017d6:	f44f 6103 	mov.w	r1, #2096	; 0x830
  tx_buffer[2] = (uint8_t)regDat;
 80017da:	2280      	movs	r2, #128	; 0x80
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80017dc:	ac03      	add	r4, sp, #12
 80017de:	9000      	str	r0, [sp, #0]
 80017e0:	2303      	movs	r3, #3
  tx_buffer[0] = regID >> 8;
 80017e2:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80017e6:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80017e8:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80017ec:	4622      	mov	r2, r4
 80017ee:	4899      	ldr	r0, [pc, #612]	; (8001a54 <initCam+0x5a0>)
 80017f0:	f004 fd6a 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	f000 8110 	beq.w	8001a1a <initCam+0x566>
    if (reg_addr == 0xffff)
 80017fa:	4d97      	ldr	r5, [pc, #604]	; (8001a58 <initCam+0x5a4>)
    reg_val = next->val;
 80017fc:	f04f 0e93 	mov.w	lr, #147	; 0x93
    reg_addr = next->reg;
 8001800:	f243 1303 	movw	r3, #12547	; 0x3103
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001804:	270a      	movs	r7, #10
 8001806:	4e93      	ldr	r6, [pc, #588]	; (8001a54 <initCam+0x5a0>)
  tx_buffer[0] = regID >> 8;
 8001808:	fa93 fc93 	rev16.w	ip, r3
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800180c:	4622      	mov	r2, r4
 800180e:	2303      	movs	r3, #3
 8001810:	2178      	movs	r1, #120	; 0x78
 8001812:	4630      	mov	r0, r6
 8001814:	9700      	str	r7, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 8001816:	f88d e00e 	strb.w	lr, [sp, #14]
  tx_buffer[0] = regID >> 8;
 800181a:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800181e:	f004 fd53 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001822:	4603      	mov	r3, r0
    if (reg_addr == 0xffff)
 8001824:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HAL_Delay(1);
 8001828:	2001      	movs	r0, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 80ac 	bne.w	8001988 <initCam+0x4d4>
  HAL_Delay(1);
 8001830:	f002 fe32 	bl	8004498 <HAL_Delay>
    reg_addr = next->reg;
 8001834:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
    reg_val = next->val;
 800183a:	f895 e006 	ldrb.w	lr, [r5, #6]
    if (reg_addr == 0xffff)
 800183e:	3504      	adds	r5, #4
 8001840:	4293      	cmp	r3, r2
 8001842:	d1e1      	bne.n	8001808 <initCam+0x354>
		HAL_Delay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f002 fe27 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800184a:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 800184c:	f244 0147 	movw	r1, #16455	; 0x4047
  tx_buffer[2] = (uint8_t)regDat;
 8001850:	2221      	movs	r2, #33	; 0x21
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001852:	9000      	str	r0, [sp, #0]
 8001854:	2303      	movs	r3, #3
  tx_buffer[0] = regID >> 8;
 8001856:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800185a:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 800185c:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001860:	4622      	mov	r2, r4
 8001862:	487c      	ldr	r0, [pc, #496]	; (8001a54 <initCam+0x5a0>)
 8001864:	f004 fd30 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001868:	2800      	cmp	r0, #0
 800186a:	f000 80d2 	beq.w	8001a12 <initCam+0x55e>
 800186e:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 8001870:	f641 6150 	movw	r1, #7760	; 0x1e50
  tx_buffer[2] = (uint8_t)regDat;
 8001874:	222a      	movs	r2, #42	; 0x2a
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001876:	2303      	movs	r3, #3
 8001878:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 800187a:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800187e:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 8001880:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001884:	4622      	mov	r2, r4
 8001886:	4873      	ldr	r0, [pc, #460]	; (8001a54 <initCam+0x5a0>)
 8001888:	f004 fd1e 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800188c:	2800      	cmp	r0, #0
 800188e:	f000 80bc 	beq.w	8001a0a <initCam+0x556>
 8001892:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 8001894:	f44f 7114 	mov.w	r1, #592	; 0x250
  tx_buffer[2] = (uint8_t)regDat;
 8001898:	22f8      	movs	r2, #248	; 0xf8
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800189a:	2303      	movs	r3, #3
 800189c:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 800189e:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018a2:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80018a4:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018a8:	4622      	mov	r2, r4
 80018aa:	486a      	ldr	r0, [pc, #424]	; (8001a54 <initCam+0x5a0>)
 80018ac:	f004 fd0c 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f000 80a6 	beq.w	8001a02 <initCam+0x54e>
 80018b6:	210a      	movs	r1, #10
  tx_buffer[0] = regID >> 8;
 80018b8:	f641 7250 	movw	r2, #8016	; 0x1f50
  tx_buffer[2] = (uint8_t)regDat;
 80018bc:	2501      	movs	r5, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018be:	2303      	movs	r3, #3
 80018c0:	9100      	str	r1, [sp, #0]
 80018c2:	2178      	movs	r1, #120	; 0x78
  tx_buffer[0] = regID >> 8;
 80018c4:	f8ad 200c 	strh.w	r2, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018c8:	4622      	mov	r2, r4
 80018ca:	4862      	ldr	r0, [pc, #392]	; (8001a54 <initCam+0x5a0>)
  tx_buffer[2] = (uint8_t)regDat;
 80018cc:	f88d 500e 	strb.w	r5, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018d0:	f004 fcfa 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	f000 8090 	beq.w	80019fa <initCam+0x546>
 80018da:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 80018dc:	2143      	movs	r1, #67	; 0x43
  tx_buffer[2] = (uint8_t)regDat;
 80018de:	2261      	movs	r2, #97	; 0x61
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018e0:	2303      	movs	r3, #3
 80018e2:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 80018e4:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018e8:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 80018ea:	f88d 200e 	strb.w	r2, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80018ee:	4622      	mov	r2, r4
 80018f0:	4858      	ldr	r0, [pc, #352]	; (8001a54 <initCam+0x5a0>)
 80018f2:	f004 fce9 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d07b      	beq.n	80019f2 <initCam+0x53e>
  tx_buffer[0] = regID >> 8;
 80018fa:	f641 0138 	movw	r1, #6200	; 0x1838
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 80018fe:	250a      	movs	r5, #10
 8001900:	2302      	movs	r3, #2
 8001902:	4622      	mov	r2, r4
  tx_buffer[0] = regID >> 8;
 8001904:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 8001908:	2178      	movs	r1, #120	; 0x78
 800190a:	4852      	ldr	r0, [pc, #328]	; (8001a54 <initCam+0x5a0>)
 800190c:	9500      	str	r5, [sp, #0]
 800190e:	f004 fcdb 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001912:	2800      	cmp	r0, #0
 8001914:	d05c      	beq.n	80019d0 <initCam+0x51c>
		wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff);
 8001916:	f89d 000b 	ldrb.w	r0, [sp, #11]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800191a:	210a      	movs	r1, #10
  tx_buffer[0] = regID >> 8;
 800191c:	f641 0238 	movw	r2, #6200	; 0x1838
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001920:	2303      	movs	r3, #3
		wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff);
 8001922:	f040 0060 	orr.w	r0, r0, #96	; 0x60
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001926:	9100      	str	r1, [sp, #0]
  tx_buffer[0] = regID >> 8;
 8001928:	f8ad 200c 	strh.w	r2, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800192c:	2178      	movs	r1, #120	; 0x78
  tx_buffer[2] = (uint8_t)regDat;
 800192e:	f88d 000e 	strb.w	r0, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001932:	4622      	mov	r2, r4
 8001934:	4847      	ldr	r0, [pc, #284]	; (8001a54 <initCam+0x5a0>)
 8001936:	f004 fcc7 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800193a:	2800      	cmp	r0, #0
 800193c:	d044      	beq.n	80019c8 <initCam+0x514>
  tx_buffer[0] = regID >> 8;
 800193e:	f242 1136 	movw	r1, #8502	; 0x2136
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 8001942:	250a      	movs	r5, #10
 8001944:	2302      	movs	r3, #2
 8001946:	4622      	mov	r2, r4
  tx_buffer[0] = regID >> 8;
 8001948:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 800194c:	2178      	movs	r1, #120	; 0x78
 800194e:	4841      	ldr	r0, [pc, #260]	; (8001a54 <initCam+0x5a0>)
 8001950:	9500      	str	r5, [sp, #0]
 8001952:	f004 fcb9 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8001956:	b330      	cbz	r0, 80019a6 <initCam+0x4f2>
		wrSensorReg16_8(0x3621, reg_val & 0xdf);
 8001958:	f89d 500b 	ldrb.w	r5, [sp, #11]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800195c:	200a      	movs	r0, #10
  tx_buffer[0] = regID >> 8;
 800195e:	f242 1136 	movw	r1, #8502	; 0x2136
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001962:	2303      	movs	r3, #3
 8001964:	f005 05df 	and.w	r5, r5, #223	; 0xdf
 8001968:	9000      	str	r0, [sp, #0]
  tx_buffer[0] = regID >> 8;
 800196a:	f8ad 100c 	strh.w	r1, [sp, #12]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 800196e:	4622      	mov	r2, r4
 8001970:	2178      	movs	r1, #120	; 0x78
 8001972:	4838      	ldr	r0, [pc, #224]	; (8001a54 <initCam+0x5a0>)
  tx_buffer[2] = (uint8_t)regDat;
 8001974:	f88d 500e 	strb.w	r5, [sp, #14]
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 8001978:	f004 fca6 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800197c:	b160      	cbz	r0, 8001998 <initCam+0x4e4>
		HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f002 fd8a 	bl	8004498 <HAL_Delay>
}
 8001984:	b005      	add	sp, #20
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    reg_addr = next->reg;
 8001988:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 800198a:	3504      	adds	r5, #4
    reg_val = next->val;
 800198c:	f895 e002 	ldrb.w	lr, [r5, #2]
    if (reg_addr == 0xffff)
 8001990:	4293      	cmp	r3, r2
 8001992:	f47f af39 	bne.w	8001808 <initCam+0x354>
 8001996:	e755      	b.n	8001844 <initCam+0x390>
  HAL_Delay(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f002 fd7d 	bl	8004498 <HAL_Delay>
		HAL_Delay(100);
 800199e:	2064      	movs	r0, #100	; 0x64
 80019a0:	f002 fd7a 	bl	8004498 <HAL_Delay>
		break;
 80019a4:	e7ee      	b.n	8001984 <initCam+0x4d0>
  HAL_Delay(1);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f002 fd76 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&hi2c1, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 80019ac:	2301      	movs	r3, #1
 80019ae:	f10d 020b 	add.w	r2, sp, #11
 80019b2:	2179      	movs	r1, #121	; 0x79
 80019b4:	4827      	ldr	r0, [pc, #156]	; (8001a54 <initCam+0x5a0>)
 80019b6:	9500      	str	r5, [sp, #0]
 80019b8:	f004 fe18 	bl	80065ec <HAL_I2C_Master_Receive>
 80019bc:	2800      	cmp	r0, #0
 80019be:	d1cb      	bne.n	8001958 <initCam+0x4a4>
  HAL_Delay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f002 fd69 	bl	8004498 <HAL_Delay>
  return 1;
 80019c6:	e7c7      	b.n	8001958 <initCam+0x4a4>
  HAL_Delay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f002 fd65 	bl	8004498 <HAL_Delay>
  return 1;
 80019ce:	e7b6      	b.n	800193e <initCam+0x48a>
  HAL_Delay(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f002 fd61 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&hi2c1, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 80019d6:	2301      	movs	r3, #1
 80019d8:	f10d 020b 	add.w	r2, sp, #11
 80019dc:	2179      	movs	r1, #121	; 0x79
 80019de:	481d      	ldr	r0, [pc, #116]	; (8001a54 <initCam+0x5a0>)
 80019e0:	9500      	str	r5, [sp, #0]
 80019e2:	f004 fe03 	bl	80065ec <HAL_I2C_Master_Receive>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d195      	bne.n	8001916 <initCam+0x462>
  HAL_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f002 fd54 	bl	8004498 <HAL_Delay>
  return 1;
 80019f0:	e791      	b.n	8001916 <initCam+0x462>
  HAL_Delay(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f002 fd50 	bl	8004498 <HAL_Delay>
  return 1;
 80019f8:	e77f      	b.n	80018fa <initCam+0x446>
  HAL_Delay(1);
 80019fa:	4628      	mov	r0, r5
 80019fc:	f002 fd4c 	bl	8004498 <HAL_Delay>
  return 1;
 8001a00:	e76b      	b.n	80018da <initCam+0x426>
  HAL_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f002 fd48 	bl	8004498 <HAL_Delay>
  return 1;
 8001a08:	e755      	b.n	80018b6 <initCam+0x402>
  HAL_Delay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f002 fd44 	bl	8004498 <HAL_Delay>
  return 1;
 8001a10:	e73f      	b.n	8001892 <initCam+0x3de>
  HAL_Delay(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f002 fd40 	bl	8004498 <HAL_Delay>
  return 1;
 8001a18:	e729      	b.n	800186e <initCam+0x3ba>
  HAL_Delay(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f002 fd3c 	bl	8004498 <HAL_Delay>
  return 1;
 8001a20:	e6eb      	b.n	80017fa <initCam+0x346>
  HAL_Delay(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f002 fd38 	bl	8004498 <HAL_Delay>
  return 1;
 8001a28:	e5cb      	b.n	80015c2 <initCam+0x10e>
  HAL_Delay(1);
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f002 fd34 	bl	8004498 <HAL_Delay>
  return 1;
 8001a30:	e55f      	b.n	80014f2 <initCam+0x3e>
    reg_addr = next->reg;
 8001a32:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 8001a34:	3504      	adds	r5, #4
    reg_val = next->val;
 8001a36:	f895 e002 	ldrb.w	lr, [r5, #2]
    if (reg_addr == 0xffff)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f47f ad83 	bne.w	8001546 <initCam+0x92>
 8001a40:	e59f      	b.n	8001582 <initCam+0xce>
    reg_addr = next->reg;
 8001a42:	88ab      	ldrh	r3, [r5, #4]
    if (reg_addr == 0xffff)
 8001a44:	3504      	adds	r5, #4
    reg_val = next->val;
 8001a46:	f895 e002 	ldrb.w	lr, [r5, #2]
    if (reg_addr == 0xffff)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	f47f ae10 	bne.w	8001670 <initCam+0x1bc>
 8001a50:	e62c      	b.n	80016ac <initCam+0x1f8>
 8001a52:	bf00      	nop
 8001a54:	20019a30 	.word	0x20019a30
 8001a58:	080197d4 	.word	0x080197d4

08001a5c <aiInit>:
}

/*
 * Bootstrap
 */
int aiInit(void) {
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	b082      	sub	sp, #8
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <aiInit+0x4c>)
  err = ai_mnv1_create_and_init(&network, acts, NULL);
 8001a62:	2200      	movs	r2, #0
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <aiInit+0x50>)
 8001a66:	a901      	add	r1, sp, #4
  const ai_handle acts[] = { activations };
 8001a68:	9301      	str	r3, [sp, #4]
  err = ai_mnv1_create_and_init(&network, acts, NULL);
 8001a6a:	f00b fef9 	bl	800d860 <ai_mnv1_create_and_init>
//  ai_mnv1_create_and_init(&network, acts, NULL);
  if (err.type != AI_ERROR_NONE)
 8001a6e:	b2c0      	uxtb	r0, r0
 8001a70:	b988      	cbnz	r0, 8001a96 <aiInit+0x3a>
  {
	  HAL_UART_Transmit(&huart1, "AI ERROR!\n", 11, 500);
  };

  /* Reteive pointers to the model's input/output tensors */
  ai_input = ai_mnv1_inputs_get(network, NULL);
 8001a72:	4c0e      	ldr	r4, [pc, #56]	; (8001aac <aiInit+0x50>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	6820      	ldr	r0, [r4, #0]
 8001a78:	f00b ff5e 	bl	800d938 <ai_mnv1_inputs_get>
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <aiInit+0x54>)
 8001a7e:	4602      	mov	r2, r0
  ai_output = ai_mnv1_outputs_get(network, NULL);
 8001a80:	2100      	movs	r1, #0
 8001a82:	6820      	ldr	r0, [r4, #0]
  ai_input = ai_mnv1_inputs_get(network, NULL);
 8001a84:	601a      	str	r2, [r3, #0]
  ai_output = ai_mnv1_outputs_get(network, NULL);
 8001a86:	f00b ff65 	bl	800d954 <ai_mnv1_outputs_get>
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <aiInit+0x58>)
 8001a8c:	4602      	mov	r2, r0

  return 0;
}
 8001a8e:	2000      	movs	r0, #0
  ai_output = ai_mnv1_outputs_get(network, NULL);
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	b002      	add	sp, #8
 8001a94:	bd10      	pop	{r4, pc}
	  HAL_UART_Transmit(&huart1, "AI ERROR!\n", 11, 500);
 8001a96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a9a:	220b      	movs	r2, #11
 8001a9c:	4906      	ldr	r1, [pc, #24]	; (8001ab8 <aiInit+0x5c>)
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <aiInit+0x60>)
 8001aa0:	f009 f978 	bl	800ad94 <HAL_UART_Transmit>
 8001aa4:	e7e5      	b.n	8001a72 <aiInit+0x16>
 8001aa6:	bf00      	nop
 8001aa8:	200052a0 	.word	0x200052a0
 8001aac:	200260e0 	.word	0x200260e0
 8001ab0:	20019578 	.word	0x20019578
 8001ab4:	2001957c 	.word	0x2001957c
 8001ab8:	08019190 	.word	0x08019190
 8001abc:	20019fc0 	.word	0x20019fc0

08001ac0 <process_output>:
}

void process_output()
{
	uint8_t max = 0;
	float max_value = out_data[0];
 8001ac0:	491e      	ldr	r1, [pc, #120]	; (8001b3c <process_output+0x7c>)
	uint8_t max = 0;
 8001ac2:	f04f 0c00 	mov.w	ip, #0
	float max_value = out_data[0];
 8001ac6:	460b      	mov	r3, r1
{
 8001ac8:	b500      	push	{lr}
	float max_value = out_data[0];
 8001aca:	f811 2b19 	ldrb.w	r2, [r1], #25
{
 8001ace:	b083      	sub	sp, #12
 8001ad0:	f1c3 0001 	rsb	r0, r3, #1
	float max_value = out_data[0];
 8001ad4:	ee06 2a90 	vmov	s13, r2
 8001ad8:	eef8 6a66 	vcvt.f32.u32	s13, s13
	for(uint8_t i=1;i<26;i++)
	{
		if(out_data[i] > max_value)
		{
			max = i;
 8001adc:	18c2      	adds	r2, r0, r3
		if(out_data[i] > max_value)
 8001ade:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8001ae2:	ee07 ea90 	vmov	s15, lr
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aec:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d502      	bpl.n	8001afc <process_output+0x3c>
			max_value = out_data[i];
 8001af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001afa:	4694      	mov	ip, r2
	for(uint8_t i=1;i<26;i++)
 8001afc:	4299      	cmp	r1, r3
 8001afe:	d1ed      	bne.n	8001adc <process_output+0x1c>
		}
	}
	char out_string[2];
	sprintf(out_string, "%c", classes[max]);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <process_output+0x80>)
 8001b02:	a801      	add	r0, sp, #4
 8001b04:	490f      	ldr	r1, [pc, #60]	; (8001b44 <process_output+0x84>)
 8001b06:	f813 200c 	ldrb.w	r2, [r3, ip]
 8001b0a:	f015 fa6d 	bl	8016fe8 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001b0e:	480e      	ldr	r0, [pc, #56]	; (8001b48 <process_output+0x88>)
 8001b10:	f001 f908 	bl	8002d24 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(368, 126, 112, 50);
 8001b14:	2332      	movs	r3, #50	; 0x32
 8001b16:	2270      	movs	r2, #112	; 0x70
 8001b18:	217e      	movs	r1, #126	; 0x7e
 8001b1a:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001b1e:	f001 fa69 	bl	8002ff4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b22:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b26:	f001 f8fd 	bl	8002d24 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, 136, out_string, RIGHT_MODE);
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	aa01      	add	r2, sp, #4
 8001b2e:	2188      	movs	r1, #136	; 0x88
 8001b30:	2000      	movs	r0, #0
 8001b32:	f001 f9e1 	bl	8002ef8 <BSP_LCD_DisplayStringAt>
}
 8001b36:	b003      	add	sp, #12
 8001b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b3c:	20026100 	.word	0x20026100
 8001b40:	0801a0f4 	.word	0x0801a0f4
 8001b44:	080191b0 	.word	0x080191b0
 8001b48:	ff0000ff 	.word	0xff0000ff

08001b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b4c:	b530      	push	{r4, r5, lr}
 8001b4e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b50:	2230      	movs	r2, #48	; 0x30
 8001b52:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b54:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	a808      	add	r0, sp, #32
 8001b58:	f015 fac3 	bl	80170e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001b62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001b66:	9307      	str	r3, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001b68:	f005 f8c2 	bl	8006cf0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <SystemClock_Config+0xac>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6e:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b74:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b78:	6411      	str	r1, [r2, #64]	; 0x40
 8001b7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b7c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b80:	9201      	str	r2, [sp, #4]
 8001b82:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2209      	movs	r2, #9
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8e:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b96:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b98:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9e:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ba0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ba4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001baa:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001bac:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001bb0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001bb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001bb8:	2309      	movs	r3, #9
 8001bba:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bbc:	f005 f93c 	bl	8006e38 <HAL_RCC_OscConfig>
 8001bc0:	b108      	cbz	r0, 8001bc6 <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <SystemClock_Config+0x78>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bc6:	f005 f89b 	bl	8006d00 <HAL_PWREx_EnableOverDrive>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b108      	cbz	r0, 8001bd2 <SystemClock_Config+0x86>
 8001bce:	b672      	cpsid	i
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd2:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd4:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bd8:	a803      	add	r0, sp, #12
 8001bda:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001be4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be8:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bea:	f005 fb13 	bl	8007214 <HAL_RCC_ClockConfig>
 8001bee:	b108      	cbz	r0, 8001bf4 <SystemClock_Config+0xa8>
 8001bf0:	b672      	cpsid	i
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <SystemClock_Config+0xa6>
}
 8001bf4:	b015      	add	sp, #84	; 0x54
 8001bf6:	bd30      	pop	{r4, r5, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000

08001c00 <PeriphCommonClock_Config>:
{
 8001c00:	b510      	push	{r4, lr}
 8001c02:	b0a2      	sub	sp, #136	; 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	2100      	movs	r1, #0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001c08:	4c11      	ldr	r4, [pc, #68]	; (8001c50 <PeriphCommonClock_Config+0x50>)
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0a:	a801      	add	r0, sp, #4
 8001c0c:	f015 fa69 	bl	80170e2 <memset>
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001c10:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001c12:	f44f 70c0 	mov.w	r0, #384	; 0x180
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001c16:	2102      	movs	r1, #2
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001c18:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001c1a:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001c20:	9005      	str	r0, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001c24:	9400      	str	r4, [sp, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001c26:	9106      	str	r1, [sp, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001c28:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001c2a:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001c2c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001c48 <PeriphCommonClock_Config+0x48>
 8001c30:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c34:	f005 fc38 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 8001c38:	b108      	cbz	r0, 8001c3e <PeriphCommonClock_Config+0x3e>
 8001c3a:	b672      	cpsid	i
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <PeriphCommonClock_Config+0x3c>
}
 8001c3e:	b022      	add	sp, #136	; 0x88
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	00000001 	.word	0x00000001
 8001c4c:	00020000 	.word	0x00020000
 8001c50:	00b00008 	.word	0x00b00008

08001c54 <main>:
{
 8001c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c58:	b0ad      	sub	sp, #180	; 0xb4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c5e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001c62:	48ba      	ldr	r0, [pc, #744]	; (8001f4c <main+0x2f8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001c6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c6e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001c72:	6943      	ldr	r3, [r0, #20]
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c7e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001c82:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c86:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c8a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c8e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c92:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c96:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8001c9a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c9c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ca0:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ca2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001caa:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8001cae:	d1f8      	bne.n	8001ca2 <main+0x4e>
    } while(sets-- != 0U);
 8001cb0:	3c20      	subs	r4, #32
 8001cb2:	f114 0f20 	cmn.w	r4, #32
 8001cb6:	d1f1      	bne.n	8001c9c <main+0x48>
 8001cb8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001cbc:	6943      	ldr	r3, [r0, #20]
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6143      	str	r3, [r0, #20]
 8001cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cc8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001ccc:	f002 fbc6 	bl	800445c <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	2400      	movs	r4, #0
  SystemClock_Config();
 8001cd2:	f7ff ff3b 	bl	8001b4c <SystemClock_Config>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001cd6:	f04f 0a08 	mov.w	sl, #8
  PeriphCommonClock_Config();
 8001cda:	f7ff ff91 	bl	8001c00 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	4b9c      	ldr	r3, [pc, #624]	; (8001f50 <main+0x2fc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2120      	movs	r1, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2703      	movs	r7, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cea:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001cee:	f44f 1590 	mov.w	r5, #1179648	; 0x120000
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001cf2:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cf6:	f04f 0b10 	mov.w	fp, #16
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 8001cfe:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d04:	f040 0010 	orr.w	r0, r0, #16
 8001d08:	6318      	str	r0, [r3, #48]	; 0x30
 8001d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d0c:	f000 0010 	and.w	r0, r0, #16
 8001d10:	9006      	str	r0, [sp, #24]
 8001d12:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d16:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8001d1a:	6318      	str	r0, [r3, #48]	; 0x30
 8001d1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d1e:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8001d22:	9007      	str	r0, [sp, #28]
 8001d24:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d28:	f040 0002 	orr.w	r0, r0, #2
 8001d2c:	6318      	str	r0, [r3, #48]	; 0x30
 8001d2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d30:	f000 0002 	and.w	r0, r0, #2
 8001d34:	9008      	str	r0, [sp, #32]
 8001d36:	9808      	ldr	r0, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d3a:	f040 0008 	orr.w	r0, r0, #8
 8001d3e:	6318      	str	r0, [r3, #48]	; 0x30
 8001d40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d42:	f000 0008 	and.w	r0, r0, #8
 8001d46:	9009      	str	r0, [sp, #36]	; 0x24
 8001d48:	9809      	ldr	r0, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d4c:	f040 0004 	orr.w	r0, r0, #4
 8001d50:	6318      	str	r0, [r3, #48]	; 0x30
 8001d52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d54:	f000 0004 	and.w	r0, r0, #4
 8001d58:	900a      	str	r0, [sp, #40]	; 0x28
 8001d5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d5e:	4310      	orrs	r0, r2
 8001d60:	6318      	str	r0, [r3, #48]	; 0x30
 8001d62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d64:	4010      	ands	r0, r2
 8001d66:	900b      	str	r0, [sp, #44]	; 0x2c
 8001d68:	980b      	ldr	r0, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d6c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8001d70:	6318      	str	r0, [r3, #48]	; 0x30
 8001d72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d74:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8001d78:	900c      	str	r0, [sp, #48]	; 0x30
 8001d7a:	980c      	ldr	r0, [sp, #48]	; 0x30
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d7e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001d82:	6318      	str	r0, [r3, #48]	; 0x30
 8001d84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d86:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8001d8a:	900d      	str	r0, [sp, #52]	; 0x34
 8001d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d90:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8001d94:	6318      	str	r0, [r3, #48]	; 0x30
 8001d96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d98:	f400 6080 	and.w	r0, r0, #1024	; 0x400
 8001d9c:	900e      	str	r0, [sp, #56]	; 0x38
 8001d9e:	980e      	ldr	r0, [sp, #56]	; 0x38
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001da2:	4308      	orrs	r0, r1
 8001da4:	6318      	str	r0, [r3, #48]	; 0x30
 8001da6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001da8:	4008      	ands	r0, r1
 8001daa:	900f      	str	r0, [sp, #60]	; 0x3c
 8001dac:	980f      	ldr	r0, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001db0:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001db4:	6318      	str	r0, [r3, #48]	; 0x30
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001db8:	4866      	ldr	r0, [pc, #408]	; (8001f54 <main+0x300>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8001dc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001dc2:	f003 fbbf 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	210c      	movs	r1, #12
 8001dca:	4863      	ldr	r0, [pc, #396]	; (8001f58 <main+0x304>)
 8001dcc:	f003 fbba 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2108      	movs	r1, #8
 8001dd4:	4861      	ldr	r0, [pc, #388]	; (8001f5c <main+0x308>)
 8001dd6:	f003 fbb5 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, LCD_DISP_Pin|GPIO_PIN_0, GPIO_PIN_SET);
 8001dda:	f241 0101 	movw	r1, #4097	; 0x1001
 8001dde:	485e      	ldr	r0, [pc, #376]	; (8001f58 <main+0x304>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	f003 fbaf 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001de6:	4622      	mov	r2, r4
 8001de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dec:	485c      	ldr	r0, [pc, #368]	; (8001f60 <main+0x30c>)
 8001dee:	f003 fba9 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001df2:	4622      	mov	r2, r4
 8001df4:	21c8      	movs	r1, #200	; 0xc8
 8001df6:	485b      	ldr	r0, [pc, #364]	; (8001f64 <main+0x310>)
 8001df8:	f003 fba4 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	a91f      	add	r1, sp, #124	; 0x7c
 8001dfe:	485a      	ldr	r0, [pc, #360]	; (8001f68 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e02:	e9cd a41f 	strd	sl, r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f003 fa65 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001e0a:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	a91f      	add	r1, sp, #124	; 0x7c
 8001e10:	4856      	ldr	r0, [pc, #344]	; (8001f6c <main+0x318>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e12:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	e9cd 4721 	strd	r4, r7, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f003 fa59 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e26:	a91f      	add	r1, sp, #124	; 0x7c
 8001e28:	4851      	ldr	r0, [pc, #324]	; (8001f70 <main+0x31c>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e2a:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f003 fa50 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e34:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e36:	a91f      	add	r1, sp, #124	; 0x7c
 8001e38:	4846      	ldr	r0, [pc, #280]	; (8001f54 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e3c:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f003 fa48 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e44:	2501      	movs	r5, #1
 8001e46:	2220      	movs	r2, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e48:	a91f      	add	r1, sp, #124	; 0x7c
 8001e4a:	4842      	ldr	r0, [pc, #264]	; (8001f54 <main+0x300>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e4c:	e9cd 251f 	strd	r2, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f003 fa3e 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|GPIO_PIN_0;
 8001e58:	f241 020d 	movw	r2, #4109	; 0x100d
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e5c:	a91f      	add	r1, sp, #124	; 0x7c
 8001e5e:	483e      	ldr	r0, [pc, #248]	; (8001f58 <main+0x304>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|GPIO_PIN_0;
 8001e60:	921f      	str	r2, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	9422      	str	r4, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e68:	f003 fa34 	bl	80052d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	a91f      	add	r1, sp, #124	; 0x7c
 8001e6e:	4841      	ldr	r0, [pc, #260]	; (8001f74 <main+0x320>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	e9cd 941f 	strd	r9, r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f003 fa2d 	bl	80052d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	a91f      	add	r1, sp, #124	; 0x7c
 8001e7c:	4837      	ldr	r0, [pc, #220]	; (8001f5c <main+0x308>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	e9cd a51f 	strd	sl, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f003 fa25 	bl	80052d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	a91f      	add	r1, sp, #124	; 0x7c
 8001e8c:	4831      	ldr	r0, [pc, #196]	; (8001f54 <main+0x300>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e8e:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f003 fa1d 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e9a:	f248 0204 	movw	r2, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e9e:	a91f      	add	r1, sp, #124	; 0x7c
 8001ea0:	482f      	ldr	r0, [pc, #188]	; (8001f60 <main+0x30c>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ea2:	921f      	str	r2, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea8:	f003 fa14 	bl	80052d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001eac:	a91f      	add	r1, sp, #124	; 0x7c
 8001eae:	482c      	ldr	r0, [pc, #176]	; (8001f60 <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	e9cd 951f 	strd	r9, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f003 fa0c 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ebc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	a91f      	add	r1, sp, #124	; 0x7c
 8001ec2:	4825      	ldr	r0, [pc, #148]	; (8001f58 <main+0x304>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ec4:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001ec8:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f003 fa00 	bl	80052d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	a91f      	add	r1, sp, #124	; 0x7c
 8001ed6:	4822      	ldr	r0, [pc, #136]	; (8001f60 <main+0x30c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ed8:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	e9cd b61f 	strd	fp, r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	e9cd 4721 	strd	r4, r7, [sp, #132]	; 0x84
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f003 f9f6 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001ee8:	23c8      	movs	r3, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eea:	a91f      	add	r1, sp, #124	; 0x7c
 8001eec:	481d      	ldr	r0, [pc, #116]	; (8001f64 <main+0x310>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001eee:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	9422      	str	r4, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef6:	f003 f9ed 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001efa:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efc:	a91f      	add	r1, sp, #124	; 0x7c
 8001efe:	481d      	ldr	r0, [pc, #116]	; (8001f74 <main+0x320>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f00:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	e9cd 6420 	strd	r6, r4, [sp, #128]	; 0x80
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f06:	e9cd 7822 	strd	r7, r8, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f003 f9e3 	bl	80052d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	a91f      	add	r1, sp, #124	; 0x7c
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <main+0x310>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f12:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f003 f9db 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f1e:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	4815      	ldr	r0, [pc, #84]	; (8001f78 <main+0x324>)
 8001f22:	a91f      	add	r1, sp, #124	; 0x7c
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f24:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f26:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	e9cd 6420 	strd	r6, r4, [sp, #128]	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f003 f9d0 	bl	80052d4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <main+0x328>)
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <main+0x32c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001f38:	8084      	strh	r4, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001f3a:	6205      	str	r5, [r0, #32]
  hcrc.Instance = CRC;
 8001f3c:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001f3e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f42:	f002 fc8f 	bl	8004864 <HAL_CRC_Init>
 8001f46:	b1e8      	cbz	r0, 8001f84 <main+0x330>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <main+0x2f6>
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40022800 	.word	0x40022800
 8001f60:	40021c00 	.word	0x40021c00
 8001f64:	40021800 	.word	0x40021800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40022400 	.word	0x40022400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	200195c8 	.word	0x200195c8
 8001f80:	40023000 	.word	0x40023000
  hdcmi.Instance = DCMI;
 8001f84:	4ba8      	ldr	r3, [pc, #672]	; (8002228 <main+0x5d4>)
 8001f86:	4aa9      	ldr	r2, [pc, #676]	; (800222c <main+0x5d8>)
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8001f88:	f8c3 a020 	str.w	sl, [r3, #32]
  hdcmi.Instance = DCMI;
 8001f8c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001f8e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001f92:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001f96:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001f9a:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001f9e:	e9c3 000b 	strd	r0, r0, [r3, #44]	; 0x2c
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fcd0 	bl	8004948 <HAL_DCMI_Init>
 8001fa8:	b108      	cbz	r0, 8001fae <main+0x35a>
 8001faa:	b672      	cpsid	i
  while (1)
 8001fac:	e7fe      	b.n	8001fac <main+0x358>
  hdma2d.Instance = DMA2D;
 8001fae:	4ca0      	ldr	r4, [pc, #640]	; (8002230 <main+0x5dc>)
 8001fb0:	4ba0      	ldr	r3, [pc, #640]	; (8002234 <main+0x5e0>)
  hdma2d.Init.OutputOffset = 0;
 8001fb2:	60e0      	str	r0, [r4, #12]
  hdma2d.Instance = DMA2D;
 8001fb4:	6023      	str	r3, [r4, #0]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001fb6:	e9c4 0601 	strd	r0, r6, [r4, #4]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001fba:	e9c4 060a 	strd	r0, r6, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001fbe:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f002 fe4e 	bl	8004c64 <HAL_DMA2D_Init>
 8001fc8:	b108      	cbz	r0, 8001fce <main+0x37a>
 8001fca:	b672      	cpsid	i
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <main+0x378>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f002 ffff 	bl	8004fd4 <HAL_DMA2D_ConfigLayer>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b9b8      	cbnz	r0, 800200a <main+0x3b6>
  MACAddr[0] = 0x00;
 8001fda:	4a97      	ldr	r2, [pc, #604]	; (8002238 <main+0x5e4>)
  heth.Instance = ETH;
 8001fdc:	4897      	ldr	r0, [pc, #604]	; (800223c <main+0x5e8>)
  MACAddr[4] = 0x00;
 8001fde:	8093      	strh	r3, [r2, #4]
  heth.Instance = ETH;
 8001fe0:	4b97      	ldr	r3, [pc, #604]	; (8002240 <main+0x5ec>)
  heth.Init.MACAddr = &MACAddr[0];
 8001fe2:	6042      	str	r2, [r0, #4]
  heth.Instance = ETH;
 8001fe4:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 8001fe6:	4b97      	ldr	r3, [pc, #604]	; (8002244 <main+0x5f0>)
 8001fe8:	6013      	str	r3, [r2, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001fea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001fee:	6083      	str	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ff0:	4b95      	ldr	r3, [pc, #596]	; (8002248 <main+0x5f4>)
 8001ff2:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ff4:	4b95      	ldr	r3, [pc, #596]	; (800224c <main+0x5f8>)
 8001ff6:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8001ff8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8001ffc:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001ffe:	f003 f841 	bl	8005084 <HAL_ETH_Init>
 8002002:	4680      	mov	r8, r0
 8002004:	b118      	cbz	r0, 800200e <main+0x3ba>
 8002006:	b672      	cpsid	i
  while (1)
 8002008:	e7fe      	b.n	8002008 <main+0x3b4>
 800200a:	b672      	cpsid	i
 800200c:	e7fe      	b.n	800200c <main+0x3b8>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800200e:	4c90      	ldr	r4, [pc, #576]	; (8002250 <main+0x5fc>)
 8002010:	4601      	mov	r1, r0
 8002012:	2234      	movs	r2, #52	; 0x34
 8002014:	1d20      	adds	r0, r4, #4
 8002016:	f015 f864 	bl	80170e2 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800201a:	488e      	ldr	r0, [pc, #568]	; (8002254 <main+0x600>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800201c:	2340      	movs	r3, #64	; 0x40
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800201e:	a91f      	add	r1, sp, #124	; 0x7c
  SdramTiming.WriteRecoveryTime = 3;
 8002020:	9723      	str	r7, [sp, #140]	; 0x8c
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002022:	6143      	str	r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SdramTiming.LoadToActiveDelay = 2;
 8002028:	961f      	str	r6, [sp, #124]	; 0x7c
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800202a:	6243      	str	r3, [r0, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 800202c:	2307      	movs	r3, #7
  SdramTiming.SelfRefreshTime = 4;
 800202e:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002032:	9320      	str	r3, [sp, #128]	; 0x80
  SdramTiming.RowCycleDelay = 7;
 8002034:	9322      	str	r3, [sp, #136]	; 0x88
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002036:	2321      	movs	r3, #33	; 0x21
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002038:	f8c0 801c 	str.w	r8, [r0, #28]
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800203c:	6023      	str	r3, [r4, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800203e:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002042:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002046:	6163      	str	r3, [r4, #20]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002048:	4b83      	ldr	r3, [pc, #524]	; (8002258 <main+0x604>)
 800204a:	6003      	str	r3, [r0, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800204c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002050:	6183      	str	r3, [r0, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002052:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramTiming.RCDDelay = 2;
 8002056:	e9cd 6624 	strd	r6, r6, [sp, #144]	; 0x90
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800205a:	6203      	str	r3, [r0, #32]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800205c:	e9c0 9b03 	strd	r9, fp, [r0, #12]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002060:	e9c0 8801 	strd	r8, r8, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002064:	f007 fc32 	bl	80098cc <HAL_SDRAM_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	b108      	cbz	r0, 8002070 <main+0x41c>
 800206c:	b672      	cpsid	i
  while (1)
 800206e:	e7fe      	b.n	800206e <main+0x41a>
  hi2c1.Instance = I2C1;
 8002070:	4c7a      	ldr	r4, [pc, #488]	; (800225c <main+0x608>)
 8002072:	4a7b      	ldr	r2, [pc, #492]	; (8002260 <main+0x60c>)
  hi2c1.Init.OwnAddress1 = 0;
 8002074:	60a0      	str	r0, [r4, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002076:	4620      	mov	r0, r4
  hi2c1.Instance = I2C1;
 8002078:	6022      	str	r2, [r4, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800207a:	4a7a      	ldr	r2, [pc, #488]	; (8002264 <main+0x610>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800207c:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800207e:	6123      	str	r3, [r4, #16]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002080:	6062      	str	r2, [r4, #4]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002082:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002086:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800208a:	f004 f8c7 	bl	800621c <HAL_I2C_Init>
 800208e:	4601      	mov	r1, r0
 8002090:	b108      	cbz	r0, 8002096 <main+0x442>
 8002092:	b672      	cpsid	i
  while (1)
 8002094:	e7fe      	b.n	8002094 <main+0x440>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002096:	4620      	mov	r0, r4
 8002098:	f004 fb7e 	bl	8006798 <HAL_I2CEx_ConfigAnalogFilter>
 800209c:	b108      	cbz	r0, 80020a2 <main+0x44e>
 800209e:	b672      	cpsid	i
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <main+0x44c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a2:	2100      	movs	r1, #0
 80020a4:	486d      	ldr	r0, [pc, #436]	; (800225c <main+0x608>)
 80020a6:	f004 fba1 	bl	80067ec <HAL_I2CEx_ConfigDigitalFilter>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b108      	cbz	r0, 80020b2 <main+0x45e>
 80020ae:	b672      	cpsid	i
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <main+0x45c>
  hi2c3.Instance = I2C3;
 80020b2:	4c6d      	ldr	r4, [pc, #436]	; (8002268 <main+0x614>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b4:	2601      	movs	r6, #1
  hi2c3.Instance = I2C3;
 80020b6:	496d      	ldr	r1, [pc, #436]	; (800226c <main+0x618>)
  hi2c3.Init.Timing = 0x00C0EAFF;
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <main+0x610>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020ba:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x00C0EAFF;
 80020bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c0:	e9c4 6303 	strd	r6, r3, [r4, #12]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c4:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c8:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020cc:	f004 f8a6 	bl	800621c <HAL_I2C_Init>
 80020d0:	4601      	mov	r1, r0
 80020d2:	b108      	cbz	r0, 80020d8 <main+0x484>
 80020d4:	b672      	cpsid	i
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <main+0x482>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020d8:	4620      	mov	r0, r4
 80020da:	f004 fb5d 	bl	8006798 <HAL_I2CEx_ConfigAnalogFilter>
 80020de:	4601      	mov	r1, r0
 80020e0:	b108      	cbz	r0, 80020e6 <main+0x492>
 80020e2:	b672      	cpsid	i
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <main+0x490>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80020e6:	4620      	mov	r0, r4
 80020e8:	f004 fb80 	bl	80067ec <HAL_I2CEx_ConfigDigitalFilter>
 80020ec:	4605      	mov	r5, r0
 80020ee:	b108      	cbz	r0, 80020f4 <main+0x4a0>
 80020f0:	b672      	cpsid	i
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <main+0x49e>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020f4:	2234      	movs	r2, #52	; 0x34
 80020f6:	4601      	mov	r1, r0
 80020f8:	a81f      	add	r0, sp, #124	; 0x7c
  hltdc.Instance = LTDC;
 80020fa:	4c5d      	ldr	r4, [pc, #372]	; (8002270 <main+0x61c>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020fc:	f014 fff1 	bl	80170e2 <memset>
  hltdc.Instance = LTDC;
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <main+0x620>)
  hltdc.Init.AccumulatedHBP = 53;
 8002102:	f04f 0e09 	mov.w	lr, #9
  hltdc.Init.AccumulatedActiveW = 533;
 8002106:	f04f 080b 	mov.w	r8, #11
  hltdc.Instance = LTDC;
 800210a:	6023      	str	r3, [r4, #0]
  hltdc.Init.AccumulatedHBP = 53;
 800210c:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.TotalWidth = 565;
 800210e:	f240 191b 	movw	r9, #283	; 0x11b
  hltdc.Init.HorizontalSync = 40;
 8002112:	2728      	movs	r7, #40	; 0x28
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002114:	4620      	mov	r0, r4
  hltdc.Init.Backcolor.Blue = 0;
 8002116:	86a5      	strh	r5, [r4, #52]	; 0x34
  hltdc.Init.HorizontalSync = 40;
 8002118:	6167      	str	r7, [r4, #20]
  hltdc.Init.Backcolor.Red = 0;
 800211a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  hltdc.Init.AccumulatedHBP = 53;
 800211e:	e9c4 e306 	strd	lr, r3, [r4, #24]
  hltdc.Init.AccumulatedActiveW = 533;
 8002122:	f240 2315 	movw	r3, #533	; 0x215
 8002126:	e9c4 8308 	strd	r8, r3, [r4, #32]
  hltdc.Init.TotalWidth = 565;
 800212a:	f240 2335 	movw	r3, #565	; 0x235
 800212e:	e9c4 930a 	strd	r9, r3, [r4, #40]	; 0x28
  hltdc.Init.TotalHeigh = 285;
 8002132:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002136:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800213a:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hltdc.Init.TotalHeigh = 285;
 800213e:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002140:	f004 fb80 	bl	8006844 <HAL_LTDC_Init>
 8002144:	4602      	mov	r2, r0
 8002146:	b108      	cbz	r0, 800214c <main+0x4f8>
 8002148:	b672      	cpsid	i
  while (1)
 800214a:	e7fe      	b.n	800214a <main+0x4f6>
  pLayerCfg.WindowX1 = 480;
 800214c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.Alpha = 255;
 8002150:	f04f 08ff 	mov.w	r8, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002154:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002158:	4620      	mov	r0, r4
  pLayerCfg.WindowX1 = 480;
 800215a:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800215c:	a91f      	add	r1, sp, #124	; 0x7c
  pLayerCfg.ImageWidth = 480;
 800215e:	9329      	str	r3, [sp, #164]	; 0xa4
  pLayerCfg.WindowY1 = 272;
 8002160:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 8002164:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.WindowY1 = 272;
 8002166:	9322      	str	r3, [sp, #136]	; 0x88
  pLayerCfg.ImageHeight = 272;
 8002168:	932a      	str	r3, [sp, #168]	; 0xa8
  pLayerCfg.Alpha = 255;
 800216a:	2302      	movs	r3, #2
  pLayerCfg.WindowY0 = 0;
 800216c:	9221      	str	r2, [sp, #132]	; 0x84
  pLayerCfg.Alpha0 = 0;
 800216e:	9225      	str	r2, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Blue = 0;
 8002170:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
  pLayerCfg.Backcolor.Red = 0;
 8002174:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
  pLayerCfg.Alpha = 255;
 8002178:	e9cd 3823 	strd	r3, r8, [sp, #140]	; 0x8c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800217c:	2307      	movs	r3, #7
 800217e:	e9cd c326 	strd	ip, r3, [sp, #152]	; 0x98
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002182:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002186:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002188:	f004 fc32 	bl	80069f0 <HAL_LTDC_ConfigLayer>
 800218c:	4603      	mov	r3, r0
 800218e:	b108      	cbz	r0, 8002194 <main+0x540>
 8002190:	b672      	cpsid	i
  while (1)
 8002192:	e7fe      	b.n	8002192 <main+0x53e>
  hqspi.Instance = QUADSPI;
 8002194:	4838      	ldr	r0, [pc, #224]	; (8002278 <main+0x624>)
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002196:	2404      	movs	r4, #4
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002198:	2518      	movs	r5, #24
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800219a:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 800219c:	6046      	str	r6, [r0, #4]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800219e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hqspi.Instance = QUADSPI;
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <main+0x628>)
 80021a4:	6003      	str	r3, [r0, #0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80021a6:	2310      	movs	r3, #16
 80021a8:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80021ac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80021b0:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80021b4:	f004 fdde 	bl	8006d74 <HAL_QSPI_Init>
 80021b8:	4604      	mov	r4, r0
 80021ba:	b108      	cbz	r0, 80021c0 <main+0x56c>
 80021bc:	b672      	cpsid	i
  while (1)
 80021be:	e7fe      	b.n	80021be <main+0x56a>
  RTC_AlarmTypeDef sAlarm = {0};
 80021c0:	4601      	mov	r1, r0
  RTC_TimeTypeDef sTime = {0};
 80021c2:	9018      	str	r0, [sp, #96]	; 0x60
  RTC_DateTypeDef sDate = {0};
 80021c4:	9014      	str	r0, [sp, #80]	; 0x50
  RTC_AlarmTypeDef sAlarm = {0};
 80021c6:	463a      	mov	r2, r7
  hrtc.Instance = RTC;
 80021c8:	4d2d      	ldr	r5, [pc, #180]	; (8002280 <main+0x62c>)
  RTC_TimeTypeDef sTime = {0};
 80021ca:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 80021ce:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  RTC_AlarmTypeDef sAlarm = {0};
 80021d2:	a81f      	add	r0, sp, #124	; 0x7c
 80021d4:	f014 ff85 	bl	80170e2 <memset>
  hrtc.Instance = RTC;
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <main+0x630>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021da:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80021dc:	f8c5 800c 	str.w	r8, [r5, #12]
  hrtc.Instance = RTC;
 80021e0:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = 127;
 80021e2:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021e4:	606c      	str	r4, [r5, #4]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021e6:	61ac      	str	r4, [r5, #24]
  hrtc.Init.AsynchPrediv = 127;
 80021e8:	60ab      	str	r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021ea:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021ee:	f005 fc5b 	bl	8007aa8 <HAL_RTC_Init>
 80021f2:	b108      	cbz	r0, 80021f8 <main+0x5a4>
 80021f4:	b672      	cpsid	i
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <main+0x5a2>
  sTime.Hours = 0x0;
 80021f8:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021fc:	4632      	mov	r2, r6
  sTime.Seconds = 0x0;
 80021fe:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002202:	a918      	add	r1, sp, #96	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002204:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002208:	4628      	mov	r0, r5
 800220a:	f005 fcc3 	bl	8007b94 <HAL_RTC_SetTime>
 800220e:	b108      	cbz	r0, 8002214 <main+0x5c0>
 8002210:	b672      	cpsid	i
  while (1)
 8002212:	e7fe      	b.n	8002212 <main+0x5be>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <main+0x634>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002216:	4632      	mov	r2, r6
 8002218:	4628      	mov	r0, r5
 800221a:	a914      	add	r1, sp, #80	; 0x50
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800221c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800221e:	f005 ff2f 	bl	8008080 <HAL_RTC_SetDate>
 8002222:	b398      	cbz	r0, 800228c <main+0x638>
 8002224:	b672      	cpsid	i
  while (1)
 8002226:	e7fe      	b.n	8002226 <main+0x5d2>
 8002228:	200195ec 	.word	0x200195ec
 800222c:	50050000 	.word	0x50050000
 8002230:	2001963c 	.word	0x2001963c
 8002234:	4002b000 	.word	0x4002b000
 8002238:	2000525c 	.word	0x2000525c
 800223c:	2001967c 	.word	0x2001967c
 8002240:	40028000 	.word	0x40028000
 8002244:	00e18000 	.word	0x00e18000
 8002248:	200051a0 	.word	0x200051a0
 800224c:	20005100 	.word	0x20005100
 8002250:	20005264 	.word	0x20005264
 8002254:	20019d78 	.word	0x20019d78
 8002258:	a0000140 	.word	0xa0000140
 800225c:	20019a30 	.word	0x20019a30
 8002260:	40005400 	.word	0x40005400
 8002264:	00c0eaff 	.word	0x00c0eaff
 8002268:	20019a84 	.word	0x20019a84
 800226c:	40005c00 	.word	0x40005c00
 8002270:	20019ad8 	.word	0x20019ad8
 8002274:	40016800 	.word	0x40016800
 8002278:	20019b80 	.word	0x20019b80
 800227c:	a0001000 	.word	0xa0001000
 8002280:	20019bcc 	.word	0x20019bcc
 8002284:	40002800 	.word	0x40002800
 8002288:	00010101 	.word	0x00010101
  sAlarm.AlarmTime.Hours = 0x0;
 800228c:	2300      	movs	r3, #0
  sAlarm.AlarmDateWeekDay = 0x1;
 800228e:	2401      	movs	r4, #1
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002290:	a91f      	add	r1, sp, #124	; 0x7c
 8002292:	48a9      	ldr	r0, [pc, #676]	; (8002538 <main+0x8e4>)
  sAlarm.AlarmTime.Hours = 0x0;
 8002294:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002298:	4622      	mov	r2, r4
  sAlarm.AlarmTime.Seconds = 0x0;
 800229a:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800229e:	9320      	str	r3, [sp, #128]	; 0x80
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022a0:	9326      	str	r3, [sp, #152]	; 0x98
  sAlarm.AlarmDateWeekDay = 0x1;
 80022a2:	f88d 409c 	strb.w	r4, [sp, #156]	; 0x9c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022a6:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80022aa:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 80022ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b2:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022b4:	f006 f958 	bl	8008568 <HAL_RTC_SetAlarm>
 80022b8:	b108      	cbz	r0, 80022be <main+0x66a>
 80022ba:	b672      	cpsid	i
  while (1)
 80022bc:	e7fe      	b.n	80022bc <main+0x668>
  sAlarm.Alarm = RTC_ALARM_B;
 80022be:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022c2:	a91f      	add	r1, sp, #124	; 0x7c
 80022c4:	4622      	mov	r2, r4
 80022c6:	489c      	ldr	r0, [pc, #624]	; (8002538 <main+0x8e4>)
  sAlarm.Alarm = RTC_ALARM_B;
 80022c8:	9528      	str	r5, [sp, #160]	; 0xa0
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022ca:	f006 f94d 	bl	8008568 <HAL_RTC_SetAlarm>
 80022ce:	4601      	mov	r1, r0
 80022d0:	b108      	cbz	r0, 80022d6 <main+0x682>
 80022d2:	b672      	cpsid	i
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <main+0x680>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80022d6:	2202      	movs	r2, #2
 80022d8:	4897      	ldr	r0, [pc, #604]	; (8002538 <main+0x8e4>)
 80022da:	f006 fca5 	bl	8008c28 <HAL_RTCEx_SetTimeStamp>
 80022de:	4603      	mov	r3, r0
 80022e0:	b108      	cbz	r0, 80022e6 <main+0x692>
 80022e2:	b672      	cpsid	i
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <main+0x690>
  hsai_BlockA2.Instance = SAI2_Block_A;
 80022e6:	4895      	ldr	r0, [pc, #596]	; (800253c <main+0x8e8>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80022e8:	2740      	movs	r7, #64	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80022ea:	2608      	movs	r6, #8
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80022ec:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80022ee:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80022f0:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022f2:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022f4:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80022f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80022f8:	6347      	str	r7, [r0, #52]	; 0x34
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80022fa:	6406      	str	r6, [r0, #64]	; 0x40
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80022fc:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002300:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002304:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002308:	e9c0 4311 	strd	r4, r3, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800230c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002310:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002314:	e9c0 4317 	strd	r4, r3, [r0, #92]	; 0x5c
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002318:	4b89      	ldr	r3, [pc, #548]	; (8002540 <main+0x8ec>)
 800231a:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800231c:	4b89      	ldr	r3, [pc, #548]	; (8002544 <main+0x8f0>)
 800231e:	61c3      	str	r3, [r0, #28]
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002320:	f006 fcba 	bl	8008c98 <HAL_SAI_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	b108      	cbz	r0, 800232c <main+0x6d8>
 8002328:	b672      	cpsid	i
  while (1)
 800232a:	e7fe      	b.n	800232a <main+0x6d6>
  hsai_BlockB2.Instance = SAI2_Block_B;
 800232c:	4886      	ldr	r0, [pc, #536]	; (8002548 <main+0x8f4>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800232e:	f8df b240 	ldr.w	fp, [pc, #576]	; 8002570 <main+0x91c>
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002332:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002334:	6103      	str	r3, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002336:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002338:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800233a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800233c:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800233e:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002340:	6347      	str	r7, [r0, #52]	; 0x34
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002342:	6406      	str	r6, [r0, #64]	; 0x40
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002344:	6084      	str	r4, [r0, #8]
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002346:	6444      	str	r4, [r0, #68]	; 0x44
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002348:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800234a:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800234e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002352:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002356:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800235a:	2303      	movs	r3, #3
 800235c:	e9c0 b300 	strd	fp, r3, [r0]
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002360:	f006 fc9a 	bl	8008c98 <HAL_SAI_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	b108      	cbz	r0, 800236c <main+0x718>
 8002368:	b672      	cpsid	i
  while (1)
 800236a:	e7fe      	b.n	800236a <main+0x716>
  hspdif.Instance = SPDIFRX;
 800236c:	4877      	ldr	r0, [pc, #476]	; (800254c <main+0x8f8>)
  hsd1.Instance = SDMMC1;
 800236e:	4a78      	ldr	r2, [pc, #480]	; (8002550 <main+0x8fc>)
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002370:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002374:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002378:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800237c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002380:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002384:	e9c2 3301 	strd	r3, r3, [r2, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002388:	60d3      	str	r3, [r2, #12]
  hsd1.Init.ClockDiv = 0;
 800238a:	e9c2 3305 	strd	r3, r3, [r2, #20]
  hsd1.Instance = SDMMC1;
 800238e:	4b71      	ldr	r3, [pc, #452]	; (8002554 <main+0x900>)
 8002390:	6013      	str	r3, [r2, #0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002396:	6113      	str	r3, [r2, #16]
  hspdif.Instance = SPDIFRX;
 8002398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800239c:	6003      	str	r3, [r0, #0]
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800239e:	f007 faef 	bl	8009980 <HAL_SPDIFRX_Init>
 80023a2:	4604      	mov	r4, r0
 80023a4:	b108      	cbz	r0, 80023aa <main+0x756>
 80023a6:	b672      	cpsid	i
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <main+0x754>
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80023aa:	4601      	mov	r1, r0
 80023ac:	2228      	movs	r2, #40	; 0x28
 80023ae:	a81f      	add	r0, sp, #124	; 0x7c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80023b0:	2602      	movs	r6, #2
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80023b2:	f014 fe96 	bl	80170e2 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80023b6:	4b68      	ldr	r3, [pc, #416]	; (8002558 <main+0x904>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80023ba:	2705      	movs	r7, #5
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023bc:	a918      	add	r1, sp, #96	; 0x60
 80023be:	4867      	ldr	r0, [pc, #412]	; (800255c <main+0x908>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 80023c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023d2:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80023d4:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80023e4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80023e6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ea:	4332      	orrs	r2, r6
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80023f0:	971d      	str	r7, [sp, #116]	; 0x74
 80023f2:	4033      	ands	r3, r6
 80023f4:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80023f6:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023f8:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023fc:	f008 fe38 	bl	800b070 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	a918      	add	r1, sp, #96	; 0x60
 8002406:	4856      	ldr	r0, [pc, #344]	; (8002560 <main+0x90c>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002408:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800240a:	971d      	str	r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800240c:	e9cd 6419 	strd	r6, r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002410:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f008 fe2c 	bl	800b070 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	a918      	add	r1, sp, #96	; 0x60
 800241e:	4850      	ldr	r0, [pc, #320]	; (8002560 <main+0x90c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002420:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002422:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002424:	971d      	str	r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002426:	941c      	str	r4, [sp, #112]	; 0x70
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002428:	4e4e      	ldr	r6, [pc, #312]	; (8002564 <main+0x910>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800242a:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f008 fe1f 	bl	800b070 <LL_GPIO_Init>
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002432:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8002436:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800243a:	a91f      	add	r1, sp, #124	; 0x7c
 800243c:	4630      	mov	r0, r6
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800243e:	9524      	str	r5, [sp, #144]	; 0x90
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002440:	941f      	str	r4, [sp, #124]	; 0x7c
  htim1.Instance = TIM1;
 8002442:	4d49      	ldr	r5, [pc, #292]	; (8002568 <main+0x914>)
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002444:	e9cd e320 	strd	lr, r3, [sp, #128]	; 0x80
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002448:	2310      	movs	r3, #16
 800244a:	9325      	str	r3, [sp, #148]	; 0x94
  SPI_InitStruct.CRCPoly = 7;
 800244c:	2307      	movs	r3, #7
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800244e:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
  SPI_InitStruct.CRCPoly = 7;
 8002452:	9328      	str	r3, [sp, #160]	; 0xa0
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002454:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002458:	f009 ffc8 	bl	800c3ec <LL_SPI_Init>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800245c:	6873      	ldr	r3, [r6, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800245e:	222c      	movs	r2, #44	; 0x2c
 8002460:	4621      	mov	r1, r4
 8002462:	f023 0310 	bic.w	r3, r3, #16
 8002466:	a81f      	add	r0, sp, #124	; 0x7c
 8002468:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800246a:	6873      	ldr	r3, [r6, #4]
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	6073      	str	r3, [r6, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002472:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002474:	941e      	str	r4, [sp, #120]	; 0x78
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002476:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 800247a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8002482:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8002486:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800248e:	f014 fe28 	bl	80170e2 <memset>
  htim1.Instance = TIM1;
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <main+0x918>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002494:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8002498:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = 65535;
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249e:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 80024a2:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 65535;
 80024a6:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024a8:	f007 faa2 	bl	80099f0 <HAL_TIM_Base_Init>
 80024ac:	b108      	cbz	r0, 80024b2 <main+0x85e>
 80024ae:	b672      	cpsid	i
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <main+0x85c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024b6:	a914      	add	r1, sp, #80	; 0x50
 80024b8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ba:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024bc:	f007 fdfc 	bl	800a0b8 <HAL_TIM_ConfigClockSource>
 80024c0:	b108      	cbz	r0, 80024c6 <main+0x872>
 80024c2:	b672      	cpsid	i
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <main+0x870>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024c6:	4628      	mov	r0, r5
 80024c8:	f007 fba4 	bl	8009c14 <HAL_TIM_PWM_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b108      	cbz	r0, 80024d4 <main+0x880>
 80024d0:	b672      	cpsid	i
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <main+0x87e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024d4:	a911      	add	r1, sp, #68	; 0x44
 80024d6:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024da:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024de:	f007 ff5b 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 80024e2:	b108      	cbz	r0, 80024e8 <main+0x894>
 80024e4:	b672      	cpsid	i
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <main+0x892>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e8:	2660      	movs	r6, #96	; 0x60
 80024ea:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ec:	481e      	ldr	r0, [pc, #120]	; (8002568 <main+0x914>)
 80024ee:	eb0d 0106 	add.w	r1, sp, r6
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024f2:	921e      	str	r2, [sp, #120]	; 0x78
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f4:	e9cd 6218 	strd	r6, r2, [sp, #96]	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024f8:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024fc:	e9cd 221c 	strd	r2, r2, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002500:	f007 fc3e 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 8002504:	b108      	cbz	r0, 800250a <main+0x8b6>
 8002506:	b672      	cpsid	i
  while (1)
 8002508:	e7fe      	b.n	8002508 <main+0x8b4>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800250a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800250e:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002510:	a91f      	add	r1, sp, #124	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002512:	9324      	str	r3, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002514:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002518:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.DeadTime = 0;
 800251c:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002520:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002524:	e9cd 0028 	strd	r0, r0, [sp, #160]	; 0xa0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002528:	480f      	ldr	r0, [pc, #60]	; (8002568 <main+0x914>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800252a:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800252c:	f007 ff8e 	bl	800a44c <HAL_TIMEx_ConfigBreakDeadTime>
 8002530:	4604      	mov	r4, r0
 8002532:	b1f8      	cbz	r0, 8002574 <main+0x920>
 8002534:	b672      	cpsid	i
  while (1)
 8002536:	e7fe      	b.n	8002536 <main+0x8e2>
 8002538:	20019bcc 	.word	0x20019bcc
 800253c:	20019bec 	.word	0x20019bec
 8002540:	40015c04 	.word	0x40015c04
 8002544:	0002ee00 	.word	0x0002ee00
 8002548:	20019c70 	.word	0x20019c70
 800254c:	20019dac 	.word	0x20019dac
 8002550:	20019cf4 	.word	0x20019cf4
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40023800 	.word	0x40023800
 800255c:	40022000 	.word	0x40022000
 8002560:	40020400 	.word	0x40020400
 8002564:	40003800 	.word	0x40003800
 8002568:	20019df8 	.word	0x20019df8
 800256c:	40010000 	.word	0x40010000
 8002570:	40015c24 	.word	0x40015c24
  HAL_TIM_MspPostInit(&htim1);
 8002574:	489a      	ldr	r0, [pc, #616]	; (80027e0 <main+0xb8c>)
 8002576:	f001 fc63 	bl	8003e40 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800257a:	4d9a      	ldr	r5, [pc, #616]	; (80027e4 <main+0xb90>)
 800257c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002582:	4628      	mov	r0, r5
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002584:	9425      	str	r4, [sp, #148]	; 0x94
  htim2.Instance = TIM2;
 8002586:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = 4294967295;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = 4294967295;
 8002590:	60eb      	str	r3, [r5, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8002596:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259a:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 80025a2:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 80025a6:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	e9c5 4401 	strd	r4, r4, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ae:	f007 fa1f 	bl	80099f0 <HAL_TIM_Base_Init>
 80025b2:	b108      	cbz	r0, 80025b8 <main+0x964>
 80025b4:	b672      	cpsid	i
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <main+0x962>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025bc:	a918      	add	r1, sp, #96	; 0x60
 80025be:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c0:	9718      	str	r7, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c2:	f007 fd79 	bl	800a0b8 <HAL_TIM_ConfigClockSource>
 80025c6:	b108      	cbz	r0, 80025cc <main+0x978>
 80025c8:	b672      	cpsid	i
  while (1)
 80025ca:	e7fe      	b.n	80025ca <main+0x976>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025cc:	4628      	mov	r0, r5
 80025ce:	f007 fb21 	bl	8009c14 <HAL_TIM_PWM_Init>
 80025d2:	b108      	cbz	r0, 80025d8 <main+0x984>
 80025d4:	b672      	cpsid	i
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <main+0x982>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d8:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025da:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025dc:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025de:	4628      	mov	r0, r5
 80025e0:	f007 feda 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4602      	mov	r2, r0
 80025e6:	b108      	cbz	r0, 80025ec <main+0x998>
 80025e8:	b672      	cpsid	i
  while (1)
 80025ea:	e7fe      	b.n	80025ea <main+0x996>
  sConfigOC.Pulse = 0;
 80025ec:	e9cd 601f 	strd	r6, r0, [sp, #124]	; 0x7c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f0:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f2:	a91f      	add	r1, sp, #124	; 0x7c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f4:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f6:	4628      	mov	r0, r5
 80025f8:	f007 fbc2 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 80025fc:	4604      	mov	r4, r0
 80025fe:	b108      	cbz	r0, 8002604 <main+0x9b0>
 8002600:	b672      	cpsid	i
  while (1)
 8002602:	e7fe      	b.n	8002602 <main+0x9ae>
  HAL_TIM_MspPostInit(&htim2);
 8002604:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 8002606:	4d78      	ldr	r5, [pc, #480]	; (80027e8 <main+0xb94>)
  HAL_TIM_MspPostInit(&htim2);
 8002608:	f001 fc1a 	bl	8003e40 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800260c:	4b77      	ldr	r3, [pc, #476]	; (80027ec <main+0xb98>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800260e:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	9416      	str	r4, [sp, #88]	; 0x58
  htim3.Instance = TIM3;
 8002612:	602b      	str	r3, [r5, #0]
  htim3.Init.Period = 65535;
 8002614:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002618:	9425      	str	r4, [sp, #148]	; 0x94
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261c:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 65535;
 800261e:	60eb      	str	r3, [r5, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002620:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8002624:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 8002630:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8002634:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	e9c5 4401 	strd	r4, r4, [r5, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800263c:	f007 f9d8 	bl	80099f0 <HAL_TIM_Base_Init>
 8002640:	b108      	cbz	r0, 8002646 <main+0x9f2>
 8002642:	b672      	cpsid	i
  while (1)
 8002644:	e7fe      	b.n	8002644 <main+0x9f0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002646:	a918      	add	r1, sp, #96	; 0x60
 8002648:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800264a:	9718      	str	r7, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800264c:	f007 fd34 	bl	800a0b8 <HAL_TIM_ConfigClockSource>
 8002650:	b108      	cbz	r0, 8002656 <main+0xa02>
 8002652:	b672      	cpsid	i
  while (1)
 8002654:	e7fe      	b.n	8002654 <main+0xa00>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002656:	4628      	mov	r0, r5
 8002658:	f007 fadc 	bl	8009c14 <HAL_TIM_PWM_Init>
 800265c:	b108      	cbz	r0, 8002662 <main+0xa0e>
 800265e:	b672      	cpsid	i
  while (1)
 8002660:	e7fe      	b.n	8002660 <main+0xa0c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002662:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002664:	a914      	add	r1, sp, #80	; 0x50
 8002666:	4860      	ldr	r0, [pc, #384]	; (80027e8 <main+0xb94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002668:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800266c:	f007 fe94 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 8002670:	4602      	mov	r2, r0
 8002672:	b108      	cbz	r0, 8002678 <main+0xa24>
 8002674:	b672      	cpsid	i
  while (1)
 8002676:	e7fe      	b.n	8002676 <main+0xa22>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002678:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267a:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800267c:	a91f      	add	r1, sp, #124	; 0x7c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800267e:	951f      	str	r5, [sp, #124]	; 0x7c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002680:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002684:	4858      	ldr	r0, [pc, #352]	; (80027e8 <main+0xb94>)
 8002686:	f007 fb7b 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 800268a:	4604      	mov	r4, r0
 800268c:	b108      	cbz	r0, 8002692 <main+0xa3e>
 800268e:	b672      	cpsid	i
  while (1)
 8002690:	e7fe      	b.n	8002690 <main+0xa3c>
  HAL_TIM_MspPostInit(&htim3);
 8002692:	4855      	ldr	r0, [pc, #340]	; (80027e8 <main+0xb94>)
 8002694:	f001 fbd4 	bl	8003e40 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8002698:	4e55      	ldr	r6, [pc, #340]	; (80027f0 <main+0xb9c>)
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <main+0xba0>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800269c:	4630      	mov	r0, r6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269e:	941a      	str	r4, [sp, #104]	; 0x68
  htim5.Instance = TIM5;
 80026a0:	6033      	str	r3, [r6, #0]
  htim5.Init.Period = 4294967295;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	6134      	str	r4, [r6, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	61b4      	str	r4, [r6, #24]
  htim5.Init.Period = 4294967295;
 80026aa:	60f3      	str	r3, [r6, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ac:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 80026b0:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b8:	e9c6 4401 	strd	r4, r4, [r6, #4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026bc:	f007 f998 	bl	80099f0 <HAL_TIM_Base_Init>
 80026c0:	b108      	cbz	r0, 80026c6 <main+0xa72>
 80026c2:	b672      	cpsid	i
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <main+0xa70>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026ca:	a91f      	add	r1, sp, #124	; 0x7c
 80026cc:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ce:	971f      	str	r7, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026d0:	f007 fcf2 	bl	800a0b8 <HAL_TIM_ConfigClockSource>
 80026d4:	4603      	mov	r3, r0
 80026d6:	b108      	cbz	r0, 80026dc <main+0xa88>
 80026d8:	b672      	cpsid	i
  while (1)
 80026da:	e7fe      	b.n	80026da <main+0xa86>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026dc:	4630      	mov	r0, r6
 80026de:	a918      	add	r1, sp, #96	; 0x60
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e0:	9318      	str	r3, [sp, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026e4:	f007 fe58 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	b108      	cbz	r0, 80026ee <main+0xa9a>
 80026ea:	b672      	cpsid	i
  while (1)
 80026ec:	e7fe      	b.n	80026ec <main+0xa98>
  htim8.Instance = TIM8;
 80026ee:	4c42      	ldr	r4, [pc, #264]	; (80027f8 <main+0xba4>)
  htim8.Init.Period = 65535;
 80026f0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  htim8.Instance = TIM8;
 80026f4:	4b41      	ldr	r3, [pc, #260]	; (80027fc <main+0xba8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f6:	901a      	str	r0, [sp, #104]	; 0x68
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f8:	61a0      	str	r0, [r4, #24]
  htim8.Instance = TIM8;
 80026fa:	6023      	str	r3, [r4, #0]
  htim8.Init.Period = 65535;
 80026fc:	60e6      	str	r6, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 8002702:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002706:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim8.Init.RepetitionCounter = 0;
 800270e:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002712:	4620      	mov	r0, r4
 8002714:	f007 f96c 	bl	80099f0 <HAL_TIM_Base_Init>
 8002718:	b108      	cbz	r0, 800271e <main+0xaca>
 800271a:	b672      	cpsid	i
  while (1)
 800271c:	e7fe      	b.n	800271c <main+0xac8>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800271e:	a91f      	add	r1, sp, #124	; 0x7c
 8002720:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002722:	971f      	str	r7, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002724:	f007 fcc8 	bl	800a0b8 <HAL_TIM_ConfigClockSource>
 8002728:	4603      	mov	r3, r0
 800272a:	b108      	cbz	r0, 8002730 <main+0xadc>
 800272c:	b672      	cpsid	i
  while (1)
 800272e:	e7fe      	b.n	800272e <main+0xada>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002730:	4620      	mov	r0, r4
 8002732:	a918      	add	r1, sp, #96	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002734:	931a      	str	r3, [sp, #104]	; 0x68
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002736:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800273a:	f007 fe2d 	bl	800a398 <HAL_TIMEx_MasterConfigSynchronization>
 800273e:	b108      	cbz	r0, 8002744 <main+0xaf0>
 8002740:	b672      	cpsid	i
  while (1)
 8002742:	e7fe      	b.n	8002742 <main+0xaee>
  htim12.Instance = TIM12;
 8002744:	4c2e      	ldr	r4, [pc, #184]	; (8002800 <main+0xbac>)
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <main+0xbb0>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002748:	9025      	str	r0, [sp, #148]	; 0x94
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274a:	6120      	str	r0, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	61a0      	str	r0, [r4, #24]
  htim12.Init.Period = 65535;
 800274e:	60e6      	str	r6, [r4, #12]
  htim12.Instance = TIM12;
 8002750:	6023      	str	r3, [r4, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002752:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 8002756:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
 800275a:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002762:	4620      	mov	r0, r4
 8002764:	f007 fa56 	bl	8009c14 <HAL_TIM_PWM_Init>
 8002768:	4602      	mov	r2, r0
 800276a:	b108      	cbz	r0, 8002770 <main+0xb1c>
 800276c:	b672      	cpsid	i
  while (1)
 800276e:	e7fe      	b.n	800276e <main+0xb1a>
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002770:	4620      	mov	r0, r4
 8002772:	a91f      	add	r1, sp, #124	; 0x7c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002774:	951f      	str	r5, [sp, #124]	; 0x7c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002776:	9223      	str	r2, [sp, #140]	; 0x8c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002778:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800277c:	f007 fb00 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 8002780:	b108      	cbz	r0, 8002786 <main+0xb32>
 8002782:	b672      	cpsid	i
  while (1)
 8002784:	e7fe      	b.n	8002784 <main+0xb30>
  HAL_TIM_MspPostInit(&htim12);
 8002786:	481e      	ldr	r0, [pc, #120]	; (8002800 <main+0xbac>)
  huart1.Init.BaudRate = 115200;
 8002788:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  HAL_TIM_MspPostInit(&htim12);
 800278c:	f001 fb58 	bl	8003e40 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8002790:	4e1d      	ldr	r6, [pc, #116]	; (8002808 <main+0xbb4>)
  huart1.Init.BaudRate = 115200;
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <main+0xbb8>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002794:	240c      	movs	r4, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002796:	4630      	mov	r0, r6
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002798:	6174      	str	r4, [r6, #20]
  huart1.Init.BaudRate = 115200;
 800279a:	e9c6 3500 	strd	r3, r5, [r6]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800279e:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a0:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027a4:	6133      	str	r3, [r6, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a6:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027aa:	e9c6 3308 	strd	r3, r3, [r6, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ae:	f008 f9e7 	bl	800ab80 <HAL_UART_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	b108      	cbz	r0, 80027ba <main+0xb66>
 80027b6:	b672      	cpsid	i
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <main+0xb64>
  huart6.Instance = USART6;
 80027ba:	4815      	ldr	r0, [pc, #84]	; (8002810 <main+0xbbc>)
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027bc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027c0:	6103      	str	r3, [r0, #16]
  huart6.Init.BaudRate = 115200;
 80027c2:	6045      	str	r5, [r0, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027c4:	6144      	str	r4, [r0, #20]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ca:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart6.Instance = USART6;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <main+0xbc0>)
 80027d0:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027d2:	f008 f9d5 	bl	800ab80 <HAL_UART_Init>
 80027d6:	4605      	mov	r5, r0
 80027d8:	b1f0      	cbz	r0, 8002818 <main+0xbc4>
 80027da:	b672      	cpsid	i
  while (1)
 80027dc:	e7fe      	b.n	80027dc <main+0xb88>
 80027de:	bf00      	nop
 80027e0:	20019df8 	.word	0x20019df8
 80027e4:	20019e90 	.word	0x20019e90
 80027e8:	20019edc 	.word	0x20019edc
 80027ec:	40000400 	.word	0x40000400
 80027f0:	20019f28 	.word	0x20019f28
 80027f4:	40000c00 	.word	0x40000c00
 80027f8:	20019f74 	.word	0x20019f74
 80027fc:	40010400 	.word	0x40010400
 8002800:	20019e44 	.word	0x20019e44
 8002804:	40001800 	.word	0x40001800
 8002808:	20019fc0 	.word	0x20019fc0
 800280c:	40011000 	.word	0x40011000
 8002810:	2001a048 	.word	0x2001a048
 8002814:	40011400 	.word	0x40011400
  MX_FATFS_Init();
 8002818:	f00a f8ba 	bl	800c990 <MX_FATFS_Init>
  hadc3.Instance = ADC3;
 800281c:	4c62      	ldr	r4, [pc, #392]	; (80029a8 <main+0xd54>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800281e:	4863      	ldr	r0, [pc, #396]	; (80029ac <main+0xd58>)
 8002820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002824:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002826:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002828:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800282a:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800282e:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002830:	60e5      	str	r5, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002832:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002836:	e9c4 0300 	strd	r0, r3, [r4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800283a:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800283e:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <main+0xd5c>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002840:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002842:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  hadc3.Init.NbrOfConversion = 1;
 8002846:	2501      	movs	r5, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002848:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.NbrOfConversion = 1;
 800284a:	61e5      	str	r5, [r4, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800284c:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800284e:	f001 fe35 	bl	80044bc <HAL_ADC_Init>
 8002852:	b108      	cbz	r0, 8002858 <main+0xc04>
 8002854:	b672      	cpsid	i
  while (1)
 8002856:	e7fe      	b.n	8002856 <main+0xc02>
  sConfig.Channel = ADC_CHANNEL_4;
 8002858:	2304      	movs	r3, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800285a:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800285c:	a91f      	add	r1, sp, #124	; 0x7c
 800285e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8002860:	931f      	str	r3, [sp, #124]	; 0x7c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002862:	9520      	str	r5, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002864:	f001 fed8 	bl	8004618 <HAL_ADC_ConfigChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	b108      	cbz	r0, 8002870 <main+0xc1c>
 800286c:	b672      	cpsid	i
  while (1)
 800286e:	e7fe      	b.n	800286e <main+0xc1a>
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002870:	4850      	ldr	r0, [pc, #320]	; (80029b4 <main+0xd60>)
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002872:	e9c0 5303 	strd	r5, r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002876:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002878:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800287c:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800287e:	2308      	movs	r3, #8
 8002880:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002882:	2302      	movs	r3, #2
 8002884:	6183      	str	r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002886:	f002 fe61 	bl	800554c <HAL_HCD_Init>
 800288a:	4604      	mov	r4, r0
 800288c:	b108      	cbz	r0, 8002892 <main+0xc3e>
 800288e:	b672      	cpsid	i
  while (1)
 8002890:	e7fe      	b.n	8002890 <main+0xc3c>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002892:	4a49      	ldr	r2, [pc, #292]	; (80029b8 <main+0xd64>)
  camWriteReg(0x07, 0x80);
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	2007      	movs	r0, #7
      HAL_UART_Transmit(&huart1, "ACK CMD SPI interface Error! END\n", 34, 500);
 8002898:	4d48      	ldr	r5, [pc, #288]	; (80029bc <main+0xd68>)
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a0:	6013      	str	r3, [r2, #0]
  camWriteReg(0x07, 0x80);
 80028a2:	f7fe fd9f 	bl	80013e4 <camWriteReg>
  HAL_Delay(100);
 80028a6:	2064      	movs	r0, #100	; 0x64
 80028a8:	f001 fdf6 	bl	8004498 <HAL_Delay>
  camWriteReg(0x07, 0x00);
 80028ac:	2007      	movs	r0, #7
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fe fd98 	bl	80013e4 <camWriteReg>
  HAL_Delay(100);
 80028b4:	2064      	movs	r0, #100	; 0x64
 80028b6:	f001 fdef 	bl	8004498 <HAL_Delay>
	  camWriteReg(0x00, 0x55);
 80028ba:	2155      	movs	r1, #85	; 0x55
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe fd91 	bl	80013e4 <camWriteReg>
    uint8_t temp = camReadReg(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe fd3a 	bl	800133c <camReadReg>
    if (temp != 0x55){
 80028c8:	2855      	cmp	r0, #85	; 0x55
      HAL_UART_Transmit(&huart1, "ACK CMD SPI interface Error! END\n", 34, 500);
 80028ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    if (temp != 0x55){
 80028ce:	d160      	bne.n	8002992 <main+0xd3e>
      HAL_UART_Transmit(&huart1, "ACK CMD SPI interface OK. END\n", 31, 500);
 80028d0:	221f      	movs	r2, #31
 80028d2:	493b      	ldr	r1, [pc, #236]	; (80029c0 <main+0xd6c>)
 80028d4:	483b      	ldr	r0, [pc, #236]	; (80029c4 <main+0xd70>)
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80028d6:	250a      	movs	r5, #10
 80028d8:	4c3b      	ldr	r4, [pc, #236]	; (80029c8 <main+0xd74>)
      HAL_UART_Transmit(&huart1, "ACK CMD SPI interface OK. END\n", 31, 500);
 80028da:	f008 fa5b 	bl	800ad94 <HAL_UART_Transmit>
  tx_buffer[0] = regID >> 8;
 80028de:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  tx_buffer[2] = (uint8_t)regDat;
 80028e2:	2601      	movs	r6, #1
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80028e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80028e6:	2178      	movs	r1, #120	; 0x78
  tx_buffer[0] = regID >> 8;
 80028e8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80028ec:	4620      	mov	r0, r4
 80028ee:	2303      	movs	r3, #3
 80028f0:	9500      	str	r5, [sp, #0]
  tx_buffer[2] = (uint8_t)regDat;
 80028f2:	f88d 607e 	strb.w	r6, [sp, #126]	; 0x7e
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS,
 80028f6:	f003 fce7 	bl	80062c8 <HAL_I2C_Master_Transmit>
 80028fa:	b910      	cbnz	r0, 8002902 <main+0xcae>
  HAL_Delay(1);
 80028fc:	4630      	mov	r0, r6
 80028fe:	f001 fdcb 	bl	8004498 <HAL_Delay>
  tx_buffer[0] = regID >> 8;
 8002902:	f44f 6323 	mov.w	r3, #2608	; 0xa30
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 8002906:	aa1f      	add	r2, sp, #124	; 0x7c
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	4620      	mov	r0, r4
  tx_buffer[0] = regID >> 8;
 800290c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 8002910:	2302      	movs	r3, #2
 8002912:	9500      	str	r5, [sp, #0]
 8002914:	f003 fcd8 	bl	80062c8 <HAL_I2C_Master_Transmit>
 8002918:	b968      	cbnz	r0, 8002936 <main+0xce2>
  HAL_Delay(1);
 800291a:	2001      	movs	r0, #1
 800291c:	f001 fdbc 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&hi2c1, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 8002920:	2301      	movs	r3, #1
 8002922:	aa14      	add	r2, sp, #80	; 0x50
 8002924:	2179      	movs	r1, #121	; 0x79
 8002926:	4620      	mov	r0, r4
 8002928:	9500      	str	r5, [sp, #0]
 800292a:	f003 fe5f 	bl	80065ec <HAL_I2C_Master_Receive>
 800292e:	b910      	cbnz	r0, 8002936 <main+0xce2>
  HAL_Delay(1);
 8002930:	2001      	movs	r0, #1
 8002932:	f001 fdb1 	bl	8004498 <HAL_Delay>
  tx_buffer[0] = regID >> 8;
 8002936:	f44f 6333 	mov.w	r3, #2864	; 0xb30
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 800293a:	aa1f      	add	r2, sp, #124	; 0x7c
 800293c:	2178      	movs	r1, #120	; 0x78
 800293e:	4620      	mov	r0, r4
  tx_buffer[0] = regID >> 8;
 8002940:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
  if (HAL_I2C_Master_Transmit(&hi2c1, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer, sizeof(tx_buffer), SSCB_TIMEOUT) != HAL_OK)
 8002944:	2302      	movs	r3, #2
 8002946:	9500      	str	r5, [sp, #0]
 8002948:	f003 fcbe 	bl	80062c8 <HAL_I2C_Master_Transmit>
 800294c:	b968      	cbnz	r0, 800296a <main+0xd16>
  HAL_Delay(1);
 800294e:	2001      	movs	r0, #1
 8002950:	f001 fda2 	bl	8004498 <HAL_Delay>
  if (HAL_I2C_Master_Receive(&hi2c1, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 8002954:	2301      	movs	r3, #1
 8002956:	aa18      	add	r2, sp, #96	; 0x60
 8002958:	2179      	movs	r1, #121	; 0x79
 800295a:	4620      	mov	r0, r4
 800295c:	9500      	str	r5, [sp, #0]
 800295e:	f003 fe45 	bl	80065ec <HAL_I2C_Master_Receive>
 8002962:	b910      	cbnz	r0, 800296a <main+0xd16>
  HAL_Delay(1);
 8002964:	2001      	movs	r0, #1
 8002966:	f001 fd97 	bl	8004498 <HAL_Delay>
    if((vid != 0x56) || (pid != 0x42)){
 800296a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800296e:	2b56      	cmp	r3, #86	; 0x56
 8002970:	d103      	bne.n	800297a <main+0xd26>
 8002972:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002976:	2b42      	cmp	r3, #66	; 0x42
 8002978:	d02a      	beq.n	80029d0 <main+0xd7c>
      HAL_UART_Transmit(&huart1, "ACK CMD Can't find OV5642 module! END\n", 39, 500);
 800297a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800297e:	2227      	movs	r2, #39	; 0x27
 8002980:	4912      	ldr	r1, [pc, #72]	; (80029cc <main+0xd78>)
 8002982:	4810      	ldr	r0, [pc, #64]	; (80029c4 <main+0xd70>)
 8002984:	f008 fa06 	bl	800ad94 <HAL_UART_Transmit>
      HAL_Delay(1000);continue;
 8002988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800298c:	f001 fd84 	bl	8004498 <HAL_Delay>
 8002990:	e7a5      	b.n	80028de <main+0xc8a>
      HAL_UART_Transmit(&huart1, "ACK CMD SPI interface Error! END\n", 34, 500);
 8002992:	2222      	movs	r2, #34	; 0x22
 8002994:	4629      	mov	r1, r5
 8002996:	4630      	mov	r0, r6
 8002998:	f008 f9fc 	bl	800ad94 <HAL_UART_Transmit>
      HAL_Delay(1000);continue;
 800299c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a0:	f001 fd7a 	bl	8004498 <HAL_Delay>
  while(1){
 80029a4:	e789      	b.n	80028ba <main+0xc66>
 80029a6:	bf00      	nop
 80029a8:	20019580 	.word	0x20019580
 80029ac:	40012200 	.word	0x40012200
 80029b0:	0f000001 	.word	0x0f000001
 80029b4:	2001972c 	.word	0x2001972c
 80029b8:	40003800 	.word	0x40003800
 80029bc:	080191b4 	.word	0x080191b4
 80029c0:	080191d8 	.word	0x080191d8
 80029c4:	20019fc0 	.word	0x20019fc0
 80029c8:	20019a30 	.word	0x20019a30
 80029cc:	080191f8 	.word	0x080191f8
	HAL_UART_Transmit(&huart1, "ACK CMD OV5642 detected. END\n", 30, 500);
 80029d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029d4:	221e      	movs	r2, #30
 80029d6:	498a      	ldr	r1, [pc, #552]	; (8002c00 <main+0xfac>)
 80029d8:	488a      	ldr	r0, [pc, #552]	; (8002c04 <main+0xfb0>)
 80029da:	f008 f9db 	bl	800ad94 <HAL_UART_Transmit>
  initCam(0);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe fd68 	bl	80014b4 <initCam>
	  wrSensorRegs16_8(ov5642_320x240);
 80029e4:	4888      	ldr	r0, [pc, #544]	; (8002c08 <main+0xfb4>)
 80029e6:	f7fe fd2f 	bl	8001448 <wrSensorRegs16_8>
  HAL_Delay(1000);
 80029ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ee:	f001 fd53 	bl	8004498 <HAL_Delay>
	camWriteReg(0x04, 0x01);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f7fe faca 	bl	8000f8c <camWriteReg.constprop.0>
	camWriteReg(0x01,0x00);
 80029f8:	2100      	movs	r1, #0
 80029fa:	2001      	movs	r0, #1
 80029fc:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8002c3c <main+0xfe8>
 8002a00:	f7fe fcf0 	bl	80013e4 <camWriteReg>
	initCam(2);
 8002a04:	2002      	movs	r0, #2
 8002a06:	f7fe fd55 	bl	80014b4 <initCam>
	temp = camReadReg(addr);
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f7fe fc96 	bl	800133c <camReadReg>
 8002a10:	4601      	mov	r1, r0
	camWriteReg(addr, temp&(~bit));
 8002a12:	2003      	movs	r0, #3
 8002a14:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8002c40 <main+0xfec>
 8002a18:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8002a1c:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8002c44 <main+0xff0>
 8002a20:	f7fe fce0 	bl	80013e4 <camWriteReg>
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002a24:	4f79      	ldr	r7, [pc, #484]	; (8002c0c <main+0xfb8>)
	aiInit();
 8002a26:	f7ff f819 	bl	8001a5c <aiInit>
    BSP_LCD_Init();
 8002a2a:	f000 fc0b 	bl	8003244 <BSP_LCD_Init>
    BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 8002a2e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002a32:	2000      	movs	r0, #0
 8002a34:	f000 f92c 	bl	8002c90 <BSP_LCD_LayerRgb565Init>
						   (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 8002a38:	f000 f912 	bl	8002c60 <BSP_LCD_GetXSize>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	f000 f91b 	bl	8002c78 <BSP_LCD_GetYSize>
 8002a42:	fb00 f104 	mul.w	r1, r0, r4
    BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 8002a46:	2001      	movs	r0, #1
  tmpreg = SPIx->DR;
 8002a48:	4c71      	ldr	r4, [pc, #452]	; (8002c10 <main+0xfbc>)
 8002a4a:	f101 5140 	add.w	r1, r1, #805306368	; 0x30000000
 8002a4e:	0089      	lsls	r1, r1, #2
 8002a50:	f000 f91e 	bl	8002c90 <BSP_LCD_LayerRgb565Init>
    BSP_LCD_DisplayOn();
 8002a54:	f000 fb20 	bl	8003098 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f000 f957 	bl	8002d0c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 8002a5e:	486d      	ldr	r0, [pc, #436]	; (8002c14 <main+0xfc0>)
 8002a60:	f000 f97a 	bl	8002d58 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font16);
 8002a64:	486c      	ldr	r0, [pc, #432]	; (8002c18 <main+0xfc4>)
 8002a66:	f000 f969 	bl	8002d3c <BSP_LCD_SetFont>
    BSP_LCD_SelectLayer(1);
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f000 f94e 	bl	8002d0c <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 8002a70:	4868      	ldr	r0, [pc, #416]	; (8002c14 <main+0xfc0>)
 8002a72:	f000 f971 	bl	8002d58 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002a76:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002a7a:	f000 f953 	bl	8002d24 <BSP_LCD_SetTextColor>
    BSP_LCD_SetTransparency(0, 0);
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4608      	mov	r0, r1
 8002a82:	f000 f949 	bl	8002d18 <BSP_LCD_SetTransparency>
    BSP_LCD_SetTransparency(1, 100);
 8002a86:	2164      	movs	r1, #100	; 0x64
 8002a88:	2001      	movs	r0, #1
 8002a8a:	f000 f945 	bl	8002d18 <BSP_LCD_SetTransparency>
    BSP_LCD_SetFont(&Font16);
 8002a8e:	4862      	ldr	r0, [pc, #392]	; (8002c18 <main+0xfc4>)
 8002a90:	f000 f954 	bl	8002d3c <BSP_LCD_SetFont>
	  time_main = HAL_GetTick();
 8002a94:	f001 fcfa 	bl	800448c <HAL_GetTick>
 8002a98:	4606      	mov	r6, r0
	camWriteReg(0x04, 0x01);
 8002a9a:	2001      	movs	r0, #1
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002a9c:	f04f 0b00 	mov.w	fp, #0
	camWriteReg(0x04, 0x01);
 8002aa0:	f7fe fa74 	bl	8000f8c <camWriteReg.constprop.0>
	camWriteReg(0x04, 0x01);
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7fe fa71 	bl	8000f8c <camWriteReg.constprop.0>
	camWriteReg(0x04, 0x02);
 8002aaa:	2002      	movs	r0, #2
 8002aac:	f7fe fa6e 	bl	8000f8c <camWriteReg.constprop.0>
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	f002 fd45 	bl	8005544 <HAL_GPIO_WritePin>
 8002aba:	68e3      	ldr	r3, [r4, #12]
 8002abc:	9311      	str	r3, [sp, #68]	; 0x44
  (void) tmpreg;
 8002abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  tmpreg = SPIx->SR;
 8002ac0:	68a3      	ldr	r3, [r4, #8]
 8002ac2:	9311      	str	r3, [sp, #68]	; 0x44
  (void) tmpreg;
 8002ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002ac6:	68a3      	ldr	r3, [r4, #8]
 8002ac8:	079b      	lsls	r3, r3, #30
 8002aca:	d5fc      	bpl.n	8002ac6 <main+0xe72>
  *spidr = TxData;
 8002acc:	2341      	movs	r3, #65	; 0x41
 8002ace:	7323      	strb	r3, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	079d      	lsls	r5, r3, #30
 8002ad4:	d5fc      	bpl.n	8002ad0 <main+0xe7c>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002ad6:	68a3      	ldr	r3, [r4, #8]
 8002ad8:	0618      	lsls	r0, r3, #24
 8002ada:	d4fc      	bmi.n	8002ad6 <main+0xe82>
 8002adc:	68a3      	ldr	r3, [r4, #8]
 8002ade:	0619      	lsls	r1, r3, #24
 8002ae0:	d4fc      	bmi.n	8002adc <main+0xe88>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002ae2:	68a3      	ldr	r3, [r4, #8]
 8002ae4:	07da      	lsls	r2, r3, #31
 8002ae6:	d5fc      	bpl.n	8002ae2 <main+0xe8e>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002ae8:	7b23      	ldrb	r3, [r4, #12]
  tmpreg = SPIx->DR;
 8002aea:	68e3      	ldr	r3, [r4, #12]
 8002aec:	9318      	str	r3, [sp, #96]	; 0x60
  (void) tmpreg;
 8002aee:	9b18      	ldr	r3, [sp, #96]	; 0x60
  tmpreg = SPIx->SR;
 8002af0:	68a3      	ldr	r3, [r4, #8]
 8002af2:	9318      	str	r3, [sp, #96]	; 0x60
  (void) tmpreg;
 8002af4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002af6:	68a3      	ldr	r3, [r4, #8]
 8002af8:	079b      	lsls	r3, r3, #30
 8002afa:	d5fc      	bpl.n	8002af6 <main+0xea2>
  *spidr = TxData;
 8002afc:	f884 b00c 	strb.w	fp, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002b00:	68a3      	ldr	r3, [r4, #8]
 8002b02:	079d      	lsls	r5, r3, #30
 8002b04:	d5fc      	bpl.n	8002b00 <main+0xeac>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002b06:	68a3      	ldr	r3, [r4, #8]
 8002b08:	0618      	lsls	r0, r3, #24
 8002b0a:	d4fc      	bmi.n	8002b06 <main+0xeb2>
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	0619      	lsls	r1, r3, #24
 8002b10:	d4fc      	bmi.n	8002b0c <main+0xeb8>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	07da      	lsls	r2, r3, #31
 8002b16:	d5fc      	bpl.n	8002b12 <main+0xebe>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002b18:	7b25      	ldrb	r5, [r4, #12]
  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002b1a:	2201      	movs	r2, #1
  tmpreg = SPIx->DR;
 8002b1c:	68e3      	ldr	r3, [r4, #12]
 8002b1e:	4638      	mov	r0, r7
  return (*((__IO uint8_t *)&SPIx->DR));
 8002b20:	b2ed      	uxtb	r5, r5
 8002b22:	4611      	mov	r1, r2
  tmpreg = SPIx->DR;
 8002b24:	9314      	str	r3, [sp, #80]	; 0x50
  (void) tmpreg;
 8002b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
  tmpreg = SPIx->SR;
 8002b28:	68a3      	ldr	r3, [r4, #8]
 8002b2a:	9314      	str	r3, [sp, #80]	; 0x50
  (void) tmpreg;
 8002b2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b2e:	f002 fd09 	bl	8005544 <HAL_GPIO_WritePin>
	  while(!camReadRegBit(0x41, 0x08));
 8002b32:	072b      	lsls	r3, r5, #28
 8002b34:	d5bc      	bpl.n	8002ab0 <main+0xe5c>
  len1 = camReadReg(0x42);
 8002b36:	2042      	movs	r0, #66	; 0x42
 8002b38:	f7fe fc00 	bl	800133c <camReadReg>
 8002b3c:	4605      	mov	r5, r0
  len2 = camReadReg(0x43);
 8002b3e:	2043      	movs	r0, #67	; 0x43
 8002b40:	f7fe fbfc 	bl	800133c <camReadReg>
 8002b44:	4683      	mov	fp, r0
  len3 = camReadReg(0x44) & 0x7f;
 8002b46:	2044      	movs	r0, #68	; 0x44
 8002b48:	f7fe fbf8 	bl	800133c <camReadReg>
 8002b4c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8002b50:	ea45 250b 	orr.w	r5, r5, fp, lsl #8
  if (length >= 0x7FFFFF || length == 0) {
 8002b54:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <main+0xfc8>)
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8002b56:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  if (length >= 0x7FFFFF || length == 0) {
 8002b5a:	1e6b      	subs	r3, r5, #1
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d801      	bhi.n	8002b64 <main+0xf10>
 8002b60:	f7fe fa44 	bl	8000fec <read_fifo_burst.part.0>
	  time_model = HAL_GetTick();
 8002b64:	f001 fc92 	bl	800448c <HAL_GetTick>
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8002b68:	f8da 1000 	ldr.w	r1, [sl]
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <main+0xfcc>)
	  time_model = HAL_GetTick();
 8002b6e:	4605      	mov	r5, r0
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8002b70:	f8d9 2000 	ldr.w	r2, [r9]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8002b74:	604b      	str	r3, [r1, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <main+0xfd0>)
  n_batch = ai_mnv1_run(network, &ai_input[0], &ai_output[0]);
 8002b78:	f8d8 0000 	ldr.w	r0, [r8]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8002b7c:	6053      	str	r3, [r2, #4]
  n_batch = ai_mnv1_run(network, &ai_input[0], &ai_output[0]);
 8002b7e:	f00a fef7 	bl	800d970 <ai_mnv1_run>
  if (n_batch != 1) {
 8002b82:	2801      	cmp	r0, #1
 8002b84:	d00a      	beq.n	8002b9c <main+0xf48>
      err = ai_mnv1_get_error(network);
 8002b86:	f8d8 0000 	ldr.w	r0, [r8]
 8002b8a:	f00a fe67 	bl	800d85c <ai_mnv1_get_error>
      HAL_UART_Transmit(&huart1, "BATCH NUM ERROR!\n", 18, 500);
 8002b8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b92:	2212      	movs	r2, #18
 8002b94:	4924      	ldr	r1, [pc, #144]	; (8002c28 <main+0xfd4>)
 8002b96:	481b      	ldr	r0, [pc, #108]	; (8002c04 <main+0xfb0>)
 8002b98:	f008 f8fc 	bl	800ad94 <HAL_UART_Transmit>
	  time_model = HAL_GetTick() - time_model;
 8002b9c:	f001 fc76 	bl	800448c <HAL_GetTick>
	  sprintf(out_string, "%d ms", time_model);
 8002ba0:	4922      	ldr	r1, [pc, #136]	; (8002c2c <main+0xfd8>)
 8002ba2:	1b42      	subs	r2, r0, r5
 8002ba4:	a81f      	add	r0, sp, #124	; 0x7c
 8002ba6:	f014 fa1f 	bl	8016fe8 <siprintf>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002baa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002bae:	f000 f8b9 	bl	8002d24 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(0, 146, "Inference:", LEFT_MODE);
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <main+0xfdc>)
 8002bb6:	2192      	movs	r1, #146	; 0x92
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f000 f99d 	bl	8002ef8 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DisplayStringAt(0, 166, out_string, LEFT_MODE);
 8002bbe:	aa1f      	add	r2, sp, #124	; 0x7c
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	21a6      	movs	r1, #166	; 0xa6
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 f997 	bl	8002ef8 <BSP_LCD_DisplayStringAt>
	  process_output();
 8002bca:	f7fe ff79 	bl	8001ac0 <process_output>
	  time_main = HAL_GetTick() - time_main;
 8002bce:	f001 fc5d 	bl	800448c <HAL_GetTick>
	  sprintf(out_string, "FPS: %.2f", 1000.0/time_main);
 8002bd2:	1b80      	subs	r0, r0, r6
 8002bd4:	f7fd fcc6 	bl	8000564 <__aeabi_i2d>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	2000      	movs	r0, #0
 8002bde:	4915      	ldr	r1, [pc, #84]	; (8002c34 <main+0xfe0>)
 8002be0:	f7fd fe54 	bl	800088c <__aeabi_ddiv>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	a81f      	add	r0, sp, #124	; 0x7c
 8002bea:	4913      	ldr	r1, [pc, #76]	; (8002c38 <main+0xfe4>)
 8002bec:	f014 f9fc 	bl	8016fe8 <siprintf>
	  BSP_LCD_DisplayStringAt(0, 126, out_string, LEFT_MODE);
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	aa1f      	add	r2, sp, #124	; 0x7c
 8002bf4:	217e      	movs	r1, #126	; 0x7e
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f000 f97e 	bl	8002ef8 <BSP_LCD_DisplayStringAt>
  {
 8002bfc:	e74a      	b.n	8002a94 <main+0xe40>
 8002bfe:	bf00      	nop
 8002c00:	08019220 	.word	0x08019220
 8002c04:	20019fc0 	.word	0x20019fc0
 8002c08:	0801a110 	.word	0x0801a110
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40003800 	.word	0x40003800
 8002c14:	ff0000ff 	.word	0xff0000ff
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	007ffffd 	.word	0x007ffffd
 8002c20:	2001a0e0 	.word	0x2001a0e0
 8002c24:	20026100 	.word	0x20026100
 8002c28:	0801919c 	.word	0x0801919c
 8002c2c:	08019240 	.word	0x08019240
 8002c30:	08019248 	.word	0x08019248
 8002c34:	408f4000 	.word	0x408f4000
 8002c38:	08019254 	.word	0x08019254
 8002c3c:	20019578 	.word	0x20019578
 8002c40:	2001957c 	.word	0x2001957c
 8002c44:	200260e0 	.word	0x200260e0

08002c48 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002c4a:	6802      	ldr	r2, [r0, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d000      	beq.n	8002c52 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8002c50:	4770      	bx	lr
    HAL_IncTick();
 8002c52:	f001 bc0f 	b.w	8004474 <HAL_IncTick>
 8002c56:	bf00      	nop
 8002c58:	40001000 	.word	0x40001000

08002c5c <Error_Handler>:
 8002c5c:	b672      	cpsid	i
  while (1)
 8002c5e:	e7fe      	b.n	8002c5e <Error_Handler+0x2>

08002c60 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <BSP_LCD_GetXSize+0x10>)
 8002c62:	2134      	movs	r1, #52	; 0x34
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <BSP_LCD_GetXSize+0x14>)
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002c6c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002c6e:	4770      	bx	lr
 8002c70:	2002611c 	.word	0x2002611c
 8002c74:	20026178 	.word	0x20026178

08002c78 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <BSP_LCD_GetYSize+0x10>)
 8002c7a:	2134      	movs	r1, #52	; 0x34
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <BSP_LCD_GetYSize+0x14>)
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002c84:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8002c86:	4770      	bx	lr
 8002c88:	2002611c 	.word	0x2002611c
 8002c8c:	20026178 	.word	0x20026178

08002c90 <BSP_LCD_LayerRgb565Init>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <BSP_LCD_LayerRgb565Init+0x6c>)
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c92:	b530      	push	{r4, r5, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002c94:	681a      	ldr	r2, [r3, #0]
{     
 8002c96:	b08f      	sub	sp, #60	; 0x3c
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002c98:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002c9a:	4d19      	ldr	r5, [pc, #100]	; (8002d00 <BSP_LCD_LayerRgb565Init+0x70>)
 8002c9c:	2434      	movs	r4, #52	; 0x34
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
  layer_cfg.FBStartAdress = FB_Address;
 8002c9e:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.WindowX0 = 0;
 8002ca0:	9301      	str	r3, [sp, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002ca2:	fb04 5c02 	mla	ip, r4, r2, r5
  layer_cfg.Alpha = 255;
 8002ca6:	22ff      	movs	r2, #255	; 0xff
  layer_cfg.WindowY0 = 0;
 8002ca8:	9303      	str	r3, [sp, #12]
{     
 8002caa:	4604      	mov	r4, r0
  layer_cfg.Alpha0 = 0;
 8002cac:	9307      	str	r3, [sp, #28]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002cae:	4628      	mov	r0, r5
  layer_cfg.Backcolor.Blue = 0;
 8002cb0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 8002cb4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002cb8:	2307      	movs	r3, #7
  layer_cfg.Alpha = 255;
 8002cba:	9206      	str	r2, [sp, #24]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002cbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002cc0:	9309      	str	r3, [sp, #36]	; 0x24
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002cc2:	9208      	str	r2, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002cc4:	4622      	mov	r2, r4

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002cc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002cca:	e9dc 1318 	ldrd	r1, r3, [ip, #96]	; 0x60
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002cce:	9304      	str	r3, [sp, #16]
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002cd0:	930c      	str	r3, [sp, #48]	; 0x30
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002cd2:	2302      	movs	r3, #2
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002cd4:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002cd6:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002cd8:	a901      	add	r1, sp, #4
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002cda:	9305      	str	r3, [sp, #20]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002cdc:	f003 fe88 	bl	80069f0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <BSP_LCD_LayerRgb565Init+0x74>)
 8002ce2:	f04f 31ff 	mov.w	r1, #4294967295
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ce6:	4808      	ldr	r0, [pc, #32]	; (8002d08 <BSP_LCD_LayerRgb565Init+0x78>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ce8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8002cec:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002cee:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
  DrawProp[LayerIndex].pFont     = &Font24;
 8002cf2:	6090      	str	r0, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002cf4:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
}
 8002cf8:	b00f      	add	sp, #60	; 0x3c
 8002cfa:	bd30      	pop	{r4, r5, pc}
 8002cfc:	2002611c 	.word	0x2002611c
 8002d00:	20026178 	.word	0x20026178
 8002d04:	20026120 	.word	0x20026120
 8002d08:	2000000c 	.word	0x2000000c

08002d0c <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 8002d0c:	4b01      	ldr	r3, [pc, #4]	; (8002d14 <BSP_LCD_SelectLayer+0x8>)
 8002d0e:	6018      	str	r0, [r3, #0]
} 
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	2002611c 	.word	0x2002611c

08002d18 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8002d18:	4602      	mov	r2, r0
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8002d1a:	4801      	ldr	r0, [pc, #4]	; (8002d20 <BSP_LCD_SetTransparency+0x8>)
 8002d1c:	f003 bf3a 	b.w	8006b94 <HAL_LTDC_SetAlpha>
 8002d20:	20026178 	.word	0x20026178

08002d24 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <BSP_LCD_SetTextColor+0x10>)
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <BSP_LCD_SetTextColor+0x14>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002d32:	4770      	bx	lr
 8002d34:	2002611c 	.word	0x2002611c
 8002d38:	20026120 	.word	0x20026120

08002d3c <BSP_LCD_SetFont>:
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <BSP_LCD_SetFont+0x14>)
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <BSP_LCD_SetFont+0x18>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002d4a:	6090      	str	r0, [r2, #8]
}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	2002611c 	.word	0x2002611c
 8002d54:	20026120 	.word	0x20026120

08002d58 <BSP_LCD_Clear>:
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d58:	491e      	ldr	r1, [pc, #120]	; (8002dd4 <BSP_LCD_Clear+0x7c>)
 8002d5a:	2234      	movs	r2, #52	; 0x34
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <BSP_LCD_Clear+0x80>)
{ 
 8002d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d62:	f8d1 9000 	ldr.w	r9, [r1]
{ 
 8002d66:	b083      	sub	sp, #12
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002d68:	4c1c      	ldr	r4, [pc, #112]	; (8002ddc <BSP_LCD_Clear+0x84>)
{ 
 8002d6a:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d6c:	fb02 3309 	mla	r3, r2, r9, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002d70:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002d74:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002d78:	e9d3 6717 	ldrd	r6, r7, [r3, #92]	; 0x5c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d7c:	f1a2 0302 	sub.w	r3, r2, #2
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	60a3      	str	r3, [r4, #8]
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002d8a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002d8e:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002d90:	2300      	movs	r3, #0
 8002d92:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <BSP_LCD_Clear+0x88>)
 8002d96:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002d98:	f001 ff64 	bl	8004c64 <HAL_DMA2D_Init>
 8002d9c:	b110      	cbz	r0, 8002da4 <BSP_LCD_Clear+0x4c>
}
 8002d9e:	b003      	add	sp, #12
 8002da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002da4:	4649      	mov	r1, r9
 8002da6:	4620      	mov	r0, r4
 8002da8:	f002 f914 	bl	8004fd4 <HAL_DMA2D_ConfigLayer>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d1f6      	bne.n	8002d9e <BSP_LCD_Clear+0x46>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002db0:	463b      	mov	r3, r7
 8002db2:	4632      	mov	r2, r6
 8002db4:	4629      	mov	r1, r5
 8002db6:	4620      	mov	r0, r4
 8002db8:	f8cd 8000 	str.w	r8, [sp]
 8002dbc:	f001 ff80 	bl	8004cc0 <HAL_DMA2D_Start>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d1ec      	bne.n	8002d9e <BSP_LCD_Clear+0x46>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002dc4:	210a      	movs	r1, #10
 8002dc6:	4620      	mov	r0, r4
}
 8002dc8:	b003      	add	sp, #12
 8002dca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002dce:	f001 bfcd 	b.w	8004d6c <HAL_DMA2D_PollForTransfer>
 8002dd2:	bf00      	nop
 8002dd4:	2002611c 	.word	0x2002611c
 8002dd8:	20026178 	.word	0x20026178
 8002ddc:	20026138 	.word	0x20026138
 8002de0:	4002b000 	.word	0x4002b000

08002de4 <BSP_LCD_DisplayChar>:
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002de4:	4b41      	ldr	r3, [pc, #260]	; (8002eec <BSP_LCD_DisplayChar+0x108>)
 8002de6:	3a20      	subs	r2, #32
{
 8002de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dec:	681b      	ldr	r3, [r3, #0]
{
 8002dee:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002df0:	4d3f      	ldr	r5, [pc, #252]	; (8002ef0 <BSP_LCD_DisplayChar+0x10c>)
{
 8002df2:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002df4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
{
 8002df8:	9005      	str	r0, [sp, #20]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dfa:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8002dfe:	68a9      	ldr	r1, [r5, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e00:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8002e04:	88cc      	ldrh	r4, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e06:	6808      	ldr	r0, [r1, #0]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e08:	f10b 0107 	add.w	r1, fp, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e0c:	fb04 f202 	mul.w	r2, r4, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e10:	ea4f 09e1 	mov.w	r9, r1, asr #3
 8002e14:	9402      	str	r4, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 8002e16:	ebcb 01c9 	rsb	r1, fp, r9, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e1a:	fb09 f202 	mul.w	r2, r9, r2
  offset =  8 *((width + 7)/8) -  width ;
 8002e1e:	b2c9      	uxtb	r1, r1
 8002e20:	9104      	str	r1, [sp, #16]
  for(i = 0; i < height; i++)
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d057      	beq.n	8002ed6 <BSP_LCD_DisplayChar+0xf2>
 8002e26:	2700      	movs	r7, #0
 8002e28:	4c32      	ldr	r4, [pc, #200]	; (8002ef4 <BSP_LCD_DisplayChar+0x110>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e2a:	2134      	movs	r1, #52	; 0x34
 8002e2c:	eb00 0802 	add.w	r8, r0, r2
  for(i = 0; i < height; i++)
 8002e30:	46ae      	mov	lr, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e32:	fb01 4403 	mla	r4, r1, r3, r4
  for(i = 0; i < height; i++)
 8002e36:	463b      	mov	r3, r7
 8002e38:	46c2      	mov	sl, r8
 8002e3a:	465f      	mov	r7, fp
 8002e3c:	46cb      	mov	fp, r9
 8002e3e:	4699      	mov	r9, r3
 8002e40:	9b03      	ldr	r3, [sp, #12]
    switch(((width + 7)/8))
 8002e42:	f1bb 0f01 	cmp.w	fp, #1
 8002e46:	eb03 0009 	add.w	r0, r3, r9
 8002e4a:	b280      	uxth	r0, r0
 8002e4c:	d046      	beq.n	8002edc <BSP_LCD_DisplayChar+0xf8>
 8002e4e:	f1bb 0f02 	cmp.w	fp, #2
 8002e52:	d046      	beq.n	8002ee2 <BSP_LCD_DisplayChar+0xfe>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002e54:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8002e58:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5c:	0209      	lsls	r1, r1, #8
 8002e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002e62:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8002e66:	4319      	orrs	r1, r3
    for (j = 0; j < width; j++)
 8002e68:	b37f      	cbz	r7, 8002eca <BSP_LCD_DisplayChar+0xe6>
 8002e6a:	1e7a      	subs	r2, r7, #1
 8002e6c:	9b04      	ldr	r3, [sp, #16]
 8002e6e:	9701      	str	r7, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8002e70:	f04f 0c01 	mov.w	ip, #1
 8002e74:	441a      	add	r2, r3
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002e76:	9b05      	ldr	r3, [sp, #20]
 8002e78:	1bd6      	subs	r6, r2, r7
 8002e7a:	4607      	mov	r7, r0
 8002e7c:	e00e      	b.n	8002e9c <BSP_LCD_DisplayChar+0xb8>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e7e:	2802      	cmp	r0, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002e80:	f8de 8000 	ldr.w	r8, [lr]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002e84:	6e20      	ldr	r0, [r4, #96]	; 0x60
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e86:	d013      	beq.n	8002eb0 <BSP_LCD_DisplayChar+0xcc>
    for (j = 0; j < width; j++)
 8002e88:	3a01      	subs	r2, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e8a:	fb00 3007 	mla	r0, r0, r7, r3
 8002e8e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    for (j = 0; j < width; j++)
 8002e90:	3301      	adds	r3, #1
 8002e92:	42b2      	cmp	r2, r6
 8002e94:	b29b      	uxth	r3, r3
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e96:	f845 8020 	str.w	r8, [r5, r0, lsl #2]
    for (j = 0; j < width; j++)
 8002e9a:	d015      	beq.n	8002ec8 <BSP_LCD_DisplayChar+0xe4>
      if(line & (1 << (width- j + offset- 1))) 
 8002e9c:	fa0c f002 	lsl.w	r0, ip, r2
 8002ea0:	4208      	tst	r0, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ea2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
      if(line & (1 << (width- j + offset- 1))) 
 8002ea4:	d1eb      	bne.n	8002e7e <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ea6:	2802      	cmp	r0, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002ea8:	f8de 8004 	ldr.w	r8, [lr, #4]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002eac:	6e20      	ldr	r0, [r4, #96]	; 0x60
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002eae:	d1eb      	bne.n	8002e88 <BSP_LCD_DisplayChar+0xa4>
    for (j = 0; j < width; j++)
 8002eb0:	3a01      	subs	r2, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002eb2:	fb00 3007 	mla	r0, r0, r7, r3
 8002eb6:	fa1f f888 	uxth.w	r8, r8
 8002eba:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    for (j = 0; j < width; j++)
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	42b2      	cmp	r2, r6
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002ec0:	f825 8010 	strh.w	r8, [r5, r0, lsl #1]
    for (j = 0; j < width; j++)
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	d1e9      	bne.n	8002e9c <BSP_LCD_DisplayChar+0xb8>
 8002ec8:	9f01      	ldr	r7, [sp, #4]
  for(i = 0; i < height; i++)
 8002eca:	f109 0901 	add.w	r9, r9, #1
 8002ece:	9b02      	ldr	r3, [sp, #8]
 8002ed0:	44da      	add	sl, fp
 8002ed2:	454b      	cmp	r3, r9
 8002ed4:	d1b4      	bne.n	8002e40 <BSP_LCD_DisplayChar+0x5c>
}
 8002ed6:	b007      	add	sp, #28
 8002ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  pchar[0];      
 8002edc:	f89a 1000 	ldrb.w	r1, [sl]
      break;
 8002ee0:	e7c2      	b.n	8002e68 <BSP_LCD_DisplayChar+0x84>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002ee2:	f8ba 1000 	ldrh.w	r1, [sl]
 8002ee6:	ba49      	rev16	r1, r1
 8002ee8:	b289      	uxth	r1, r1
      break;
 8002eea:	e7bd      	b.n	8002e68 <BSP_LCD_DisplayChar+0x84>
 8002eec:	2002611c 	.word	0x2002611c
 8002ef0:	20026120 	.word	0x20026120
 8002ef4:	20026178 	.word	0x20026178

08002ef8 <BSP_LCD_DisplayStringAt>:
{
 8002ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002efc:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 8002efe:	4611      	mov	r1, r2
{
 8002f00:	4615      	mov	r5, r2
 8002f02:	4604      	mov	r4, r0
  while (*ptr++) size ++ ;
 8002f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d04b      	beq.n	8002fa4 <BSP_LCD_DisplayStringAt+0xac>
  uint32_t size = 0, xsize = 0; 
 8002f0c:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 8002f0e:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002f12:	3001      	adds	r0, #1
 8002f14:	2e00      	cmp	r6, #0
 8002f16:	d1fa      	bne.n	8002f0e <BSP_LCD_DisplayStringAt+0x16>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f18:	4923      	ldr	r1, [pc, #140]	; (8002fa8 <BSP_LCD_DisplayStringAt+0xb0>)
 8002f1a:	2634      	movs	r6, #52	; 0x34
 8002f1c:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002fb0 <BSP_LCD_DisplayStringAt+0xb8>
  switch (Mode)
 8002f20:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f22:	f8d1 c000 	ldr.w	ip, [r1]
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f26:	4921      	ldr	r1, [pc, #132]	; (8002fac <BSP_LCD_DisplayStringAt+0xb4>)
 8002f28:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f2c:	fb06 e60c 	mla	r6, r6, ip, lr
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f30:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f34:	6e36      	ldr	r6, [r6, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f36:	688f      	ldr	r7, [r1, #8]
 8002f38:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8002f3c:	fbb6 f1f8 	udiv	r1, r6, r8
  switch (Mode)
 8002f40:	d029      	beq.n	8002f96 <BSP_LCD_DisplayStringAt+0x9e>
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d104      	bne.n	8002f50 <BSP_LCD_DisplayStringAt+0x58>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f46:	1a09      	subs	r1, r1, r0
 8002f48:	fb11 f108 	smulbb	r1, r1, r8
 8002f4c:	1b09      	subs	r1, r1, r4
 8002f4e:	b28c      	uxth	r4, r1
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002f50:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f52:	b2b6      	uxth	r6, r6
    ref_column = 1;
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bfd8      	it	le
 8002f58:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f5a:	45b0      	cmp	r8, r6
 8002f5c:	d819      	bhi.n	8002f92 <BSP_LCD_DisplayStringAt+0x9a>
 8002f5e:	b1c2      	cbz	r2, 8002f92 <BSP_LCD_DisplayStringAt+0x9a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002f60:	2334      	movs	r3, #52	; 0x34
 8002f62:	f1c5 0801 	rsb	r8, r5, #1
 8002f66:	fb03 e60c 	mla	r6, r3, ip, lr
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	f7ff ff39 	bl	8002de4 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002f72:	eb08 0005 	add.w	r0, r8, r5
 8002f76:	88b9      	ldrh	r1, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f78:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8002f7a:	b280      	uxth	r0, r0
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002f7c:	440c      	add	r4, r1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f7e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002f82:	fb01 3310 	mls	r3, r1, r0, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002f86:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	428b      	cmp	r3, r1
 8002f8c:	d301      	bcc.n	8002f92 <BSP_LCD_DisplayStringAt+0x9a>
 8002f8e:	2a00      	cmp	r2, #0
 8002f90:	d1eb      	bne.n	8002f6a <BSP_LCD_DisplayStringAt+0x72>
}
 8002f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002f96:	1a09      	subs	r1, r1, r0
 8002f98:	fb08 f101 	mul.w	r1, r8, r1
 8002f9c:	eb04 0151 	add.w	r1, r4, r1, lsr #1
 8002fa0:	b28c      	uxth	r4, r1
      break;
 8002fa2:	e7d5      	b.n	8002f50 <BSP_LCD_DisplayStringAt+0x58>
  uint32_t size = 0, xsize = 0; 
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	e7b7      	b.n	8002f18 <BSP_LCD_DisplayStringAt+0x20>
 8002fa8:	2002611c 	.word	0x2002611c
 8002fac:	20026120 	.word	0x20026120
 8002fb0:	20026178 	.word	0x20026178

08002fb4 <BSP_LCD_DrawPixel>:
{
 8002fb4:	b410      	push	{r4}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <BSP_LCD_DrawPixel+0x38>)
 8002fb8:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <BSP_LCD_DrawPixel+0x3c>)
 8002fbe:	6824      	ldr	r4, [r4, #0]
 8002fc0:	fb0c 3304 	mla	r3, ip, r4, r3
 8002fc4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002fc6:	2c02      	cmp	r4, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002fc8:	e9d3 3417 	ldrd	r3, r4, [r3, #92]	; 0x5c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002fcc:	d006      	beq.n	8002fdc <BSP_LCD_DrawPixel+0x28>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002fce:	fb04 0001 	mla	r0, r4, r1, r0
}
 8002fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002fd6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8002fda:	4770      	bx	lr
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002fdc:	fb04 0001 	mla	r0, r4, r1, r0
 8002fe0:	b292      	uxth	r2, r2
}
 8002fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002fe6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8002fea:	4770      	bx	lr
 8002fec:	2002611c 	.word	0x2002611c
 8002ff0:	20026178 	.word	0x20026178

08002ff4 <BSP_LCD_FillRect>:
{
 8002ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ff8:	4c22      	ldr	r4, [pc, #136]	; (8003084 <BSP_LCD_FillRect+0x90>)
{
 8002ffa:	461f      	mov	r7, r3
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ffc:	2334      	movs	r3, #52	; 0x34
{
 8002ffe:	4616      	mov	r6, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003000:	f8d4 9000 	ldr.w	r9, [r4]
{
 8003004:	b082      	sub	sp, #8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003006:	4c20      	ldr	r4, [pc, #128]	; (8003088 <BSP_LCD_FillRect+0x94>)
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003008:	eb09 0249 	add.w	r2, r9, r9, lsl #1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800300c:	fb03 4409 	mla	r4, r3, r9, r4
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003010:	4b1e      	ldr	r3, [pc, #120]	; (800308c <BSP_LCD_FillRect+0x98>)
 8003012:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003016:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003018:	6e25      	ldr	r5, [r4, #96]	; 0x60
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800301a:	2a02      	cmp	r2, #2
 800301c:	d015      	beq.n	800304a <BSP_LCD_FillRect+0x56>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800301e:	fb05 0001 	mla	r0, r5, r1, r0
 8003022:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003024:	1bad      	subs	r5, r5, r6
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003026:	2200      	movs	r2, #0
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003028:	eb03 0a80 	add.w	sl, r3, r0, lsl #2
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800302c:	4c18      	ldr	r4, [pc, #96]	; (8003090 <BSP_LCD_FillRect+0x9c>)
  hDma2dHandler.Instance = DMA2D;
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <BSP_LCD_FillRect+0xa0>)
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003030:	4620      	mov	r0, r4
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003032:	e9c4 2502 	strd	r2, r5, [r4, #8]
  hDma2dHandler.Instance = DMA2D;
 8003036:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800303a:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800303e:	f001 fe11 	bl	8004c64 <HAL_DMA2D_Init>
 8003042:	b148      	cbz	r0, 8003058 <BSP_LCD_FillRect+0x64>
}
 8003044:	b002      	add	sp, #8
 8003046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800304a:	fb05 0101 	mla	r1, r5, r1, r0
 800304e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003050:	1bad      	subs	r5, r5, r6
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003052:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003056:	e7e9      	b.n	800302c <BSP_LCD_FillRect+0x38>
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003058:	4649      	mov	r1, r9
 800305a:	4620      	mov	r0, r4
 800305c:	f001 ffba 	bl	8004fd4 <HAL_DMA2D_ConfigLayer>
 8003060:	2800      	cmp	r0, #0
 8003062:	d1ef      	bne.n	8003044 <BSP_LCD_FillRect+0x50>
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003064:	4633      	mov	r3, r6
 8003066:	4652      	mov	r2, sl
 8003068:	4641      	mov	r1, r8
 800306a:	4620      	mov	r0, r4
 800306c:	9700      	str	r7, [sp, #0]
 800306e:	f001 fe27 	bl	8004cc0 <HAL_DMA2D_Start>
 8003072:	2800      	cmp	r0, #0
 8003074:	d1e6      	bne.n	8003044 <BSP_LCD_FillRect+0x50>
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003076:	210a      	movs	r1, #10
 8003078:	4620      	mov	r0, r4
}
 800307a:	b002      	add	sp, #8
 800307c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003080:	f001 be74 	b.w	8004d6c <HAL_DMA2D_PollForTransfer>
 8003084:	2002611c 	.word	0x2002611c
 8003088:	20026178 	.word	0x20026178
 800308c:	20026120 	.word	0x20026120
 8003090:	20026138 	.word	0x20026138
 8003094:	4002b000 	.word	0x4002b000

08003098 <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800309a:	2201      	movs	r2, #1
 800309c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a0:	4808      	ldr	r0, [pc, #32]	; (80030c4 <BSP_LCD_DisplayOn+0x2c>)
{
 80030a2:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80030a4:	681c      	ldr	r4, [r3, #0]
 80030a6:	69a3      	ldr	r3, [r4, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80030ac:	f002 fa4a 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80030b0:	2201      	movs	r2, #1
 80030b2:	2108      	movs	r1, #8
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <BSP_LCD_DisplayOn+0x30>)
}
 80030b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80030ba:	f002 ba43 	b.w	8005544 <HAL_GPIO_WritePin>
 80030be:	bf00      	nop
 80030c0:	20026178 	.word	0x20026178
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40022800 	.word	0x40022800

080030cc <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030cc:	4b4e      	ldr	r3, [pc, #312]	; (8003208 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030ce:	2102      	movs	r1, #2
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80030d0:	484e      	ldr	r0, [pc, #312]	; (800320c <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80030d8:	b530      	push	{r4, r5, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030da:	645a      	str	r2, [r3, #68]	; 0x44
{
 80030dc:	b091      	sub	sp, #68	; 0x44
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80030e0:	240e      	movs	r4, #14
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80030e2:	4d4b      	ldr	r5, [pc, #300]	; (8003210 <BSP_LCD_MspInit+0x144>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030e4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80030e8:	9201      	str	r2, [sp, #4]
 80030ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80030ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
 80030f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003100:	f042 0210 	orr.w	r2, r2, #16
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	f002 0210 	and.w	r2, r2, #16
 800310c:	9203      	str	r2, [sp, #12]
 800310e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800311e:	9204      	str	r2, [sp, #16]
 8003120:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
 800312a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003130:	9205      	str	r2, [sp, #20]
 8003132:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
 800313c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003142:	9206      	str	r2, [sp, #24]
 8003144:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
 800314e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003150:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003154:	9207      	str	r2, [sp, #28]
 8003156:	9a07      	ldr	r2, [sp, #28]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
 8003160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003162:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003166:	9208      	str	r2, [sp, #32]
 8003168:	9a08      	ldr	r2, [sp, #32]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800316a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003174:	910b      	str	r1, [sp, #44]	; 0x2c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800317a:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800317c:	a90a      	add	r1, sp, #40	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800317e:	940e      	str	r4, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003180:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003182:	2310      	movs	r3, #16
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003184:	9a09      	ldr	r2, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003186:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800318c:	f002 f8a2 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003190:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003194:	2102      	movs	r1, #2
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003196:	2309      	movs	r3, #9
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003198:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800319c:	a90a      	add	r1, sp, #40	; 0x28
 800319e:	481d      	ldr	r0, [pc, #116]	; (8003214 <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80031a0:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80031a2:	f002 f897 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80031a6:	f44f 4246 	mov.w	r2, #50688	; 0xc600
 80031aa:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80031ac:	a90a      	add	r1, sp, #40	; 0x28
 80031ae:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80031b0:	940e      	str	r4, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80031b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80031b6:	f002 f88d 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80031ba:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80031be:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80031c0:	a90a      	add	r1, sp, #40	; 0x28
 80031c2:	4815      	ldr	r0, [pc, #84]	; (8003218 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80031c4:	940e      	str	r4, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80031c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80031ca:	f002 f883 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80031ce:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80031d0:	4c12      	ldr	r4, [pc, #72]	; (800321c <BSP_LCD_MspInit+0x150>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80031d2:	22f7      	movs	r2, #247	; 0xf7
 80031d4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80031d6:	a90a      	add	r1, sp, #40	; 0x28
 80031d8:	4620      	mov	r0, r4
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80031da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80031de:	f002 f879 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80031e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031e6:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80031e8:	4628      	mov	r0, r5
 80031ea:	a90a      	add	r1, sp, #40	; 0x28
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80031ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80031f0:	f002 f870 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80031f4:	2208      	movs	r2, #8
 80031f6:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80031f8:	a90a      	add	r1, sp, #40	; 0x28
 80031fa:	4620      	mov	r0, r4
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80031fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003200:	f002 f868 	bl	80052d4 <HAL_GPIO_Init>
}
 8003204:	b011      	add	sp, #68	; 0x44
 8003206:	bd30      	pop	{r4, r5, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	40021000 	.word	0x40021000
 8003210:	40022000 	.word	0x40022000
 8003214:	40021800 	.word	0x40021800
 8003218:	40022400 	.word	0x40022400
 800321c:	40022800 	.word	0x40022800

08003220 <BSP_LCD_ClockConfig>:
{
 8003220:	b410      	push	{r4}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003222:	4807      	ldr	r0, [pc, #28]	; (8003240 <BSP_LCD_ClockConfig+0x20>)
 8003224:	2408      	movs	r4, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003226:	21c0      	movs	r1, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003228:	2205      	movs	r2, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800322a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800322e:	6004      	str	r4, [r0, #0]
}
 8003230:	f85d 4b04 	ldr.w	r4, [sp], #4
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003234:	6141      	str	r1, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003236:	61c2      	str	r2, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003238:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800323a:	f004 b935 	b.w	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 800323e:	bf00      	nop
 8003240:	20026220 	.word	0x20026220

08003244 <BSP_LCD_Init>:
{    
 8003244:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003246:	2028      	movs	r0, #40	; 0x28
 8003248:	4c25      	ldr	r4, [pc, #148]	; (80032e0 <BSP_LCD_Init+0x9c>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800324a:	2109      	movs	r1, #9
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800324c:	2235      	movs	r2, #53	; 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800324e:	230b      	movs	r3, #11
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003250:	e9c4 0105 	strd	r0, r1, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003254:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003258:	f240 2115 	movw	r1, #533	; 0x215
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800325c:	e9c4 2307 	strd	r2, r3, [r4, #28]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003260:	f240 121d 	movw	r2, #285	; 0x11d
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003264:	f240 2335 	movw	r3, #565	; 0x235
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003268:	e9c4 1009 	strd	r1, r0, [r4, #36]	; 0x24
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800326c:	2100      	movs	r1, #0
 800326e:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003270:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003274:	f7ff ffd4 	bl	8003220 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003278:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800327c:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800327e:	f44f 7188 	mov.w	r1, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <BSP_LCD_Init+0xa0>)
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003284:	6620      	str	r0, [r4, #96]	; 0x60
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003286:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003288:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800328a:	6661      	str	r1, [r4, #100]	; 0x64
  hLtdcHandler.Init.Backcolor.Red = 0;
 800328c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.Instance = LTDC;
 8003290:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003292:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003296:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800329a:	f003 fd25 	bl	8006ce8 <HAL_LTDC_GetState>
 800329e:	b1d0      	cbz	r0, 80032d6 <BSP_LCD_Init+0x92>
  HAL_LTDC_Init(&hLtdcHandler);
 80032a0:	480f      	ldr	r0, [pc, #60]	; (80032e0 <BSP_LCD_Init+0x9c>)
 80032a2:	f003 facf 	bl	8006844 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80032a6:	2201      	movs	r2, #1
 80032a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ac:	480e      	ldr	r0, [pc, #56]	; (80032e8 <BSP_LCD_Init+0xa4>)
 80032ae:	f002 f949 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80032b2:	2201      	movs	r2, #1
 80032b4:	2108      	movs	r1, #8
 80032b6:	480d      	ldr	r0, [pc, #52]	; (80032ec <BSP_LCD_Init+0xa8>)
 80032b8:	f002 f944 	bl	8005544 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80032bc:	f000 f926 	bl	800350c <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <BSP_LCD_Init+0xac>)
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <BSP_LCD_Init+0xb0>)
}
 80032c4:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	490b      	ldr	r1, [pc, #44]	; (80032f8 <BSP_LCD_Init+0xb4>)
 80032ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80032d2:	6099      	str	r1, [r3, #8]
}
 80032d4:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80032d6:	4601      	mov	r1, r0
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fef7 	bl	80030cc <BSP_LCD_MspInit>
 80032de:	e7df      	b.n	80032a0 <BSP_LCD_Init+0x5c>
 80032e0:	20026178 	.word	0x20026178
 80032e4:	40016800 	.word	0x40016800
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022800 	.word	0x40022800
 80032f0:	2002611c 	.word	0x2002611c
 80032f4:	20026120 	.word	0x20026120
 80032f8:	2000000c 	.word	0x2000000c

080032fc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80032fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003300:	4c22      	ldr	r4, [pc, #136]	; (800338c <BSP_SDRAM_Initialization_sequence+0x90>)
{
 8003302:	b083      	sub	sp, #12
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003304:	4d22      	ldr	r5, [pc, #136]	; (8003390 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003306:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8003308:	2700      	movs	r7, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800330a:	f04f 0910 	mov.w	r9, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800330e:	4621      	mov	r1, r4
{
 8003310:	4680      	mov	r8, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003316:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003318:	9701      	str	r7, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800331a:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800331c:	f8c4 9004 	str.w	r9, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8003320:	e9c4 6702 	strd	r6, r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003324:	f006 faf4 	bl	8009910 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003328:	4630      	mov	r0, r6
 800332a:	f001 f8b5 	bl	8004498 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800332e:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003330:	4621      	mov	r1, r4
 8003332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003336:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003338:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 800333a:	60e7      	str	r7, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 800333c:	e9c4 9601 	strd	r9, r6, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003340:	f006 fae6 	bl	8009910 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003344:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003346:	4621      	mov	r1, r4
 8003348:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800334c:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 8;
 800334e:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003350:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003352:	f8c4 9004 	str.w	r9, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8003356:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8003358:	60e7      	str	r7, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800335a:	f006 fad9 	bl	8009910 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800335e:	f44f 7308 	mov.w	r3, #544	; 0x220
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003362:	2204      	movs	r2, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003364:	4621      	mov	r1, r4
 8003366:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003368:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800336a:	2310      	movs	r3, #16
  Command.AutoRefreshNumber      = 1;
 800336c:	60a6      	str	r6, [r4, #8]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800336e:	e9c4 2300 	strd	r2, r3, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003372:	9b01      	ldr	r3, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003374:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.ModeRegisterDefinition = tmpmrd;
 8003378:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800337a:	f006 fac9 	bl	8009910 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800337e:	4641      	mov	r1, r8
 8003380:	4628      	mov	r0, r5
}
 8003382:	b003      	add	sp, #12
 8003384:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003388:	f006 bae2 	b.w	8009950 <HAL_SDRAM_ProgramRefreshRate>
 800338c:	200262a8 	.word	0x200262a8
 8003390:	20026334 	.word	0x20026334

08003394 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003394:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <BSP_SDRAM_MspInit+0x154>)
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003396:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8003398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339a:	f042 0201 	orr.w	r2, r2, #1
{  
 800339e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
{  
 80033a2:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 80033a6:	4606      	mov	r6, r0
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80033a8:	2008      	movs	r0, #8
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80033aa:	4c50      	ldr	r4, [pc, #320]	; (80034ec <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80033ac:	f002 0201 	and.w	r2, r2, #1
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80033b0:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80033b2:	9200      	str	r2, [sp, #0]
 80033b4:	9a00      	ldr	r2, [sp, #0]
  __DMAx_CLK_ENABLE();
 80033b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
 80033be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80033c4:	9201      	str	r2, [sp, #4]
 80033c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ca:	f042 0204 	orr.w	r2, r2, #4
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
 80033d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d2:	f002 0204 	and.w	r2, r2, #4
 80033d6:	9202      	str	r2, [sp, #8]
 80033d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033dc:	f042 0208 	orr.w	r2, r2, #8
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
 80033e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e4:	f002 0208 	and.w	r2, r2, #8
 80033e8:	9203      	str	r2, [sp, #12]
 80033ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ee:	f042 0210 	orr.w	r2, r2, #16
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
 80033f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f6:	f002 0210 	and.w	r2, r2, #16
 80033fa:	9204      	str	r2, [sp, #16]
 80033fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003400:	f042 0220 	orr.w	r2, r2, #32
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
 8003406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003408:	f002 0220 	and.w	r2, r2, #32
 800340c:	9205      	str	r2, [sp, #20]
 800340e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800341e:	9206      	str	r2, [sp, #24]
 8003420:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800342c:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800342e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003434:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003438:	2001      	movs	r0, #1
 800343a:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800343c:	9307      	str	r3, [sp, #28]
 800343e:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003440:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003444:	a908      	add	r1, sp, #32
 8003446:	482a      	ldr	r0, [pc, #168]	; (80034f0 <BSP_SDRAM_MspInit+0x15c>)
 8003448:	f001 ff44 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800344c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003450:	a908      	add	r1, sp, #32
 8003452:	4828      	ldr	r0, [pc, #160]	; (80034f4 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003454:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003456:	f001 ff3d 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800345a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800345e:	a908      	add	r1, sp, #32
 8003460:	4825      	ldr	r0, [pc, #148]	; (80034f8 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003462:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003464:	f001 ff36 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003468:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800346c:	a908      	add	r1, sp, #32
 800346e:	4823      	ldr	r0, [pc, #140]	; (80034fc <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003470:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003472:	f001 ff2f 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003476:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800347a:	a908      	add	r1, sp, #32
 800347c:	4820      	ldr	r0, [pc, #128]	; (8003500 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800347e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003480:	f001 ff28 	bl	80052d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003484:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003486:	a908      	add	r1, sp, #32
 8003488:	481e      	ldr	r0, [pc, #120]	; (8003504 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800348a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800348c:	f001 ff22 	bl	80052d4 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003490:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003492:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003496:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003498:	4620      	mov	r0, r4
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800349a:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800349c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80034a0:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
 80034a2:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80034a4:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80034a6:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80034a8:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034aa:	e9c4 5201 	strd	r5, r2, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80034ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034b2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80034b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80034be:	61a2      	str	r2, [r4, #24]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034c0:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034c2:	6223      	str	r3, [r4, #32]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034c6:	62a2      	str	r2, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80034c8:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
 80034ca:	f001 fb27 	bl	8004b1c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80034ce:	4620      	mov	r0, r4
 80034d0:	f001 fa88 	bl	80049e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80034d4:	462a      	mov	r2, r5
 80034d6:	210f      	movs	r1, #15
 80034d8:	2038      	movs	r0, #56	; 0x38
 80034da:	f001 f977 	bl	80047cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80034de:	2038      	movs	r0, #56	; 0x38
 80034e0:	f001 f9b2 	bl	8004848 <HAL_NVIC_EnableIRQ>
}
 80034e4:	b00e      	add	sp, #56	; 0x38
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	200262d4 	.word	0x200262d4
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40021400 	.word	0x40021400
 8003500:	40021800 	.word	0x40021800
 8003504:	40021c00 	.word	0x40021c00
 8003508:	40026410 	.word	0x40026410

0800350c <BSP_SDRAM_Init>:
{ 
 800350c:	b538      	push	{r3, r4, r5, lr}
  Timing.ExitSelfRefreshDelay = 7;
 800350e:	2207      	movs	r2, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003510:	4c1a      	ldr	r4, [pc, #104]	; (800357c <BSP_SDRAM_Init+0x70>)
  Timing.LoadToActiveDelay    = 2;
 8003512:	4d1b      	ldr	r5, [pc, #108]	; (8003580 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8003514:	2304      	movs	r3, #4
  Timing.LoadToActiveDelay    = 2;
 8003516:	2102      	movs	r1, #2
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003518:	481a      	ldr	r0, [pc, #104]	; (8003584 <BSP_SDRAM_Init+0x78>)
  Timing.RowCycleDelay        = 7;
 800351a:	60ea      	str	r2, [r5, #12]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800351c:	60e3      	str	r3, [r4, #12]
  Timing.LoadToActiveDelay    = 2;
 800351e:	6029      	str	r1, [r5, #0]
  Timing.RCDDelay             = 2;
 8003520:	61a9      	str	r1, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003522:	2100      	movs	r1, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003524:	6020      	str	r0, [r4, #0]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003526:	4620      	mov	r0, r4
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003528:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800352a:	62a1      	str	r1, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 800352c:	e9c5 2301 	strd	r2, r3, [r5, #4]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003530:	2210      	movs	r2, #16
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003538:	f44f 6300 	mov.w	r3, #2048	; 0x800
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800353c:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003540:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003546:	61a2      	str	r2, [r4, #24]
  Timing.WriteRecoveryTime    = 2;
 8003548:	2202      	movs	r2, #2
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800354a:	6263      	str	r3, [r4, #36]	; 0x24
  Timing.WriteRecoveryTime    = 2;
 800354c:	2302      	movs	r3, #2
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800354e:	e9c4 1101 	strd	r1, r1, [r4, #4]
  Timing.WriteRecoveryTime    = 2;
 8003552:	e9c5 2304 	strd	r2, r3, [r5, #16]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003556:	f7ff ff1d 	bl	8003394 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800355a:	4629      	mov	r1, r5
 800355c:	4620      	mov	r0, r4
 800355e:	4c0a      	ldr	r4, [pc, #40]	; (8003588 <BSP_SDRAM_Init+0x7c>)
 8003560:	f006 f9b4 	bl	80098cc <HAL_SDRAM_Init>
 8003564:	4603      	mov	r3, r0
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003566:	f240 6003 	movw	r0, #1539	; 0x603
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800356a:	3b00      	subs	r3, #0
 800356c:	bf18      	it	ne
 800356e:	2301      	movne	r3, #1
 8003570:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003572:	f7ff fec3 	bl	80032fc <BSP_SDRAM_Initialization_sequence>
}
 8003576:	7820      	ldrb	r0, [r4, #0]
 8003578:	bd38      	pop	{r3, r4, r5, pc}
 800357a:	bf00      	nop
 800357c:	20026334 	.word	0x20026334
 8003580:	200262b8 	.word	0x200262b8
 8003584:	a0000140 	.word	0xa0000140
 8003588:	20000014 	.word	0x20000014

0800358c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_MspInit+0x2c>)
{
 800358e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003592:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
 8003598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800359e:	9200      	str	r2, [sp, #0]
 80035a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b4:	b002      	add	sp, #8
 80035b6:	4770      	bx	lr
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_ADC_MspInit+0x80>)
 80035be:	6802      	ldr	r2, [r0, #0]
{
 80035c0:	b510      	push	{r4, lr}
  if(hadc->Instance==ADC3)
 80035c2:	429a      	cmp	r2, r3
{
 80035c4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c6:	f04f 0400 	mov.w	r4, #0
 80035ca:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80035ce:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80035d2:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC3)
 80035d4:	d001      	beq.n	80035da <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035d6:	b00a      	add	sp, #40	; 0x28
 80035d8:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80035da:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035de:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC3_CLK_ENABLE();
 80035e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
 80035e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ea:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80035ee:	9201      	str	r2, [sp, #4]
 80035f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
 80035fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fc:	f002 0220 	and.w	r2, r2, #32
 8003600:	9202      	str	r2, [sp, #8]
 8003602:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800360c:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003618:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	9803      	ldr	r0, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361c:	4808      	ldr	r0, [pc, #32]	; (8003640 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800361e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003622:	f001 fe57 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003626:	2201      	movs	r2, #1
 8003628:	2303      	movs	r3, #3
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800362a:	a904      	add	r1, sp, #16
 800362c:	4805      	ldr	r0, [pc, #20]	; (8003644 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003630:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003634:	f001 fe4e 	bl	80052d4 <HAL_GPIO_Init>
}
 8003638:	b00a      	add	sp, #40	; 0x28
 800363a:	bd10      	pop	{r4, pc}
 800363c:	40012200 	.word	0x40012200
 8003640:	40021400 	.word	0x40021400
 8003644:	40020000 	.word	0x40020000

08003648 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_CRC_MspInit+0x28>)
 800364a:	6802      	ldr	r2, [r0, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d000      	beq.n	8003652 <HAL_CRC_MspInit+0xa>
 8003650:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003652:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800365a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800365c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800366c:	b002      	add	sp, #8
 800366e:	4770      	bx	lr
 8003670:	40023000 	.word	0x40023000

08003674 <HAL_DCMI_MspInit>:
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdcmi->Instance==DCMI)
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_DCMI_MspInit+0xfc>)
 8003676:	6802      	ldr	r2, [r0, #0]
{
 8003678:	b570      	push	{r4, r5, r6, lr}
  if(hdcmi->Instance==DCMI)
 800367a:	429a      	cmp	r2, r3
{
 800367c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367e:	f04f 0400 	mov.w	r4, #0
 8003682:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003686:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800368a:	940a      	str	r4, [sp, #40]	; 0x28
  if(hdcmi->Instance==DCMI)
 800368c:	d001      	beq.n	8003692 <HAL_DCMI_MspInit+0x1e>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800368e:	b00c      	add	sp, #48	; 0x30
 8003690:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003694:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003696:	4838      	ldr	r0, [pc, #224]	; (8003778 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2602      	movs	r6, #2
    __HAL_RCC_DCMI_CLK_ENABLE();
 800369a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34
 80036a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a4:	f002 0201 	and.w	r2, r2, #1
 80036a8:	9200      	str	r2, [sp, #0]
 80036aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ae:	f042 0210 	orr.w	r2, r2, #16
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	f002 0210 	and.w	r2, r2, #16
 80036ba:	9201      	str	r2, [sp, #4]
 80036bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c0:	f042 0208 	orr.w	r2, r2, #8
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
 80036c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c8:	f002 0208 	and.w	r2, r2, #8
 80036cc:	9202      	str	r2, [sp, #8]
 80036ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80036de:	9203      	str	r2, [sp, #12]
 80036e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80036e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80036f0:	9204      	str	r2, [sp, #16]
 80036f2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80036fc:	2260      	movs	r2, #96	; 0x60
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003700:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003708:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800370c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800370e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003712:	f001 fddf 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003716:	2308      	movs	r3, #8
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003718:	a906      	add	r1, sp, #24
 800371a:	4818      	ldr	r0, [pc, #96]	; (800377c <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800371c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003720:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	e9cd 6407 	strd	r6, r4, [sp, #28]
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003726:	f001 fdd5 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800372a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800372e:	a906      	add	r1, sp, #24
 8003730:	4813      	ldr	r0, [pc, #76]	; (8003780 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003732:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	e9cd 6407 	strd	r6, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003738:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800373c:	f001 fdca 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003740:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003744:	a906      	add	r1, sp, #24
 8003746:	480f      	ldr	r0, [pc, #60]	; (8003784 <HAL_DCMI_MspInit+0x110>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003748:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	e9cd 6407 	strd	r6, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800374e:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003752:	f001 fdbf 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003756:	2350      	movs	r3, #80	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003758:	a906      	add	r1, sp, #24
 800375a:	480b      	ldr	r0, [pc, #44]	; (8003788 <HAL_DCMI_MspInit+0x114>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800375e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003760:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f001 fdb5 	bl	80052d4 <HAL_GPIO_Init>
}
 800376a:	b00c      	add	sp, #48	; 0x30
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	bf00      	nop
 8003770:	50050000 	.word	0x50050000
 8003774:	40023800 	.word	0x40023800
 8003778:	40021000 	.word	0x40021000
 800377c:	40020c00 	.word	0x40020c00
 8003780:	40021800 	.word	0x40021800
 8003784:	40021c00 	.word	0x40021c00
 8003788:	40020000 	.word	0x40020000

0800378c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_DMA2D_MspInit+0x3c>)
 800378e:	6802      	ldr	r2, [r0, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d000      	beq.n	8003796 <HAL_DMA2D_MspInit+0xa>
 8003794:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003796:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	205a      	movs	r0, #90	; 0x5a
 800379e:	4611      	mov	r1, r2
{
 80037a0:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80037a2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 80037a4:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80037a6:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80037aa:	631c      	str	r4, [r3, #48]	; 0x30
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80037b6:	f001 f809 	bl	80047cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80037ba:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80037bc:	b002      	add	sp, #8
 80037be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80037c2:	f001 b841 	b.w	8004848 <HAL_NVIC_EnableIRQ>
 80037c6:	bf00      	nop
 80037c8:	4002b000 	.word	0x4002b000

080037cc <HAL_ETH_MspInit>:
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(heth->Instance==ETH)
 80037cc:	4b35      	ldr	r3, [pc, #212]	; (80038a4 <HAL_ETH_MspInit+0xd8>)
 80037ce:	6802      	ldr	r2, [r0, #0]
{
 80037d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(heth->Instance==ETH)
 80037d2:	429a      	cmp	r2, r3
{
 80037d4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d6:	f04f 0400 	mov.w	r4, #0
 80037da:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80037de:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80037e2:	940a      	str	r4, [sp, #40]	; 0x28
  if(heth->Instance==ETH)
 80037e4:	d001      	beq.n	80037ea <HAL_ETH_MspInit+0x1e>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80037e6:	b00d      	add	sp, #52	; 0x34
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80037ea:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ee:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037f0:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037f2:	a906      	add	r1, sp, #24
    __HAL_RCC_ETH_CLK_ENABLE();
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037f8:	482b      	ldr	r0, [pc, #172]	; (80038a8 <HAL_ETH_MspInit+0xdc>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80037fa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003802:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003806:	9200      	str	r2, [sp, #0]
 8003808:	9a00      	ldr	r2, [sp, #0]
 800380a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
 8003812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003814:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	9a01      	ldr	r2, [sp, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800382a:	9202      	str	r2, [sp, #8]
 800382c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800382e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
 8003836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003838:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800383c:	9203      	str	r2, [sp, #12]
 800383e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003842:	f042 0204 	orr.w	r2, r2, #4
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
 8003848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384a:	f002 0204 	and.w	r2, r2, #4
 800384e:	9204      	str	r2, [sp, #16]
 8003850:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800385a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003866:	2302      	movs	r3, #2
 8003868:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800386e:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003872:	f001 fd2f 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003876:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003878:	a906      	add	r1, sp, #24
 800387a:	480c      	ldr	r0, [pc, #48]	; (80038ac <HAL_ETH_MspInit+0xe0>)
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800387c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800387e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003886:	f001 fd25 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800388a:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388c:	a906      	add	r1, sp, #24
 800388e:	4808      	ldr	r0, [pc, #32]	; (80038b0 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003892:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003894:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389a:	f001 fd1b 	bl	80052d4 <HAL_GPIO_Init>
}
 800389e:	b00d      	add	sp, #52	; 0x34
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40028000 	.word	0x40028000
 80038a8:	40021800 	.word	0x40021800
 80038ac:	40020800 	.word	0x40020800
 80038b0:	40020000 	.word	0x40020000
 80038b4:	00000000 	.word	0x00000000

080038b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038b8:	b510      	push	{r4, lr}
 80038ba:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	2100      	movs	r1, #0
{
 80038be:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038c0:	2284      	movs	r2, #132	; 0x84
 80038c2:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	9108      	str	r1, [sp, #32]
 80038c6:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80038ca:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038ce:	f013 fc08 	bl	80170e2 <memset>
  if(hi2c->Instance==I2C1)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4a36      	ldr	r2, [pc, #216]	; (80039b0 <HAL_I2C_MspInit+0xf8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 80038da:	4a36      	ldr	r2, [pc, #216]	; (80039b4 <HAL_I2C_MspInit+0xfc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <HAL_I2C_MspInit+0x82>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038e0:	b02a      	add	sp, #168	; 0xa8
 80038e2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038ea:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ec:	f003 fddc 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d14c      	bne.n	800398e <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f4:	4c30      	ldr	r4, [pc, #192]	; (80039b8 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038f6:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f8:	a904      	add	r1, sp, #16
 80038fa:	4830      	ldr	r0, [pc, #192]	; (80039bc <HAL_I2C_MspInit+0x104>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	6323      	str	r3, [r4, #48]	; 0x30
 8003904:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003906:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003908:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800390e:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80039a0 <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003916:	2300      	movs	r3, #0
 8003918:	ed8d 7b04 	vstr	d7, [sp, #16]
 800391c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003920:	f001 fcd8 	bl	80052d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800392a:	6423      	str	r3, [r4, #64]	; 0x40
 800392c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800392e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	9b01      	ldr	r3, [sp, #4]
}
 8003936:	b02a      	add	sp, #168	; 0xa8
 8003938:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800393a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800393e:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003940:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003942:	f003 fdb1 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 8003946:	bb28      	cbnz	r0, 8003994 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003948:	4c1b      	ldr	r4, [pc, #108]	; (80039b8 <HAL_I2C_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800394a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800394c:	a904      	add	r1, sp, #16
 800394e:	481c      	ldr	r0, [pc, #112]	; (80039c0 <HAL_I2C_MspInit+0x108>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003950:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003956:	6323      	str	r3, [r4, #48]	; 0x30
 8003958:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800395a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800395c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003962:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80039a8 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800396a:	2303      	movs	r3, #3
 800396c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003970:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003974:	f001 fcae 	bl	80052d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800397a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800397e:	6423      	str	r3, [r4, #64]	; 0x40
 8003980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	9b03      	ldr	r3, [sp, #12]
}
 800398a:	b02a      	add	sp, #168	; 0xa8
 800398c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800398e:	f7ff f965 	bl	8002c5c <Error_Handler>
 8003992:	e7af      	b.n	80038f4 <HAL_I2C_MspInit+0x3c>
      Error_Handler();
 8003994:	f7ff f962 	bl	8002c5c <Error_Handler>
 8003998:	e7d6      	b.n	8003948 <HAL_I2C_MspInit+0x90>
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w
 80039a0:	00000300 	.word	0x00000300
 80039a4:	00000012 	.word	0x00000012
 80039a8:	00000180 	.word	0x00000180
 80039ac:	00000012 	.word	0x00000012
 80039b0:	40005400 	.word	0x40005400
 80039b4:	40005c00 	.word	0x40005c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40020400 	.word	0x40020400
 80039c0:	40021c00 	.word	0x40021c00

080039c4 <HAL_LTDC_MspInit>:
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hltdc->Instance==LTDC)
 80039c4:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <HAL_LTDC_MspInit+0x110>)
 80039c6:	6802      	ldr	r2, [r0, #0]
{
 80039c8:	b570      	push	{r4, r5, r6, lr}
  if(hltdc->Instance==LTDC)
 80039ca:	429a      	cmp	r2, r3
{
 80039cc:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ce:	f04f 0400 	mov.w	r4, #0
 80039d2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80039d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80039da:	940a      	str	r4, [sp, #40]	; 0x28
  if(hltdc->Instance==LTDC)
 80039dc:	d001      	beq.n	80039e2 <HAL_LTDC_MspInit+0x1e>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80039de:	b00c      	add	sp, #48	; 0x30
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80039e2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039e6:	250e      	movs	r5, #14
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80039e8:	483b      	ldr	r0, [pc, #236]	; (8003ad8 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ea:	2602      	movs	r6, #2
    __HAL_RCC_LTDC_CLK_ENABLE();
 80039ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
 80039f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80039fa:	9200      	str	r2, [sp, #0]
 80039fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a00:	f042 0210 	orr.w	r2, r2, #16
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
 8003a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a08:	f002 0210 	and.w	r2, r2, #16
 8003a0c:	9201      	str	r2, [sp, #4]
 8003a0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003a1e:	9202      	str	r2, [sp, #8]
 8003a20:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003a30:	9203      	str	r2, [sp, #12]
 8003a32:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003a42:	9204      	str	r2, [sp, #16]
 8003a44:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003a4e:	2210      	movs	r2, #16
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a52:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003a5a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a5c:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003a5e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003a60:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003a64:	f001 fc36 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003a68:	f64e 73ff 	movw	r3, #61439	; 0xefff
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a6c:	a906      	add	r1, sp, #24
 8003a6e:	481b      	ldr	r0, [pc, #108]	; (8003adc <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003a70:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a74:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	e9cd 6407 	strd	r6, r4, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a7a:	f001 fc2b 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a7e:	23f7      	movs	r3, #247	; 0xf7
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a80:	a906      	add	r1, sp, #24
 8003a82:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a84:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	e9cd 6407 	strd	r6, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a8a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a8e:	f001 fc21 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003a96:	a906      	add	r1, sp, #24
 8003a98:	4812      	ldr	r0, [pc, #72]	; (8003ae4 <HAL_LTDC_MspInit+0x120>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a9a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a9c:	2309      	movs	r3, #9
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	e9cd 6407 	strd	r6, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003aa2:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003aa6:	f001 fc15 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003aaa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003aae:	a906      	add	r1, sp, #24
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <HAL_LTDC_MspInit+0x124>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003ab2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ab6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003abc:	f001 fc0a 	bl	80052d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	2058      	movs	r0, #88	; 0x58
 8003ac6:	f000 fe81 	bl	80047cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003aca:	2058      	movs	r0, #88	; 0x58
 8003acc:	f000 febc 	bl	8004848 <HAL_NVIC_EnableIRQ>
}
 8003ad0:	b00c      	add	sp, #48	; 0x30
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	40016800 	.word	0x40016800
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40022400 	.word	0x40022400
 8003ae0:	40022800 	.word	0x40022800
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_QSPI_MspInit>:
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hqspi->Instance==QUADSPI)
 8003aec:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_QSPI_MspInit+0xc8>)
 8003aee:	6802      	ldr	r2, [r0, #0]
{
 8003af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hqspi->Instance==QUADSPI)
 8003af2:	429a      	cmp	r2, r3
{
 8003af4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003afe:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003b02:	9408      	str	r4, [sp, #32]
  if(hqspi->Instance==QUADSPI)
 8003b04:	d001      	beq.n	8003b0a <HAL_QSPI_MspInit+0x1e>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003b06:	b00b      	add	sp, #44	; 0x2c
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_QSPI_MspInit+0xcc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b0e:	2609      	movs	r6, #9
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003b10:	a904      	add	r1, sp, #16
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2702      	movs	r7, #2
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003b16:	4829      	ldr	r0, [pc, #164]	; (8003bbc <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003b18:	f042 0202 	orr.w	r2, r2, #2
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b20:	f002 0202 	and.w	r2, r2, #2
 8003b24:	9200      	str	r2, [sp, #0]
 8003b26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2a:	f042 0210 	orr.w	r2, r2, #16
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b32:	f002 0210 	and.w	r2, r2, #16
 8003b36:	9201      	str	r2, [sp, #4]
 8003b38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	f042 0202 	orr.w	r2, r2, #2
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
 8003b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b44:	f002 0202 	and.w	r2, r2, #2
 8003b48:	9202      	str	r2, [sp, #8]
 8003b4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003b54:	2204      	movs	r2, #4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003b5e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b60:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003b64:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b68:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003b6a:	f001 fbb3 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003b6e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003b70:	a904      	add	r1, sp, #16
 8003b72:	4813      	ldr	r0, [pc, #76]	; (8003bc0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003b74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003b76:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003b7a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003b80:	f001 fba8 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b84:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b86:	a904      	add	r1, sp, #16
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	e9cd 7405 	strd	r7, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b90:	e9cd 5607 	strd	r5, r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b94:	f001 fb9e 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003b98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4809      	ldr	r0, [pc, #36]	; (8003bc4 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ba2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003ba4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003baa:	f001 fb93 	bl	80052d4 <HAL_GPIO_Init>
}
 8003bae:	b00b      	add	sp, #44	; 0x2c
 8003bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	a0001000 	.word	0xa0001000
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40020400 	.word	0x40020400
 8003bc4:	40020c00 	.word	0x40020c00

08003bc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	b0a2      	sub	sp, #136	; 0x88
 8003bcc:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bce:	2284      	movs	r2, #132	; 0x84
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	a801      	add	r0, sp, #4
 8003bd4:	f013 fa85 	bl	80170e2 <memset>
  if(hrtc->Instance==RTC)
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_RTC_MspInit+0x44>)
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003be0:	b022      	add	sp, #136	; 0x88
 8003be2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003be4:	2220      	movs	r2, #32
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003be6:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bea:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003bec:	9201      	str	r2, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003bee:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bf0:	f003 fc5a 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 8003bf4:	b930      	cbnz	r0, 8003c04 <HAL_RTC_MspInit+0x3c>
    __HAL_RCC_RTC_ENABLE();
 8003bf6:	4a06      	ldr	r2, [pc, #24]	; (8003c10 <HAL_RTC_MspInit+0x48>)
 8003bf8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003c00:	b022      	add	sp, #136	; 0x88
 8003c02:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003c04:	f7ff f82a 	bl	8002c5c <Error_Handler>
 8003c08:	e7f5      	b.n	8003bf6 <HAL_RTC_MspInit+0x2e>
 8003c0a:	bf00      	nop
 8003c0c:	40002800 	.word	0x40002800
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_SD_MspInit>:
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hsd->Instance==SDMMC1)
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_SD_MspInit+0x8c>)
 8003c16:	6802      	ldr	r2, [r0, #0]
{
 8003c18:	b570      	push	{r4, r5, r6, lr}
  if(hsd->Instance==SDMMC1)
 8003c1a:	429a      	cmp	r2, r3
{
 8003c1c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1e:	f04f 0400 	mov.w	r4, #0
 8003c22:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003c26:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003c2a:	9408      	str	r4, [sp, #32]
  if(hsd->Instance==SDMMC1)
 8003c2c:	d001      	beq.n	8003c32 <HAL_SD_MspInit+0x1e>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003c2e:	b00a      	add	sp, #40	; 0x28
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c32:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c36:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c38:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3e:	4819      	ldr	r0, [pc, #100]	; (8003ca4 <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
 8003c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c48:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c4c:	9201      	str	r2, [sp, #4]
 8003c4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	f042 0204 	orr.w	r2, r2, #4
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
 8003c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5a:	f002 0204 	and.w	r2, r2, #4
 8003c5e:	9202      	str	r2, [sp, #8]
 8003c60:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c64:	f042 0208 	orr.w	r2, r2, #8
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c6a:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c76:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c78:	e9cd 6507 	strd	r6, r5, [sp, #28]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c80:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c82:	f001 fb27 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003c86:	2304      	movs	r3, #4
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003c88:	a904      	add	r1, sp, #16
 8003c8a:	4807      	ldr	r0, [pc, #28]	; (8003ca8 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003c8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c92:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c94:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003c98:	f001 fb1c 	bl	80052d4 <HAL_GPIO_Init>
}
 8003c9c:	b00a      	add	sp, #40	; 0x28
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	40020c00 	.word	0x40020c00
 8003cac:	00000000 	.word	0x00000000

08003cb0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	2100      	movs	r1, #0
{
 8003cb6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cb8:	2284      	movs	r2, #132	; 0x84
 8003cba:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	9106      	str	r1, [sp, #24]
 8003cbe:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003cc2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cc6:	f013 fa0c 	bl	80170e2 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003cd0:	d001      	beq.n	8003cd6 <HAL_SPDIFRX_MspInit+0x26>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003cd2:	b02a      	add	sp, #168	; 0xa8
 8003cd4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003cd6:	2102      	movs	r1, #2
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cdc:	2364      	movs	r3, #100	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cde:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003ce0:	910c      	str	r1, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003ce2:	2101      	movs	r1, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003ce4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003cec:	9111      	str	r1, [sp, #68]	; 0x44
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003cee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cf2:	f003 fbd9 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 8003cf6:	bb08      	cbnz	r0, 8003d3c <HAL_SPDIFRX_MspInit+0x8c>
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <HAL_SPDIFRX_MspInit+0xa8>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003cfa:	2408      	movs	r4, #8
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003cfc:	4817      	ldr	r0, [pc, #92]	; (8003d5c <HAL_SPDIFRX_MspInit+0xac>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003d00:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003d04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003d10:	9200      	str	r2, [sp, #0]
 8003d12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d16:	4322      	orrs	r2, r4
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003d1c:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d1e:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003d20:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8003d48 <HAL_SPDIFRX_MspInit+0x98>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003d28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003d2c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8003d50 <HAL_SPDIFRX_MspInit+0xa0>
 8003d30:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003d34:	f001 face 	bl	80052d4 <HAL_GPIO_Init>
}
 8003d38:	b02a      	add	sp, #168	; 0xa8
 8003d3a:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003d3c:	f7fe ff8e 	bl	8002c5c <Error_Handler>
 8003d40:	e7da      	b.n	8003cf8 <HAL_SPDIFRX_MspInit+0x48>
 8003d42:	bf00      	nop
 8003d44:	f3af 8000 	nop.w
 8003d48:	00000080 	.word	0x00000080
 8003d4c:	00000002 	.word	0x00000002
	...
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40020c00 	.word	0x40020c00

08003d60 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_TIM_Base_MspInit+0x9c>)
{
 8003d62:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8003d64:	6803      	ldr	r3, [r0, #0]
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d023      	beq.n	8003db2 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d013      	beq.n	8003d98 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_TIM_Base_MspInit+0xa0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d029      	beq.n	8003dca <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8003d76:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <HAL_TIM_Base_MspInit+0xa4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d032      	beq.n	8003de2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_TIM_Base_MspInit+0xa8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d115      	bne.n	8003dae <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <HAL_TIM_Base_MspInit+0xac>)
 8003d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d86:	f042 0202 	orr.w	r2, r2, #2
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	9305      	str	r3, [sp, #20]
 8003d94:	9b05      	ldr	r3, [sp, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d96:	e00a      	b.n	8003dae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d98:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	9302      	str	r3, [sp, #8]
 8003dac:	9b02      	ldr	r3, [sp, #8]
}
 8003dae:	b006      	add	sp, #24
 8003db0:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_TIM_Base_MspInit+0xac>)
 8003db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	9b01      	ldr	r3, [sp, #4]
}
 8003dc6:	b006      	add	sp, #24
 8003dc8:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_TIM_Base_MspInit+0xac>)
 8003dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dce:	f042 0202 	orr.w	r2, r2, #2
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	9303      	str	r3, [sp, #12]
 8003ddc:	9b03      	ldr	r3, [sp, #12]
}
 8003dde:	b006      	add	sp, #24
 8003de0:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_TIM_Base_MspInit+0xac>)
 8003de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de6:	f042 0208 	orr.w	r2, r2, #8
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9b04      	ldr	r3, [sp, #16]
}
 8003df6:	b006      	add	sp, #24
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM12)
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_TIM_PWM_MspInit+0x28>)
 8003e12:	6802      	ldr	r2, [r0, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d000      	beq.n	8003e1a <HAL_TIM_PWM_MspInit+0xa>
 8003e18:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003e1a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
{
 8003e1e:	b082      	sub	sp, #8
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003e32:	b002      	add	sp, #8
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40001800 	.word	0x40001800
 8003e3c:	00000000 	.word	0x00000000

08003e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003e40:	493d      	ldr	r1, [pc, #244]	; (8003f38 <HAL_TIM_MspPostInit+0xf8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e42:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003e44:	6802      	ldr	r2, [r0, #0]
{
 8003e46:	b510      	push	{r4, lr}
  if(htim->Instance==TIM1)
 8003e48:	428a      	cmp	r2, r1
{
 8003e4a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e50:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003e54:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003e56:	d020      	beq.n	8003e9a <HAL_TIM_MspPostInit+0x5a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8003e58:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e5c:	d031      	beq.n	8003ec2 <HAL_TIM_MspPostInit+0x82>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_TIM_MspPostInit+0xfc>)
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d042      	beq.n	8003eea <HAL_TIM_MspPostInit+0xaa>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM12)
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_TIM_MspPostInit+0x100>)
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d001      	beq.n	8003e6e <HAL_TIM_MspPostInit+0x2e>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003e6a:	b00a      	add	sp, #40	; 0x28
 8003e6c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e6e:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e72:	2409      	movs	r4, #9
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003e74:	a904      	add	r1, sp, #16
 8003e76:	4833      	ldr	r0, [pc, #204]	; (8003f44 <HAL_TIM_MspPostInit+0x104>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e82:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003e88:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8003f18 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003e90:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003e94:	f001 fa1e 	bl	80052d4 <HAL_GPIO_Init>
}
 8003e98:	e7e7      	b.n	8003e6a <HAL_TIM_MspPostInit+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <HAL_TIM_MspPostInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e9c:	2401      	movs	r4, #1
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	482a      	ldr	r0, [pc, #168]	; (8003f4c <HAL_TIM_MspPostInit+0x10c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea4:	4322      	orrs	r2, r4
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003eaa:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eac:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003eae:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8003f20 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003eb6:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003eba:	f001 fa0b 	bl	80052d4 <HAL_GPIO_Init>
}
 8003ebe:	b00a      	add	sp, #40	; 0x28
 8003ec0:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_TIM_MspPostInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ec4:	2401      	movs	r4, #1
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	a904      	add	r1, sp, #16
 8003ec8:	4820      	ldr	r0, [pc, #128]	; (8003f4c <HAL_TIM_MspPostInit+0x10c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ecc:	4322      	orrs	r2, r4
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ed2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed4:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003ed6:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003f28 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003ede:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f001 f9f7 	bl	80052d4 <HAL_GPIO_Init>
}
 8003ee6:	b00a      	add	sp, #40	; 0x28
 8003ee8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eea:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eee:	2402      	movs	r4, #2
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003ef0:	a904      	add	r1, sp, #16
 8003ef2:	4817      	ldr	r0, [pc, #92]	; (8003f50 <HAL_TIM_MspPostInit+0x110>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	4322      	orrs	r2, r4
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003efc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efe:	4023      	ands	r3, r4
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003f00:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8003f30 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003f08:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003f0c:	f001 f9e2 	bl	80052d4 <HAL_GPIO_Init>
}
 8003f10:	b00a      	add	sp, #40	; 0x28
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	f3af 8000 	nop.w
 8003f18:	00000040 	.word	0x00000040
 8003f1c:	00000002 	.word	0x00000002
 8003f20:	00000100 	.word	0x00000100
 8003f24:	00000002 	.word	0x00000002
 8003f28:	00008000 	.word	0x00008000
 8003f2c:	00000002 	.word	0x00000002
 8003f30:	00000010 	.word	0x00000010
 8003f34:	00000002 	.word	0x00000002
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40001800 	.word	0x40001800
 8003f44:	40021c00 	.word	0x40021c00
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020000 	.word	0x40020000
 8003f50:	40020400 	.word	0x40020400

08003f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f54:	b5d0      	push	{r4, r6, r7, lr}
 8003f56:	b0ac      	sub	sp, #176	; 0xb0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	2100      	movs	r1, #0
{
 8003f5a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f5c:	2284      	movs	r2, #132	; 0x84
 8003f5e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	910a      	str	r1, [sp, #40]	; 0x28
 8003f62:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003f66:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f6a:	f013 f8ba 	bl	80170e2 <memset>
  if(huart->Instance==USART1)
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	4a3f      	ldr	r2, [pc, #252]	; (8004070 <HAL_UART_MspInit+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8003f76:	4a3f      	ldr	r2, [pc, #252]	; (8004074 <HAL_UART_MspInit+0x120>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d048      	beq.n	800400e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f7c:	b02c      	add	sp, #176	; 0xb0
 8003f7e:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f80:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f82:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f84:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f86:	f003 fa8f 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d169      	bne.n	8004062 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_UART_MspInit+0x124>)
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f90:	2080      	movs	r0, #128	; 0x80
 8003f92:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f94:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f98:	2600      	movs	r6, #0
 8003f9a:	2700      	movs	r7, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f9c:	f042 0210 	orr.w	r2, r2, #16
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8003fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa4:	f002 0210 	and.w	r2, r2, #16
 8003fa8:	9201      	str	r2, [sp, #4]
 8003faa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fae:	f042 0202 	orr.w	r2, r2, #2
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	f002 0202 	and.w	r2, r2, #2
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fc8:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fca:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003fd4:	a906      	add	r1, sp, #24
 8003fd6:	4829      	ldr	r0, [pc, #164]	; (800407c <HAL_UART_MspInit+0x128>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003fda:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003fde:	f001 f979 	bl	80052d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003fe8:	a906      	add	r1, sp, #24
 8003fea:	4825      	ldr	r0, [pc, #148]	; (8004080 <HAL_UART_MspInit+0x12c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fec:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003fee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ff2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f001 f96d 	bl	80052d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2025      	movs	r0, #37	; 0x25
 8003ffe:	4611      	mov	r1, r2
 8004000:	f000 fbe4 	bl	80047cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004004:	2025      	movs	r0, #37	; 0x25
 8004006:	f000 fc1f 	bl	8004848 <HAL_NVIC_EnableIRQ>
}
 800400a:	b02c      	add	sp, #176	; 0xb0
 800400c:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800400e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004012:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004014:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004016:	f003 fa47 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 800401a:	bb28      	cbnz	r0, 8004068 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART6_CLK_ENABLE();
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_UART_MspInit+0x124>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800401e:	26c0      	movs	r6, #192	; 0xc0
 8004020:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004022:	2408      	movs	r4, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 8004024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004026:	a906      	add	r1, sp, #24
 8004028:	4816      	ldr	r0, [pc, #88]	; (8004084 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800402a:	f042 0220 	orr.w	r2, r2, #32
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	f002 0220 	and.w	r2, r2, #32
 8004036:	9204      	str	r2, [sp, #16]
 8004038:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	f042 0204 	orr.w	r2, r2, #4
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004044:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	9305      	str	r3, [sp, #20]
 800404c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800404e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004052:	2600      	movs	r6, #0
 8004054:	2703      	movs	r7, #3
 8004056:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405a:	f001 f93b 	bl	80052d4 <HAL_GPIO_Init>
}
 800405e:	b02c      	add	sp, #176	; 0xb0
 8004060:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8004062:	f7fe fdfb 	bl	8002c5c <Error_Handler>
 8004066:	e792      	b.n	8003f8e <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8004068:	f7fe fdf8 	bl	8002c5c <Error_Handler>
 800406c:	e7d6      	b.n	800401c <HAL_UART_MspInit+0xc8>
 800406e:	bf00      	nop
 8004070:	40011000 	.word	0x40011000
 8004074:	40011400 	.word	0x40011400
 8004078:	40023800 	.word	0x40023800
 800407c:	40020400 	.word	0x40020400
 8004080:	40020000 	.word	0x40020000
 8004084:	40020800 	.word	0x40020800

08004088 <HAL_HCD_MspInit>:
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhcd->Instance==USB_OTG_FS)
 8004088:	6803      	ldr	r3, [r0, #0]
{
 800408a:	b530      	push	{r4, r5, lr}
  if(hhcd->Instance==USB_OTG_FS)
 800408c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004090:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004092:	f04f 0400 	mov.w	r4, #0
 8004096:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800409a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800409e:	9408      	str	r4, [sp, #32]
  if(hhcd->Instance==USB_OTG_FS)
 80040a0:	d001      	beq.n	80040a6 <HAL_HCD_MspInit+0x1e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80040a2:	b00b      	add	sp, #44	; 0x2c
 80040a4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	4d19      	ldr	r5, [pc, #100]	; (800410c <HAL_HCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80040a8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	632b      	str	r3, [r5, #48]	; 0x30
 80040b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80040be:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c2:	4813      	ldr	r0, [pc, #76]	; (8004110 <HAL_HCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80040c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80040c8:	2203      	movs	r2, #3
 80040ca:	230a      	movs	r3, #10
 80040cc:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d0:	f001 f900 	bl	80052d4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80040d6:	4622      	mov	r2, r4
 80040d8:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80040de:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80040e0:	636b      	str	r3, [r5, #52]	; 0x34
 80040e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80040e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	9b02      	ldr	r3, [sp, #8]
 80040ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80040ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f2:	646b      	str	r3, [r5, #68]	; 0x44
 80040f4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80040f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fa:	9303      	str	r3, [sp, #12]
 80040fc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80040fe:	f000 fb65 	bl	80047cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004102:	2043      	movs	r0, #67	; 0x43
 8004104:	f000 fba0 	bl	8004848 <HAL_NVIC_EnableIRQ>
}
 8004108:	b00b      	add	sp, #44	; 0x2c
 800410a:	bd30      	pop	{r4, r5, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	40020000 	.word	0x40020000

08004114 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_SDRAM_MspInit+0xb0>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004116:	2200      	movs	r2, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 800411a:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800411c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800411e:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
 8004120:	2c00      	cmp	r4, #0
 8004122:	d14c      	bne.n	80041be <HAL_SDRAM_MspInit+0xaa>
  __HAL_RCC_FMC_CLK_ENABLE();
 8004124:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <HAL_SDRAM_MspInit+0xb4>)
  FMC_Initialized = 1;
 8004126:	2101      	movs	r1, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004128:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800412a:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 800412c:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2702      	movs	r7, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 8004130:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004132:	4826      	ldr	r0, [pc, #152]	; (80041cc <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8004134:	430b      	orrs	r3, r1
 8004136:	6393      	str	r3, [r2, #56]	; 0x38
 8004138:	6b93      	ldr	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800413a:	f64f 7283 	movw	r2, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413e:	9605      	str	r6, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004140:	400b      	ands	r3, r1
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004142:	9506      	str	r5, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004144:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004146:	2302      	movs	r3, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 8004148:	9901      	ldr	r1, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800414a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800414c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004150:	f001 f8c0 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004154:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004158:	a902      	add	r1, sp, #8
 800415a:	481d      	ldr	r0, [pc, #116]	; (80041d0 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800415c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800415e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004166:	f001 f8b5 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800416a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800416e:	a902      	add	r1, sp, #8
 8004170:	4818      	ldr	r0, [pc, #96]	; (80041d4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004172:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004178:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417c:	f001 f8aa 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004180:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004184:	a902      	add	r1, sp, #8
 8004186:	4814      	ldr	r0, [pc, #80]	; (80041d8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004188:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800418e:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004192:	f001 f89f 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004196:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004198:	a902      	add	r1, sp, #8
 800419a:	4810      	ldr	r0, [pc, #64]	; (80041dc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800419c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041a2:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80041a6:	f001 f895 	bl	80052d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80041aa:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80041ac:	a902      	add	r1, sp, #8
 80041ae:	480c      	ldr	r0, [pc, #48]	; (80041e0 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041b2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80041b4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b6:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f001 f88b 	bl	80052d4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80041be:	b009      	add	sp, #36	; 0x24
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20026368 	.word	0x20026368
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40021800 	.word	0x40021800
 80041d4:	40020c00 	.word	0x40020c00
 80041d8:	40021400 	.word	0x40021400
 80041dc:	40021c00 	.word	0x40021c00
 80041e0:	40020800 	.word	0x40020800
 80041e4:	00000000 	.word	0x00000000

080041e8 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80041e8:	4a29      	ldr	r2, [pc, #164]	; (8004290 <HAL_SAI_MspInit+0xa8>)
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	4293      	cmp	r3, r2
{
 80041ee:	b510      	push	{r4, lr}
 80041f0:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 80041f2:	d004      	beq.n	80041fe <HAL_SAI_MspInit+0x16>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

    }
    if(hsai->Instance==SAI2_Block_B)
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <HAL_SAI_MspInit+0xac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d023      	beq.n	8004242 <HAL_SAI_MspInit+0x5a>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);

    }
}
 80041fa:	b008      	add	sp, #32
 80041fc:	bd10      	pop	{r4, pc}
    if (SAI2_client == 0)
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_SAI_MspInit+0xb0>)
 8004200:	4604      	mov	r4, r0
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	b94a      	cbnz	r2, 800421a <HAL_SAI_MspInit+0x32>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004206:	4925      	ldr	r1, [pc, #148]	; (800429c <HAL_SAI_MspInit+0xb4>)
 8004208:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800420a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800420e:	6448      	str	r0, [r1, #68]	; 0x44
 8004210:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004212:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8004216:	9100      	str	r1, [sp, #0]
 8004218:	9900      	ldr	r1, [sp, #0]
    SAI2_client ++;
 800421a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800421c:	20f0      	movs	r0, #240	; 0xf0
 800421e:	2102      	movs	r1, #2
    SAI2_client ++;
 8004220:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004222:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004224:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8004280 <HAL_SAI_MspInit+0x98>
 8004228:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800422c:	a902      	add	r1, sp, #8
 800422e:	481c      	ldr	r0, [pc, #112]	; (80042a0 <HAL_SAI_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004230:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004232:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004236:	f001 f84d 	bl	80052d4 <HAL_GPIO_Init>
    if(hsai->Instance==SAI2_Block_B)
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_SAI_MspInit+0xac>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d1db      	bne.n	80041fa <HAL_SAI_MspInit+0x12>
      if (SAI2_client == 0)
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <HAL_SAI_MspInit+0xb0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	b94a      	cbnz	r2, 800425c <HAL_SAI_MspInit+0x74>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004248:	4914      	ldr	r1, [pc, #80]	; (800429c <HAL_SAI_MspInit+0xb4>)
 800424a:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800424c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004250:	6448      	str	r0, [r1, #68]	; 0x44
 8004252:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004254:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8004258:	9101      	str	r1, [sp, #4]
 800425a:	9901      	ldr	r1, [sp, #4]
    SAI2_client ++;
 800425c:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800425e:	210a      	movs	r1, #10
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004260:	4810      	ldr	r0, [pc, #64]	; (80042a4 <HAL_SAI_MspInit+0xbc>)
    SAI2_client ++;
 8004262:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004264:	2200      	movs	r2, #0
 8004266:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004268:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800426a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800426c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8004288 <HAL_SAI_MspInit+0xa0>
 8004270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004274:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004278:	f001 f82c 	bl	80052d4 <HAL_GPIO_Init>
}
 800427c:	b008      	add	sp, #32
 800427e:	bd10      	pop	{r4, pc}
	...
 8004288:	00000400 	.word	0x00000400
 800428c:	00000002 	.word	0x00000002
 8004290:	40015c04 	.word	0x40015c04
 8004294:	40015c24 	.word	0x40015c24
 8004298:	2002636c 	.word	0x2002636c
 800429c:	40023800 	.word	0x40023800
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40021800 	.word	0x40021800

080042a8 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042a8:	4b23      	ldr	r3, [pc, #140]	; (8004338 <HAL_InitTick+0x90>)
 80042aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ac:	f042 0210 	orr.w	r2, r2, #16
{
 80042b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40
{
 80042b4:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 80042b8:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042ba:	a901      	add	r1, sp, #4
 80042bc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	9302      	str	r3, [sp, #8]
 80042c4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042c6:	f003 f8cd 	bl	8007464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042ca:	9b06      	ldr	r3, [sp, #24]
 80042cc:	b9d3      	cbnz	r3, 8004304 <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042ce:	f003 f8a9 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 80042d2:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042d4:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_InitTick+0x94>)

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042d6:	4c1a      	ldr	r4, [pc, #104]	; (8004340 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
  htim6.Instance = TIM6;
 80042dc:	4919      	ldr	r1, [pc, #100]	; (8004344 <HAL_InitTick+0x9c>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80042de:	2200      	movs	r2, #0
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80042e0:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042e2:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 80042e4:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042e6:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ea:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042ec:	3b01      	subs	r3, #1
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ee:	61a2      	str	r2, [r4, #24]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042f0:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042f4:	6063      	str	r3, [r4, #4]
  status = HAL_TIM_Base_Init(&htim6);
 80042f6:	f005 fb7b 	bl	80099f0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80042fa:	4606      	mov	r6, r0
 80042fc:	b130      	cbz	r0, 800430c <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 80042fe:	4630      	mov	r0, r6
 8004300:	b008      	add	sp, #32
 8004302:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004304:	f003 f88e 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 8004308:	0043      	lsls	r3, r0, #1
 800430a:	e7e3      	b.n	80042d4 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800430c:	4620      	mov	r0, r4
 800430e:	f005 fc25 	bl	8009b5c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004312:	4606      	mov	r6, r0
 8004314:	2800      	cmp	r0, #0
 8004316:	d1f2      	bne.n	80042fe <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004318:	2036      	movs	r0, #54	; 0x36
 800431a:	f000 fa95 	bl	8004848 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800431e:	2d0f      	cmp	r5, #15
 8004320:	d901      	bls.n	8004326 <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 8004322:	2601      	movs	r6, #1
 8004324:	e7eb      	b.n	80042fe <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004326:	4632      	mov	r2, r6
 8004328:	4629      	mov	r1, r5
 800432a:	2036      	movs	r0, #54	; 0x36
 800432c:	f000 fa4e 	bl	80047cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_InitTick+0xa0>)
 8004332:	601d      	str	r5, [r3, #0]
 8004334:	e7e3      	b.n	80042fe <HAL_InitTick+0x56>
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	431bde83 	.word	0x431bde83
 8004340:	20026370 	.word	0x20026370
 8004344:	40001000 	.word	0x40001000
 8004348:	20000020 	.word	0x20000020

0800434c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800434c:	e7fe      	b.n	800434c <NMI_Handler>
 800434e:	bf00      	nop

08004350 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004350:	e7fe      	b.n	8004350 <HardFault_Handler>
 8004352:	bf00      	nop

08004354 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004354:	e7fe      	b.n	8004354 <MemManage_Handler>
 8004356:	bf00      	nop

08004358 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004358:	e7fe      	b.n	8004358 <BusFault_Handler>
 800435a:	bf00      	nop

0800435c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800435c:	e7fe      	b.n	800435c <UsageFault_Handler>
 800435e:	bf00      	nop

08004360 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <DebugMon_Handler>:
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <PendSV_Handler>:
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <SysTick_Handler>:
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <USART1_IRQHandler+0x8>)
 8004372:	f006 b8c7 	b.w	800a504 <HAL_UART_IRQHandler>
 8004376:	bf00      	nop
 8004378:	20019fc0 	.word	0x20019fc0

0800437c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <TIM6_DAC_IRQHandler+0x8>)
 800437e:	f005 bf53 	b.w	800a228 <HAL_TIM_IRQHandler>
 8004382:	bf00      	nop
 8004384:	20026370 	.word	0x20026370

08004388 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <OTG_FS_IRQHandler+0x8>)
 800438a:	f001 b93d 	b.w	8005608 <HAL_HCD_IRQHandler>
 800438e:	bf00      	nop
 8004390:	2001972c 	.word	0x2001972c

08004394 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004394:	4801      	ldr	r0, [pc, #4]	; (800439c <LTDC_IRQHandler+0x8>)
 8004396:	f002 bac9 	b.w	800692c <HAL_LTDC_IRQHandler>
 800439a:	bf00      	nop
 800439c:	20019ad8 	.word	0x20019ad8

080043a0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043a0:	4801      	ldr	r0, [pc, #4]	; (80043a8 <DMA2D_IRQHandler+0x8>)
 80043a2:	f000 bd83 	b.w	8004eac <HAL_DMA2D_IRQHandler>
 80043a6:	bf00      	nop
 80043a8:	2001963c 	.word	0x2001963c

080043ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043ac:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043ae:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <_sbrk+0x38>)
{
 80043b0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <_sbrk+0x3c>)
 80043b4:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80043b6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043b8:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80043ba:	b12a      	cbz	r2, 80043c8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043bc:	4413      	add	r3, r2
 80043be:	428b      	cmp	r3, r1
 80043c0:	d808      	bhi.n	80043d4 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80043c2:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80043c4:	6023      	str	r3, [r4, #0]
}
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80043c8:	4809      	ldr	r0, [pc, #36]	; (80043f0 <_sbrk+0x44>)
 80043ca:	4602      	mov	r2, r0
 80043cc:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80043ce:	4413      	add	r3, r2
 80043d0:	428b      	cmp	r3, r1
 80043d2:	d9f6      	bls.n	80043c2 <_sbrk+0x16>
    errno = ENOMEM;
 80043d4:	f012 fee8 	bl	80171a8 <__errno>
 80043d8:	230c      	movs	r3, #12
    return (void *)-1;
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80043de:	6003      	str	r3, [r0, #0]
}
 80043e0:	4610      	mov	r0, r2
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	200263bc 	.word	0x200263bc
 80043e8:	20050000 	.word	0x20050000
 80043ec:	00000800 	.word	0x00000800
 80043f0:	20026858 	.word	0x20026858

080043f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <SystemInit+0x10>)
 80043f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004402:	4770      	bx	lr
 8004404:	e000ed00 	.word	0xe000ed00

08004408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800440c:	480d      	ldr	r0, [pc, #52]	; (8004444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800440e:	490e      	ldr	r1, [pc, #56]	; (8004448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004410:	4a0e      	ldr	r2, [pc, #56]	; (800444c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004414:	e002      	b.n	800441c <LoopCopyDataInit>

08004416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800441a:	3304      	adds	r3, #4

0800441c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800441c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800441e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004420:	d3f9      	bcc.n	8004416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004422:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004424:	4c0b      	ldr	r4, [pc, #44]	; (8004454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004428:	e001      	b.n	800442e <LoopFillZerobss>

0800442a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800442a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800442c:	3204      	adds	r2, #4

0800442e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800442e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004430:	d3fb      	bcc.n	800442a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004432:	f7ff ffdf 	bl	80043f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004436:	f012 febd 	bl	80171b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800443a:	f7fd fc0b 	bl	8001c54 <main>
  bx  lr    
 800443e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004440:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004448:	20005100 	.word	0x20005100
  ldr r2, =_sidata
 800444c:	080940e4 	.word	0x080940e4
  ldr r2, =_sbss
 8004450:	20005240 	.word	0x20005240
  ldr r4, =_ebss
 8004454:	20026858 	.word	0x20026858

08004458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004458:	e7fe      	b.n	8004458 <ADC_IRQHandler>
	...

0800445c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800445c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800445e:	2003      	movs	r0, #3
 8004460:	f000 f9a2 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004464:	200f      	movs	r0, #15
 8004466:	f7ff ff1f 	bl	80042a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800446a:	f7ff f88f 	bl	800358c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800446e:	2000      	movs	r0, #0
 8004470:	bd08      	pop	{r3, pc}
 8004472:	bf00      	nop

08004474 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004474:	4a03      	ldr	r2, [pc, #12]	; (8004484 <HAL_IncTick+0x10>)
 8004476:	4b04      	ldr	r3, [pc, #16]	; (8004488 <HAL_IncTick+0x14>)
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	440b      	add	r3, r1
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	200263c0 	.word	0x200263c0
 8004488:	2000001c 	.word	0x2000001c

0800448c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800448c:	4b01      	ldr	r3, [pc, #4]	; (8004494 <HAL_GetTick+0x8>)
 800448e:	6818      	ldr	r0, [r3, #0]
}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	200263c0 	.word	0x200263c0

08004498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800449c:	f7ff fff6 	bl	800448c <HAL_GetTick>
 80044a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044a2:	1c63      	adds	r3, r4, #1
 80044a4:	d002      	beq.n	80044ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_Delay+0x20>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044ac:	f7ff ffee 	bl	800448c <HAL_GetTick>
 80044b0:	1b43      	subs	r3, r0, r5
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	d3fa      	bcc.n	80044ac <HAL_Delay+0x14>
  {
  }
}
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	2000001c 	.word	0x2000001c

080044bc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044bc:	2800      	cmp	r0, #0
 80044be:	f000 809d 	beq.w	80045fc <HAL_ADC_Init+0x140>
{
 80044c2:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80044c4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80044c6:	4604      	mov	r4, r0
 80044c8:	b13d      	cbz	r5, 80044da <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044cc:	06db      	lsls	r3, r3, #27
 80044ce:	d50c      	bpl.n	80044ea <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044d0:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80044d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80044d8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80044da:	f7ff f86f 	bl	80035bc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80044de:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80044e2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044e6:	06db      	lsls	r3, r3, #27
 80044e8:	d4f2      	bmi.n	80044d0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80044ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80044ec:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_ADC_Init+0x150>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80044ee:	4a48      	ldr	r2, [pc, #288]	; (8004610 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 80044f0:	400b      	ands	r3, r1
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80044f8:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044fa:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80044fc:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004500:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004502:	6850      	ldr	r0, [r2, #4]
 8004504:	6861      	ldr	r1, [r4, #4]
 8004506:	4308      	orrs	r0, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004508:	4942      	ldr	r1, [pc, #264]	; (8004614 <HAL_ADC_Init+0x158>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800450a:	6050      	str	r0, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800450c:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800450e:	6920      	ldr	r0, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800451c:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800451e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004526:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	4302      	orrs	r2, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800452c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800452e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4302      	orrs	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800453c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800453e:	4288      	cmp	r0, r1
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004540:	609a      	str	r2, [r3, #8]
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004542:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004544:	d052      	beq.n	80045ec <HAL_ADC_Init+0x130>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800454a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800454c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	4310      	orrs	r0, r2
 8004552:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800455a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004562:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004564:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004566:	f022 0202 	bic.w	r2, r2, #2
 800456a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004572:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004574:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004578:	2a00      	cmp	r2, #0
 800457a:	d041      	beq.n	8004600 <HAL_ADC_Init+0x144>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800457c:	6858      	ldr	r0, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800457e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004580:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004584:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004586:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800458e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004596:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004598:	6add      	ldr	r5, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800459a:	69e2      	ldr	r2, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800459c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045a0:	6960      	ldr	r0, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045a2:	1e51      	subs	r1, r2, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045a4:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80045bc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
    ADC_CLEAR_ERRORCODE(hadc);
 80045c0:	2100      	movs	r1, #0
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045d2:	4608      	mov	r0, r1
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045d4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80045d6:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80045d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80045e4:	2300      	movs	r3, #0
 80045e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	e7b2      	b.n	8004562 <HAL_ADC_Init+0xa6>
    return HAL_ERROR;
 80045fc:	2001      	movs	r0, #1
}
 80045fe:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004606:	605a      	str	r2, [r3, #4]
 8004608:	e7c6      	b.n	8004598 <HAL_ADC_Init+0xdc>
 800460a:	bf00      	nop
 800460c:	ffffeefd 	.word	0xffffeefd
 8004610:	40012300 	.word	0x40012300
 8004614:	0f000001 	.word	0x0f000001

08004618 <HAL_ADC_ConfigChannel>:
{
 8004618:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t counter = 0;
 800461a:	2300      	movs	r3, #0
{
 800461c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800461e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004620:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	f000 80b2 	beq.w	800478e <HAL_ADC_ConfigChannel+0x176>
 800462a:	2301      	movs	r3, #1
 800462c:	4686      	mov	lr, r0
 800462e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004632:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004634:	f8de 3000 	ldr.w	r3, [lr]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004638:	2809      	cmp	r0, #9
 800463a:	d931      	bls.n	80046a0 <HAL_ADC_ConfigChannel+0x88>
 800463c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8004640:	d02e      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004642:	fa1f fc80 	uxth.w	ip, r0
 8004646:	2507      	movs	r5, #7
 8004648:	68dc      	ldr	r4, [r3, #12]
 800464a:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800464e:	4e51      	ldr	r6, [pc, #324]	; (8004794 <HAL_ADC_ConfigChannel+0x17c>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004650:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004652:	42b0      	cmp	r0, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004654:	fa05 f502 	lsl.w	r5, r5, r2
 8004658:	ea24 0405 	bic.w	r4, r4, r5
 800465c:	60dc      	str	r4, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800465e:	d069      	beq.n	8004734 <HAL_ADC_ConfigChannel+0x11c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004660:	688c      	ldr	r4, [r1, #8]
 8004662:	4094      	lsls	r4, r2
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	4314      	orrs	r4, r2
 8004668:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 800466a:	684a      	ldr	r2, [r1, #4]
 800466c:	2a06      	cmp	r2, #6
 800466e:	d829      	bhi.n	80046c4 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004670:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004674:	211f      	movs	r1, #31
 8004676:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004678:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800467c:	4091      	lsls	r1, r2
 800467e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004680:	ea22 0201 	bic.w	r2, r2, r1
 8004684:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004688:	ea4c 0202 	orr.w	r2, ip, r2
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800468e:	4a42      	ldr	r2, [pc, #264]	; (8004798 <HAL_ADC_ConfigChannel+0x180>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d02b      	beq.n	80046ec <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8004694:	2300      	movs	r3, #0
  return HAL_OK;
 8004696:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8004698:	f88e 303c 	strb.w	r3, [lr, #60]	; 0x3c
}
 800469c:	b002      	add	sp, #8
 800469e:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046a0:	fa1f fc80 	uxth.w	ip, r0
 80046a4:	2507      	movs	r5, #7
 80046a6:	691c      	ldr	r4, [r3, #16]
 80046a8:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046ac:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046ae:	40b5      	lsls	r5, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046b0:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046b2:	ea24 0405 	bic.w	r4, r4, r5
 80046b6:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046b8:	691c      	ldr	r4, [r3, #16]
 80046ba:	4322      	orrs	r2, r4
 80046bc:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 80046be:	684a      	ldr	r2, [r1, #4]
 80046c0:	2a06      	cmp	r2, #6
 80046c2:	d9d5      	bls.n	8004670 <HAL_ADC_ConfigChannel+0x58>
  else if (sConfig->Rank < 13)
 80046c4:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 80046ca:	d81e      	bhi.n	800470a <HAL_ADC_ConfigChannel+0xf2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046cc:	3a23      	subs	r2, #35	; 0x23
 80046ce:	211f      	movs	r1, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046d0:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046d4:	4091      	lsls	r1, r2
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	ea22 0201 	bic.w	r2, r2, r1
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	ea4c 0202 	orr.w	r2, ip, r2
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80046e6:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <HAL_ADC_ConfigChannel+0x180>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d1d3      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
 80046ec:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80046f0:	d019      	beq.n	8004726 <HAL_ADC_ConfigChannel+0x10e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046f2:	2812      	cmp	r0, #18
 80046f4:	d126      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x12c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80046f6:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_ADC_ConfigChannel+0x184>)
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80046fe:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004706:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004708:	e7c4      	b.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800470a:	3a41      	subs	r2, #65	; 0x41
 800470c:	211f      	movs	r1, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800470e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004712:	4091      	lsls	r1, r2
 8004714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004716:	ea22 0201 	bic.w	r2, r2, r1
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	ea4c 0202 	orr.w	r2, ip, r2
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
 8004724:	e7b3      	b.n	800468e <HAL_ADC_ConfigChannel+0x76>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004726:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800472a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800472e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004732:	e7af      	b.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	f04f 0c12 	mov.w	ip, #18
 800473a:	688c      	ldr	r4, [r1, #8]
 800473c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	e792      	b.n	800466a <HAL_ADC_ConfigChannel+0x52>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004744:	4b13      	ldr	r3, [pc, #76]	; (8004794 <HAL_ADC_ConfigChannel+0x17c>)
 8004746:	4298      	cmp	r0, r3
 8004748:	d001      	beq.n	800474e <HAL_ADC_ConfigChannel+0x136>
 800474a:	2811      	cmp	r0, #17
 800474c:	d1a2      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_ADC_ConfigChannel+0x184>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004750:	4910      	ldr	r1, [pc, #64]	; (8004794 <HAL_ADC_ConfigChannel+0x17c>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004752:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004754:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004756:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800475a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004762:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004764:	d196      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004766:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <HAL_ADC_ConfigChannel+0x188>)
 8004768:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <HAL_ADC_ConfigChannel+0x18c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	0c9b      	lsrs	r3, r3, #18
 8004772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d089      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
        counter--;
 8004780:	9b01      	ldr	r3, [sp, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f9      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x168>
 800478c:	e782      	b.n	8004694 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 800478e:	2002      	movs	r0, #2
}
 8004790:	b002      	add	sp, #8
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	10000012 	.word	0x10000012
 8004798:	40012000 	.word	0x40012000
 800479c:	40012300 	.word	0x40012300
 80047a0:	20000018 	.word	0x20000018
 80047a4:	431bde83 	.word	0x431bde83

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a8:	4906      	ldr	r1, [pc, #24]	; (80047c4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047aa:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ae:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047b8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047bc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80047be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80047c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00
 80047c8:	05fa0000 	.word	0x05fa0000

080047cc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_NVIC_SetPriority+0x70>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047da:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047de:	f1be 0f04 	cmp.w	lr, #4
 80047e2:	bf28      	it	cs
 80047e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e8:	f1bc 0f06 	cmp.w	ip, #6
 80047ec:	d91a      	bls.n	8004824 <HAL_NVIC_SetPriority+0x58>
 80047ee:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f0:	f04f 3cff 	mov.w	ip, #4294967295
 80047f4:	fa0c fc03 	lsl.w	ip, ip, r3
 80047f8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047fc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8004800:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004802:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004806:	ea21 010c 	bic.w	r1, r1, ip
 800480a:	fa01 f103 	lsl.w	r1, r1, r3
 800480e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004812:	db0a      	blt.n	800482a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004814:	0109      	lsls	r1, r1, #4
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_NVIC_SetPriority+0x74>)
 8004818:	b2c9      	uxtb	r1, r1
 800481a:	4403      	add	r3, r0
 800481c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004820:	f85d fb04 	ldr.w	pc, [sp], #4
 8004824:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004826:	4613      	mov	r3, r2
 8004828:	e7e8      	b.n	80047fc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	f000 000f 	and.w	r0, r0, #15
 800482e:	0109      	lsls	r1, r1, #4
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_NVIC_SetPriority+0x78>)
 8004832:	b2c9      	uxtb	r1, r1
 8004834:	4403      	add	r3, r0
 8004836:	7619      	strb	r1, [r3, #24]
 8004838:	f85d fb04 	ldr.w	pc, [sp], #4
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	e000e100 	.word	0xe000e100
 8004844:	e000ecfc 	.word	0xe000ecfc

08004848 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004848:	2800      	cmp	r0, #0
 800484a:	db07      	blt.n	800485c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800484c:	f000 011f 	and.w	r1, r0, #31
 8004850:	2301      	movs	r3, #1
 8004852:	0940      	lsrs	r0, r0, #5
 8004854:	4a02      	ldr	r2, [pc, #8]	; (8004860 <HAL_NVIC_EnableIRQ+0x18>)
 8004856:	408b      	lsls	r3, r1
 8004858:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e100 	.word	0xe000e100

08004864 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004864:	2800      	cmp	r0, #0
 8004866:	d036      	beq.n	80048d6 <HAL_CRC_Init+0x72>
{
 8004868:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800486a:	7f43      	ldrb	r3, [r0, #29]
 800486c:	4604      	mov	r4, r0
 800486e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004872:	b363      	cbz	r3, 80048ce <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004874:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004876:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004878:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800487a:	b9f3      	cbnz	r3, 80048ba <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	4a17      	ldr	r2, [pc, #92]	; (80048dc <HAL_CRC_Init+0x78>)
 8004880:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	f022 0218 	bic.w	r2, r2, #24
 8004888:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800488a:	7962      	ldrb	r2, [r4, #5]
 800488c:	b18a      	cbz	r2, 80048b2 <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800488e:	6922      	ldr	r2, [r4, #16]
 8004890:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004892:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004894:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004898:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800489c:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 800489e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80048a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a8:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 80048aa:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80048ac:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80048ae:	7761      	strb	r1, [r4, #29]
}
 80048b0:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295
 80048b6:	611a      	str	r2, [r3, #16]
 80048b8:	e7eb      	b.n	8004892 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80048ba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 f80e 	bl	80048e0 <HAL_CRCEx_Polynomial_Set>
 80048c4:	b908      	cbnz	r0, 80048ca <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	e7df      	b.n	800488a <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
}
 80048cc:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80048ce:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80048d0:	f7fe feba 	bl	8003648 <HAL_CRC_MspInit>
 80048d4:	e7ce      	b.n	8004874 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 80048d6:	2001      	movs	r0, #1
}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	04c11db7 	.word	0x04c11db7

080048e0 <HAL_CRCEx_Polynomial_Set>:
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80048e0:	231e      	movs	r3, #30
{
 80048e2:	b410      	push	{r4}
 80048e4:	e001      	b.n	80048ea <HAL_CRCEx_Polynomial_Set+0xa>
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80048e6:	3b01      	subs	r3, #1
 80048e8:	d315      	bcc.n	8004916 <HAL_CRCEx_Polynomial_Set+0x36>
 80048ea:	fa21 fc03 	lsr.w	ip, r1, r3
 80048ee:	f01c 0f01 	tst.w	ip, #1
 80048f2:	d0f8      	beq.n	80048e6 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 80048f4:	2a18      	cmp	r2, #24
 80048f6:	d80f      	bhi.n	8004918 <HAL_CRCEx_Polynomial_Set+0x38>
 80048f8:	e8df f002 	tbb	[pc, r2]
 80048fc:	0e0e0e14 	.word	0x0e0e0e14
 8004900:	0e0e0e0e 	.word	0x0e0e0e0e
 8004904:	0e0e0e1f 	.word	0x0e0e0e1f
 8004908:	0e0e0e0e 	.word	0x0e0e0e0e
 800490c:	0e0e0e22 	.word	0x0e0e0e22
 8004910:	0e0e0e0e 	.word	0x0e0e0e0e
 8004914:	12          	.byte	0x12
 8004915:	00          	.byte	0x00
 8004916:	b12a      	cbz	r2, 8004924 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004918:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800491a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800491e:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 8004920:	2b06      	cmp	r3, #6
 8004922:	d8f9      	bhi.n	8004918 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004924:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004926:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004928:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800492a:	68a3      	ldr	r3, [r4, #8]
 800492c:	f023 0318 	bic.w	r3, r3, #24
 8004930:	4313      	orrs	r3, r2
 8004932:	60a3      	str	r3, [r4, #8]
}
 8004934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004938:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800493a:	2b0f      	cmp	r3, #15
 800493c:	d9f2      	bls.n	8004924 <HAL_CRCEx_Polynomial_Set+0x44>
 800493e:	e7eb      	b.n	8004918 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8004940:	2b07      	cmp	r3, #7
 8004942:	d9ef      	bls.n	8004924 <HAL_CRCEx_Polynomial_Set+0x44>
 8004944:	e7e8      	b.n	8004918 <HAL_CRCEx_Polynomial_Set+0x38>
 8004946:	bf00      	nop

08004948 <HAL_DCMI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004948:	2800      	cmp	r0, #0
 800494a:	d047      	beq.n	80049dc <HAL_DCMI_Init+0x94>
{
 800494c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800494e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004952:	4604      	mov	r4, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d03e      	beq.n	80049d6 <HAL_DCMI_Init+0x8e>
    HAL_DCMI_MspInit(hdcmi);
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004958:	2202      	movs	r2, #2

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800495a:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800495c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004960:	2b00      	cmp	r3, #0
 8004962:	d134      	bne.n	80049ce <HAL_DCMI_Init+0x86>
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004964:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004966:	6861      	ldr	r1, [r4, #4]
 8004968:	6966      	ldr	r6, [r4, #20]
 800496a:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800496c:	6822      	ldr	r2, [r4, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800496e:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004970:	ea43 0306 	orr.w	r3, r3, r6
 8004974:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004976:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004978:	ea43 0306 	orr.w	r3, r3, r6
 800497c:	6926      	ldr	r6, [r4, #16]
 800497e:	ea43 0306 	orr.w	r3, r3, r6
 8004982:	68a6      	ldr	r6, [r4, #8]
 8004984:	ea43 0306 	orr.w	r3, r3, r6
 8004988:	6a26      	ldr	r6, [r4, #32]
 800498a:	ea43 0306 	orr.w	r3, r3, r6
 800498e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004990:	ea43 0306 	orr.w	r3, r3, r6
 8004994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004996:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800499a:	4e11      	ldr	r6, [pc, #68]	; (80049e0 <HAL_DCMI_Init+0x98>)
 800499c:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80049a0:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80049a2:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80049a4:	ea43 0305 	orr.w	r3, r3, r5
 80049a8:	6815      	ldr	r5, [r2, #0]
 80049aa:	ea43 0305 	orr.w	r3, r3, r5
 80049ae:	ea43 0300 	orr.w	r3, r3, r0
 80049b2:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80049b4:	d101      	bne.n	80049ba <HAL_DCMI_Init+0x72>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80049b6:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80049b8:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80049ba:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80049bc:	2000      	movs	r0, #0

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80049be:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80049c0:	f043 031e 	orr.w	r3, r3, #30
 80049c4:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80049c6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80049c8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35

  return HAL_OK;
}
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80049ce:	2200      	movs	r2, #0
 80049d0:	4610      	mov	r0, r2
 80049d2:	6262      	str	r2, [r4, #36]	; 0x24
 80049d4:	e7c7      	b.n	8004966 <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 80049d6:	f7fe fe4d 	bl	8003674 <HAL_DCMI_MspInit>
 80049da:	e7bd      	b.n	8004958 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 80049dc:	2001      	movs	r0, #1
}
 80049de:	4770      	bx	lr
 80049e0:	ffe0f007 	.word	0xffe0f007

080049e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80049e8:	f7ff fd50 	bl	800448c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	d054      	beq.n	8004a9a <HAL_DMA_Init+0xb6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049f0:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80049f2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80049f4:	2102      	movs	r1, #2
 80049f6:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80049f8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80049fc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a08:	e005      	b.n	8004a16 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a0a:	f7ff fd3f 	bl	800448c <HAL_GetTick>
 8004a0e:	1b43      	subs	r3, r0, r5
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d83b      	bhi.n	8004a8c <HAL_DMA_Init+0xa8>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	07d1      	lsls	r1, r2, #31
 8004a1a:	d4f6      	bmi.n	8004a0a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a1c:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8004a20:	68e1      	ldr	r1, [r4, #12]
 8004a22:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a24:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8004a26:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a28:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a2a:	6921      	ldr	r1, [r4, #16]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	6961      	ldr	r1, [r4, #20]
 8004a30:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a32:	69e1      	ldr	r1, [r4, #28]
 8004a34:	4302      	orrs	r2, r0
 8004a36:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a38:	4934      	ldr	r1, [pc, #208]	; (8004b0c <HAL_DMA_Init+0x128>)
 8004a3a:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a3c:	6a25      	ldr	r5, [r4, #32]
 8004a3e:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a40:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a44:	2904      	cmp	r1, #4
 8004a46:	d02a      	beq.n	8004a9e <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a48:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a4a:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a4c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a50:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a52:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8004a54:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a56:	492e      	ldr	r1, [pc, #184]	; (8004b10 <HAL_DMA_Init+0x12c>)
 8004a58:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a5a:	482e      	ldr	r0, [pc, #184]	; (8004b14 <HAL_DMA_Init+0x130>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a5c:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8004a60:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a62:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a64:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a68:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a6c:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a70:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a72:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a76:	bf88      	it	hi
 8004a78:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7a:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a7c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a7e:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a80:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004a82:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a84:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004a86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a8e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8004a90:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a92:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004a9a:	2001      	movs	r0, #1
}
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a9e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8004aa2:	4329      	orrs	r1, r5
 8004aa4:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004aa6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8004aa8:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004aaa:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aac:	f021 0107 	bic.w	r1, r1, #7
 8004ab0:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004ab2:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	d0cb      	beq.n	8004a52 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aba:	b178      	cbz	r0, 8004adc <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004abc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004ac0:	d016      	beq.n	8004af0 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ac2:	2a02      	cmp	r2, #2
 8004ac4:	d903      	bls.n	8004ace <HAL_DMA_Init+0xea>
 8004ac6:	2a03      	cmp	r2, #3
 8004ac8:	d1c3      	bne.n	8004a52 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aca:	01ea      	lsls	r2, r5, #7
 8004acc:	d5c1      	bpl.n	8004a52 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8004ace:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad0:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8004ad2:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad4:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004adc:	2a01      	cmp	r2, #1
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_Init+0x104>
 8004ae0:	f032 0202 	bics.w	r2, r2, #2
 8004ae4:	d1b5      	bne.n	8004a52 <HAL_DMA_Init+0x6e>
 8004ae6:	e7f0      	b.n	8004aca <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004aec:	d1b1      	bne.n	8004a52 <HAL_DMA_Init+0x6e>
 8004aee:	e7ee      	b.n	8004ace <HAL_DMA_Init+0xea>
    switch (tmp)
 8004af0:	2a03      	cmp	r2, #3
 8004af2:	d8ae      	bhi.n	8004a52 <HAL_DMA_Init+0x6e>
 8004af4:	a001      	add	r0, pc, #4	; (adr r0, 8004afc <HAL_DMA_Init+0x118>)
 8004af6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004acf 	.word	0x08004acf
 8004b00:	08004acb 	.word	0x08004acb
 8004b04:	08004acf 	.word	0x08004acf
 8004b08:	08004ae9 	.word	0x08004ae9
 8004b0c:	f010803f 	.word	0xf010803f
 8004b10:	aaaaaaab 	.word	0xaaaaaaab
 8004b14:	0801c82c 	.word	0x0801c82c
 8004b18:	fffffc00 	.word	0xfffffc00

08004b1c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d039      	beq.n	8004b94 <HAL_DMA_DeInit+0x78>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b20:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004b24:	4603      	mov	r3, r0
 8004b26:	2a02      	cmp	r2, #2
 8004b28:	b2d0      	uxtb	r0, r2
 8004b2a:	d035      	beq.n	8004b98 <HAL_DMA_DeInit+0x7c>
  __HAL_DMA_DISABLE(hdma);
 8004b2c:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8004b2e:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b30:	491a      	ldr	r1, [pc, #104]	; (8004b9c <HAL_DMA_DeInit+0x80>)
{
 8004b32:	b430      	push	{r4, r5}
  __HAL_DMA_DISABLE(hdma);
 8004b34:	6814      	ldr	r4, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b36:	4d1a      	ldr	r5, [pc, #104]	; (8004ba0 <HAL_DMA_DeInit+0x84>)
  __HAL_DMA_DISABLE(hdma);
 8004b38:	f024 0401 	bic.w	r4, r4, #1
 8004b3c:	6014      	str	r4, [r2, #0]
  hdma->Instance->CR   = 0U;
 8004b3e:	6010      	str	r0, [r2, #0]
  hdma->Instance->NDTR = 0U;
 8004b40:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8004b42:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8004b44:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8004b46:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004b48:	2021      	movs	r0, #33	; 0x21
 8004b4a:	6150      	str	r0, [r2, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b4c:	b2d0      	uxtb	r0, r2
 8004b4e:	3810      	subs	r0, #16
 8004b50:	fba1 4100 	umull	r4, r1, r1, r0
  if (stream_number > 3U)
 8004b54:	285f      	cmp	r0, #95	; 0x5f
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b56:	f04f 003f 	mov.w	r0, #63	; 0x3f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b5a:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b5e:	5c6c      	ldrb	r4, [r5, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b60:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <HAL_DMA_DeInit+0x88>)
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b62:	fa00 f004 	lsl.w	r0, r0, r4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b66:	65dc      	str	r4, [r3, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b68:	ea01 0102 	and.w	r1, r1, r2
  hdma->XferCpltCallback = NULL;
 8004b6c:	f04f 0200 	mov.w	r2, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b70:	bf88      	it	hi
 8004b72:	3104      	addhi	r1, #4
 8004b74:	6599      	str	r1, [r3, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b76:	6088      	str	r0, [r1, #8]
  return HAL_OK;
 8004b78:	4610      	mov	r0, r2
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->XferHalfCpltCallback = NULL;
 8004b84:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
}
 8004b88:	bc30      	pop	{r4, r5}
  hdma->XferM1HalfCpltCallback = NULL;
 8004b8a:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8004b8e:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 8004b92:	4770      	bx	lr
    return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1
 8004b96:	4770      	bx	lr
}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ba0:	0801c82c 	.word	0x0801c82c
 8004ba4:	fffffc00 	.word	0xfffffc00

08004ba8 <HAL_DMA_Abort>:
{
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bac:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8004bae:	f7ff fc6d 	bl	800448c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d006      	beq.n	8004bc8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bba:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8004bbc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bbe:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	4606      	mov	r6, r0
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	f022 0216 	bic.w	r2, r2, #22
 8004bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bda:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bde:	b34a      	cbz	r2, 8004c34 <HAL_DMA_Abort+0x8c>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f022 0208 	bic.w	r2, r2, #8
 8004be6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf0:	e005      	b.n	8004bfe <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bf2:	f7ff fc4b 	bl	800448c <HAL_GetTick>
 8004bf6:	1b83      	subs	r3, r0, r6
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	d811      	bhi.n	8004c20 <HAL_DMA_Abort+0x78>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f013 0301 	ands.w	r3, r3, #1
 8004c04:	d1f5      	bne.n	8004bf2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c06:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004c08:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004c0a:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 8004c0c:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c0e:	fa02 f101 	lsl.w	r1, r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	2201      	movs	r2, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c14:	60a9      	str	r1, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004c16:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004c1a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c22:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8004c24:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c26:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c34:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	d1d2      	bne.n	8004be0 <HAL_DMA_Abort+0x38>
 8004c3a:	e7d5      	b.n	8004be8 <HAL_DMA_Abort+0x40>

08004c3c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c3c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8004c40:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c42:	2a02      	cmp	r2, #2
 8004c44:	d003      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c46:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c4c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004c4e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c50:	2105      	movs	r1, #5
  return HAL_OK;
 8004c52:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c54:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop

08004c64 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004c64:	b338      	cbz	r0, 8004cb6 <HAL_DMA2D_Init+0x52>
{
 8004c66:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004c68:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c72:	b1db      	cbz	r3, 8004cac <HAL_DMA2D_Init+0x48>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c74:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c76:	2102      	movs	r1, #2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c78:	68e5      	ldr	r5, [r4, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c7a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c7e:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c80:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c84:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8004c88:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c8a:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c8c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c90:	f021 0107 	bic.w	r1, r1, #7
 8004c94:	4301      	orrs	r1, r0
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004c96:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c98:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	432a      	orrs	r2, r5
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ca2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ca4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ca6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004cac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8004cb0:	f7fe fd6c 	bl	800378c <HAL_DMA2D_MspInit>
 8004cb4:	e7de      	b.n	8004c74 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 8004cb6:	2001      	movs	r0, #1
}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	ffffc000 	.word	0xffffc000

08004cc0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004cc0:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004cc2:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8004cc6:	2c01      	cmp	r4, #1
 8004cc8:	d037      	beq.n	8004d3a <HAL_DMA2D_Start+0x7a>
 8004cca:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004ccc:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 8004cce:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cd2:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004cd4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cd8:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004cdc:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004ce0:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ce2:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004ce6:	f005 4c40 	and.w	ip, r5, #3221225472	; 0xc0000000
 8004cea:	ea43 030c 	orr.w	r3, r3, ip
 8004cee:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004cf0:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004cf2:	d007      	beq.n	8004d04 <HAL_DMA2D_Start+0x44>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004cf4:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8004cf6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8004cf8:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6023      	str	r3, [r4, #0]
}
 8004d00:	bc70      	pop	{r4, r5, r6}
 8004d02:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d04:	6883      	ldr	r3, [r0, #8]
 8004d06:	b1b3      	cbz	r3, 8004d36 <HAL_DMA2D_Start+0x76>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d024      	beq.n	8004d56 <HAL_DMA2D_Start+0x96>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d0c:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004d0e:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d12:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d16:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d18:	d020      	beq.n	8004d5c <HAL_DMA2D_Start+0x9c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d1a:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d1c:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d20:	d00e      	beq.n	8004d40 <HAL_DMA2D_Start+0x80>
      tmp2 = (tmp2 >> 20U);
 8004d22:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8004d24:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004d26:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8004d28:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004d2a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004d2e:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8004d32:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004d36:	63a1      	str	r1, [r4, #56]	; 0x38
 8004d38:	e7dd      	b.n	8004cf6 <HAL_DMA2D_Start+0x36>
  __HAL_LOCK(hdma2d);
 8004d3a:	2002      	movs	r0, #2
}
 8004d3c:	bc70      	pop	{r4, r5, r6}
 8004d3e:	4770      	bx	lr
      tmp2 = (tmp2 >> 19U);
 8004d40:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 8004d42:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d44:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8004d46:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d48:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004d4c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8004d50:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8004d54:	e7ef      	b.n	8004d36 <HAL_DMA2D_Start+0x76>
      tmp = (tmp3 | tmp2 | tmp4);
 8004d56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8004d5a:	e7ec      	b.n	8004d36 <HAL_DMA2D_Start+0x76>
      tmp2 = (tmp2 >> 19U);
 8004d5c:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 8004d5e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d60:	02db      	lsls	r3, r3, #11
 8004d62:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004d66:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8004d6a:	e7e4      	b.n	8004d36 <HAL_DMA2D_Start+0x76>

08004d6c <HAL_DMA2D_PollForTransfer>:
{
 8004d6c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8004d6e:	2300      	movs	r3, #0
{
 8004d70:	b082      	sub	sp, #8
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8004d76:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004d78:	6803      	ldr	r3, [r0, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	07d6      	lsls	r6, r2, #31
 8004d7e:	d40f      	bmi.n	8004da0 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d80:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d84:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8004d86:	0691      	lsls	r1, r2, #26
 8004d88:	d432      	bmi.n	8004df0 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004d8a:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d8c:	2201      	movs	r2, #1
  return HAL_OK;
 8004d8e:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004d90:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d92:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8004d96:	2300      	movs	r3, #0
 8004d98:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8004da0:	f7ff fb74 	bl	800448c <HAL_GetTick>
 8004da4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004da6:	1c6a      	adds	r2, r5, #1
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	d150      	bne.n	8004e4e <HAL_DMA2D_PollForTransfer+0xe2>
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	0796      	lsls	r6, r2, #30
 8004db0:	d4e6      	bmi.n	8004d80 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004db6:	9a01      	ldr	r2, [sp, #4]
 8004db8:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004dbc:	d0f6      	beq.n	8004dac <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004dbe:	9a01      	ldr	r2, [sp, #4]
 8004dc0:	0690      	lsls	r0, r2, #26
 8004dc2:	d503      	bpl.n	8004dcc <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004dc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004dc6:	f042 0202 	orr.w	r2, r2, #2
 8004dca:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004dcc:	9a01      	ldr	r2, [sp, #4]
 8004dce:	07d1      	lsls	r1, r2, #31
 8004dd0:	d503      	bpl.n	8004dda <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004dda:	2121      	movs	r1, #33	; 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ddc:	2204      	movs	r2, #4
        return HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004de0:	6099      	str	r1, [r3, #8]
        __HAL_UNLOCK(hdma2d);
 8004de2:	2300      	movs	r3, #0
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004de4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8004de8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004dec:	b002      	add	sp, #8
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8004df0:	f7ff fb4c 	bl	800448c <HAL_GetTick>
 8004df4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004df6:	1c68      	adds	r0, r5, #1
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	d141      	bne.n	8004e80 <HAL_DMA2D_PollForTransfer+0x114>
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	06d1      	lsls	r1, r2, #27
 8004e00:	d4c3      	bmi.n	8004d8a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e06:	9a01      	ldr	r2, [sp, #4]
 8004e08:	f012 0f29 	tst.w	r2, #41	; 0x29
 8004e0c:	d0f6      	beq.n	8004dfc <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e0e:	9a01      	ldr	r2, [sp, #4]
 8004e10:	0712      	lsls	r2, r2, #28
 8004e12:	d503      	bpl.n	8004e1c <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e16:	f042 0204 	orr.w	r2, r2, #4
 8004e1a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e1c:	9a01      	ldr	r2, [sp, #4]
 8004e1e:	0696      	lsls	r6, r2, #26
 8004e20:	d503      	bpl.n	8004e2a <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e24:	f042 0202 	orr.w	r2, r2, #2
 8004e28:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e2a:	9a01      	ldr	r2, [sp, #4]
 8004e2c:	07d5      	lsls	r5, r2, #31
 8004e2e:	d503      	bpl.n	8004e38 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e38:	2129      	movs	r1, #41	; 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e3a:	2204      	movs	r2, #4
        return HAL_ERROR;
 8004e3c:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e3e:	6099      	str	r1, [r3, #8]
        __HAL_UNLOCK(hdma2d);
 8004e40:	2300      	movs	r3, #0
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e42:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8004e46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	0790      	lsls	r0, r2, #30
 8004e52:	d495      	bmi.n	8004d80 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e58:	9a01      	ldr	r2, [sp, #4]
 8004e5a:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004e5e:	d1ae      	bne.n	8004dbe <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e60:	f7ff fb14 	bl	800448c <HAL_GetTick>
 8004e64:	1b80      	subs	r0, r0, r6
 8004e66:	42a8      	cmp	r0, r5
 8004e68:	d801      	bhi.n	8004e6e <HAL_DMA2D_PollForTransfer+0x102>
 8004e6a:	2d00      	cmp	r5, #0
 8004e6c:	d19b      	bne.n	8004da6 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e70:	2203      	movs	r2, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e72:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8004e76:	4610      	mov	r0, r2
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e78:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e7a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8004e7e:	e78a      	b.n	8004d96 <HAL_DMA2D_PollForTransfer+0x2a>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	06d2      	lsls	r2, r2, #27
 8004e84:	d481      	bmi.n	8004d8a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e8a:	9a01      	ldr	r2, [sp, #4]
 8004e8c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8004e90:	d1bd      	bne.n	8004e0e <HAL_DMA2D_PollForTransfer+0xa2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7ff fafb 	bl	800448c <HAL_GetTick>
 8004e96:	1b80      	subs	r0, r0, r6
 8004e98:	42a8      	cmp	r0, r5
 8004e9a:	d8e8      	bhi.n	8004e6e <HAL_DMA2D_PollForTransfer+0x102>
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	d1aa      	bne.n	8004df6 <HAL_DMA2D_PollForTransfer+0x8a>
 8004ea0:	e7e5      	b.n	8004e6e <HAL_DMA2D_PollForTransfer+0x102>
 8004ea2:	bf00      	nop

08004ea4 <HAL_DMA2D_LineEventCallback>:
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop

08004eac <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004eac:	6803      	ldr	r3, [r0, #0]
{
 8004eae:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004eb0:	685d      	ldr	r5, [r3, #4]
{
 8004eb2:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004eb4:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004eb6:	07ea      	lsls	r2, r5, #31
 8004eb8:	d501      	bpl.n	8004ebe <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004eba:	05f1      	lsls	r1, r6, #23
 8004ebc:	d456      	bmi.n	8004f6c <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ebe:	06aa      	lsls	r2, r5, #26
 8004ec0:	d501      	bpl.n	8004ec6 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004ec2:	04b3      	lsls	r3, r6, #18
 8004ec4:	d43b      	bmi.n	8004f3e <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004ec6:	0728      	lsls	r0, r5, #28
 8004ec8:	d501      	bpl.n	8004ece <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004eca:	0531      	lsls	r1, r6, #20
 8004ecc:	d421      	bmi.n	8004f12 <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ece:	076a      	lsls	r2, r5, #29
 8004ed0:	d501      	bpl.n	8004ed6 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ed2:	0573      	lsls	r3, r6, #21
 8004ed4:	d472      	bmi.n	8004fbc <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004ed6:	07a8      	lsls	r0, r5, #30
 8004ed8:	d501      	bpl.n	8004ede <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004eda:	05b1      	lsls	r1, r6, #22
 8004edc:	d404      	bmi.n	8004ee8 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004ede:	06ea      	lsls	r2, r5, #27
 8004ee0:	d501      	bpl.n	8004ee6 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004ee2:	04f3      	lsls	r3, r6, #19
 8004ee4:	d457      	bmi.n	8004f96 <HAL_DMA2D_IRQHandler+0xea>
}
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ef6:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ef8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004efa:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 8004efc:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004efe:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004f02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0e8      	beq.n	8004ede <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4798      	blx	r3
 8004f10:	e7e5      	b.n	8004ede <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f20:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f24:	4313      	orrs	r3, r2
 8004f26:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f28:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004f2c:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 8004f2e:	6963      	ldr	r3, [r4, #20]
      __HAL_UNLOCK(hdma2d);
 8004f30:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ca      	beq.n	8004ece <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4798      	blx	r3
 8004f3c:	e7c7      	b.n	8004ece <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f46:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004f48:	2220      	movs	r2, #32
 8004f4a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f4c:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f56:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004f5a:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
 8004f5c:	6963      	ldr	r3, [r4, #20]
      __HAL_UNLOCK(hdma2d);
 8004f5e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0af      	beq.n	8004ec6 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 8004f66:	4620      	mov	r0, r4
 8004f68:	4798      	blx	r3
 8004f6a:	e7ac      	b.n	8004ec6 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f72:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f80:	2304      	movs	r3, #4
 8004f82:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004f86:	2300      	movs	r3, #0
 8004f88:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004f8c:	6943      	ldr	r3, [r0, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d095      	beq.n	8004ebe <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 8004f92:	4798      	blx	r3
 8004f94:	e793      	b.n	8004ebe <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004f96:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004f98:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f9a:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 8004f9c:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fa4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004fa6:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004fa8:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hdma2d);
 8004fac:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fb0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fb2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004fb6:	f7ff ff77 	bl	8004ea8 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004fbc:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004fbe:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004fc8:	2204      	movs	r2, #4
 8004fca:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004fcc:	f7ff ff6a 	bl	8004ea4 <HAL_DMA2D_LineEventCallback>
 8004fd0:	e781      	b.n	8004ed6 <HAL_DMA2D_IRQHandler+0x2a>
 8004fd2:	bf00      	nop

08004fd4 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004fd4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8004fd8:	2a01      	cmp	r2, #1
 8004fda:	d04e      	beq.n	800507a <HAL_DMA2D_ConfigLayer+0xa6>
 8004fdc:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004fde:	eb00 1c01 	add.w	ip, r0, r1, lsl #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fe2:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8004fe4:	2001      	movs	r0, #1
{
 8004fe6:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8004fe8:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ff0:	e9dc 0207 	ldrd	r0, r2, [ip, #28]
 8004ff4:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ff8:	3809      	subs	r0, #9
 8004ffa:	2801      	cmp	r0, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ffc:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005000:	d91d      	bls.n	800503e <HAL_DMA2D_ConfigLayer+0x6a>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005002:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005006:	b189      	cbz	r1, 800502c <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	491d      	ldr	r1, [pc, #116]	; (8005080 <HAL_DMA2D_ConfigLayer+0xac>)
 800500c:	69c5      	ldr	r5, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800500e:	f8dc 4018 	ldr.w	r4, [ip, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005012:	4029      	ands	r1, r5
 8005014:	4311      	orrs	r1, r2
 8005016:	61c1      	str	r1, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005018:	6104      	str	r4, [r0, #16]
  __HAL_UNLOCK(hdma2d);
 800501a:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800501c:	2101      	movs	r1, #1
  return HAL_OK;
 800501e:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005020:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8005024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8005028:	bc70      	pop	{r4, r5, r6}
 800502a:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	4914      	ldr	r1, [pc, #80]	; (8005080 <HAL_DMA2D_ConfigLayer+0xac>)
 8005030:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005032:	699c      	ldr	r4, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005034:	4029      	ands	r1, r5
 8005036:	4311      	orrs	r1, r2
 8005038:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800503a:	6184      	str	r4, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800503c:	e7ed      	b.n	800501a <HAL_DMA2D_ConfigLayer+0x46>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800503e:	f000 447f 	and.w	r4, r0, #4278190080	; 0xff000000
 8005042:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005044:	b961      	cbnz	r1, 8005060 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	490d      	ldr	r1, [pc, #52]	; (8005080 <HAL_DMA2D_ConfigLayer+0xac>)
 800504a:	6a46      	ldr	r6, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800504c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800504e:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005050:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005052:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005056:	4311      	orrs	r1, r2
 8005058:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800505a:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800505c:	6284      	str	r4, [r0, #40]	; 0x28
 800505e:	e7dc      	b.n	800501a <HAL_DMA2D_ConfigLayer+0x46>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005060:	681c      	ldr	r4, [r3, #0]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005062:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005066:	4906      	ldr	r1, [pc, #24]	; (8005080 <HAL_DMA2D_ConfigLayer+0xac>)
 8005068:	69e6      	ldr	r6, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800506a:	f8dc 5018 	ldr.w	r5, [ip, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800506e:	4031      	ands	r1, r6
 8005070:	4311      	orrs	r1, r2
 8005072:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005074:	6125      	str	r5, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005076:	6220      	str	r0, [r4, #32]
 8005078:	e7cf      	b.n	800501a <HAL_DMA2D_ConfigLayer+0x46>
  __HAL_LOCK(hdma2d);
 800507a:	2002      	movs	r0, #2
}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	00fcfff0 	.word	0x00fcfff0

08005084 <HAL_ETH_Init>:
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
  uint32_t tickstart;

  if (heth == NULL)
 8005084:	2800      	cmp	r0, #0
 8005086:	f000 8115 	beq.w	80052b4 <HAL_ETH_Init+0x230>
  {
    return HAL_ERROR;
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800508a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800508e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005090:	4605      	mov	r5, r0
 8005092:	b083      	sub	sp, #12
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8107 	beq.w	80052a8 <HAL_ETH_Init+0x224>
    HAL_ETH_MspInit(heth);

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509a:	4987      	ldr	r1, [pc, #540]	; (80052b8 <HAL_ETH_Init+0x234>)

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800509c:	68ac      	ldr	r4, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509e:	6c48      	ldr	r0, [r1, #68]	; 0x44
  (void)SYSCFG->PMC;

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80050a0:	682a      	ldr	r2, [r5, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80050a6:	4b85      	ldr	r3, [pc, #532]	; (80052bc <HAL_ETH_Init+0x238>)
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80050a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ac:	6448      	str	r0, [r1, #68]	; 0x44
 80050ae:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80050b0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80050b4:	9101      	str	r1, [sp, #4]
 80050b6:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80050be:	6059      	str	r1, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	4321      	orrs	r1, r4
 80050c4:	6059      	str	r1, [r3, #4]
  (void)SYSCFG->PMC;
 80050c6:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d0:	f7ff f9dc 	bl	800448c <HAL_GetTick>
 80050d4:	4606      	mov	r6, r0

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80050d6:	e006      	b.n	80050e6 <HAL_ETH_Init+0x62>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80050d8:	f7ff f9d8 	bl	800448c <HAL_GetTick>
 80050dc:	1b83      	subs	r3, r0, r6
 80050de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050e2:	f200 80d8 	bhi.w	8005296 <HAL_ETH_Init+0x212>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80050ec:	6814      	ldr	r4, [r2, #0]
 80050ee:	f014 0401 	ands.w	r4, r4, #1
 80050f2:	d1f1      	bne.n	80050d8 <HAL_ETH_Init+0x54>
{
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80050f4:	6819      	ldr	r1, [r3, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050f6:	2001      	movs	r0, #1
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80050f8:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <HAL_ETH_Init+0x23c>)
 80050fa:	400a      	ands	r2, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050fc:	f442 429c 	orr.w	r2, r2, #19968	; 0x4e00
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005100:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8005102:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005104:	f7ff f9c8 	bl	8004498 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005108:	682a      	ldr	r2, [r5, #0]
  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800510a:	f64f 7141 	movw	r1, #65345	; 0xff41
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800510e:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg1;
 8005110:	6016      	str	r6, [r2, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8005112:	6993      	ldr	r3, [r2, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005114:	400b      	ands	r3, r1
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800511a:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 800511c:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800511e:	f7ff f9bb 	bl	8004498 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005122:	682a      	ldr	r2, [r5, #0]

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005124:	4967      	ldr	r1, [pc, #412]	; (80052c4 <HAL_ETH_Init+0x240>)
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005126:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
  (heth->Instance)->MACFCR = tmpreg1;
 800512a:	6196      	str	r6, [r2, #24]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800512c:	4a66      	ldr	r2, [pc, #408]	; (80052c8 <HAL_ETH_Init+0x244>)
  tmpreg1 = (heth->Instance)->DMAOMR;
 800512e:	6998      	ldr	r0, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005130:	4001      	ands	r1, r0
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005132:	2001      	movs	r0, #1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005134:	430a      	orrs	r2, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005136:	619a      	str	r2, [r3, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005138:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800513a:	f7ff f9ad 	bl	8004498 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800513e:	682b      	ldr	r3, [r5, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005140:	2001      	movs	r0, #1
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005142:	4a62      	ldr	r2, [pc, #392]	; (80052cc <HAL_ETH_Init+0x248>)
  (heth->Instance)->DMAOMR = tmpreg1;
 8005144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005148:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800514a:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 800514c:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800514e:	f7ff f9a3 	bl	8004498 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005152:	6829      	ldr	r1, [r5, #0]
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005154:	68ea      	ldr	r2, [r5, #12]
  (heth->Instance)->DMABMR = tmpreg1;
 8005156:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    WRITE_REG(dmatxdesc->DESC3, 0x0);

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800515a:	4613      	mov	r3, r2
  (heth->Instance)->DMABMR = tmpreg1;
 800515c:	600e      	str	r6, [r1, #0]
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800515e:	6014      	str	r4, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005160:	6054      	str	r4, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005162:	6094      	str	r4, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005164:	60d4      	str	r4, [r2, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005166:	6810      	ldr	r0, [r2, #0]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005168:	61aa      	str	r2, [r5, #24]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800516a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800516e:	f843 0b28 	str.w	r0, [r3], #40

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005172:	60d3      	str	r3, [r2, #12]
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005174:	6810      	ldr	r0, [r2, #0]
 8005176:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800517a:	6010      	str	r0, [r2, #0]
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800517c:	f102 0050 	add.w	r0, r2, #80	; 0x50
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005180:	6294      	str	r4, [r2, #40]	; 0x28
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005182:	62d4      	str	r4, [r2, #44]	; 0x2c
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005184:	6314      	str	r4, [r2, #48]	; 0x30
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005186:	6354      	str	r4, [r2, #52]	; 0x34
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005188:	61eb      	str	r3, [r5, #28]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800518a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800518c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005190:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005192:	6350      	str	r0, [r2, #52]	; 0x34
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005194:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005196:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800519a:	6293      	str	r3, [r2, #40]	; 0x28
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800519c:	6514      	str	r4, [r2, #80]	; 0x50
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800519e:	6554      	str	r4, [r2, #84]	; 0x54
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80051a0:	6594      	str	r4, [r2, #88]	; 0x58
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80051a2:	65d4      	str	r4, [r2, #92]	; 0x5c
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80051a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80051a6:	6228      	str	r0, [r5, #32]
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80051a8:	f102 0078 	add.w	r0, r2, #120	; 0x78
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80051ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b0:	6513      	str	r3, [r2, #80]	; 0x50
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80051b2:	65d0      	str	r0, [r2, #92]	; 0x5c
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80051b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80051b6:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80051ba:	6513      	str	r3, [r2, #80]	; 0x50
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80051bc:	6794      	str	r4, [r2, #120]	; 0x78
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80051be:	67d4      	str	r4, [r2, #124]	; 0x7c
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80051c0:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80051c4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80051c8:	6f93      	ldr	r3, [r2, #120]	; 0x78
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80051ca:	6268      	str	r0, [r5, #36]	; 0x24
    WRITE_REG(dmarxdesc->DESC3, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80051cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80051d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d4:	6793      	str	r3, [r2, #120]	; 0x78
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80051d6:	f8c2 2084 	str.w	r2, [r2, #132]	; 0x84
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80051da:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80051dc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80051e0:	6793      	str	r3, [r2, #120]	; 0x78
    dmarxdesc =  heth->Init.RxDesc + i;
 80051e2:	692b      	ldr	r3, [r5, #16]
  heth->TxDescList.CurTxDesc = 0;
 80051e4:	62ac      	str	r4, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80051e6:	610a      	str	r2, [r1, #16]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80051e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80051ec:	601c      	str	r4, [r3, #0]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80051ee:	f103 0728 	add.w	r7, r3, #40	; 0x28
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80051f2:	605c      	str	r4, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80051f4:	609c      	str	r4, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80051f6:	60dc      	str	r4, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80051f8:	6018      	str	r0, [r3, #0]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80051fa:	605a      	str	r2, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80051fc:	685e      	ldr	r6, [r3, #4]
 80051fe:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005202:	e9c3 4408 	strd	r4, r4, [r3, #32]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005206:	605e      	str	r6, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005208:	64ab      	str	r3, [r5, #72]	; 0x48
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800520a:	60df      	str	r7, [r3, #12]
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800520c:	629c      	str	r4, [r3, #40]	; 0x28
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800520e:	62dc      	str	r4, [r3, #44]	; 0x2c
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005210:	631c      	str	r4, [r3, #48]	; 0x30
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005212:	635c      	str	r4, [r3, #52]	; 0x34
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005214:	6298      	str	r0, [r3, #40]	; 0x28
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005216:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800521c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800521e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8005222:	62de      	str	r6, [r3, #44]	; 0x2c
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005224:	64ef      	str	r7, [r5, #76]	; 0x4c
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005226:	f103 0750 	add.w	r7, r3, #80	; 0x50
 800522a:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800522c:	651c      	str	r4, [r3, #80]	; 0x50
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800522e:	655c      	str	r4, [r3, #84]	; 0x54
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005230:	659c      	str	r4, [r3, #88]	; 0x58
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005232:	65dc      	str	r4, [r3, #92]	; 0x5c
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005234:	6518      	str	r0, [r3, #80]	; 0x50
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005238:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800523a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800523e:	655e      	str	r6, [r3, #84]	; 0x54
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005240:	f103 0678 	add.w	r6, r3, #120	; 0x78
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005244:	e9c3 441c 	strd	r4, r4, [r3, #112]	; 0x70
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005248:	652f      	str	r7, [r5, #80]	; 0x50
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800524a:	65de      	str	r6, [r3, #92]	; 0x5c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800524c:	679c      	str	r4, [r3, #120]	; 0x78
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800524e:	67dc      	str	r4, [r3, #124]	; 0x7c
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005250:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005254:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005258:	6798      	str	r0, [r3, #120]	; 0x78
  return HAL_OK;
 800525a:	4620      	mov	r0, r4
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800525e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005260:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005264:	e9c3 4426 	strd	r4, r4, [r3, #152]	; 0x98
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005268:	67da      	str	r2, [r3, #124]	; 0x7c
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800526a:	656e      	str	r6, [r5, #84]	; 0x54
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800526c:	f8c3 3084 	str.w	r3, [r3, #132]	; 0x84
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005270:	e9c5 4417 	strd	r4, r4, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005274:	e9c5 441a 	strd	r4, r4, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005278:	65ac      	str	r4, [r5, #88]	; 0x58
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800527a:	686a      	ldr	r2, [r5, #4]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800527c:	60cb      	str	r3, [r1, #12]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <HAL_ETH_Init+0x24c>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005280:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005282:	6419      	str	r1, [r3, #64]	; 0x40
  heth->gState = HAL_ETH_STATE_READY;
 8005284:	2110      	movs	r1, #16
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005286:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800528a:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800528e:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8005292:	b003      	add	sp, #12
 8005294:	bdf0      	pop	{r4, r5, r6, r7, pc}
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005296:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8005298:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 800529a:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800529c:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80052a0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 80052a4:	b003      	add	sp, #12
 80052a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 80052a8:	2323      	movs	r3, #35	; 0x23
 80052aa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80052ae:	f7fe fa8d 	bl	80037cc <HAL_ETH_MspInit>
 80052b2:	e6f2      	b.n	800509a <HAL_ETH_Init+0x16>
    return HAL_ERROR;
 80052b4:	2001      	movs	r0, #1
}
 80052b6:	4770      	bx	lr
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40013800 	.word	0x40013800
 80052c0:	ff20810f 	.word	0xff20810f
 80052c4:	f8de3f23 	.word	0xf8de3f23
 80052c8:	02200004 	.word	0x02200004
 80052cc:	02c12080 	.word	0x02c12080
 80052d0:	40028000 	.word	0x40028000

080052d4 <HAL_GPIO_Init>:
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052d4:	2200      	movs	r2, #0
{
 80052d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
 80052da:	4613      	mov	r3, r2
{
 80052dc:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052de:	f8df a244 	ldr.w	sl, [pc, #580]	; 8005524 <HAL_GPIO_Init+0x250>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052e2:	4689      	mov	r9, r1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e4:	680c      	ldr	r4, [r1, #0]
 80052e6:	e004      	b.n	80052f2 <HAL_GPIO_Init+0x1e>
  for(position = 0; position < GPIO_NUMBER; position++)
 80052e8:	3301      	adds	r3, #1
 80052ea:	3202      	adds	r2, #2
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	f000 8099 	beq.w	8005424 <HAL_GPIO_Init+0x150>
    ioposition = ((uint32_t)0x01) << position;
 80052f2:	2101      	movs	r1, #1
 80052f4:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052f6:	ea01 0e04 	and.w	lr, r1, r4
    if(iocurrent == ioposition)
 80052fa:	43a1      	bics	r1, r4
 80052fc:	d1f4      	bne.n	80052e8 <HAL_GPIO_Init+0x14>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052fe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8005302:	f00c 0103 	and.w	r1, ip, #3
 8005306:	1e4d      	subs	r5, r1, #1
 8005308:	2d01      	cmp	r5, #1
 800530a:	f240 808e 	bls.w	800542a <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800530e:	2903      	cmp	r1, #3
 8005310:	f040 80c8 	bne.w	80054a4 <HAL_GPIO_Init+0x1d0>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005314:	4091      	lsls	r1, r2
 8005316:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8005318:	6806      	ldr	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800531a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800531e:	ea05 0506 	and.w	r5, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005322:	ea41 0105 	orr.w	r1, r1, r5
      GPIOx->MODER = temp;
 8005326:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005328:	d0de      	beq.n	80052e8 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532a:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 800532e:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005332:	f003 0603 	and.w	r6, r3, #3
 8005336:	f04f 080f 	mov.w	r8, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800533e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005342:	00b6      	lsls	r6, r6, #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005344:	4f71      	ldr	r7, [pc, #452]	; (800550c <HAL_GPIO_Init+0x238>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005346:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800534a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
 800534e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005352:	fa08 f806 	lsl.w	r8, r8, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005356:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005358:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800535c:	9101      	str	r1, [sp, #4]
 800535e:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8005360:	68a9      	ldr	r1, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005362:	ea21 0108 	bic.w	r1, r1, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005366:	d02e      	beq.n	80053c6 <HAL_GPIO_Init+0xf2>
 8005368:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800536c:	42b8      	cmp	r0, r7
 800536e:	f000 809d 	beq.w	80054ac <HAL_GPIO_Init+0x1d8>
 8005372:	4f67      	ldr	r7, [pc, #412]	; (8005510 <HAL_GPIO_Init+0x23c>)
 8005374:	42b8      	cmp	r0, r7
 8005376:	f000 809f 	beq.w	80054b8 <HAL_GPIO_Init+0x1e4>
 800537a:	4f66      	ldr	r7, [pc, #408]	; (8005514 <HAL_GPIO_Init+0x240>)
 800537c:	42b8      	cmp	r0, r7
 800537e:	f000 80a1 	beq.w	80054c4 <HAL_GPIO_Init+0x1f0>
 8005382:	4f65      	ldr	r7, [pc, #404]	; (8005518 <HAL_GPIO_Init+0x244>)
 8005384:	42b8      	cmp	r0, r7
 8005386:	f000 80a3 	beq.w	80054d0 <HAL_GPIO_Init+0x1fc>
 800538a:	4f64      	ldr	r7, [pc, #400]	; (800551c <HAL_GPIO_Init+0x248>)
 800538c:	42b8      	cmp	r0, r7
 800538e:	f000 80ab 	beq.w	80054e8 <HAL_GPIO_Init+0x214>
 8005392:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8005528 <HAL_GPIO_Init+0x254>
 8005396:	4540      	cmp	r0, r8
 8005398:	f000 80ac 	beq.w	80054f4 <HAL_GPIO_Init+0x220>
 800539c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800552c <HAL_GPIO_Init+0x258>
 80053a0:	4540      	cmp	r0, r8
 80053a2:	f000 809b 	beq.w	80054dc <HAL_GPIO_Init+0x208>
 80053a6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8005530 <HAL_GPIO_Init+0x25c>
 80053aa:	4540      	cmp	r0, r8
 80053ac:	f000 80a8 	beq.w	8005500 <HAL_GPIO_Init+0x22c>
 80053b0:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8005534 <HAL_GPIO_Init+0x260>
 80053b4:	4540      	cmp	r0, r8
 80053b6:	bf0c      	ite	eq
 80053b8:	f04f 0809 	moveq.w	r8, #9
 80053bc:	f04f 080a 	movne.w	r8, #10
 80053c0:	fa08 f606 	lsl.w	r6, r8, r6
 80053c4:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80053c6:	60a9      	str	r1, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053c8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp = EXTI->RTSR;
 80053cc:	4954      	ldr	r1, [pc, #336]	; (8005520 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 80053ce:	ea6f 050e 	mvn.w	r5, lr
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80053d2:	4e53      	ldr	r6, [pc, #332]	; (8005520 <HAL_GPIO_Init+0x24c>)
  for(position = 0; position < GPIO_NUMBER; position++)
 80053d4:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 80053d8:	6889      	ldr	r1, [r1, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053da:	f102 0202 	add.w	r2, r2, #2
        temp &= ~((uint32_t)iocurrent);
 80053de:	bf0c      	ite	eq
 80053e0:	4029      	andeq	r1, r5
          temp |= iocurrent;
 80053e2:	ea4e 0101 	orrne.w	r1, lr, r1

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053e6:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        EXTI->RTSR = temp;
 80053ea:	60b1      	str	r1, [r6, #8]
        temp = EXTI->FTSR;
 80053ec:	68f1      	ldr	r1, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80053ee:	4e4c      	ldr	r6, [pc, #304]	; (8005520 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 80053f0:	bf0c      	ite	eq
 80053f2:	4029      	andeq	r1, r5
          temp |= iocurrent;
 80053f4:	ea4e 0101 	orrne.w	r1, lr, r1

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053f8:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        EXTI->FTSR = temp;
 80053fc:	60f1      	str	r1, [r6, #12]
        temp = EXTI->EMR;
 80053fe:	6871      	ldr	r1, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8005400:	4e47      	ldr	r6, [pc, #284]	; (8005520 <HAL_GPIO_Init+0x24c>)
        temp &= ~((uint32_t)iocurrent);
 8005402:	bf0c      	ite	eq
 8005404:	4029      	andeq	r1, r5
          temp |= iocurrent;
 8005406:	ea4e 0101 	orrne.w	r1, lr, r1

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800540a:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
        EXTI->EMR = temp;
 800540e:	6071      	str	r1, [r6, #4]
        temp = EXTI->IMR;
 8005410:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8005412:	bf0c      	ite	eq
 8005414:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8005416:	ea4e 0101 	orrne.w	r1, lr, r1
        }
        EXTI->IMR = temp;
 800541a:	4d41      	ldr	r5, [pc, #260]	; (8005520 <HAL_GPIO_Init+0x24c>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800541c:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800541e:	6029      	str	r1, [r5, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005420:	f47f af67 	bne.w	80052f2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8005424:	b003      	add	sp, #12
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800542a:	2503      	movs	r5, #3
        temp = GPIOx->OSPEEDR; 
 800542c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800542e:	4095      	lsls	r5, r2
 8005430:	ea26 0805 	bic.w	r8, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8005434:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005438:	43ed      	mvns	r5, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800543a:	4096      	lsls	r6, r2
 800543c:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OSPEEDR = temp;
 8005440:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005442:	f3cc 1600 	ubfx	r6, ip, #4, #1
        temp = GPIOx->OTYPER;
 8005446:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800544a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800544c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005450:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 8005454:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8005456:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005458:	2902      	cmp	r1, #2
 800545a:	fa01 f102 	lsl.w	r1, r1, r2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800545e:	ea06 0805 	and.w	r8, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005462:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8005466:	fa06 f602 	lsl.w	r6, r6, r2
 800546a:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->PUPDR = temp;
 800546e:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005470:	f47f af52 	bne.w	8005318 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3];
 8005474:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005478:	f003 0607 	and.w	r6, r3, #7
 800547c:	f04f 0b0f 	mov.w	fp, #15
 8005480:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005484:	00b6      	lsls	r6, r6, #2
        temp = GPIOx->AFR[position >> 3];
 8005486:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800548a:	fa0b fb06 	lsl.w	fp, fp, r6
 800548e:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005492:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005496:	fa07 f606 	lsl.w	r6, r7, r6
 800549a:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 800549e:	f8c8 6020 	str.w	r6, [r8, #32]
 80054a2:	e739      	b.n	8005318 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054a4:	2503      	movs	r5, #3
 80054a6:	4095      	lsls	r5, r2
 80054a8:	43ed      	mvns	r5, r5
 80054aa:	e7d4      	b.n	8005456 <HAL_GPIO_Init+0x182>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80054ac:	f04f 0801 	mov.w	r8, #1
 80054b0:	fa08 f606 	lsl.w	r6, r8, r6
 80054b4:	4331      	orrs	r1, r6
 80054b6:	e786      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 80054b8:	f04f 0802 	mov.w	r8, #2
 80054bc:	fa08 f606 	lsl.w	r6, r8, r6
 80054c0:	4331      	orrs	r1, r6
 80054c2:	e780      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 80054c4:	f04f 0803 	mov.w	r8, #3
 80054c8:	fa08 f606 	lsl.w	r6, r8, r6
 80054cc:	4331      	orrs	r1, r6
 80054ce:	e77a      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 80054d0:	f04f 0804 	mov.w	r8, #4
 80054d4:	fa08 f606 	lsl.w	r6, r8, r6
 80054d8:	4331      	orrs	r1, r6
 80054da:	e774      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 80054dc:	f04f 0807 	mov.w	r8, #7
 80054e0:	fa08 f606 	lsl.w	r6, r8, r6
 80054e4:	4331      	orrs	r1, r6
 80054e6:	e76e      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 80054e8:	f04f 0805 	mov.w	r8, #5
 80054ec:	fa08 f606 	lsl.w	r6, r8, r6
 80054f0:	4331      	orrs	r1, r6
 80054f2:	e768      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 80054f4:	f04f 0806 	mov.w	r8, #6
 80054f8:	fa08 f606 	lsl.w	r6, r8, r6
 80054fc:	4331      	orrs	r1, r6
 80054fe:	e762      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 8005500:	f04f 0808 	mov.w	r8, #8
 8005504:	fa08 f606 	lsl.w	r6, r8, r6
 8005508:	4331      	orrs	r1, r6
 800550a:	e75c      	b.n	80053c6 <HAL_GPIO_Init+0xf2>
 800550c:	40020000 	.word	0x40020000
 8005510:	40020800 	.word	0x40020800
 8005514:	40020c00 	.word	0x40020c00
 8005518:	40021000 	.word	0x40021000
 800551c:	40021400 	.word	0x40021400
 8005520:	40013c00 	.word	0x40013c00
 8005524:	40023800 	.word	0x40023800
 8005528:	40021800 	.word	0x40021800
 800552c:	40021c00 	.word	0x40021c00
 8005530:	40022000 	.word	0x40022000
 8005534:	40022400 	.word	0x40022400

08005538 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005538:	6903      	ldr	r3, [r0, #16]
 800553a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800553c:	bf14      	ite	ne
 800553e:	2001      	movne	r0, #1
 8005540:	2000      	moveq	r0, #0
 8005542:	4770      	bx	lr

08005544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005544:	b902      	cbnz	r2, 8005548 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005546:	0409      	lsls	r1, r1, #16
 8005548:	6181      	str	r1, [r0, #24]
  }
}
 800554a:	4770      	bx	lr

0800554c <HAL_HCD_Init>:
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800554c:	2800      	cmp	r0, #0
 800554e:	d04d      	beq.n	80055ec <HAL_HCD_Init+0xa0>
{
 8005550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005554:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
{
 8005558:	b08a      	sub	sp, #40	; 0x28
 800555a:	4606      	mov	r6, r0
  USBx = hhcd->Instance;
 800555c:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800555e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005562:	2b00      	cmp	r3, #0
 8005564:	d03c      	beq.n	80055e0 <HAL_HCD_Init+0x94>
 8005566:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005568:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800556a:	466d      	mov	r5, sp
 800556c:	1d37      	adds	r7, r6, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 800556e:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005572:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005574:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005576:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 800557a:	bf08      	it	eq
 800557c:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 800557e:	f007 f803 	bl	800c588 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005582:	f854 cb10 	ldr.w	ip, [r4], #16
 8005586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800558a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800558c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800558e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005592:	e885 0003 	stmia.w	r5, {r0, r1}
 8005596:	4660      	mov	r0, ip
 8005598:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800559c:	f006 ff68 	bl	800c470 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80055a0:	2101      	movs	r1, #1
 80055a2:	6830      	ldr	r0, [r6, #0]
 80055a4:	f006 fff8 	bl	800c598 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80055a8:	46b4      	mov	ip, r6
 80055aa:	46ee      	mov	lr, sp
 80055ac:	f85c 8b10 	ldr.w	r8, [ip], #16
 80055b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80055b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80055b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80055bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80055c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80055c8:	4640      	mov	r0, r8
 80055ca:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80055ce:	f007 f89f 	bl	800c710 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80055d2:	2301      	movs	r3, #1

  return HAL_OK;
 80055d4:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 80055d6:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
}
 80055da:	b00a      	add	sp, #40	; 0x28
 80055dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80055e0:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 80055e4:	f7fe fd50 	bl	8004088 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80055e8:	6830      	ldr	r0, [r6, #0]
 80055ea:	e7bd      	b.n	8005568 <HAL_HCD_Init+0x1c>
    return HAL_ERROR;
 80055ec:	2001      	movs	r0, #1
}
 80055ee:	4770      	bx	lr

080055f0 <HAL_HCD_SOF_Callback>:
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop

080055f4 <HAL_HCD_Connect_Callback>:
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <HAL_HCD_Disconnect_Callback>:
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop

080055fc <HAL_HCD_PortEnabled_Callback>:
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop

08005600 <HAL_HCD_PortDisabled_Callback>:
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop

08005604 <HAL_HCD_HC_NotifyURBChange_Callback>:
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop

08005608 <HAL_HCD_IRQHandler>:
{
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800560c:	6805      	ldr	r5, [r0, #0]
{
 800560e:	b085      	sub	sp, #20
 8005610:	4604      	mov	r4, r0
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005612:	4628      	mov	r0, r5
 8005614:	f007 f878 	bl	800c708 <USB_GetMode>
 8005618:	2801      	cmp	r0, #1
 800561a:	d002      	beq.n	8005622 <HAL_HCD_IRQHandler+0x1a>
}
 800561c:	b005      	add	sp, #20
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	f007 f864 	bl	800c6f0 <USB_ReadInterrupts>
 8005628:	2800      	cmp	r0, #0
 800562a:	d0f7      	beq.n	800561c <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800562c:	6820      	ldr	r0, [r4, #0]
 800562e:	f007 f85f 	bl	800c6f0 <USB_ReadInterrupts>
 8005632:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005636:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005638:	d002      	beq.n	8005640 <HAL_HCD_IRQHandler+0x38>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800563a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800563e:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005640:	f007 f856 	bl	800c6f0 <USB_ReadInterrupts>
 8005644:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005648:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800564a:	d002      	beq.n	8005652 <HAL_HCD_IRQHandler+0x4a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800564c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005650:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005652:	f007 f84d 	bl	800c6f0 <USB_ReadInterrupts>
 8005656:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800565a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800565c:	d002      	beq.n	8005664 <HAL_HCD_IRQHandler+0x5c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800565e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005662:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005664:	f007 f844 	bl	800c6f0 <USB_ReadInterrupts>
 8005668:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800566c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800566e:	d001      	beq.n	8005674 <HAL_HCD_IRQHandler+0x6c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005670:	2302      	movs	r3, #2
 8005672:	6143      	str	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005674:	f007 f83c 	bl	800c6f0 <USB_ReadInterrupts>
 8005678:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800567c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800567e:	d179      	bne.n	8005774 <HAL_HCD_IRQHandler+0x16c>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005680:	f007 f836 	bl	800c6f0 <USB_ReadInterrupts>
 8005684:	01c0      	lsls	r0, r0, #7
 8005686:	f100 80fb 	bmi.w	8005880 <HAL_HCD_IRQHandler+0x278>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800568a:	6820      	ldr	r0, [r4, #0]
 800568c:	f007 f830 	bl	800c6f0 <USB_ReadInterrupts>
 8005690:	0701      	lsls	r1, r0, #28
 8005692:	f100 80ee 	bmi.w	8005872 <HAL_HCD_IRQHandler+0x26a>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005696:	6820      	ldr	r0, [r4, #0]
 8005698:	f007 f82a 	bl	800c6f0 <USB_ReadInterrupts>
 800569c:	06c2      	lsls	r2, r0, #27
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800569e:	6826      	ldr	r6, [r4, #0]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80056a0:	f100 812d 	bmi.w	80058fe <HAL_HCD_IRQHandler+0x2f6>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80056a4:	4630      	mov	r0, r6
 80056a6:	f007 f823 	bl	800c6f0 <USB_ReadInterrupts>
 80056aa:	0183      	lsls	r3, r0, #6
 80056ac:	d5b6      	bpl.n	800561c <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80056ae:	6820      	ldr	r0, [r4, #0]
 80056b0:	f007 f904 	bl	800c8bc <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80056b4:	68a2      	ldr	r2, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80056b6:	4681      	mov	r9, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	f000 811b 	beq.w	80058f4 <HAL_HCD_IRQHandler+0x2ec>
 80056be:	2600      	movs	r6, #0
 80056c0:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80056c4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 80056c8:	e030      	b.n	800572c <HAL_HCD_IRQHandler+0x124>
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056ca:	f8d4 8000 	ldr.w	r8, [r4]
 80056ce:	b2f7      	uxtb	r7, r6
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80056d0:	4640      	mov	r0, r8
 80056d2:	4639      	mov	r1, r7
 80056d4:	f007 f810 	bl	800c6f8 <USB_ReadChInterrupts>
 80056d8:	0741      	lsls	r1, r0, #29
 80056da:	d563      	bpl.n	80057a4 <HAL_HCD_IRQHandler+0x19c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056dc:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
 80056e0:	2204      	movs	r2, #4
 80056e2:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80056e6:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80056e8:	2207      	movs	r2, #7
 80056ea:	fb0a 4307 	mla	r3, sl, r7, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ee:	4639      	mov	r1, r7
    hhcd->hc[ch_num].state = HC_XACTERR;
 80056f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	f007 f8e5 	bl	800c8c4 <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80056fa:	4639      	mov	r1, r7
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	f006 fffb 	bl	800c6f8 <USB_ReadChInterrupts>
 8005702:	f410 7f00 	tst.w	r0, #512	; 0x200
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005706:	4639      	mov	r1, r7
 8005708:	6820      	ldr	r0, [r4, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800570a:	d063      	beq.n	80057d4 <HAL_HCD_IRQHandler+0x1cc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800570c:	f508 68a0 	add.w	r8, r8, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005710:	f007 f8d8 	bl	800c8c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005718:	eb08 1847 	add.w	r8, r8, r7, lsl #5
 800571c:	f8c8 3008 	str.w	r3, [r8, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005720:	68a2      	ldr	r2, [r4, #8]
 8005722:	3601      	adds	r6, #1
 8005724:	3520      	adds	r5, #32
 8005726:	42b2      	cmp	r2, r6
 8005728:	f240 80e4 	bls.w	80058f4 <HAL_HCD_IRQHandler+0x2ec>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800572c:	f006 030f 	and.w	r3, r6, #15
 8005730:	fa29 f303 	lsr.w	r3, r9, r3
 8005734:	07df      	lsls	r7, r3, #31
 8005736:	d5f4      	bpl.n	8005722 <HAL_HCD_IRQHandler+0x11a>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	0418      	lsls	r0, r3, #16
 800573c:	d4c5      	bmi.n	80056ca <HAL_HCD_IRQHandler+0xc2>
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800573e:	6827      	ldr	r7, [r4, #0]
 8005740:	fa5f f886 	uxtb.w	r8, r6
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8005744:	4638      	mov	r0, r7
 8005746:	4641      	mov	r1, r8
 8005748:	f006 ffd6 	bl	800c6f8 <USB_ReadChInterrupts>
 800574c:	f010 0b04 	ands.w	fp, r0, #4
 8005750:	d079      	beq.n	8005846 <HAL_HCD_IRQHandler+0x23e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005752:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
 8005756:	2304      	movs	r3, #4
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005758:	2207      	movs	r2, #7
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800575a:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800575c:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8005760:	60bb      	str	r3, [r7, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005762:	fb0a 4308 	mla	r3, sl, r8, r4
 8005766:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	f007 f8aa 	bl	800c8c4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005770:	68a2      	ldr	r2, [r4, #8]
 8005772:	e7d6      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005774:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005778:	6143      	str	r3, [r0, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800577a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800577e:	07de      	lsls	r6, r3, #31
 8005780:	f53f af7e 	bmi.w	8005680 <HAL_HCD_IRQHandler+0x78>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005784:	2110      	movs	r1, #16
 8005786:	4628      	mov	r0, r5
 8005788:	f006 ff3c 	bl	800c604 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800578c:	4628      	mov	r0, r5
 800578e:	f006 ff63 	bl	800c658 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005792:	2101      	movs	r1, #1
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	f007 f86f 	bl	800c878 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 800579a:	4620      	mov	r0, r4
 800579c:	f7ff ff2c 	bl	80055f8 <HAL_HCD_Disconnect_Callback>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	e76d      	b.n	8005680 <HAL_HCD_IRQHandler+0x78>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 80057a4:	4639      	mov	r1, r7
 80057a6:	6820      	ldr	r0, [r4, #0]
 80057a8:	f006 ffa6 	bl	800c6f8 <USB_ReadChInterrupts>
 80057ac:	05c2      	lsls	r2, r0, #23
 80057ae:	f140 80b8 	bpl.w	8005922 <HAL_HCD_IRQHandler+0x31a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80057b2:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
 80057b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ba:	4639      	mov	r1, r7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80057bc:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 80057c0:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80057c2:	2208      	movs	r2, #8
 80057c4:	fb0a 4307 	mla	r3, sl, r7, r4
 80057c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	f007 f879 	bl	800c8c4 <USB_HC_Halt>
 80057d2:	e792      	b.n	80056fa <HAL_HCD_IRQHandler+0xf2>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80057d4:	f006 ff90 	bl	800c6f8 <USB_ReadChInterrupts>
 80057d8:	07c2      	lsls	r2, r0, #31
 80057da:	f140 80cc 	bpl.w	8005976 <HAL_HCD_IRQHandler+0x36e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057de:	f508 68a0 	add.w	r8, r8, #1280	; 0x500
 80057e2:	2320      	movs	r3, #32
    if (hhcd->Init.dma_enable != 0U)
 80057e4:	6921      	ldr	r1, [r4, #16]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057e6:	0178      	lsls	r0, r7, #5
 80057e8:	eb08 1b47 	add.w	fp, r8, r7, lsl #5
 80057ec:	f8cb 3008 	str.w	r3, [fp, #8]
    if (hhcd->Init.dma_enable != 0U)
 80057f0:	b151      	cbz	r1, 8005808 <HAL_HCD_IRQHandler+0x200>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80057f2:	f8db 2010 	ldr.w	r2, [fp, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80057f6:	fb0a 4c07 	mla	ip, sl, r7, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80057fa:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80057fe:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8005808:	fb0a 4307 	mla	r3, sl, r7, r4
    hhcd->hc[ch_num].ErrCnt = 0U;
 800580c:	2200      	movs	r2, #0
 800580e:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_XFRC;
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005816:	f8cb 2008 	str.w	r2, [fp, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800581a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800581e:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8005822:	f000 80d9 	beq.w	80059d8 <HAL_HCD_IRQHandler+0x3d0>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005826:	2a01      	cmp	r2, #1
 8005828:	f000 8127 	beq.w	8005a7a <HAL_HCD_IRQHandler+0x472>
    if (hhcd->Init.dma_enable == 1U)
 800582c:	2901      	cmp	r1, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800582e:	fb0a 4707 	mla	r7, sl, r7, r4
    if (hhcd->Init.dma_enable == 1U)
 8005832:	f000 80c8 	beq.w	80059c6 <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005836:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800583a:	f083 0301 	eor.w	r3, r3, #1
 800583e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005842:	68a2      	ldr	r2, [r4, #8]
 8005844:	e76d      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8005846:	4641      	mov	r1, r8
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	f006 ff55 	bl	800c6f8 <USB_ReadChInterrupts>
 800584e:	0681      	lsls	r1, r0, #26
 8005850:	d57d      	bpl.n	800594e <HAL_HCD_IRQHandler+0x346>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005852:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
 8005856:	2220      	movs	r2, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005858:	fb0a f308 	mul.w	r3, sl, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800585c:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8005860:	60ba      	str	r2, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005862:	18e2      	adds	r2, r4, r3
 8005864:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
 8005868:	2901      	cmp	r1, #1
 800586a:	f000 8114 	beq.w	8005a96 <HAL_HCD_IRQHandler+0x48e>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800586e:	68a2      	ldr	r2, [r4, #8]
 8005870:	e757      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
      HAL_HCD_SOF_Callback(hhcd);
 8005872:	4620      	mov	r0, r4
 8005874:	f7ff febc 	bl	80055f0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	2308      	movs	r3, #8
 800587c:	6143      	str	r3, [r0, #20]
 800587e:	e70b      	b.n	8005698 <HAL_HCD_IRQHandler+0x90>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005880:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005882:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8005886:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8005888:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800588c:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005894:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005896:	9b02      	ldr	r3, [sp, #8]
 8005898:	0799      	lsls	r1, r3, #30
 800589a:	d507      	bpl.n	80058ac <HAL_HCD_IRQHandler+0x2a4>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800589c:	9b02      	ldr	r3, [sp, #8]
 800589e:	07da      	lsls	r2, r3, #31
 80058a0:	f100 80bd 	bmi.w	8005a1e <HAL_HCD_IRQHandler+0x416>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	f043 0302 	orr.w	r3, r3, #2
 80058aa:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80058ac:	9b02      	ldr	r3, [sp, #8]
 80058ae:	071b      	lsls	r3, r3, #28
 80058b0:	d515      	bpl.n	80058de <HAL_HCD_IRQHandler+0x2d6>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	f043 0308 	orr.w	r3, r3, #8
 80058b8:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	075f      	lsls	r7, r3, #29
 80058be:	f140 80aa 	bpl.w	8005a16 <HAL_HCD_IRQHandler+0x40e>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80058c2:	69a1      	ldr	r1, [r4, #24]
 80058c4:	2902      	cmp	r1, #2
 80058c6:	f000 80ff 	beq.w	8005ac8 <HAL_HCD_IRQHandler+0x4c0>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80058ca:	68e3      	ldr	r3, [r4, #12]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d103      	bne.n	80058d8 <HAL_HCD_IRQHandler+0x2d0>
        {
          USBx_HOST->HFIR = 60000U;
 80058d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80058d4:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff fe8f 	bl	80055fc <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80058de:	9b02      	ldr	r3, [sp, #8]
 80058e0:	0698      	lsls	r0, r3, #26
 80058e2:	d503      	bpl.n	80058ec <HAL_HCD_IRQHandler+0x2e4>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	f043 0320 	orr.w	r3, r3, #32
 80058ea:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
}
 80058f2:	e6ca      	b.n	800568a <HAL_HCD_IRQHandler+0x82>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058fa:	615a      	str	r2, [r3, #20]
 80058fc:	e68e      	b.n	800561c <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058fe:	69b3      	ldr	r3, [r6, #24]
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005906:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005908:	f3c7 4143 	ubfx	r1, r7, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800590c:	f3c7 120a 	ubfx	r2, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005910:	2902      	cmp	r1, #2
 8005912:	d101      	bne.n	8005918 <HAL_HCD_IRQHandler+0x310>
 8005914:	2a00      	cmp	r2, #0
 8005916:	d168      	bne.n	80059ea <HAL_HCD_IRQHandler+0x3e2>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005918:	69b3      	ldr	r3, [r6, #24]
 800591a:	f043 0310 	orr.w	r3, r3, #16
 800591e:	61b3      	str	r3, [r6, #24]
 8005920:	e6c0      	b.n	80056a4 <HAL_HCD_IRQHandler+0x9c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8005922:	4639      	mov	r1, r7
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	f006 fee7 	bl	800c6f8 <USB_ReadChInterrupts>
 800592a:	0703      	lsls	r3, r0, #28
 800592c:	d533      	bpl.n	8005996 <HAL_HCD_IRQHandler+0x38e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800592e:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
 8005932:	2208      	movs	r2, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005934:	4639      	mov	r1, r7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005936:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 800593a:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800593c:	2206      	movs	r2, #6
 800593e:	fb0a 4307 	mla	r3, sl, r7, r4
 8005942:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	f006 ffbc 	bl	800c8c4 <USB_HC_Halt>
 800594c:	e6d5      	b.n	80056fa <HAL_HCD_IRQHandler+0xf2>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800594e:	4641      	mov	r1, r8
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	f006 fed1 	bl	800c6f8 <USB_ReadChInterrupts>
 8005956:	f410 7b00 	ands.w	fp, r0, #512	; 0x200
 800595a:	d064      	beq.n	8005a26 <HAL_HCD_IRQHandler+0x41e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800595c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005960:	f44f 7200 	mov.w	r2, #512	; 0x200
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005964:	4641      	mov	r1, r8
 8005966:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005968:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800596c:	609a      	str	r2, [r3, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800596e:	f006 ffa9 	bl	800c8c4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005972:	68a2      	ldr	r2, [r4, #8]
 8005974:	e6d5      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8005976:	4639      	mov	r1, r7
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	f006 febd 	bl	800c6f8 <USB_ReadChInterrupts>
 800597e:	0680      	lsls	r0, r0, #26
 8005980:	f140 80ad 	bpl.w	8005ade <HAL_HCD_IRQHandler+0x4d6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005984:	f508 68a0 	add.w	r8, r8, #1280	; 0x500
 8005988:	2320      	movs	r3, #32
 800598a:	eb08 1847 	add.w	r8, r8, r7, lsl #5
 800598e:	f8c8 3008 	str.w	r3, [r8, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005992:	68a2      	ldr	r2, [r4, #8]
 8005994:	e6c5      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005996:	4639      	mov	r1, r7
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	f006 fead 	bl	800c6f8 <USB_ReadChInterrupts>
 800599e:	0540      	lsls	r0, r0, #21
 80059a0:	f140 8085 	bpl.w	8005aae <HAL_HCD_IRQHandler+0x4a6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059a4:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
 80059a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ac:	4639      	mov	r1, r7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059ae:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 80059b2:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059b4:	2209      	movs	r2, #9
 80059b6:	fb0a 4307 	mla	r3, sl, r7, r4
 80059ba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	f006 ff80 	bl	800c8c4 <USB_HC_Halt>
 80059c4:	e699      	b.n	80056fa <HAL_HCD_IRQHandler+0xf2>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80059c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80059ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	f53f af30 	bmi.w	8005836 <HAL_HCD_IRQHandler+0x22e>
 80059d6:	e74a      	b.n	800586e <HAL_HCD_IRQHandler+0x266>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059d8:	4639      	mov	r1, r7
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	f006 ff72 	bl	800c8c4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059e0:	2310      	movs	r3, #16
    if (hhcd->Init.dma_enable == 1U)
 80059e2:	6921      	ldr	r1, [r4, #16]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059e4:	f8cb 3008 	str.w	r3, [fp, #8]
 80059e8:	e720      	b.n	800582c <HAL_HCD_IRQHandler+0x224>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80059ea:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80059ee:	f04f 082c 	mov.w	r8, #44	; 0x2c
 80059f2:	fb08 4807 	mla	r8, r8, r7, r4
 80059f6:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d08c      	beq.n	8005918 <HAL_HCD_IRQHandler+0x310>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80059fe:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8005a02:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 8005a06:	4413      	add	r3, r2
 8005a08:	4283      	cmp	r3, r0
 8005a0a:	f240 8114 	bls.w	8005c36 <HAL_HCD_IRQHandler+0x62e>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a0e:	2304      	movs	r3, #4
 8005a10:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
 8005a14:	e780      	b.n	8005918 <HAL_HCD_IRQHandler+0x310>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7ff fdf2 	bl	8005600 <HAL_HCD_PortDisabled_Callback>
 8005a1c:	e75f      	b.n	80058de <HAL_HCD_IRQHandler+0x2d6>
      HAL_HCD_Connect_Callback(hhcd);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff fde8 	bl	80055f4 <HAL_HCD_Connect_Callback>
 8005a24:	e73e      	b.n	80058a4 <HAL_HCD_IRQHandler+0x29c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005a26:	4641      	mov	r1, r8
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	f006 fe65 	bl	800c6f8 <USB_ReadChInterrupts>
 8005a2e:	f010 0301 	ands.w	r3, r0, #1
 8005a32:	f000 80cb 	beq.w	8005bcc <HAL_HCD_IRQHandler+0x5c4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a36:	fb0a 4208 	mla	r2, sl, r8, r4
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	6820      	ldr	r0, [r4, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a3e:	f8c2 b05c 	str.w	fp, [r2, #92]	; 0x5c
 8005a42:	9201      	str	r2, [sp, #4]
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005a44:	f006 fe58 	bl	800c6f8 <USB_ReadChInterrupts>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a48:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a50:	9a01      	ldr	r2, [sp, #4]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a52:	eb03 1348 	add.w	r3, r3, r8, lsl #5
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005a56:	d004      	beq.n	8005a62 <HAL_HCD_IRQHandler+0x45a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005a58:	2101      	movs	r1, #1
 8005a5a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	609a      	str	r2, [r3, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a62:	2201      	movs	r2, #1
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a64:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005a66:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005a68:	fb0a 4308 	mla	r3, sl, r8, r4
 8005a6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	f006 ff27 	bl	800c8c4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a76:	68a2      	ldr	r2, [r4, #8]
 8005a78:	e653      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a7a:	f850 1008 	ldr.w	r1, [r0, r8]
 8005a7e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005a82:	f840 1008 	str.w	r1, [r0, r8]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a86:	4639      	mov	r1, r7
 8005a88:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a8e:	f7ff fdb9 	bl	8005604 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005a92:	6921      	ldr	r1, [r4, #16]
 8005a94:	e6ca      	b.n	800582c <HAL_HCD_IRQHandler+0x224>
      hhcd->hc[ch_num].do_ping = 0U;
 8005a96:	f882 b03d 	strb.w	fp, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a9a:	3360      	adds	r3, #96	; 0x60
 8005a9c:	f240 3202 	movw	r2, #770	; 0x302
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa0:	4641      	mov	r1, r8
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005aa2:	52e2      	strh	r2, [r4, r3]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	f006 ff0d 	bl	800c8c4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005aaa:	68a2      	ldr	r2, [r4, #8]
 8005aac:	e639      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005aae:	4639      	mov	r1, r7
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	f006 fe21 	bl	800c6f8 <USB_ReadChInterrupts>
 8005ab6:	0601      	lsls	r1, r0, #24
 8005ab8:	f57f ae1f 	bpl.w	80056fa <HAL_HCD_IRQHandler+0xf2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005abc:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
 8005ac0:	2280      	movs	r2, #128	; 0x80
 8005ac2:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8005ac6:	e60e      	b.n	80056e6 <HAL_HCD_IRQHandler+0xde>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005ac8:	9b02      	ldr	r3, [sp, #8]
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005aca:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005acc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005ad4:	bf18      	it	ne
 8005ad6:	2101      	movne	r1, #1
 8005ad8:	f006 fece 	bl	800c878 <USB_InitFSLSPClkSel>
 8005adc:	e6fc      	b.n	80058d8 <HAL_HCD_IRQHandler+0x2d0>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8005ade:	4639      	mov	r1, r7
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	f006 fe09 	bl	800c6f8 <USB_ReadChInterrupts>
 8005ae6:	f010 0b02 	ands.w	fp, r0, #2
 8005aea:	f000 80c2 	beq.w	8005c72 <HAL_HCD_IRQHandler+0x66a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005aee:	f508 68a0 	add.w	r8, r8, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005af2:	fb0a f107 	mul.w	r1, sl, r7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005af6:	2002      	movs	r0, #2
 8005af8:	017a      	lsls	r2, r7, #5
 8005afa:	eb08 1347 	add.w	r3, r8, r7, lsl #5
 8005afe:	6098      	str	r0, [r3, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b00:	1863      	adds	r3, r4, r1
 8005b02:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	f000 80cd 	beq.w	8005ca6 <HAL_HCD_IRQHandler+0x69e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b0c:	3b02      	subs	r3, #2
 8005b0e:	2b07      	cmp	r3, #7
 8005b10:	d818      	bhi.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
 8005b12:	a101      	add	r1, pc, #4	; (adr r1, 8005b18 <HAL_HCD_IRQHandler+0x510>)
 8005b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b18:	0800586f 	.word	0x0800586f
 8005b1c:	08005b39 	.word	0x08005b39
 8005b20:	08005ba1 	.word	0x08005ba1
 8005b24:	08005b39 	.word	0x08005b39
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b8b 	.word	0x08005b8b
 8005b34:	08005b59 	.word	0x08005b59
      hhcd->hc[ch_num].state = HC_HALTED;
 8005b38:	fb0a 4307 	mla	r3, sl, r7, r4
 8005b3c:	f04f 0202 	mov.w	r2, #2
 8005b40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b44:	fb0a 4307 	mla	r3, sl, r7, r4
 8005b48:	4639      	mov	r1, r7
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005b50:	f7ff fd58 	bl	8005604 <HAL_HCD_HC_NotifyURBChange_Callback>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005b54:	68a2      	ldr	r2, [r4, #8]
 8005b56:	e5e4      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
      hhcd->hc[ch_num].state = HC_HALTED;
 8005b58:	fb0a 4107 	mla	r1, sl, r7, r4
 8005b5c:	f04f 0302 	mov.w	r3, #2
 8005b60:	f881 3061 	strb.w	r3, [r1, #97]	; 0x61
      hhcd->hc[ch_num].ErrCnt++;
 8005b64:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8005b66:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b68:	2b02      	cmp	r3, #2
      hhcd->hc[ch_num].ErrCnt++;
 8005b6a:	65cb      	str	r3, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b6c:	f240 8115 	bls.w	8005d9a <HAL_HCD_IRQHandler+0x792>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	65cb      	str	r3, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b74:	2304      	movs	r3, #4
 8005b76:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
 8005b7a:	e7e3      	b.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005b7c:	fb0a 4307 	mla	r3, sl, r7, r4
 8005b80:	f240 2205 	movw	r2, #517	; 0x205
 8005b84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b88:	e7dc      	b.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
      hhcd->hc[ch_num].ErrCnt++;
 8005b8a:	fb0a f307 	mul.w	r3, sl, r7
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b8e:	f44f 7001 	mov.w	r0, #516	; 0x204
      hhcd->hc[ch_num].ErrCnt++;
 8005b92:	18e1      	adds	r1, r4, r3
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b94:	3360      	adds	r3, #96	; 0x60
      hhcd->hc[ch_num].ErrCnt++;
 8005b96:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8005b98:	3201      	adds	r2, #1
 8005b9a:	65ca      	str	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b9c:	52e0      	strh	r0, [r4, r3]
 8005b9e:	e7d1      	b.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ba0:	fb0a f307 	mul.w	r3, sl, r7
 8005ba4:	f240 2002 	movw	r0, #514	; 0x202
 8005ba8:	f103 0160 	add.w	r1, r3, #96	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bac:	4423      	add	r3, r4
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bae:	5260      	strh	r0, [r4, r1]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bb4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8005bb8:	d1c4      	bne.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bba:	f852 3008 	ldr.w	r3, [r2, r8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bc6:	f842 3008 	str.w	r3, [r2, r8]
 8005bca:	e7bb      	b.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005bcc:	4641      	mov	r1, r8
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	f006 fd91 	bl	800c6f8 <USB_ReadChInterrupts>
 8005bd6:	0642      	lsls	r2, r0, #25
 8005bd8:	d515      	bpl.n	8005c06 <HAL_HCD_IRQHandler+0x5fe>
    hhcd->hc[ch_num].state = HC_NYET;
 8005bda:	fb0a 4208 	mla	r2, sl, r8, r4
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bde:	9b01      	ldr	r3, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005be0:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005be4:	4641      	mov	r1, r8
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005be6:	65d3      	str	r3, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NYET;
 8005be8:	2305      	movs	r3, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005bea:	eb07 1748 	add.w	r7, r7, r8, lsl #5
    hhcd->hc[ch_num].state = HC_NYET;
 8005bee:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	f006 fe63 	bl	800c8c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005bfe:	2340      	movs	r3, #64	; 0x40
 8005c00:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c02:	68a2      	ldr	r2, [r4, #8]
 8005c04:	e58d      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8005c06:	4641      	mov	r1, r8
 8005c08:	6820      	ldr	r0, [r4, #0]
 8005c0a:	f006 fd75 	bl	800c6f8 <USB_ReadChInterrupts>
 8005c0e:	f010 0b08 	ands.w	fp, r0, #8
 8005c12:	d04d      	beq.n	8005cb0 <HAL_HCD_IRQHandler+0x6a8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c14:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005c18:	2208      	movs	r2, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1a:	4641      	mov	r1, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c1c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005c20:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005c22:	2206      	movs	r2, #6
 8005c24:	fb0a 4308 	mla	r3, sl, r8, r4
 8005c28:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	f006 fe49 	bl	800c8c4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c32:	68a2      	ldr	r2, [r4, #8]
 8005c34:	e575      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005c36:	4630      	mov	r0, r6
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c38:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          (void)USB_ReadPacket(hhcd->Instance,
 8005c3c:	9201      	str	r2, [sp, #4]
 8005c3e:	f006 fd33 	bl	800c6a8 <USB_ReadPacket>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c42:	eb06 1147 	add.w	r1, r6, r7, lsl #5
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005c46:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8005c4a:	9a01      	ldr	r2, [sp, #4]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c4c:	6909      	ldr	r1, [r1, #16]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005c4e:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005c52:	4413      	add	r3, r2
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c54:	f3c1 41c9 	ubfx	r1, r1, #19, #10
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005c58:	4410      	add	r0, r2
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005c5a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c5e:	017b      	lsls	r3, r7, #5
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005c60:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005c64:	b119      	cbz	r1, 8005c6e <HAL_HCD_IRQHandler+0x666>
 8005c66:	f8b8 1040 	ldrh.w	r1, [r8, #64]	; 0x40
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	d07f      	beq.n	8005d6e <HAL_HCD_IRQHandler+0x766>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c6e:	6826      	ldr	r6, [r4, #0]
 8005c70:	e652      	b.n	8005918 <HAL_HCD_IRQHandler+0x310>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005c72:	4639      	mov	r1, r7
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	f006 fd3f 	bl	800c6f8 <USB_ReadChInterrupts>
 8005c7a:	f010 0240 	ands.w	r2, r0, #64	; 0x40
 8005c7e:	d03b      	beq.n	8005cf8 <HAL_HCD_IRQHandler+0x6f0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c80:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
 8005c84:	2040      	movs	r0, #64	; 0x40
    hhcd->hc[ch_num].state = HC_NYET;
 8005c86:	fb0a 4207 	mla	r2, sl, r7, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c8a:	4639      	mov	r1, r7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c8c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8005c90:	6098      	str	r0, [r3, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8005c92:	2305      	movs	r3, #5
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c94:	f8c2 b05c 	str.w	fp, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NYET;
 8005c98:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	f006 fe11 	bl	800c8c4 <USB_HC_Halt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005ca2:	68a2      	ldr	r2, [r4, #8]
 8005ca4:	e53d      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ca6:	3160      	adds	r1, #96	; 0x60
 8005ca8:	f240 2301 	movw	r3, #513	; 0x201
 8005cac:	5263      	strh	r3, [r4, r1]
 8005cae:	e749      	b.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	f006 fd20 	bl	800c6f8 <USB_ReadChInterrupts>
 8005cb8:	06c3      	lsls	r3, r0, #27
 8005cba:	d53c      	bpl.n	8005d36 <HAL_HCD_IRQHandler+0x72e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cbc:	fb0a 4308 	mla	r3, sl, r8, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8005cc0:	2204      	movs	r2, #4
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cc2:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8005cc6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	b93b      	cbnz	r3, 8005ce0 <HAL_HCD_IRQHandler+0x6d8>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005cd0:	fb0a 4308 	mla	r3, sl, r8, r4
 8005cd4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8005cd8:	b912      	cbnz	r2, 8005ce0 <HAL_HCD_IRQHandler+0x6d8>
        hhcd->hc[ch_num].do_ping = 1U;
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ce0:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	6820      	ldr	r0, [r4, #0]
 8005ce8:	f006 fdec 	bl	800c8c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cec:	2310      	movs	r3, #16
 8005cee:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8005cf2:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005cf4:	68a2      	ldr	r2, [r4, #8]
 8005cf6:	e514      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	6820      	ldr	r0, [r4, #0]
 8005cfc:	9201      	str	r2, [sp, #4]
 8005cfe:	f006 fcfb 	bl	800c6f8 <USB_ReadChInterrupts>
 8005d02:	f010 0f10 	tst.w	r0, #16
 8005d06:	9a01      	ldr	r2, [sp, #4]
 8005d08:	f43f adb1 	beq.w	800586e <HAL_HCD_IRQHandler+0x266>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005d0c:	fb0a 4307 	mla	r3, sl, r7, r4
 8005d10:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8005d14:	2903      	cmp	r1, #3
 8005d16:	d037      	beq.n	8005d88 <HAL_HCD_IRQHandler+0x780>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005d18:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
 8005d1c:	d102      	bne.n	8005d24 <HAL_HCD_IRQHandler+0x71c>
      if (hhcd->Init.dma_enable == 0U)
 8005d1e:	6922      	ldr	r2, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005d20:	65d9      	str	r1, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8005d22:	b392      	cbz	r2, 8005d8a <HAL_HCD_IRQHandler+0x782>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d24:	f508 68a0 	add.w	r8, r8, #1280	; 0x500
 8005d28:	2310      	movs	r3, #16
 8005d2a:	eb08 1847 	add.w	r8, r8, r7, lsl #5
 8005d2e:	f8c8 3008 	str.w	r3, [r8, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005d32:	68a2      	ldr	r2, [r4, #8]
 8005d34:	e4f5      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005d36:	4641      	mov	r1, r8
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	f006 fcdd 	bl	800c6f8 <USB_ReadChInterrupts>
 8005d3e:	0600      	lsls	r0, r0, #24
 8005d40:	d538      	bpl.n	8005db4 <HAL_HCD_IRQHandler+0x7ac>
    if (hhcd->Init.dma_enable == 0U)
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d057      	beq.n	8005df8 <HAL_HCD_IRQHandler+0x7f0>
      hhcd->hc[ch_num].ErrCnt++;
 8005d48:	fb0a 4308 	mla	r3, sl, r8, r4
 8005d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d4e:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d50:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d54:	d846      	bhi.n	8005de4 <HAL_HCD_IRQHandler+0x7dc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d56:	f04f 0202 	mov.w	r2, #2
 8005d5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005d5e:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8005d68:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005d6a:	68a2      	ldr	r2, [r4, #8]
 8005d6c:	e4d9      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d6e:	58f2      	ldr	r2, [r6, r3]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d70:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d78:	50f2      	str	r2, [r6, r3]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d7a:	f898 3054 	ldrb.w	r3, [r8, #84]	; 0x54
 8005d7e:	f083 0301 	eor.w	r3, r3, #1
 8005d82:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
 8005d86:	e772      	b.n	8005c6e <HAL_HCD_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005d88:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].state = HC_NAK;
 8005d8a:	2204      	movs	r2, #4
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d8c:	4639      	mov	r1, r7
        hhcd->hc[ch_num].state = HC_NAK;
 8005d8e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d92:	6820      	ldr	r0, [r4, #0]
 8005d94:	f006 fd96 	bl	800c8c4 <USB_HC_Halt>
 8005d98:	e7c4      	b.n	8005d24 <HAL_HCD_IRQHandler+0x71c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d9a:	f04f 0302 	mov.w	r3, #2
 8005d9e:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005da2:	f852 3008 	ldr.w	r3, [r2, r8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005da6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dae:	f842 3008 	str.w	r3, [r2, r8]
 8005db2:	e6c7      	b.n	8005b44 <HAL_HCD_IRQHandler+0x53c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8005db4:	4641      	mov	r1, r8
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	f006 fc9e 	bl	800c6f8 <USB_ReadChInterrupts>
 8005dbc:	0541      	lsls	r1, r0, #21
 8005dbe:	d525      	bpl.n	8005e0c <HAL_HCD_IRQHandler+0x804>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005dc0:	fb0a 4308 	mla	r3, sl, r8, r4
 8005dc4:	2209      	movs	r2, #9
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dc6:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dca:	4641      	mov	r1, r8
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005dcc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dd0:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dd2:	eb07 1748 	add.w	r7, r7, r8, lsl #5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dd6:	f006 fd75 	bl	800c8c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dde:	60bb      	str	r3, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005de0:	68a2      	ldr	r2, [r4, #8]
 8005de2:	e49e      	b.n	8005722 <HAL_HCD_IRQHandler+0x11a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005de4:	2200      	movs	r2, #0
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005de6:	4641      	mov	r1, r8
 8005de8:	4620      	mov	r0, r4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005dea:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005dec:	2204      	movs	r2, #4
 8005dee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005df2:	f7ff fc07 	bl	8005604 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005df6:	e7b2      	b.n	8005d5e <HAL_HCD_IRQHandler+0x756>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005df8:	fb0a 4308 	mla	r3, sl, r8, r4
 8005dfc:	2207      	movs	r2, #7
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dfe:	4641      	mov	r1, r8
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005e00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	f006 fd5d 	bl	800c8c4 <USB_HC_Halt>
 8005e0a:	e7a8      	b.n	8005d5e <HAL_HCD_IRQHandler+0x756>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	f006 fc72 	bl	800c6f8 <USB_ReadChInterrupts>
 8005e14:	0782      	lsls	r2, r0, #30
 8005e16:	f57f ad2a 	bpl.w	800586e <HAL_HCD_IRQHandler+0x266>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e1a:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
 8005e1e:	2202      	movs	r2, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e20:	fb0a f008 	mul.w	r0, sl, r8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e24:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8005e28:	eb07 1348 	add.w	r3, r7, r8, lsl #5
 8005e2c:	609a      	str	r2, [r3, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e2e:	1822      	adds	r2, r4, r0
 8005e30:	f892 3061 	ldrb.w	r3, [r2, #97]	; 0x61
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d015      	beq.n	8005e64 <HAL_HCD_IRQHandler+0x85c>
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005e38:	3b03      	subs	r3, #3
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	f63f ad17 	bhi.w	800586e <HAL_HCD_IRQHandler+0x266>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <HAL_HCD_IRQHandler+0x840>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005eb9 	.word	0x08005eb9
 8005e4c:	08005edd 	.word	0x08005edd
 8005e50:	08005edd 	.word	0x08005edd
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005e97 	.word	0x08005e97
 8005e5c:	0800586f 	.word	0x0800586f
 8005e60:	08005e97 	.word	0x08005e97
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005e64:	f240 2301 	movw	r3, #513	; 0x201
 8005e68:	3060      	adds	r0, #96	; 0x60
 8005e6a:	5223      	strh	r3, [r4, r0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e6c:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8005e70:	3b02      	subs	r3, #2
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d939      	bls.n	8005eea <HAL_HCD_IRQHandler+0x8e2>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e76:	fb0a 4308 	mla	r3, sl, r8, r4
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005e82:	f7ff fbbf 	bl	8005604 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e86:	e4f2      	b.n	800586e <HAL_HCD_IRQHandler+0x266>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005e88:	fb0a 4308 	mla	r3, sl, r8, r4
 8005e8c:	f240 2205 	movw	r2, #517	; 0x205
 8005e90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e94:	e7ef      	b.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
      hhcd->hc[ch_num].state = HC_HALTED;
 8005e96:	fb0a 4308 	mla	r3, sl, r8, r4
 8005e9a:	f04f 0202 	mov.w	r2, #2
 8005e9e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      hhcd->hc[ch_num].ErrCnt++;
 8005ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ea4:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ea6:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8005ea8:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005eaa:	d90c      	bls.n	8005ec6 <HAL_HCD_IRQHandler+0x8be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005eac:	2200      	movs	r2, #0
 8005eae:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8005eb6:	e7de      	b.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
      hhcd->hc[ch_num].state = HC_HALTED;
 8005eb8:	fb0a 4308 	mla	r3, sl, r8, r4
 8005ebc:	f04f 0202 	mov.w	r2, #2
 8005ec0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8005ec4:	e7d7      	b.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ec6:	f04f 0202 	mov.w	r2, #2
 8005eca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ece:	587b      	ldr	r3, [r7, r1]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ed8:	507b      	str	r3, [r7, r1]
 8005eda:	e7cc      	b.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005edc:	fb0a 4308 	mla	r3, sl, r8, r4
 8005ee0:	f240 2202 	movw	r2, #514	; 0x202
 8005ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ee8:	e7c5      	b.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
        if (hhcd->Init.dma_enable == 0U)
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	b163      	cbz	r3, 8005f08 <HAL_HCD_IRQHandler+0x900>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d1c1      	bne.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
 8005ef2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0be      	beq.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005ef8:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
 8005efc:	3b01      	subs	r3, #1
 8005efe:	440b      	add	r3, r1
 8005f00:	fbb3 f3f1 	udiv	r3, r3, r1
          if ((num_packets & 1U) != 0U)
 8005f04:	07db      	lsls	r3, r3, #31
 8005f06:	d5b6      	bpl.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f08:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8005f0c:	f083 0301 	eor.w	r3, r3, #1
 8005f10:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
 8005f14:	e7af      	b.n	8005e76 <HAL_HCD_IRQHandler+0x86e>
 8005f16:	bf00      	nop

08005f18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	f04f 0820 	mov.w	r8, #32
{
 8005f20:	4605      	mov	r5, r0
 8005f22:	460e      	mov	r6, r1
 8005f24:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	6998      	ldr	r0, [r3, #24]
 8005f2a:	f010 0904 	ands.w	r9, r0, #4
 8005f2e:	f040 8091 	bne.w	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0x13c>
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f32:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f34:	f014 0410 	ands.w	r4, r4, #16
 8005f38:	d064      	beq.n	8006004 <I2C_WaitOnRXNEFlagUntilTimeout+0xec>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f3a:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8005f3c:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f40:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f42:	1c71      	adds	r1, r6, #1
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	d15f      	bne.n	8006008 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
 8005f48:	0690      	lsls	r0, r2, #26
 8005f4a:	f100 8086 	bmi.w	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0x142>
 8005f4e:	f1ba 0f00 	cmp.w	sl, #0
 8005f52:	d104      	bne.n	8005f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
 8005f54:	699c      	ldr	r4, [r3, #24]
 8005f56:	06a1      	lsls	r1, r4, #26
 8005f58:	d5fc      	bpl.n	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5a:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f5e:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
 8005f62:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f64:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f66:	05d0      	lsls	r0, r2, #23
 8005f68:	d530      	bpl.n	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f6a:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f6e:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8005f70:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f74:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f76:	d504      	bpl.n	8005f82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005f7c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f80:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f82:	0591      	lsls	r1, r2, #22
 8005f84:	d504      	bpl.n	8005f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f86:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f8a:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f8e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	0796      	lsls	r6, r2, #30
 8005f94:	d501      	bpl.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
 8005f96:	2200      	movs	r2, #0
 8005f98:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	07d0      	lsls	r0, r2, #31
 8005f9e:	d403      	bmi.n	8005fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fa8:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005faa:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8005fac:	4842      	ldr	r0, [pc, #264]	; (80060b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a0>)
    hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8005fb0:	4002      	ands	r2, r0
      return HAL_ERROR;
 8005fb2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8005fb4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8005fb6:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8005fbc:	4323      	orrs	r3, r4
 8005fbe:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc4:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8005fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fcc:	0550      	lsls	r0, r2, #21
 8005fce:	d4d3      	bmi.n	8005f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fd0:	0592      	lsls	r2, r2, #22
 8005fd2:	d4d8      	bmi.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	d1db      	bne.n	8005f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	0691      	lsls	r1, r2, #26
 8005fdc:	d44b      	bmi.n	8006076 <I2C_WaitOnRXNEFlagUntilTimeout+0x15e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fde:	f7fe fa55 	bl	800448c <HAL_GetTick>
 8005fe2:	1bc0      	subs	r0, r0, r7
 8005fe4:	42b0      	cmp	r0, r6
 8005fe6:	d801      	bhi.n	8005fec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	d19c      	bne.n	8005f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 8005ff0:	2100      	movs	r1, #0
      return HAL_ERROR;
 8005ff2:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ff4:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8005ff6:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ffa:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ffc:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
}
 8006000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	4621      	mov	r1, r4
 8006006:	e7ad      	b.n	8005f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d426      	bmi.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0x142>
 800600c:	f1ba 0f00 	cmp.w	sl, #0
 8006010:	d1a5      	bne.n	8005f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fe fa3b 	bl	800448c <HAL_GetTick>
 8006016:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006018:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800601a:	4286      	cmp	r6, r0
 800601c:	d301      	bcc.n	8006022 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800601e:	2e00      	cmp	r6, #0
 8006020:	d18f      	bne.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006022:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006024:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006028:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800602a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800602c:	0409      	lsls	r1, r1, #16
 800602e:	d503      	bpl.n	8006038 <I2C_WaitOnRXNEFlagUntilTimeout+0x120>
              (tmp1 != I2C_CR2_STOP) && \
 8006030:	0441      	lsls	r1, r0, #17
 8006032:	d401      	bmi.n	8006038 <I2C_WaitOnRXNEFlagUntilTimeout+0x120>
 8006034:	2a20      	cmp	r2, #32
 8006036:	d115      	bne.n	8006064 <I2C_WaitOnRXNEFlagUntilTimeout+0x14c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	0690      	lsls	r0, r2, #26
 800603c:	d481      	bmi.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800603e:	f7fe fa25 	bl	800448c <HAL_GetTick>
 8006042:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006044:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006046:	2819      	cmp	r0, #25
 8006048:	d9f6      	bls.n	8006038 <I2C_WaitOnRXNEFlagUntilTimeout+0x120>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800604a:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
 800604e:	f04f 0a01 	mov.w	sl, #1
 8006052:	e776      	b.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        return HAL_OK;
 8006054:	2000      	movs	r0, #0
}
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 800605a:	f1ba 0f00 	cmp.w	sl, #0
 800605e:	f43f af7c 	beq.w	8005f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
 8006062:	e77c      	b.n	8005f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800606a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800606c:	f7fe fa0e 	bl	800448c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006070:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8006072:	4604      	mov	r4, r0
 8006074:	e7e0      	b.n	8006038 <I2C_WaitOnRXNEFlagUntilTimeout+0x120>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	0752      	lsls	r2, r2, #29
 800607a:	d502      	bpl.n	8006082 <I2C_WaitOnRXNEFlagUntilTimeout+0x16a>
 800607c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800607e:	2a00      	cmp	r2, #0
 8006080:	d1e8      	bne.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0x13c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	f012 0210 	ands.w	r2, r2, #16
 8006088:	d013      	beq.n	80060b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x19a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800608a:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800608c:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800608e:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006090:	646a      	str	r2, [r5, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006092:	2420      	movs	r4, #32
        I2C_RESET_CR2(hi2c);
 8006094:	4808      	ldr	r0, [pc, #32]	; (80060b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a0>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006098:	61dc      	str	r4, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4002      	ands	r2, r0
        return HAL_ERROR;
 800609e:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 80060a0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80060a6:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060aa:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 80060ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b2:	646a      	str	r2, [r5, #68]	; 0x44
 80060b4:	e7ed      	b.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0x17a>
 80060b6:	bf00      	nop
 80060b8:	fe00e800 	.word	0xfe00e800

080060bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80060c0:	f04f 0820 	mov.w	r8, #32
{
 80060c4:	4605      	mov	r5, r0
 80060c6:	460e      	mov	r6, r1
 80060c8:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	6998      	ldr	r0, [r3, #24]
 80060ce:	f010 0920 	ands.w	r9, r0, #32
 80060d2:	f040 8090 	bne.w	80061f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x13a>
  uint32_t itflag   = hi2c->Instance->ISR;
 80060d6:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060d8:	f014 0410 	ands.w	r4, r4, #16
 80060dc:	d063      	beq.n	80061a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060de:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80060e0:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
 80060e2:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060e6:	1c71      	adds	r1, r6, #1
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	d15e      	bne.n	80061aa <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 80060ec:	0690      	lsls	r0, r2, #26
 80060ee:	f100 8085 	bmi.w	80061fc <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80060f2:	f1ba 0f00 	cmp.w	sl, #0
 80060f6:	d104      	bne.n	8006102 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
 80060f8:	699c      	ldr	r4, [r3, #24]
 80060fa:	06a1      	lsls	r1, r4, #26
 80060fc:	d5fc      	bpl.n	80060f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fe:	f8c3 801c 	str.w	r8, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006102:	f049 0404 	orr.w	r4, r9, #4
    status = HAL_ERROR;
 8006106:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8006108:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800610a:	05d0      	lsls	r0, r2, #23
 800610c:	d530      	bpl.n	8006170 <I2C_WaitOnSTOPFlagUntilTimeout+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800610e:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006112:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8006114:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006118:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800611a:	d504      	bpl.n	8006126 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800611c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006120:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006124:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006126:	0596      	lsls	r6, r2, #22
 8006128:	d504      	bpl.n	8006134 <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800612a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800612e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006132:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	0791      	lsls	r1, r2, #30
 8006138:	d501      	bpl.n	800613e <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
 800613a:	2200      	movs	r2, #0
 800613c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	07d2      	lsls	r2, r2, #31
 8006142:	d403      	bmi.n	800614c <I2C_WaitOnSTOPFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800614c:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8006150:	4831      	ldr	r0, [pc, #196]	; (8006218 <I2C_WaitOnSTOPFlagUntilTimeout+0x15c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006152:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8006154:	4002      	ands	r2, r0
      return HAL_ERROR;
 8006156:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8006158:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800615a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800615c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006160:	4323      	orrs	r3, r4
 8006162:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006164:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006170:	0550      	lsls	r0, r2, #21
 8006172:	d4d3      	bmi.n	800611c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006174:	0590      	lsls	r0, r2, #22
 8006176:	d4d8      	bmi.n	800612a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
 8006178:	2900      	cmp	r1, #0
 800617a:	d1db      	bne.n	8006134 <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617c:	f7fe f986 	bl	800448c <HAL_GetTick>
 8006180:	1bc0      	subs	r0, r0, r7
 8006182:	42b0      	cmp	r0, r6
 8006184:	d801      	bhi.n	800618a <I2C_WaitOnSTOPFlagUntilTimeout+0xce>
 8006186:	2e00      	cmp	r6, #0
 8006188:	d19f      	bne.n	80060ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800618c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800618e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8006190:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006192:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006194:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006198:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800619a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	4621      	mov	r1, r4
 80061a8:	e7ae      	b.n	8006108 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061aa:	0692      	lsls	r2, r2, #26
 80061ac:	d426      	bmi.n	80061fc <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80061ae:	f1ba 0f00 	cmp.w	sl, #0
 80061b2:	d1a6      	bne.n	8006102 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061b4:	f7fe f96a 	bl	800448c <HAL_GetTick>
 80061b8:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061ba:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061bc:	4286      	cmp	r6, r0
 80061be:	d301      	bcc.n	80061c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	d190      	bne.n	80060e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061c4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80061c6:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061ca:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80061cc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061ce:	0409      	lsls	r1, r1, #16
 80061d0:	d503      	bpl.n	80061da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
 80061d2:	0441      	lsls	r1, r0, #17
 80061d4:	d401      	bmi.n	80061da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
 80061d6:	2a20      	cmp	r2, #32
 80061d8:	d115      	bne.n	8006206 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	0690      	lsls	r0, r2, #26
 80061de:	d482      	bmi.n	80060e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061e0:	f7fe f954 	bl	800448c <HAL_GetTick>
 80061e4:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061e6:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061e8:	2819      	cmp	r0, #25
 80061ea:	d9f6      	bls.n	80061da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80061ec:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
 80061f0:	f04f 0a01 	mov.w	sl, #1
 80061f4:	e777      	b.n	80060e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
  return HAL_OK;
 80061f6:	2000      	movs	r0, #0
}
 80061f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
 80061fc:	f1ba 0f00 	cmp.w	sl, #0
 8006200:	f43f af7d 	beq.w	80060fe <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8006204:	e77d      	b.n	8006102 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800620c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800620e:	f7fe f93d 	bl	800448c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006212:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8006214:	4604      	mov	r4, r0
 8006216:	e7e0      	b.n	80061da <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
 8006218:	fe00e800 	.word	0xfe00e800

0800621c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800621c:	2800      	cmp	r0, #0
 800621e:	d04e      	beq.n	80062be <HAL_I2C_Init+0xa2>
{
 8006220:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006222:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006226:	4604      	mov	r4, r0
 8006228:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800622c:	2b00      	cmp	r3, #0
 800622e:	d041      	beq.n	80062b4 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 8006230:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006232:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006234:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006236:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800623a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800623c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006240:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8006242:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006246:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8006248:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800624a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006252:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006254:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006256:	d029      	beq.n	80062ac <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006258:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800625c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800625e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006260:	d102      	bne.n	8006268 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006266:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006268:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800626a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800626e:	4915      	ldr	r1, [pc, #84]	; (80062c4 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006270:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006272:	4301      	orrs	r1, r0
 8006274:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006276:	68d9      	ldr	r1, [r3, #12]
 8006278:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800627c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800627e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006282:	4302      	orrs	r2, r0
 8006284:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006288:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800628c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800628e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006290:	4301      	orrs	r1, r0
  return HAL_OK;
 8006292:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006294:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006296:	6819      	ldr	r1, [r3, #0]
 8006298:	f041 0101 	orr.w	r1, r1, #1
 800629c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800629e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062a4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80062aa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062b0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062b2:	e7d9      	b.n	8006268 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80062b4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80062b8:	f7fd fafe 	bl	80038b8 <HAL_I2C_MspInit>
 80062bc:	e7b8      	b.n	8006230 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80062be:	2001      	movs	r0, #1
}
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	02008000 	.word	0x02008000

080062c8 <HAL_I2C_Master_Transmit>:
{
 80062c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80062d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	f040 809d 	bne.w	8006414 <HAL_I2C_Master_Transmit+0x14c>
    __HAL_LOCK(hi2c);
 80062da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80062de:	4683      	mov	fp, r0
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f000 8097 	beq.w	8006414 <HAL_I2C_Master_Transmit+0x14c>
 80062e6:	2301      	movs	r3, #1
 80062e8:	468a      	mov	sl, r1
 80062ea:	4616      	mov	r6, r2
 80062ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80062f0:	f7fe f8cc 	bl	800448c <HAL_GetTick>
 80062f4:	4680      	mov	r8, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80062f6:	e006      	b.n	8006306 <HAL_I2C_Master_Transmit+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fe f8c8 	bl	800448c <HAL_GetTick>
 80062fc:	eba0 0008 	sub.w	r0, r0, r8
 8006300:	2819      	cmp	r0, #25
 8006302:	f200 808a 	bhi.w	800641a <HAL_I2C_Master_Transmit+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006306:	f8db 3000 	ldr.w	r3, [fp]
 800630a:	6998      	ldr	r0, [r3, #24]
 800630c:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8006310:	d1f2      	bne.n	80062f8 <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006312:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8006314:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8006318:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800631c:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006320:	2210      	movs	r2, #16
 8006322:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006326:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 800632a:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8006332:	b292      	uxth	r2, r2
 8006334:	2aff      	cmp	r2, #255	; 0xff
 8006336:	d87f      	bhi.n	8006438 <HAL_I2C_Master_Transmit+0x170>
      hi2c->XferSize = hi2c->XferCount;
 8006338:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800633c:	f3ca 0109 	ubfx	r1, sl, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006340:	6858      	ldr	r0, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8006342:	b292      	uxth	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006344:	468a      	mov	sl, r1
      hi2c->XferSize = hi2c->XferCount;
 8006346:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800634a:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800634c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006350:	49a0      	ldr	r1, [pc, #640]	; (80065d4 <HAL_I2C_Master_Transmit+0x30c>)
 8006352:	4001      	ands	r1, r0
 8006354:	430a      	orrs	r2, r1
 8006356:	49a0      	ldr	r1, [pc, #640]	; (80065d8 <HAL_I2C_Master_Transmit+0x310>)
 8006358:	4311      	orrs	r1, r2
 800635a:	6059      	str	r1, [r3, #4]
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800635c:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 8006360:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8006364:	b292      	uxth	r2, r2
 8006366:	2a00      	cmp	r2, #0
 8006368:	f000 80c3 	beq.w	80064f2 <HAL_I2C_Master_Transmit+0x22a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800636c:	699c      	ldr	r4, [r3, #24]
 800636e:	f014 0402 	ands.w	r4, r4, #2
 8006372:	f040 8087 	bne.w	8006484 <HAL_I2C_Master_Transmit+0x1bc>
  uint32_t itflag   = hi2c->Instance->ISR;
 8006376:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006378:	f012 0210 	ands.w	r2, r2, #16
 800637c:	f000 80cf 	beq.w	800651e <HAL_I2C_Master_Transmit+0x256>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8006382:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 8006384:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006386:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006388:	1c69      	adds	r1, r5, #1
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	f040 80c9 	bne.w	8006522 <HAL_I2C_Master_Transmit+0x25a>
 8006390:	0690      	lsls	r0, r2, #26
 8006392:	f100 80f7 	bmi.w	8006584 <HAL_I2C_Master_Transmit+0x2bc>
 8006396:	b927      	cbnz	r7, 80063a2 <HAL_I2C_Master_Transmit+0xda>
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	0691      	lsls	r1, r2, #26
 800639c:	d5fc      	bpl.n	8006398 <HAL_I2C_Master_Transmit+0xd0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800639e:	f8c3 901c 	str.w	r9, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80063a2:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 80063a6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80063a8:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063aa:	05ce      	lsls	r6, r1, #23
 80063ac:	d553      	bpl.n	8006456 <HAL_I2C_Master_Transmit+0x18e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063ae:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063b2:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 80063b4:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063b8:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063ba:	d504      	bpl.n	80063c6 <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80063c0:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063c4:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063c6:	0589      	lsls	r1, r1, #22
 80063c8:	d504      	bpl.n	80063d4 <HAL_I2C_Master_Transmit+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063ca:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80063ce:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063d2:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063d4:	6999      	ldr	r1, [r3, #24]
 80063d6:	078e      	lsls	r6, r1, #30
 80063d8:	d501      	bpl.n	80063de <HAL_I2C_Master_Transmit+0x116>
    hi2c->Instance->TXDR = 0x00U;
 80063da:	2100      	movs	r1, #0
 80063dc:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063de:	6999      	ldr	r1, [r3, #24]
 80063e0:	07cd      	lsls	r5, r1, #31
 80063e2:	d403      	bmi.n	80063ec <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063e4:	6999      	ldr	r1, [r3, #24]
 80063e6:	f041 0101 	orr.w	r1, r1, #1
 80063ea:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80063ec:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ee:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 80063f0:	487a      	ldr	r0, [pc, #488]	; (80065dc <HAL_I2C_Master_Transmit+0x314>)
    hi2c->State = HAL_I2C_STATE_READY;
 80063f2:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 80063f4:	4001      	ands	r1, r0
        return HAL_ERROR;
 80063f6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80063f8:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80063fa:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80063fe:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006402:	4313      	orrs	r3, r2
 8006404:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006408:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800640c:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 8006410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8006414:	2002      	movs	r0, #2
}
 8006416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800641a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800641e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006420:	2200      	movs	r2, #0
          return HAL_ERROR;
 8006422:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006424:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006426:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800642a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800642e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006432:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
        return HAL_ERROR;
 8006436:	e7ee      	b.n	8006416 <HAL_I2C_Master_Transmit+0x14e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	4966      	ldr	r1, [pc, #408]	; (80065d4 <HAL_I2C_Master_Transmit+0x30c>)
 800643c:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800643e:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8006442:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8006446:	4311      	orrs	r1, r2
 8006448:	4a65      	ldr	r2, [pc, #404]	; (80065e0 <HAL_I2C_Master_Transmit+0x318>)
 800644a:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800644c:	21ff      	movs	r1, #255	; 0xff
 800644e:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006452:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006454:	e782      	b.n	800635c <HAL_I2C_Master_Transmit+0x94>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006456:	054c      	lsls	r4, r1, #21
 8006458:	d4b0      	bmi.n	80063bc <HAL_I2C_Master_Transmit+0xf4>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800645a:	058f      	lsls	r7, r1, #22
 800645c:	d4b5      	bmi.n	80063ca <HAL_I2C_Master_Transmit+0x102>
  if (status != HAL_OK)
 800645e:	2800      	cmp	r0, #0
 8006460:	d1b8      	bne.n	80063d4 <HAL_I2C_Master_Transmit+0x10c>
    if (Timeout != HAL_MAX_DELAY)
 8006462:	1c6c      	adds	r4, r5, #1
 8006464:	d082      	beq.n	800636c <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006466:	f7fe f811 	bl	800448c <HAL_GetTick>
 800646a:	eba0 0008 	sub.w	r0, r0, r8
 800646e:	4285      	cmp	r5, r0
 8006470:	d3d3      	bcc.n	800641a <HAL_I2C_Master_Transmit+0x152>
 8006472:	2d00      	cmp	r5, #0
 8006474:	d0d1      	beq.n	800641a <HAL_I2C_Master_Transmit+0x152>
 8006476:	f8db 3000 	ldr.w	r3, [fp]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800647a:	699c      	ldr	r4, [r3, #24]
 800647c:	f014 0402 	ands.w	r4, r4, #2
 8006480:	f43f af79 	beq.w	8006376 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006484:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
      hi2c->XferSize--;
 8006488:	f8bb 2028 	ldrh.w	r2, [fp, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800648c:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 8006490:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006492:	6299      	str	r1, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006494:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 8006498:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800649a:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
      hi2c->XferCount--;
 800649e:	3901      	subs	r1, #1
      hi2c->XferSize--;
 80064a0:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
      hi2c->XferCount--;
 80064a4:	b289      	uxth	r1, r1
 80064a6:	f8ab 102a 	strh.w	r1, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064aa:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
 80064ae:	b289      	uxth	r1, r1
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	f47f af55 	bne.w	8006360 <HAL_I2C_Master_Transmit+0x98>
 80064b6:	2900      	cmp	r1, #0
 80064b8:	f43f af52 	beq.w	8006360 <HAL_I2C_Master_Transmit+0x98>
 80064bc:	1c68      	adds	r0, r5, #1
 80064be:	d165      	bne.n	800658c <HAL_I2C_Master_Transmit+0x2c4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	0611      	lsls	r1, r2, #24
 80064c4:	d5fc      	bpl.n	80064c0 <HAL_I2C_Master_Transmit+0x1f8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 80064ca:	b292      	uxth	r2, r2
 80064cc:	2aff      	cmp	r2, #255	; 0xff
 80064ce:	d96d      	bls.n	80065ac <HAL_I2C_Master_Transmit+0x2e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4944      	ldr	r1, [pc, #272]	; (80065e4 <HAL_I2C_Master_Transmit+0x31c>)
 80064d4:	400a      	ands	r2, r1
 80064d6:	4944      	ldr	r1, [pc, #272]	; (80065e8 <HAL_I2C_Master_Transmit+0x320>)
 80064d8:	ea4a 0202 	orr.w	r2, sl, r2
 80064dc:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064de:	22ff      	movs	r2, #255	; 0xff
 80064e0:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80064e4:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 80064e6:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 80064ea:	b292      	uxth	r2, r2
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	f47f af3d 	bne.w	800636c <HAL_I2C_Master_Transmit+0xa4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f2:	4642      	mov	r2, r8
 80064f4:	4629      	mov	r1, r5
 80064f6:	4658      	mov	r0, fp
 80064f8:	f7ff fde0 	bl	80060bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d166      	bne.n	80065ce <HAL_I2C_Master_Transmit+0x306>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006500:	f8db 3000 	ldr.w	r3, [fp]
 8006504:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8006506:	4c35      	ldr	r4, [pc, #212]	; (80065dc <HAL_I2C_Master_Transmit+0x314>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006508:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4022      	ands	r2, r4
 800650e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006510:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006514:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006518:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800651c:	e77b      	b.n	8006416 <HAL_I2C_Master_Transmit+0x14e>
  HAL_StatusTypeDef status = HAL_OK;
 800651e:	4610      	mov	r0, r2
 8006520:	e742      	b.n	80063a8 <HAL_I2C_Master_Transmit+0xe0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006522:	0692      	lsls	r2, r2, #26
 8006524:	d42e      	bmi.n	8006584 <HAL_I2C_Master_Transmit+0x2bc>
 8006526:	2f00      	cmp	r7, #0
 8006528:	f47f af3b 	bne.w	80063a2 <HAL_I2C_Master_Transmit+0xda>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800652c:	f7fd ffae 	bl	800448c <HAL_GetTick>
 8006530:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006532:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006536:	4285      	cmp	r5, r0
 8006538:	d302      	bcc.n	8006540 <HAL_I2C_Master_Transmit+0x278>
 800653a:	2d00      	cmp	r5, #0
 800653c:	f47f af24 	bne.w	8006388 <HAL_I2C_Master_Transmit+0xc0>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006540:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006542:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006546:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8006548:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800654a:	0409      	lsls	r1, r1, #16
 800654c:	d50c      	bpl.n	8006568 <HAL_I2C_Master_Transmit+0x2a0>
              (tmp1 != I2C_CR2_STOP) && \
 800654e:	0441      	lsls	r1, r0, #17
 8006550:	d40a      	bmi.n	8006568 <HAL_I2C_Master_Transmit+0x2a0>
 8006552:	2a20      	cmp	r2, #32
 8006554:	d008      	beq.n	8006568 <HAL_I2C_Master_Transmit+0x2a0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800655c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800655e:	f7fd ff95 	bl	800448c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006562:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8006566:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	0690      	lsls	r0, r2, #26
 800656c:	f53f af0c 	bmi.w	8006388 <HAL_I2C_Master_Transmit+0xc0>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006570:	f7fd ff8c 	bl	800448c <HAL_GetTick>
 8006574:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006576:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800657a:	2819      	cmp	r0, #25
 800657c:	d9f4      	bls.n	8006568 <HAL_I2C_Master_Transmit+0x2a0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800657e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8006580:	2701      	movs	r7, #1
 8006582:	e701      	b.n	8006388 <HAL_I2C_Master_Transmit+0xc0>
    if (status == HAL_OK)
 8006584:	2f00      	cmp	r7, #0
 8006586:	f43f af0a 	beq.w	800639e <HAL_I2C_Master_Transmit+0xd6>
 800658a:	e70a      	b.n	80063a2 <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	0612      	lsls	r2, r2, #24
 8006590:	d499      	bmi.n	80064c6 <HAL_I2C_Master_Transmit+0x1fe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fd ff7b 	bl	800448c <HAL_GetTick>
 8006596:	eba0 0008 	sub.w	r0, r0, r8
 800659a:	4285      	cmp	r5, r0
 800659c:	f4ff af3d 	bcc.w	800641a <HAL_I2C_Master_Transmit+0x152>
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	f43f af3a 	beq.w	800641a <HAL_I2C_Master_Transmit+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a6:	f8db 3000 	ldr.w	r3, [fp]
 80065aa:	e787      	b.n	80064bc <HAL_I2C_Master_Transmit+0x1f4>
          hi2c->XferSize = hi2c->XferCount;
 80065ac:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80065b0:	480c      	ldr	r0, [pc, #48]	; (80065e4 <HAL_I2C_Master_Transmit+0x31c>)
          hi2c->XferSize = hi2c->XferCount;
 80065b2:	b292      	uxth	r2, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065b4:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
 80065b6:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4002      	ands	r2, r0
 80065be:	ea4a 0202 	orr.w	r2, sl, r2
 80065c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80065c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80065ca:	605a      	str	r2, [r3, #4]
}
 80065cc:	e6c8      	b.n	8006360 <HAL_I2C_Master_Transmit+0x98>
      return HAL_ERROR;
 80065ce:	2001      	movs	r0, #1
 80065d0:	e721      	b.n	8006416 <HAL_I2C_Master_Transmit+0x14e>
 80065d2:	bf00      	nop
 80065d4:	fc009800 	.word	0xfc009800
 80065d8:	02002000 	.word	0x02002000
 80065dc:	fe00e800 	.word	0xfe00e800
 80065e0:	01ff2000 	.word	0x01ff2000
 80065e4:	fc009c00 	.word	0xfc009c00
 80065e8:	01ff0000 	.word	0x01ff0000

080065ec <HAL_I2C_Master_Receive>:
{
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80065f6:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	f040 808a 	bne.w	8006712 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 80065fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006602:	4604      	mov	r4, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	f000 8084 	beq.w	8006712 <HAL_I2C_Master_Receive+0x126>
 800660a:	2301      	movs	r3, #1
 800660c:	4689      	mov	r9, r1
 800660e:	4617      	mov	r7, r2
 8006610:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006614:	f7fd ff3a 	bl	800448c <HAL_GetTick>
 8006618:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800661a:	e005      	b.n	8006628 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661c:	f7fd ff36 	bl	800448c <HAL_GetTick>
 8006620:	1b40      	subs	r0, r0, r5
 8006622:	2819      	cmp	r0, #25
 8006624:	f200 8082 	bhi.w	800672c <HAL_I2C_Master_Receive+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	6998      	ldr	r0, [r3, #24]
 800662c:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8006630:	d1f4      	bne.n	800661c <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006632:	2222      	movs	r2, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8006634:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8006636:	6360      	str	r0, [r4, #52]	; 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006638:	f3c9 0709 	ubfx	r7, r9, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800663c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006640:	2210      	movs	r2, #16
 8006642:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006646:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8006648:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800664c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800664e:	b292      	uxth	r2, r2
 8006650:	2aff      	cmp	r2, #255	; 0xff
 8006652:	d879      	bhi.n	8006748 <HAL_I2C_Master_Receive+0x15c>
      hi2c->XferSize = hi2c->XferCount;
 8006654:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006656:	484a      	ldr	r0, [pc, #296]	; (8006780 <HAL_I2C_Master_Receive+0x194>)
      hi2c->XferSize = hi2c->XferCount;
 8006658:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800665a:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800665c:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800665e:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8006660:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006662:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006666:	430a      	orrs	r2, r1
 8006668:	4946      	ldr	r1, [pc, #280]	; (8006784 <HAL_I2C_Master_Receive+0x198>)
 800666a:	4311      	orrs	r1, r2
 800666c:	6059      	str	r1, [r3, #4]
 800666e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8006790 <HAL_I2C_Master_Receive+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006672:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8006676:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8006794 <HAL_I2C_Master_Receive+0x1a8>
    while (hi2c->XferCount > 0U)
 800667a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800667c:	462a      	mov	r2, r5
 800667e:	4631      	mov	r1, r6
 8006680:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d032      	beq.n	80066ee <HAL_I2C_Master_Receive+0x102>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006688:	f7ff fc46 	bl	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800668c:	2800      	cmp	r0, #0
 800668e:	d173      	bne.n	8006778 <HAL_I2C_Master_Receive+0x18c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006696:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006698:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800669a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800669c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800669e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80066a0:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 80066a2:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80066a4:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80066a6:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80066a8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80066ac:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066ae:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 80066b0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e1      	bne.n	800667a <HAL_I2C_Master_Receive+0x8e>
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	d0df      	beq.n	800667a <HAL_I2C_Master_Receive+0x8e>
 80066ba:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	d12b      	bne.n	8006718 <HAL_I2C_Master_Receive+0x12c>
 80066c0:	6993      	ldr	r3, [r2, #24]
 80066c2:	0619      	lsls	r1, r3, #24
 80066c4:	d5fc      	bpl.n	80066c0 <HAL_I2C_Master_Receive+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2bff      	cmp	r3, #255	; 0xff
 80066cc:	d946      	bls.n	800675c <HAL_I2C_Master_Receive+0x170>
  MODIFY_REG(hi2c->Instance->CR2, \
 80066ce:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d0:	4631      	mov	r1, r6
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d2:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d6:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 80066d8:	ea03 0308 	and.w	r3, r3, r8
 80066dc:	433b      	orrs	r3, r7
 80066de:	ea43 0309 	orr.w	r3, r3, r9
 80066e2:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e4:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
 80066e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1cc      	bne.n	8006688 <HAL_I2C_Master_Receive+0x9c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ee:	f7ff fce5 	bl	80060bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d140      	bne.n	8006778 <HAL_I2C_Master_Receive+0x18c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80066fa:	4d23      	ldr	r5, [pc, #140]	; (8006788 <HAL_I2C_Master_Receive+0x19c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	402a      	ands	r2, r5
 8006702:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006704:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006708:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800670c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006710:	e000      	b.n	8006714 <HAL_I2C_Master_Receive+0x128>
    return HAL_BUSY;
 8006712:	2002      	movs	r0, #2
}
 8006714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006718:	6993      	ldr	r3, [r2, #24]
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	d4d3      	bmi.n	80066c6 <HAL_I2C_Master_Receive+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671e:	f7fd feb5 	bl	800448c <HAL_GetTick>
 8006722:	1b40      	subs	r0, r0, r5
 8006724:	4286      	cmp	r6, r0
 8006726:	d301      	bcc.n	800672c <HAL_I2C_Master_Receive+0x140>
 8006728:	2e00      	cmp	r6, #0
 800672a:	d1c6      	bne.n	80066ba <HAL_I2C_Master_Receive+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800672e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006730:	2200      	movs	r2, #0
          return HAL_ERROR;
 8006732:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006734:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8006736:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800673a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800673c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8006744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	490d      	ldr	r1, [pc, #52]	; (8006780 <HAL_I2C_Master_Receive+0x194>)
 800674c:	400a      	ands	r2, r1
 800674e:	490f      	ldr	r1, [pc, #60]	; (800678c <HAL_I2C_Master_Receive+0x1a0>)
 8006750:	433a      	orrs	r2, r7
 8006752:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006754:	22ff      	movs	r2, #255	; 0xff
 8006756:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006758:	6059      	str	r1, [r3, #4]
}
 800675a:	e788      	b.n	800666e <HAL_I2C_Master_Receive+0x82>
          hi2c->XferSize = hi2c->XferCount;
 800675c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006760:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8006762:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006764:	6853      	ldr	r3, [r2, #4]
 8006766:	ea03 0308 	and.w	r3, r3, r8
 800676a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800676e:	433b      	orrs	r3, r7
 8006770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006774:	6053      	str	r3, [r2, #4]
}
 8006776:	e780      	b.n	800667a <HAL_I2C_Master_Receive+0x8e>
        return HAL_ERROR;
 8006778:	2001      	movs	r0, #1
}
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	bf00      	nop
 8006780:	fc009800 	.word	0xfc009800
 8006784:	02002400 	.word	0x02002400
 8006788:	fe00e800 	.word	0xfe00e800
 800678c:	01ff2400 	.word	0x01ff2400
 8006790:	fc009c00 	.word	0xfc009c00
 8006794:	01ff0000 	.word	0x01ff0000

08006798 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006798:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800679c:	2a20      	cmp	r2, #32
 800679e:	d123      	bne.n	80067e8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80067a0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80067a8:	4603      	mov	r3, r0
 80067aa:	2a01      	cmp	r2, #1
 80067ac:	d01c      	beq.n	80067e8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067ae:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067b0:	2024      	movs	r0, #36	; 0x24
{
 80067b2:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067b4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 80067bc:	6810      	ldr	r0, [r2, #0]
 80067be:	f020 0001 	bic.w	r0, r0, #1
 80067c2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067c4:	6810      	ldr	r0, [r2, #0]
 80067c6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80067ca:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80067cc:	6810      	ldr	r0, [r2, #0]
 80067ce:	4301      	orrs	r1, r0

    return HAL_OK;
 80067d0:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 80067d2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80067d4:	6811      	ldr	r1, [r2, #0]
 80067d6:	f041 0101 	orr.w	r1, r1, #1
 80067da:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80067dc:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80067e0:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80067e4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80067e8:	2002      	movs	r0, #2
}
 80067ea:	4770      	bx	lr

080067ec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80067f0:	2a20      	cmp	r2, #32
 80067f2:	d122      	bne.n	800683a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 80067f4:	4603      	mov	r3, r0
{
 80067f6:	b500      	push	{lr}
 80067f8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067fc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006800:	2a01      	cmp	r2, #1
 8006802:	d01c      	beq.n	800683e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006804:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006806:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006808:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800680c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006810:	6810      	ldr	r0, [r2, #0]
 8006812:	f020 0001 	bic.w	r0, r0, #1
 8006816:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8006818:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800681a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800681e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8006822:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8006824:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006826:	6811      	ldr	r1, [r2, #0]
 8006828:	f041 0101 	orr.w	r1, r1, #1
 800682c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800682e:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006832:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006836:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800683a:	2002      	movs	r0, #2
}
 800683c:	4770      	bx	lr
    return HAL_BUSY;
 800683e:	2002      	movs	r0, #2
}
 8006840:	f85d fb04 	ldr.w	pc, [sp], #4

08006844 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006844:	2800      	cmp	r0, #0
 8006846:	d067      	beq.n	8006918 <HAL_LTDC_Init+0xd4>
{
 8006848:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800684a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800684e:	4604      	mov	r4, r0
 8006850:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006854:	2b00      	cmp	r3, #0
 8006856:	d05a      	beq.n	800690e <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006858:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800685a:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800685c:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006860:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006864:	4302      	orrs	r2, r0
 8006866:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006868:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800686a:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800686c:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800686e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006872:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006874:	4929      	ldr	r1, [pc, #164]	; (800691c <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006876:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006878:	6998      	ldr	r0, [r3, #24]
 800687a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800687c:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800687e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	400a      	ands	r2, r1
 8006884:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800688c:	69a0      	ldr	r0, [r4, #24]
 800688e:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006890:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006892:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	400a      	ands	r2, r1
 8006898:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068a0:	6a20      	ldr	r0, [r4, #32]
 80068a2:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068a6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	400a      	ands	r2, r1
 80068ac:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80068b6:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
 80068b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068ba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	400a      	ands	r2, r1
 80068c0:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068ca:	430a      	orrs	r2, r1
 80068cc:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80068d0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80068d4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80068d8:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80068dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80068de:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80068e0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80068e4:	432a      	orrs	r2, r5
 80068e6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80068ea:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80068ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80068f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f4:	f042 0206 	orr.w	r2, r2, #6
 80068f8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	f042 0201 	orr.w	r2, r2, #1
 8006900:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006902:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006904:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006908:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
 800690c:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800690e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8006912:	f7fd f857 	bl	80039c4 <HAL_LTDC_MspInit>
 8006916:	e79f      	b.n	8006858 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8006918:	2001      	movs	r0, #1
}
 800691a:	4770      	bx	lr
 800691c:	f000f800 	.word	0xf000f800

08006920 <HAL_LTDC_ErrorCallback>:
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop

08006924 <HAL_LTDC_LineEventCallback>:
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop

08006928 <HAL_LTDC_ReloadEventCallback>:
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop

0800692c <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800692c:	6803      	ldr	r3, [r0, #0]
{
 800692e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006930:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
 8006932:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006934:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006936:	076a      	lsls	r2, r5, #29
 8006938:	d501      	bpl.n	800693e <HAL_LTDC_IRQHandler+0x12>
 800693a:	0771      	lsls	r1, r6, #29
 800693c:	d41d      	bmi.n	800697a <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800693e:	07aa      	lsls	r2, r5, #30
 8006940:	d501      	bpl.n	8006946 <HAL_LTDC_IRQHandler+0x1a>
 8006942:	07b3      	lsls	r3, r6, #30
 8006944:	d42d      	bmi.n	80069a2 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006946:	07e8      	lsls	r0, r5, #31
 8006948:	d501      	bpl.n	800694e <HAL_LTDC_IRQHandler+0x22>
 800694a:	07f1      	lsls	r1, r6, #31
 800694c:	d440      	bmi.n	80069d0 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800694e:	072a      	lsls	r2, r5, #28
 8006950:	d501      	bpl.n	8006956 <HAL_LTDC_IRQHandler+0x2a>
 8006952:	0733      	lsls	r3, r6, #28
 8006954:	d400      	bmi.n	8006958 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006956:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006958:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800695a:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800695c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800695e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006962:	f022 0208 	bic.w	r2, r2, #8
 8006966:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006968:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 800696a:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 800696c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006970:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006974:	f7ff ffd8 	bl	8006928 <HAL_LTDC_ReloadEventCallback>
}
 8006978:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800697a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697c:	f022 0204 	bic.w	r2, r2, #4
 8006980:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006982:	2204      	movs	r2, #4
 8006984:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006986:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006992:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006994:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006998:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800699c:	f7ff ffc0 	bl	8006920 <HAL_LTDC_ErrorCallback>
 80069a0:	e7cd      	b.n	800693e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80069a2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80069a4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80069a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a8:	f022 0202 	bic.w	r2, r2, #2
 80069ac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80069ae:	2202      	movs	r2, #2
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80069b2:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80069b4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80069b8:	f043 0302 	orr.w	r3, r3, #2
 80069bc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80069c0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80069c2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80069c6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80069ca:	f7ff ffa9 	bl	8006920 <HAL_LTDC_ErrorCallback>
 80069ce:	e7ba      	b.n	8006946 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80069d0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80069d2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80069d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80069dc:	2201      	movs	r2, #1
 80069de:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80069e0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80069e2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80069e6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80069ea:	f7ff ff9b 	bl	8006924 <HAL_LTDC_LineEventCallback>
 80069ee:	e7ae      	b.n	800694e <HAL_LTDC_IRQHandler+0x22>

080069f0 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069f0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	f000 80c0 	beq.w	8006b7a <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069fa:	2302      	movs	r3, #2
{
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a00:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a04:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a08:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
 8006a0c:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a0e:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a12:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a14:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a18:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a1a:	f102 0684 	add.w	r6, r2, #132	; 0x84
 8006a1e:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a20:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 8006a24:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a26:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a2a:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a2e:	f8df a160 	ldr.w	sl, [pc, #352]	; 8006b90 <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a32:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006a36:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a3a:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a44:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006a50:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a52:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a54:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a58:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a5a:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a5c:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a60:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006a64:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a66:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a68:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a6c:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a70:	440b      	add	r3, r1
 8006a72:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a76:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a7a:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a7e:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a82:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a8a:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a8c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a90:	68ab      	ldr	r3, [r5, #8]
 8006a92:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8006a9c:	4403      	add	r3, r0
 8006a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006aa2:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006aa4:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006aa8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8006aac:	f023 0307 	bic.w	r3, r3, #7
 8006ab0:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ab4:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006ab8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006abc:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006abe:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ac2:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006ac6:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006aca:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006ace:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8006ad2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006ad6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ada:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ade:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8006ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ae6:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006aea:	696b      	ldr	r3, [r5, #20]
 8006aec:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006af0:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006af4:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006af6:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006afa:	6a28      	ldr	r0, [r5, #32]
 8006afc:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006afe:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b02:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b06:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b12:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b16:	bb59      	cbnz	r1, 8006b70 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
 8006b18:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b1a:	1abf      	subs	r7, r7, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b1e:	fb03 f707 	mul.w	r7, r3, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b26:	6aea      	ldr	r2, [r5, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b28:	3703      	adds	r7, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b2a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b2e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8006b32:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006b36:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b3a:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <HAL_LTDC_ConfigLayer+0x198>)
 8006b40:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 8006b44:	400b      	ands	r3, r1
 8006b46:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b4a:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b4e:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b50:	f859 3006 	ldr.w	r3, [r9, r6]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 8006b5a:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b5c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
 8006b60:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b62:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006b66:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
 8006b6a:	b003      	add	sp, #12
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b70:	3901      	subs	r1, #1
 8006b72:	2906      	cmp	r1, #6
 8006b74:	d903      	bls.n	8006b7e <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b76:	2301      	movs	r3, #1
 8006b78:	e7cf      	b.n	8006b1a <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
 8006b7a:	2002      	movs	r0, #2
}
 8006b7c:	4770      	bx	lr
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <HAL_LTDC_ConfigLayer+0x19c>)
 8006b80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b84:	e7c9      	b.n	8006b1a <HAL_LTDC_ConfigLayer+0x12a>
 8006b86:	bf00      	nop
 8006b88:	fffff800 	.word	0xfffff800
 8006b8c:	0801c834 	.word	0x0801c834
 8006b90:	fffff8f8 	.word	0xfffff8f8

08006b94 <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 8006b94:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	f000 8099 	beq.w	8006cd0 <HAL_LTDC_SetAlpha+0x13c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b9e:	2302      	movs	r3, #2
  pLayerCfg->Alpha = Alpha;
 8006ba0:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006ba8:	01d6      	lsls	r6, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006baa:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006bac:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 8006bb0:	4686      	mov	lr, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bb2:	3684      	adds	r6, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bb4:	68e5      	ldr	r5, [r4, #12]
  pLayerCfg->Alpha = Alpha;
 8006bb6:	fb0c 0c02 	mla	ip, ip, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bba:	19a3      	adds	r3, r4, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bbc:	f3c5 480b 	ubfx	r8, r5, #16, #12
  pLayerCfg->Alpha = Alpha;
 8006bc0:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bc4:	685d      	ldr	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006bc6:	f8dc 0050 	ldr.w	r0, [ip, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bca:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bce:	e9dc 7a0e 	ldrd	r7, sl, [ip, #56]	; 0x38
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bd2:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bd4:	68e5      	ldr	r5, [r4, #12]
 8006bd6:	f107 0901 	add.w	r9, r7, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bda:	44d0      	add	r8, sl
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bdc:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8006be0:	444d      	add	r5, r9
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006be2:	f8dc 9044 	ldr.w	r9, [ip, #68]	; 0x44
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006be6:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bea:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006bec:	68e5      	ldr	r5, [r4, #12]
 8006bee:	f3c5 080a 	ubfx	r8, r5, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006bf2:	689d      	ldr	r5, [r3, #8]
 8006bf4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006bf8:	44c8      	add	r8, r9
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006bfa:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006bfc:	68e5      	ldr	r5, [r4, #12]
 8006bfe:	f3c5 090a 	ubfx	r9, r5, #0, #11
 8006c02:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8006c06:	3501      	adds	r5, #1
 8006c08:	444d      	add	r5, r9
 8006c0a:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006c0e:	f89c 8069 	ldrb.w	r8, [ip, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c12:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c14:	f89c 5068 	ldrb.w	r5, [ip, #104]	; 0x68
 8006c18:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8006c1c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c20:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006c24:	f028 0807 	bic.w	r8, r8, #7
 8006c28:	f8c3 8010 	str.w	r8, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006c2c:	f89c 806a 	ldrb.w	r8, [ip, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c30:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c34:	f8dc 8048 	ldr.w	r8, [ip, #72]	; 0x48
 8006c38:	f8c3 8010 	str.w	r8, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006c3c:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8006c40:	f04f 0900 	mov.w	r9, #0
 8006c44:	f8c3 9018 	str.w	r9, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c48:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c4a:	695d      	ldr	r5, [r3, #20]
 8006c4c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8006c50:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c52:	6159      	str	r1, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c54:	4921      	ldr	r1, [pc, #132]	; (8006cdc <HAL_LTDC_SetAlpha+0x148>)
 8006c56:	69dd      	ldr	r5, [r3, #28]
 8006c58:	4029      	ands	r1, r5
 8006c5a:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c5c:	e9dc 1515 	ldrd	r1, r5, [ip, #84]	; 0x54
 8006c60:	4329      	orrs	r1, r5
 8006c62:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c64:	f8dc 105c 	ldr.w	r1, [ip, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c68:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8006c6a:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c6e:	6299      	str	r1, [r3, #40]	; 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c70:	f1b8 0f00 	cmp.w	r8, #0
 8006c74:	d125      	bne.n	8006cc2 <HAL_LTDC_SetAlpha+0x12e>
    tmp = 4U;
 8006c76:	2104      	movs	r1, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c78:	2534      	movs	r5, #52	; 0x34
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c7a:	ebaa 0007 	sub.w	r0, sl, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c7e:	fb05 e202 	mla	r2, r5, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c82:	6add      	ldr	r5, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c84:	fb01 f000 	mul.w	r0, r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c88:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c8c:	3003      	adds	r0, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c8e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c90:	6e15      	ldr	r5, [r2, #96]	; 0x60
 8006c92:	fb05 f101 	mul.w	r1, r5, r1
 8006c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c9a:	6e51      	ldr	r1, [r2, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c9c:	4a10      	ldr	r2, [pc, #64]	; (8006ce0 <HAL_LTDC_SetAlpha+0x14c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c9e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ca2:	4002      	ands	r2, r0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ca6:	2201      	movs	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ca8:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006caa:	59a3      	ldr	r3, [r4, r6]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(hltdc);
 8006cb0:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006cb2:	6262      	str	r2, [r4, #36]	; 0x24
  return HAL_OK;
 8006cb4:	4618      	mov	r0, r3
  hltdc->State = HAL_LTDC_STATE_READY;
 8006cb6:	f88e 20a1 	strb.w	r2, [lr, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006cba:	f88e 30a0 	strb.w	r3, [lr, #160]	; 0xa0
}
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006cc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cc6:	f1b8 0f06 	cmp.w	r8, #6
 8006cca:	d903      	bls.n	8006cd4 <HAL_LTDC_SetAlpha+0x140>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ccc:	2101      	movs	r1, #1
 8006cce:	e7d3      	b.n	8006c78 <HAL_LTDC_SetAlpha+0xe4>
  __HAL_LOCK(hltdc);
 8006cd0:	2002      	movs	r0, #2
}
 8006cd2:	4770      	bx	lr
 8006cd4:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <HAL_LTDC_SetAlpha+0x150>)
 8006cd6:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
 8006cda:	e7cd      	b.n	8006c78 <HAL_LTDC_SetAlpha+0xe4>
 8006cdc:	fffff8f8 	.word	0xfffff8f8
 8006ce0:	fffff800 	.word	0xfffff800
 8006ce4:	0801c834 	.word	0x0801c834

08006ce8 <HAL_LTDC_GetState>:
  return hltdc->State;
 8006ce8:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf0:	4a02      	ldr	r2, [pc, #8]	; (8006cfc <HAL_PWR_EnableBkUpAccess+0xc>)
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf8:	6013      	str	r3, [r2, #0]
}
 8006cfa:	4770      	bx	lr
 8006cfc:	40007000 	.word	0x40007000

08006d00 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d00:	4b1a      	ldr	r3, [pc, #104]	; (8006d6c <HAL_PWREx_EnableOverDrive+0x6c>)
 8006d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8006d08:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40
{
 8006d0c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d10:	4c17      	ldr	r4, [pc, #92]	; (8006d70 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d20:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d22:	f7fd fbb3 	bl	800448c <HAL_GetTick>
 8006d26:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d28:	e005      	b.n	8006d36 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d2a:	f7fd fbaf 	bl	800448c <HAL_GetTick>
 8006d2e:	1b40      	subs	r0, r0, r5
 8006d30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d34:	d817      	bhi.n	8006d66 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	03da      	lsls	r2, r3, #15
 8006d3a:	d5f6      	bpl.n	8006d2a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d3c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d3e:	4d0c      	ldr	r5, [pc, #48]	; (8006d70 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d44:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006d46:	f7fd fba1 	bl	800448c <HAL_GetTick>
 8006d4a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d4c:	e005      	b.n	8006d5a <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d4e:	f7fd fb9d 	bl	800448c <HAL_GetTick>
 8006d52:	1b00      	subs	r0, r0, r4
 8006d54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d58:	d805      	bhi.n	8006d66 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d5a:	686b      	ldr	r3, [r5, #4]
 8006d5c:	039b      	lsls	r3, r3, #14
 8006d5e:	d5f6      	bpl.n	8006d4e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8006d60:	2000      	movs	r0, #0
}
 8006d62:	b003      	add	sp, #12
 8006d64:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8006d66:	2003      	movs	r0, #3
}
 8006d68:	b003      	add	sp, #12
 8006d6a:	bd30      	pop	{r4, r5, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	40007000 	.word	0x40007000

08006d74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d78:	f7fd fb88 	bl	800448c <HAL_GetTick>

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	d04d      	beq.n	8006e1c <HAL_QSPI_Init+0xa8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006d80:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006d84:	4606      	mov	r6, r0
 8006d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d03c      	beq.n	8006e08 <HAL_QSPI_Init+0x94>
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006d8e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	68a1      	ldr	r1, [r4, #8]
 8006d94:	6813      	ldr	r3, [r2, #0]
 8006d96:	3901      	subs	r1, #1
 8006d98:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006d9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006da0:	6013      	str	r3, [r2, #0]
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006da2:	e001      	b.n	8006da8 <HAL_QSPI_Init+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da4:	1c6b      	adds	r3, r5, #1
 8006da6:	d127      	bne.n	8006df8 <HAL_QSPI_Init+0x84>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006da8:	6893      	ldr	r3, [r2, #8]
 8006daa:	f013 0320 	ands.w	r3, r3, #32
 8006dae:	d1f9      	bne.n	8006da4 <HAL_QSPI_Init+0x30>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006db0:	69e0      	ldr	r0, [r4, #28]
 8006db2:	68e1      	ldr	r1, [r4, #12]
 8006db4:	6815      	ldr	r5, [r2, #0]
 8006db6:	4301      	orrs	r1, r0
 8006db8:	6a20      	ldr	r0, [r4, #32]
 8006dba:	4301      	orrs	r1, r0
 8006dbc:	6860      	ldr	r0, [r4, #4]
 8006dbe:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8006dc2:	481b      	ldr	r0, [pc, #108]	; (8006e30 <HAL_QSPI_Init+0xbc>)
 8006dc4:	4028      	ands	r0, r5
 8006dc6:	4301      	orrs	r1, r0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006dc8:	6960      	ldr	r0, [r4, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006dca:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006dcc:	69a1      	ldr	r1, [r4, #24]
 8006dce:	6855      	ldr	r5, [r2, #4]
 8006dd0:	4301      	orrs	r1, r0
 8006dd2:	6920      	ldr	r0, [r4, #16]
 8006dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006dd8:	4816      	ldr	r0, [pc, #88]	; (8006e34 <HAL_QSPI_Init+0xc0>)
 8006dda:	4028      	ands	r0, r5
    hqspi->State = HAL_QSPI_STATE_READY;
 8006ddc:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006dde:	4301      	orrs	r1, r0
    hqspi->State = HAL_QSPI_STATE_READY;
 8006de0:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006de2:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8006de4:	6811      	ldr	r1, [r2, #0]
 8006de6:	4329      	orrs	r1, r5
 8006de8:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006dea:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8006dec:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006df0:	2300      	movs	r3, #0
 8006df2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df8:	f7fd fb48 	bl	800448c <HAL_GetTick>
 8006dfc:	1b80      	subs	r0, r0, r6
 8006dfe:	42a8      	cmp	r0, r5
 8006e00:	d80e      	bhi.n	8006e20 <HAL_QSPI_Init+0xac>
 8006e02:	b16d      	cbz	r5, 8006e20 <HAL_QSPI_Init+0xac>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	e7cf      	b.n	8006da8 <HAL_QSPI_Init+0x34>
    HAL_QSPI_MspInit(hqspi);
 8006e08:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8006e0a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8006e0e:	f7fc fe6d 	bl	8003aec <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8006e12:	f241 3388 	movw	r3, #5000	; 0x1388
}
 8006e16:	461d      	mov	r5, r3
  hqspi->Timeout = Timeout;
 8006e18:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8006e1a:	e7b9      	b.n	8006d90 <HAL_QSPI_Init+0x1c>
    return HAL_ERROR;
 8006e1c:	2001      	movs	r0, #1
}
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006e20:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006e22:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006e24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e2a:	4303      	orrs	r3, r0
 8006e2c:	6463      	str	r3, [r4, #68]	; 0x44
  if(status == HAL_OK)
 8006e2e:	e7df      	b.n	8006df0 <HAL_QSPI_Init+0x7c>
 8006e30:	00ffff2f 	.word	0x00ffff2f
 8006e34:	ffe0f8fe 	.word	0xffe0f8fe

08006e38 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f000 81b6 	beq.w	80071aa <HAL_RCC_OscConfig+0x372>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e3e:	6803      	ldr	r3, [r0, #0]
{
 8006e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e44:	07dd      	lsls	r5, r3, #31
{
 8006e46:	b082      	sub	sp, #8
 8006e48:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4a:	d535      	bpl.n	8006eb8 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e4c:	499a      	ldr	r1, [pc, #616]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006e4e:	688a      	ldr	r2, [r1, #8]
 8006e50:	f002 020c 	and.w	r2, r2, #12
 8006e54:	2a04      	cmp	r2, #4
 8006e56:	f000 80e0 	beq.w	800701a <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e5a:	688a      	ldr	r2, [r1, #8]
 8006e5c:	f002 020c 	and.w	r2, r2, #12
 8006e60:	2a08      	cmp	r2, #8
 8006e62:	f000 80d6 	beq.w	8007012 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e66:	6863      	ldr	r3, [r4, #4]
 8006e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6c:	d010      	beq.n	8006e90 <HAL_RCC_OscConfig+0x58>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 80fd 	beq.w	800706e <HAL_RCC_OscConfig+0x236>
 8006e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e78:	4b8f      	ldr	r3, [pc, #572]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	f000 8185 	beq.w	800718a <HAL_RCC_OscConfig+0x352>
 8006e80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e004      	b.n	8006e9a <HAL_RCC_OscConfig+0x62>
 8006e90:	4a89      	ldr	r2, [pc, #548]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9a:	f7fd faf7 	bl	800448c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	4e86      	ldr	r6, [pc, #536]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8006ea0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea2:	e005      	b.n	8006eb0 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea4:	f7fd faf2 	bl	800448c <HAL_GetTick>
 8006ea8:	1b40      	subs	r0, r0, r5
 8006eaa:	2864      	cmp	r0, #100	; 0x64
 8006eac:	f200 80db 	bhi.w	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	039a      	lsls	r2, r3, #14
 8006eb4:	d5f6      	bpl.n	8006ea4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	079f      	lsls	r7, r3, #30
 8006eba:	d527      	bpl.n	8006f0c <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ebc:	4a7e      	ldr	r2, [pc, #504]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006ebe:	6891      	ldr	r1, [r2, #8]
 8006ec0:	f011 0f0c 	tst.w	r1, #12
 8006ec4:	d07e      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ec6:	6891      	ldr	r1, [r2, #8]
 8006ec8:	f001 010c 	and.w	r1, r1, #12
 8006ecc:	2908      	cmp	r1, #8
 8006ece:	d076      	beq.n	8006fbe <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ed0:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ed2:	4d79      	ldr	r5, [pc, #484]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8104 	beq.w	80070e2 <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	f043 0301 	orr.w	r3, r3, #1
 8006ee0:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee2:	f7fd fad3 	bl	800448c <HAL_GetTick>
 8006ee6:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee8:	e005      	b.n	8006ef6 <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eea:	f7fd facf 	bl	800448c <HAL_GetTick>
 8006eee:	1b80      	subs	r0, r0, r6
 8006ef0:	2802      	cmp	r0, #2
 8006ef2:	f200 80b8 	bhi.w	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	0798      	lsls	r0, r3, #30
 8006efa:	d5f6      	bpl.n	8006eea <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	6922      	ldr	r2, [r4, #16]
 8006f00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006f04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006f08:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	071a      	lsls	r2, r3, #28
 8006f0e:	d41f      	bmi.n	8006f50 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f10:	075d      	lsls	r5, r3, #29
 8006f12:	d534      	bpl.n	8006f7e <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f14:	4b68      	ldr	r3, [pc, #416]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f18:	00d0      	lsls	r0, r2, #3
 8006f1a:	d56f      	bpl.n	8006ffc <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 8006f1c:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f1e:	4e67      	ldr	r6, [pc, #412]	; (80070bc <HAL_RCC_OscConfig+0x284>)
 8006f20:	6833      	ldr	r3, [r6, #0]
 8006f22:	05d9      	lsls	r1, r3, #23
 8006f24:	f140 808f 	bpl.w	8007046 <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f28:	68a3      	ldr	r3, [r4, #8]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	f000 80eb 	beq.w	8007106 <HAL_RCC_OscConfig+0x2ce>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80b2 	beq.w	800709a <HAL_RCC_OscConfig+0x262>
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	4b5f      	ldr	r3, [pc, #380]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006f3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f3c:	f000 812d 	beq.w	800719a <HAL_RCC_OscConfig+0x362>
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	671a      	str	r2, [r3, #112]	; 0x70
 8006f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f48:	f022 0204 	bic.w	r2, r2, #4
 8006f4c:	671a      	str	r2, [r3, #112]	; 0x70
 8006f4e:	e0df      	b.n	8007110 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f50:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8006f52:	4d59      	ldr	r5, [pc, #356]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d040      	beq.n	8006fda <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 8006f58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006f60:	f7fd fa94 	bl	800448c <HAL_GetTick>
 8006f64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f66:	e004      	b.n	8006f72 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f68:	f7fd fa90 	bl	800448c <HAL_GetTick>
 8006f6c:	1b80      	subs	r0, r0, r6
 8006f6e:	2802      	cmp	r0, #2
 8006f70:	d879      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f74:	079b      	lsls	r3, r3, #30
 8006f76:	d5f7      	bpl.n	8006f68 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	075d      	lsls	r5, r3, #29
 8006f7c:	d4ca      	bmi.n	8006f14 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f7e:	69a0      	ldr	r0, [r4, #24]
 8006f80:	b1c8      	cbz	r0, 8006fb6 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f82:	4d4d      	ldr	r5, [pc, #308]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006f84:	68ab      	ldr	r3, [r5, #8]
 8006f86:	f003 030c 	and.w	r3, r3, #12
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	f000 80d3 	beq.w	8007136 <HAL_RCC_OscConfig+0x2fe>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f90:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f92:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f98:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f9a:	f000 8108 	beq.w	80071ae <HAL_RCC_OscConfig+0x376>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9e:	f7fd fa75 	bl	800448c <HAL_GetTick>
 8006fa2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa6:	f7fd fa71 	bl	800448c <HAL_GetTick>
 8006faa:	1b00      	subs	r0, r0, r4
 8006fac:	2802      	cmp	r0, #2
 8006fae:	d85a      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	019b      	lsls	r3, r3, #6
 8006fb4:	d4f7      	bmi.n	8006fa6 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006fb6:	2000      	movs	r0, #0
}
 8006fb8:	b002      	add	sp, #8
 8006fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	6852      	ldr	r2, [r2, #4]
 8006fc0:	0256      	lsls	r6, r2, #9
 8006fc2:	d485      	bmi.n	8006ed0 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc4:	4a3c      	ldr	r2, [pc, #240]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	0795      	lsls	r5, r2, #30
 8006fca:	d530      	bpl.n	800702e <HAL_RCC_OscConfig+0x1f6>
 8006fcc:	68e2      	ldr	r2, [r4, #12]
 8006fce:	2a01      	cmp	r2, #1
 8006fd0:	d02d      	beq.n	800702e <HAL_RCC_OscConfig+0x1f6>
        return HAL_ERROR;
 8006fd2:	2001      	movs	r0, #1
}
 8006fd4:	b002      	add	sp, #8
 8006fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006fda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006fe2:	f7fd fa53 	bl	800448c <HAL_GetTick>
 8006fe6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe8:	e004      	b.n	8006ff4 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fea:	f7fd fa4f 	bl	800448c <HAL_GetTick>
 8006fee:	1b80      	subs	r0, r0, r6
 8006ff0:	2802      	cmp	r0, #2
 8006ff2:	d838      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ff4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006ff6:	079f      	lsls	r7, r3, #30
 8006ff8:	d4f7      	bmi.n	8006fea <HAL_RCC_OscConfig+0x1b2>
 8006ffa:	e7bd      	b.n	8006f78 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8006ffe:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007000:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007010:	e785      	b.n	8006f1e <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007012:	684a      	ldr	r2, [r1, #4]
 8007014:	0250      	lsls	r0, r2, #9
 8007016:	f57f af26 	bpl.w	8006e66 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800701a:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	0391      	lsls	r1, r2, #14
 8007020:	f57f af4a 	bpl.w	8006eb8 <HAL_RCC_OscConfig+0x80>
 8007024:	6862      	ldr	r2, [r4, #4]
 8007026:	2a00      	cmp	r2, #0
 8007028:	f47f af46 	bne.w	8006eb8 <HAL_RCC_OscConfig+0x80>
 800702c:	e7d1      	b.n	8006fd2 <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800702e:	4922      	ldr	r1, [pc, #136]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8007030:	6920      	ldr	r0, [r4, #16]
 8007032:	680a      	ldr	r2, [r1, #0]
 8007034:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007038:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800703c:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703e:	071a      	lsls	r2, r3, #28
 8007040:	f57f af66 	bpl.w	8006f10 <HAL_RCC_OscConfig+0xd8>
 8007044:	e784      	b.n	8006f50 <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 8007046:	6833      	ldr	r3, [r6, #0]
 8007048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800704e:	f7fd fa1d 	bl	800448c <HAL_GetTick>
 8007052:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007054:	6833      	ldr	r3, [r6, #0]
 8007056:	05da      	lsls	r2, r3, #23
 8007058:	f53f af66 	bmi.w	8006f28 <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705c:	f7fd fa16 	bl	800448c <HAL_GetTick>
 8007060:	1bc0      	subs	r0, r0, r7
 8007062:	2864      	cmp	r0, #100	; 0x64
 8007064:	d9f6      	bls.n	8007054 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8007066:	2003      	movs	r0, #3
}
 8007068:	b002      	add	sp, #8
 800706a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800706e:	4d12      	ldr	r5, [pc, #72]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007080:	f7fd fa04 	bl	800448c <HAL_GetTick>
 8007084:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007086:	e004      	b.n	8007092 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007088:	f7fd fa00 	bl	800448c <HAL_GetTick>
 800708c:	1b80      	subs	r0, r0, r6
 800708e:	2864      	cmp	r0, #100	; 0x64
 8007090:	d8e9      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	039b      	lsls	r3, r3, #14
 8007096:	d4f7      	bmi.n	8007088 <HAL_RCC_OscConfig+0x250>
 8007098:	e70d      	b.n	8006eb6 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800709a:	4e07      	ldr	r6, [pc, #28]	; (80070b8 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	6733      	str	r3, [r6, #112]	; 0x70
 80070a8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80070aa:	f023 0304 	bic.w	r3, r3, #4
 80070ae:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 80070b0:	f7fd f9ec 	bl	800448c <HAL_GetTick>
 80070b4:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070b6:	e008      	b.n	80070ca <HAL_RCC_OscConfig+0x292>
 80070b8:	40023800 	.word	0x40023800
 80070bc:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c0:	f7fd f9e4 	bl	800448c <HAL_GetTick>
 80070c4:	1bc0      	subs	r0, r0, r7
 80070c6:	4540      	cmp	r0, r8
 80070c8:	d8cd      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ca:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80070cc:	0798      	lsls	r0, r3, #30
 80070ce:	d4f7      	bmi.n	80070c0 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	f43f af54 	beq.w	8006f7e <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d6:	4a4e      	ldr	r2, [pc, #312]	; (8007210 <HAL_RCC_OscConfig+0x3d8>)
 80070d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070de:	6413      	str	r3, [r2, #64]	; 0x40
 80070e0:	e74d      	b.n	8006f7e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80070ea:	f7fd f9cf 	bl	800448c <HAL_GetTick>
 80070ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070f0:	e004      	b.n	80070fc <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f2:	f7fd f9cb 	bl	800448c <HAL_GetTick>
 80070f6:	1b80      	subs	r0, r0, r6
 80070f8:	2802      	cmp	r0, #2
 80070fa:	d8b4      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	0799      	lsls	r1, r3, #30
 8007100:	d4f7      	bmi.n	80070f2 <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	e702      	b.n	8006f0c <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007106:	4a42      	ldr	r2, [pc, #264]	; (8007210 <HAL_RCC_OscConfig+0x3d8>)
 8007108:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007110:	f7fd f9bc 	bl	800448c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007114:	4f3e      	ldr	r7, [pc, #248]	; (8007210 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007116:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800711a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	e004      	b.n	8007128 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711e:	f7fd f9b5 	bl	800448c <HAL_GetTick>
 8007122:	1b80      	subs	r0, r0, r6
 8007124:	4540      	cmp	r0, r8
 8007126:	d89e      	bhi.n	8007066 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800712a:	079b      	lsls	r3, r3, #30
 800712c:	d5f7      	bpl.n	800711e <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 800712e:	2d00      	cmp	r5, #0
 8007130:	f43f af25 	beq.w	8006f7e <HAL_RCC_OscConfig+0x146>
 8007134:	e7cf      	b.n	80070d6 <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007136:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8007138:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800713a:	f43f af3d 	beq.w	8006fb8 <HAL_RCC_OscConfig+0x180>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007142:	69e1      	ldr	r1, [r4, #28]
 8007144:	428b      	cmp	r3, r1
 8007146:	f47f af44 	bne.w	8006fd2 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800714a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714e:	6a21      	ldr	r1, [r4, #32]
 8007150:	428b      	cmp	r3, r1
 8007152:	f47f af3e 	bne.w	8006fd2 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007156:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800715a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800715c:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800715e:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8007162:	f47f af36 	bne.w	8006fd2 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007168:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007170:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8007174:	f47f af2d 	bne.w	8006fd2 <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800717a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800717e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8007182:	bf14      	ite	ne
 8007184:	2001      	movne	r0, #1
 8007186:	2000      	moveq	r0, #0
 8007188:	e716      	b.n	8006fb8 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800718a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e67f      	b.n	8006e9a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800719a:	f042 0204 	orr.w	r2, r2, #4
 800719e:	671a      	str	r2, [r3, #112]	; 0x70
 80071a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	671a      	str	r2, [r3, #112]	; 0x70
 80071a8:	e7b2      	b.n	8007110 <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 80071aa:	2001      	movs	r0, #1
}
 80071ac:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80071ae:	f7fd f96d 	bl	800448c <HAL_GetTick>
 80071b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b4:	e005      	b.n	80071c2 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b6:	f7fd f969 	bl	800448c <HAL_GetTick>
 80071ba:	1b80      	subs	r0, r0, r6
 80071bc:	2802      	cmp	r0, #2
 80071be:	f63f af52 	bhi.w	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	0199      	lsls	r1, r3, #6
 80071c6:	d4f6      	bmi.n	80071b6 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80071ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071cc:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ce:	4e10      	ldr	r6, [pc, #64]	; (8007210 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071d0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80071d4:	3a01      	subs	r2, #1
 80071d6:	430b      	orrs	r3, r1
 80071d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80071e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80071e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80071f4:	f7fd f94a 	bl	800448c <HAL_GetTick>
 80071f8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fa:	e005      	b.n	8007208 <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fc:	f7fd f946 	bl	800448c <HAL_GetTick>
 8007200:	1b00      	subs	r0, r0, r4
 8007202:	2802      	cmp	r0, #2
 8007204:	f63f af2f 	bhi.w	8007066 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007208:	6833      	ldr	r3, [r6, #0]
 800720a:	019a      	lsls	r2, r3, #6
 800720c:	d5f6      	bpl.n	80071fc <HAL_RCC_OscConfig+0x3c4>
 800720e:	e6d2      	b.n	8006fb6 <HAL_RCC_OscConfig+0x17e>
 8007210:	40023800 	.word	0x40023800

08007214 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007214:	2800      	cmp	r0, #0
 8007216:	f000 80b3 	beq.w	8007380 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800721a:	4a61      	ldr	r2, [pc, #388]	; (80073a0 <HAL_RCC_ClockConfig+0x18c>)
 800721c:	6813      	ldr	r3, [r2, #0]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	428b      	cmp	r3, r1
{
 8007224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800722c:	d20c      	bcs.n	8007248 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722e:	6813      	ldr	r3, [r2, #0]
 8007230:	f023 030f 	bic.w	r3, r3, #15
 8007234:	430b      	orrs	r3, r1
 8007236:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007238:	6813      	ldr	r3, [r2, #0]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	428b      	cmp	r3, r1
 8007240:	d002      	beq.n	8007248 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007242:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8007244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	0798      	lsls	r0, r3, #30
 800724c:	d514      	bpl.n	8007278 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800724e:	0759      	lsls	r1, r3, #29
 8007250:	d504      	bpl.n	800725c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007252:	4954      	ldr	r1, [pc, #336]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 8007254:	688a      	ldr	r2, [r1, #8]
 8007256:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800725a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800725c:	071a      	lsls	r2, r3, #28
 800725e:	d504      	bpl.n	800726a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007260:	4950      	ldr	r1, [pc, #320]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 8007262:	688a      	ldr	r2, [r1, #8]
 8007264:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8007268:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800726a:	494e      	ldr	r1, [pc, #312]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 800726c:	68a0      	ldr	r0, [r4, #8]
 800726e:	688a      	ldr	r2, [r1, #8]
 8007270:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007274:	4302      	orrs	r2, r0
 8007276:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007278:	07df      	lsls	r7, r3, #31
 800727a:	d520      	bpl.n	80072be <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800727c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	4b49      	ldr	r3, [pc, #292]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007280:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007282:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007284:	d07e      	beq.n	8007384 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007286:	2a02      	cmp	r2, #2
 8007288:	d077      	beq.n	800737a <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728a:	0799      	lsls	r1, r3, #30
 800728c:	d5d9      	bpl.n	8007242 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800728e:	4e45      	ldr	r6, [pc, #276]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007290:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007294:	68b3      	ldr	r3, [r6, #8]
 8007296:	f023 0303 	bic.w	r3, r3, #3
 800729a:	4313      	orrs	r3, r2
 800729c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800729e:	f7fd f8f5 	bl	800448c <HAL_GetTick>
 80072a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a4:	e004      	b.n	80072b0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a6:	f7fd f8f1 	bl	800448c <HAL_GetTick>
 80072aa:	1bc0      	subs	r0, r0, r7
 80072ac:	4540      	cmp	r0, r8
 80072ae:	d86c      	bhi.n	800738a <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b0:	68b3      	ldr	r3, [r6, #8]
 80072b2:	6862      	ldr	r2, [r4, #4]
 80072b4:	f003 030c 	and.w	r3, r3, #12
 80072b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80072bc:	d1f3      	bne.n	80072a6 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072be:	4a38      	ldr	r2, [pc, #224]	; (80073a0 <HAL_RCC_ClockConfig+0x18c>)
 80072c0:	6813      	ldr	r3, [r2, #0]
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	42ab      	cmp	r3, r5
 80072c8:	d909      	bls.n	80072de <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ca:	6813      	ldr	r3, [r2, #0]
 80072cc:	f023 030f 	bic.w	r3, r3, #15
 80072d0:	432b      	orrs	r3, r5
 80072d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d4:	6813      	ldr	r3, [r2, #0]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	42ab      	cmp	r3, r5
 80072dc:	d1b1      	bne.n	8007242 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	075a      	lsls	r2, r3, #29
 80072e2:	d506      	bpl.n	80072f2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e4:	492f      	ldr	r1, [pc, #188]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 80072e6:	68e0      	ldr	r0, [r4, #12]
 80072e8:	688a      	ldr	r2, [r1, #8]
 80072ea:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80072ee:	4302      	orrs	r2, r0
 80072f0:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f2:	071b      	lsls	r3, r3, #28
 80072f4:	d431      	bmi.n	800735a <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072f6:	492b      	ldr	r1, [pc, #172]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 80072f8:	688b      	ldr	r3, [r1, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d039      	beq.n	8007376 <HAL_RCC_ClockConfig+0x162>
 8007302:	2b08      	cmp	r3, #8
 8007304:	d118      	bne.n	8007338 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007306:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007308:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800730a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800730e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007310:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8007314:	d03b      	beq.n	800738e <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007316:	4824      	ldr	r0, [pc, #144]	; (80073a8 <HAL_RCC_ClockConfig+0x194>)
 8007318:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800731c:	2300      	movs	r3, #0
 800731e:	fba1 0100 	umull	r0, r1, r1, r0
 8007322:	f7f9 fc61 	bl	8000be8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007326:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800732e:	3301      	adds	r3, #1
 8007330:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8007332:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8007336:	e000      	b.n	800733a <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 8007338:	4b1c      	ldr	r3, [pc, #112]	; (80073ac <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 800733c:	4c1c      	ldr	r4, [pc, #112]	; (80073b0 <HAL_RCC_ClockConfig+0x19c>)
 800733e:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8007340:	481c      	ldr	r0, [pc, #112]	; (80073b4 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007342:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007346:	491c      	ldr	r1, [pc, #112]	; (80073b8 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8007348:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800734a:	5ca2      	ldrb	r2, [r4, r2]
 800734c:	40d3      	lsrs	r3, r2
 800734e:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8007350:	f7fc ffaa 	bl	80042a8 <HAL_InitTick>
  return HAL_OK;
 8007354:	2000      	movs	r0, #0
}
 8007356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800735a:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
 800735c:	6921      	ldr	r1, [r4, #16]
 800735e:	6893      	ldr	r3, [r2, #8]
 8007360:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007364:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007368:	490e      	ldr	r1, [pc, #56]	; (80073a4 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800736a:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800736c:	688b      	ldr	r3, [r1, #8]
 800736e:	f003 030c 	and.w	r3, r3, #12
 8007372:	2b04      	cmp	r3, #4
 8007374:	d1c5      	bne.n	8007302 <HAL_RCC_ClockConfig+0xee>
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <HAL_RCC_ClockConfig+0x194>)
 8007378:	e7df      	b.n	800733a <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	0198      	lsls	r0, r3, #6
 800737c:	d487      	bmi.n	800728e <HAL_RCC_ClockConfig+0x7a>
 800737e:	e760      	b.n	8007242 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007380:	2001      	movs	r0, #1
}
 8007382:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007384:	039e      	lsls	r6, r3, #14
 8007386:	d482      	bmi.n	800728e <HAL_RCC_ClockConfig+0x7a>
 8007388:	e75b      	b.n	8007242 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800738a:	2003      	movs	r0, #3
 800738c:	e75a      	b.n	8007244 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800738e:	4807      	ldr	r0, [pc, #28]	; (80073ac <HAL_RCC_ClockConfig+0x198>)
 8007390:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007394:	fba1 0100 	umull	r0, r1, r1, r0
 8007398:	f7f9 fc26 	bl	8000be8 <__aeabi_uldivmod>
 800739c:	e7c3      	b.n	8007326 <HAL_RCC_ClockConfig+0x112>
 800739e:	bf00      	nop
 80073a0:	40023c00 	.word	0x40023c00
 80073a4:	40023800 	.word	0x40023800
 80073a8:	017d7840 	.word	0x017d7840
 80073ac:	00f42400 	.word	0x00f42400
 80073b0:	0801c814 	.word	0x0801c814
 80073b4:	20000020 	.word	0x20000020
 80073b8:	20000018 	.word	0x20000018

080073bc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073bc:	4916      	ldr	r1, [pc, #88]	; (8007418 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80073be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073c0:	688b      	ldr	r3, [r1, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d01b      	beq.n	8007402 <HAL_RCC_GetSysClockFreq+0x46>
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d117      	bne.n	80073fe <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073ce:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80073d0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073d6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80073d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80073dc:	d113      	bne.n	8007406 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073de:	480f      	ldr	r0, [pc, #60]	; (800741c <HAL_RCC_GetSysClockFreq+0x60>)
 80073e0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80073e4:	fba1 0100 	umull	r0, r1, r1, r0
 80073e8:	f7f9 fbfe 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_RCC_GetSysClockFreq+0x5c>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80073f4:	3301      	adds	r3, #1
 80073f6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80073f8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80073fc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80073fe:	4807      	ldr	r0, [pc, #28]	; (800741c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8007400:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007402:	4807      	ldr	r0, [pc, #28]	; (8007420 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8007404:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007406:	4806      	ldr	r0, [pc, #24]	; (8007420 <HAL_RCC_GetSysClockFreq+0x64>)
 8007408:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800740c:	2300      	movs	r3, #0
 800740e:	fba1 0100 	umull	r0, r1, r1, r0
 8007412:	f7f9 fbe9 	bl	8000be8 <__aeabi_uldivmod>
 8007416:	e7e9      	b.n	80073ec <HAL_RCC_GetSysClockFreq+0x30>
 8007418:	40023800 	.word	0x40023800
 800741c:	00f42400 	.word	0x00f42400
 8007420:	017d7840 	.word	0x017d7840

08007424 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8007426:	4905      	ldr	r1, [pc, #20]	; (800743c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	4a05      	ldr	r2, [pc, #20]	; (8007440 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800742c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007430:	6808      	ldr	r0, [r1, #0]
 8007432:	5cd3      	ldrb	r3, [r2, r3]
}
 8007434:	40d8      	lsrs	r0, r3
 8007436:	4770      	bx	lr
 8007438:	40023800 	.word	0x40023800
 800743c:	20000018 	.word	0x20000018
 8007440:	0801c824 	.word	0x0801c824

08007444 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007444:	4b04      	ldr	r3, [pc, #16]	; (8007458 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8007446:	4905      	ldr	r1, [pc, #20]	; (800745c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4a05      	ldr	r2, [pc, #20]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800744c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	5cd3      	ldrb	r3, [r2, r3]
}
 8007454:	40d8      	lsrs	r0, r3
 8007456:	4770      	bx	lr
 8007458:	40023800 	.word	0x40023800
 800745c:	20000018 	.word	0x20000018
 8007460:	0801c824 	.word	0x0801c824

08007464 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007466:	220f      	movs	r2, #15
 8007468:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	f002 0203 	and.w	r2, r2, #3
 8007470:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007478:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8007480:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	08db      	lsrs	r3, r3, #3
{
 8007486:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007488:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800748c:	4c05      	ldr	r4, [pc, #20]	; (80074a4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800748e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007490:	6823      	ldr	r3, [r4, #0]
}
 8007492:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	600b      	str	r3, [r1, #0]
}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40023c00 	.word	0x40023c00

080074a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074a8:	6803      	ldr	r3, [r0, #0]
{
 80074aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074ae:	f013 0601 	ands.w	r6, r3, #1
{
 80074b2:	b083      	sub	sp, #12
 80074b4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074b6:	d00b      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074b8:	4aa8      	ldr	r2, [pc, #672]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80074ba:	6891      	ldr	r1, [r2, #8]
 80074bc:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80074c0:	6091      	str	r1, [r2, #8]
 80074c2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80074c4:	6891      	ldr	r1, [r2, #8]
 80074c6:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80074c8:	fab6 f686 	clz	r6, r6
 80074cc:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074ce:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80074d0:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80074d4:	d010      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074d6:	49a1      	ldr	r1, [pc, #644]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80074d8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80074da:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80074de:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074e2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80074e6:	ea42 0205 	orr.w	r2, r2, r5
 80074ea:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80074ee:	f000 8214 	beq.w	800791a <HAL_RCCEx_PeriphCLKConfig+0x472>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80074f2:	fab5 f585 	clz	r5, r5
 80074f6:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80074f8:	02df      	lsls	r7, r3, #11
 80074fa:	d510      	bpl.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074fc:	4897      	ldr	r0, [pc, #604]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80074fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007500:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007504:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007508:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800750c:	ea42 0201 	orr.w	r2, r2, r1
 8007510:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007514:	f000 8204 	beq.w	8007920 <HAL_RCCEx_PeriphCLKConfig+0x478>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8007518:	2900      	cmp	r1, #0
 800751a:	bf08      	it	eq
 800751c:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800751e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007522:	bf18      	it	ne
 8007524:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007526:	0698      	lsls	r0, r3, #26
 8007528:	f100 81b2 	bmi.w	8007890 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800752c:	06d9      	lsls	r1, r3, #27
 800752e:	d50c      	bpl.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007530:	4a8a      	ldr	r2, [pc, #552]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007532:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007536:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800753a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800753e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007542:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007544:	4301      	orrs	r1, r0
 8007546:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800754a:	045a      	lsls	r2, r3, #17
 800754c:	d508      	bpl.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800754e:	4983      	ldr	r1, [pc, #524]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007550:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007552:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007556:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800755a:	4302      	orrs	r2, r0
 800755c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007560:	041f      	lsls	r7, r3, #16
 8007562:	d508      	bpl.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007564:	497d      	ldr	r1, [pc, #500]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007566:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007568:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800756c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007570:	4302      	orrs	r2, r0
 8007572:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007576:	03d8      	lsls	r0, r3, #15
 8007578:	d508      	bpl.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800757a:	4978      	ldr	r1, [pc, #480]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800757c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800757e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007582:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007586:	4302      	orrs	r2, r0
 8007588:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800758c:	0399      	lsls	r1, r3, #14
 800758e:	d508      	bpl.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007590:	4972      	ldr	r1, [pc, #456]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007592:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007594:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007598:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800759c:	4302      	orrs	r2, r0
 800759e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075a2:	065a      	lsls	r2, r3, #25
 80075a4:	d508      	bpl.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075a6:	496d      	ldr	r1, [pc, #436]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80075aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80075ae:	f022 0203 	bic.w	r2, r2, #3
 80075b2:	4302      	orrs	r2, r0
 80075b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075b8:	061f      	lsls	r7, r3, #24
 80075ba:	d508      	bpl.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075bc:	4967      	ldr	r1, [pc, #412]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80075c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80075c4:	f022 020c 	bic.w	r2, r2, #12
 80075c8:	4302      	orrs	r2, r0
 80075ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ce:	05d8      	lsls	r0, r3, #23
 80075d0:	d508      	bpl.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075d2:	4962      	ldr	r1, [pc, #392]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80075d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80075da:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80075de:	4302      	orrs	r2, r0
 80075e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075e4:	0599      	lsls	r1, r3, #22
 80075e6:	d508      	bpl.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075e8:	495c      	ldr	r1, [pc, #368]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80075ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80075ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80075f0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80075f4:	4302      	orrs	r2, r0
 80075f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075fa:	055a      	lsls	r2, r3, #21
 80075fc:	d508      	bpl.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075fe:	4957      	ldr	r1, [pc, #348]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007602:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007606:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800760a:	4302      	orrs	r2, r0
 800760c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007610:	051f      	lsls	r7, r3, #20
 8007612:	d508      	bpl.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007614:	4951      	ldr	r1, [pc, #324]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007616:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007618:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800761c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007620:	4302      	orrs	r2, r0
 8007622:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007626:	04d8      	lsls	r0, r3, #19
 8007628:	d508      	bpl.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800762a:	494c      	ldr	r1, [pc, #304]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800762c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800762e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007632:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007636:	4302      	orrs	r2, r0
 8007638:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800763c:	0499      	lsls	r1, r3, #18
 800763e:	d508      	bpl.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007640:	4946      	ldr	r1, [pc, #280]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007642:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007644:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007648:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800764c:	4302      	orrs	r2, r0
 800764e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007652:	025a      	lsls	r2, r3, #9
 8007654:	d508      	bpl.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007656:	4941      	ldr	r1, [pc, #260]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007658:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800765a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800765e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007662:	4302      	orrs	r2, r0
 8007664:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007668:	029f      	lsls	r7, r3, #10
 800766a:	d50c      	bpl.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800766c:	493b      	ldr	r1, [pc, #236]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800766e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007670:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8007674:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007678:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800767c:	bf08      	it	eq
 800767e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007680:	4302      	orrs	r2, r0
 8007682:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8007686:	f013 0f08 	tst.w	r3, #8
 800768a:	bf18      	it	ne
 800768c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800768e:	0358      	lsls	r0, r3, #13
 8007690:	d508      	bpl.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007692:	4932      	ldr	r1, [pc, #200]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007694:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007696:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800769a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800769e:	4302      	orrs	r2, r0
 80076a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80076a4:	0219      	lsls	r1, r3, #8
 80076a6:	d46a      	bmi.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076a8:	2e01      	cmp	r6, #1
 80076aa:	d001      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80076ac:	019a      	lsls	r2, r3, #6
 80076ae:	d560      	bpl.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076b0:	4e2a      	ldr	r6, [pc, #168]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80076b2:	6833      	ldr	r3, [r6, #0]
 80076b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076b8:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ba:	f7fc fee7 	bl	800448c <HAL_GetTick>
 80076be:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076c0:	e005      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076c2:	f7fc fee3 	bl	800448c <HAL_GetTick>
 80076c6:	1bc3      	subs	r3, r0, r7
 80076c8:	2b64      	cmp	r3, #100	; 0x64
 80076ca:	f200 80dd 	bhi.w	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076ce:	6833      	ldr	r3, [r6, #0]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	d4f6      	bmi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	07df      	lsls	r7, r3, #31
 80076d8:	d512      	bpl.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80076da:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80076dc:	b982      	cbnz	r2, 8007700 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076de:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076e2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076e6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80076ea:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80076ee:	430a      	orrs	r2, r1
 80076f0:	6861      	ldr	r1, [r4, #4]
 80076f2:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80076f6:	68a1      	ldr	r1, [r4, #8]
 80076f8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80076fc:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007700:	031e      	lsls	r6, r3, #12
 8007702:	d504      	bpl.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007704:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007706:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800770a:	f000 811a 	beq.w	8007942 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800770e:	02d8      	lsls	r0, r3, #11
 8007710:	d504      	bpl.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x274>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007712:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007714:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8007718:	f000 8113 	beq.w	8007942 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800771c:	01d9      	lsls	r1, r3, #7
 800771e:	d511      	bpl.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007720:	490e      	ldr	r1, [pc, #56]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007722:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007726:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800772a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800772e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007732:	4302      	orrs	r2, r0
 8007734:	6860      	ldr	r0, [r4, #4]
 8007736:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800773a:	6920      	ldr	r0, [r4, #16]
 800773c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007740:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007744:	019a      	lsls	r2, r3, #6
 8007746:	f100 80ed 	bmi.w	8007924 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800774a:	4e04      	ldr	r6, [pc, #16]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007752:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007754:	f7fc fe9a 	bl	800448c <HAL_GetTick>
 8007758:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800775a:	e007      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800775c:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007760:	f7fc fe94 	bl	800448c <HAL_GetTick>
 8007764:	1bc0      	subs	r0, r0, r7
 8007766:	2864      	cmp	r0, #100	; 0x64
 8007768:	f200 808e 	bhi.w	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	d5f6      	bpl.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007772:	2d01      	cmp	r5, #1
 8007774:	d00e      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007776:	2000      	movs	r0, #0
}
 8007778:	b003      	add	sp, #12
 800777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800777e:	4991      	ldr	r1, [pc, #580]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007780:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007784:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007788:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800778c:	4302      	orrs	r2, r0
 800778e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8007792:	e789      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 8007794:	4d8b      	ldr	r5, [pc, #556]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800779c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800779e:	f7fc fe75 	bl	800448c <HAL_GetTick>
 80077a2:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077a4:	e004      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077a6:	f7fc fe71 	bl	800448c <HAL_GetTick>
 80077aa:	1b80      	subs	r0, r0, r6
 80077ac:	2864      	cmp	r0, #100	; 0x64
 80077ae:	d86b      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	009f      	lsls	r7, r3, #2
 80077b4:	d4f7      	bmi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	031d      	lsls	r5, r3, #12
 80077ba:	f140 80fb 	bpl.w	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80077be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	f040 80f7 	bne.w	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077c6:	497f      	ldr	r1, [pc, #508]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80077c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077cc:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077d0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80077d4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80077d8:	4302      	orrs	r2, r0
 80077da:	6960      	ldr	r0, [r4, #20]
 80077dc:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80077e0:	69a0      	ldr	r0, [r4, #24]
 80077e2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80077e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077ea:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80077ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80077f0:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80077f4:	3801      	subs	r0, #1
 80077f6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80077fa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80077fe:	0299      	lsls	r1, r3, #10
 8007800:	d515      	bpl.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007802:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007804:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8007808:	d111      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x386>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800780a:	496e      	ldr	r1, [pc, #440]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800780c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007810:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007814:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8007818:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800781c:	4302      	orrs	r2, r0
 800781e:	6960      	ldr	r0, [r4, #20]
 8007820:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8007824:	6a20      	ldr	r0, [r4, #32]
 8007826:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800782a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800782e:	071a      	lsls	r2, r3, #28
 8007830:	d519      	bpl.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007832:	4a64      	ldr	r2, [pc, #400]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007834:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007836:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800783a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800783e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8007842:	69e0      	ldr	r0, [r4, #28]
 8007844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007848:	430b      	orrs	r3, r1
 800784a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800784e:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8007852:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007856:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800785a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800785c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007860:	430b      	orrs	r3, r1
 8007862:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8007866:	4c57      	ldr	r4, [pc, #348]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007870:	f7fc fe0c 	bl	800448c <HAL_GetTick>
 8007874:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	f53f af7c 	bmi.w	8007776 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800787e:	f7fc fe05 	bl	800448c <HAL_GetTick>
 8007882:	1b40      	subs	r0, r0, r5
 8007884:	2864      	cmp	r0, #100	; 0x64
 8007886:	d9f6      	bls.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        return HAL_TIMEOUT;
 8007888:	2003      	movs	r0, #3
}
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8007890:	4b4c      	ldr	r3, [pc, #304]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 8007892:	4f4d      	ldr	r7, [pc, #308]	; (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8007894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007896:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ac:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80078ae:	f7fc fded 	bl	800448c <HAL_GetTick>
 80078b2:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078b4:	e005      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078b6:	f7fc fde9 	bl	800448c <HAL_GetTick>
 80078ba:	eba0 0008 	sub.w	r0, r0, r8
 80078be:	2864      	cmp	r0, #100	; 0x64
 80078c0:	d8e2      	bhi.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	05d9      	lsls	r1, r3, #23
 80078c6:	d5f6      	bpl.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078c8:	4f3e      	ldr	r7, [pc, #248]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078ce:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80078d2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80078d6:	d010      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80078d8:	4291      	cmp	r1, r2
 80078da:	d00e      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80078de:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80078e4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80078e8:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80078ec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80078f0:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80078f2:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078f6:	07d2      	lsls	r2, r2, #31
 80078f8:	d448      	bmi.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078fa:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80078fe:	d03c      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007900:	4930      	ldr	r1, [pc, #192]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007902:	688a      	ldr	r2, [r1, #8]
 8007904:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007908:	608a      	str	r2, [r1, #8]
 800790a:	4a2e      	ldr	r2, [pc, #184]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800790c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007910:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007912:	430b      	orrs	r3, r1
 8007914:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	e608      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 800791a:	2500      	movs	r5, #0
      plli2sused = 1;
 800791c:	2601      	movs	r6, #1
 800791e:	e5eb      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8007920:	2601      	movs	r6, #1
 8007922:	e5fc      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	6861      	ldr	r1, [r4, #4]
 8007928:	041b      	lsls	r3, r3, #16
 800792a:	68e2      	ldr	r2, [r4, #12]
 800792c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007930:	68a1      	ldr	r1, [r4, #8]
 8007932:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007936:	4a23      	ldr	r2, [pc, #140]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007938:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800793c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8007940:	e703      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007942:	4920      	ldr	r1, [pc, #128]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8007944:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007948:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800794c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8007950:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007954:	4302      	orrs	r2, r0
 8007956:	6860      	ldr	r0, [r4, #4]
 8007958:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800795c:	68e0      	ldr	r0, [r4, #12]
 800795e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8007962:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007966:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800796a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800796c:	f020 001f 	bic.w	r0, r0, #31
 8007970:	3a01      	subs	r2, #1
 8007972:	4302      	orrs	r2, r0
 8007974:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8007978:	e6d0      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800797a:	4812      	ldr	r0, [pc, #72]	; (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800797c:	4913      	ldr	r1, [pc, #76]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0x524>)
 800797e:	6882      	ldr	r2, [r0, #8]
 8007980:	4019      	ands	r1, r3
 8007982:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007986:	430a      	orrs	r2, r1
 8007988:	6082      	str	r2, [r0, #8]
 800798a:	e7be      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x462>
        tickstart = HAL_GetTick();
 800798c:	f7fc fd7e 	bl	800448c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007990:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007994:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007996:	e006      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007998:	f7fc fd78 	bl	800448c <HAL_GetTick>
 800799c:	eba0 0008 	sub.w	r0, r0, r8
 80079a0:	4548      	cmp	r0, r9
 80079a2:	f63f af71 	bhi.w	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a8:	0798      	lsls	r0, r3, #30
 80079aa:	d5f5      	bpl.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80079ae:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80079b2:	e7a2      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079b4:	02d8      	lsls	r0, r3, #11
 80079b6:	f57f af22 	bpl.w	80077fe <HAL_RCCEx_PeriphCLKConfig+0x356>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80079bc:	2a00      	cmp	r2, #0
 80079be:	f47f af1e 	bne.w	80077fe <HAL_RCCEx_PeriphCLKConfig+0x356>
 80079c2:	e700      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80079c4:	40023800 	.word	0x40023800
 80079c8:	40007000 	.word	0x40007000
 80079cc:	0ffffcff 	.word	0x0ffffcff

080079d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079d0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80079d4:	d031      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80079d6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80079da:	d12c      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  {
    saiclocksource = RCC->DCKCFGR1;
 80079dc:	4a2e      	ldr	r2, [pc, #184]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80079de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80079e2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 80079e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ea:	d033      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80079ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079f0:	d02e      	beq.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 80079f2:	bb03      	cbnz	r3, 8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079f4:	6853      	ldr	r3, [r2, #4]
 80079f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079fa:	6853      	ldr	r3, [r2, #4]
 80079fc:	bf08      	it	eq
 80079fe:	4927      	ldreq	r1, [pc, #156]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a04:	bf18      	it	ne
 8007a06:	4926      	ldrne	r1, [pc, #152]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8007a08:	fbb1 f1f3 	udiv	r1, r1, r3
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007a0c:	4b22      	ldr	r3, [pc, #136]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8007a0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a12:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007a16:	f3c2 6203 	ubfx	r2, r2, #24, #4

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a1e:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a22:	f3c3 2304 	ubfx	r3, r3, #8, #5
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a26:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a2a:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a2c:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 8007a30:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007a34:	4770      	bx	lr
    switch (saiclocksource)
 8007a36:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8007a38:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8007a3c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007a40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 8007a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a48:	d004      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8007a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a4e:	d1d0      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a50:	4814      	ldr	r0, [pc, #80]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8007a52:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a54:	6853      	ldr	r3, [r2, #4]
 8007a56:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a5a:	6853      	ldr	r3, [r2, #4]
 8007a5c:	bf08      	it	eq
 8007a5e:	490f      	ldreq	r1, [pc, #60]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a64:	bf18      	it	ne
 8007a66:	490e      	ldrne	r1, [pc, #56]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8007a68:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8007a6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a72:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a76:	f3c2 6203 	ubfx	r2, r2, #24, #4
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a7e:	f3c0 1088 	ubfx	r0, r0, #6, #9
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a82:	f003 031f 	and.w	r3, r3, #31
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a86:	fb01 f000 	mul.w	r0, r1, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a8a:	3301      	adds	r3, #1
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a8c:	fbb0 f0f2 	udiv	r0, r0, r2
        frequency = frequency/(tmpreg);
 8007a90:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	00f42400 	.word	0x00f42400
 8007aa0:	017d7840 	.word	0x017d7840
 8007aa4:	00bb8000 	.word	0x00bb8000

08007aa8 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d052      	beq.n	8007b52 <HAL_RTC_Init+0xaa>
{
 8007aac:	b538      	push	{r3, r4, r5, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007aae:	7f43      	ldrb	r3, [r0, #29]
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ab6:	b14b      	cbz	r3, 8007acc <HAL_RTC_Init+0x24>
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ab8:	2202      	movs	r2, #2

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007aba:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007abc:	7762      	strb	r2, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	06d2      	lsls	r2, r2, #27
 8007ac2:	d507      	bpl.n	8007ad4 <HAL_RTC_Init+0x2c>
    status = HAL_OK;
  }

  if (status == HAL_OK)
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	7763      	strb	r3, [r4, #29]
  }

  return status;
}
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8007acc:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8007ace:	f7fc f87b 	bl	8003bc8 <HAL_RTC_MspInit>
 8007ad2:	e7f1      	b.n	8007ab8 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ad4:	2253      	movs	r2, #83	; 0x53
 8007ad6:	21ca      	movs	r1, #202	; 0xca
 8007ad8:	6259      	str	r1, [r3, #36]	; 0x24
 8007ada:	625a      	str	r2, [r3, #36]	; 0x24
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	0655      	lsls	r5, r2, #25
 8007ae0:	d524      	bpl.n	8007b2c <HAL_RTC_Init+0x84>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007ae2:	6898      	ldr	r0, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007ae4:	6862      	ldr	r2, [r4, #4]
 8007ae6:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007ae8:	4929      	ldr	r1, [pc, #164]	; (8007b90 <HAL_RTC_Init+0xe8>)
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007aea:	432a      	orrs	r2, r5
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007aec:	4001      	ands	r1, r0
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007aee:	6960      	ldr	r0, [r4, #20]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007af0:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007af2:	4302      	orrs	r2, r0
 8007af4:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007af6:	68e0      	ldr	r0, [r4, #12]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007af8:	430a      	orrs	r2, r1
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007afa:	68a1      	ldr	r1, [r4, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007afc:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007afe:	6118      	str	r0, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007b06:	611a      	str	r2, [r3, #16]
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b0e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007b10:	689a      	ldr	r2, [r3, #8]
 8007b12:	0691      	lsls	r1, r2, #26
 8007b14:	d527      	bpl.n	8007b66 <HAL_RTC_Init+0xbe>
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b18:	21ff      	movs	r1, #255	; 0xff
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007b1a:	69a0      	ldr	r0, [r4, #24]
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007b1c:	f022 0208 	bic.w	r2, r2, #8
 8007b20:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b24:	4302      	orrs	r2, r0
 8007b26:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b28:	6259      	str	r1, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8007b2a:	e7cb      	b.n	8007ac4 <HAL_RTC_Init+0x1c>
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b32:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8007b34:	f7fc fcaa 	bl	800448c <HAL_GetTick>
 8007b38:	4605      	mov	r5, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007b3a:	e005      	b.n	8007b48 <HAL_RTC_Init+0xa0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b3c:	f7fc fca6 	bl	800448c <HAL_GetTick>
 8007b40:	1b40      	subs	r0, r0, r5
 8007b42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b46:	d806      	bhi.n	8007b56 <HAL_RTC_Init+0xae>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	0650      	lsls	r0, r2, #25
 8007b4e:	d4c8      	bmi.n	8007ae2 <HAL_RTC_Init+0x3a>
 8007b50:	e7f4      	b.n	8007b3c <HAL_RTC_Init+0x94>
    return HAL_ERROR;
 8007b52:	2001      	movs	r0, #1
}
 8007b54:	4770      	bx	lr
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b56:	2304      	movs	r3, #4
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007b58:	6822      	ldr	r2, [r4, #0]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b5a:	7763      	strb	r3, [r4, #29]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007b5c:	68d3      	ldr	r3, [r2, #12]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b5e:	23ff      	movs	r3, #255	; 0xff
 8007b60:	2001      	movs	r0, #1
 8007b62:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007b64:	bd38      	pop	{r3, r4, r5, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b6c:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8007b6e:	f7fc fc8d 	bl	800448c <HAL_GetTick>
 8007b72:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	0692      	lsls	r2, r2, #26
 8007b7a:	d4cc      	bmi.n	8007b16 <HAL_RTC_Init+0x6e>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b7c:	f7fc fc86 	bl	800448c <HAL_GetTick>
 8007b80:	1b40      	subs	r0, r0, r5
 8007b82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b86:	d9f5      	bls.n	8007b74 <HAL_RTC_Init+0xcc>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007b88:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b8a:	6822      	ldr	r2, [r4, #0]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007b8c:	7763      	strb	r3, [r4, #29]
    if (status == HAL_OK)
 8007b8e:	e7e6      	b.n	8007b5e <HAL_RTC_Init+0xb6>
 8007b90:	ff8fffbf 	.word	0xff8fffbf

08007b94 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8007b94:	7f03      	ldrb	r3, [r0, #28]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	f000 825e 	beq.w	8008058 <HAL_RTC_SetTime+0x4c4>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b9c:	2302      	movs	r3, #2
{
 8007b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba2:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba8:	7743      	strb	r3, [r0, #29]
  __HAL_LOCK(hrtc);
 8007baa:	7701      	strb	r1, [r0, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bac:	6801      	ldr	r1, [r0, #0]
  if (Format == RTC_FORMAT_BIN)
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	f040 81eb 	bne.w	8007f8a <HAL_RTC_SetTime+0x3f6>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bb4:	6888      	ldr	r0, [r1, #8]
 8007bb6:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007bba:	f000 8231 	beq.w	8008020 <HAL_RTC_SetTime+0x48c>
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007bbe:	78e0      	ldrb	r0, [r4, #3]
 8007bc0:	0580      	lsls	r0, r0, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007bc2:	f894 c000 	ldrb.w	ip, [r4]
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;

  while (number >= 10U)
 8007bc6:	f1bc 0f09 	cmp.w	ip, #9
 8007bca:	f240 8095 	bls.w	8007cf8 <HAL_RTC_SetTime+0x164>
 8007bce:	f1ac 030a 	sub.w	r3, ip, #10
 8007bd2:	4ece      	ldr	r6, [pc, #824]	; (8007f0c <HAL_RTC_SetTime+0x378>)
 8007bd4:	b2df      	uxtb	r7, r3
 8007bd6:	fba6 6e07 	umull	r6, lr, r6, r7
 8007bda:	2f4f      	cmp	r7, #79	; 0x4f
 8007bdc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8007be0:	f10e 0e01 	add.w	lr, lr, #1
 8007be4:	f240 8248 	bls.w	8008078 <HAL_RTC_SetTime+0x4e4>
 8007be8:	f1ac 0628 	sub.w	r6, ip, #40	; 0x28
 8007bec:	2300      	movs	r3, #0
 8007bee:	f366 0307 	bfi	r3, r6, #0, #8
 8007bf2:	f1ac 0632 	sub.w	r6, ip, #50	; 0x32
 8007bf6:	f366 230f 	bfi	r3, r6, #8, #8
 8007bfa:	f1ac 063c 	sub.w	r6, ip, #60	; 0x3c
 8007bfe:	f366 4317 	bfi	r3, r6, #16, #8
 8007c02:	f1ac 0646 	sub.w	r6, ip, #70	; 0x46
 8007c06:	f366 631f 	bfi	r3, r6, #24, #8
 8007c0a:	ea4f 06de 	mov.w	r6, lr, lsr #3
 8007c0e:	f003 387f 	and.w	r8, r3, #2139062143	; 0x7f7f7f7f
 8007c12:	f083 37b0 	eor.w	r7, r3, #2964369584	; 0xb0b0b0b0
  {
    bcdhigh++;
    number -= 10U;
 8007c16:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 8007c1a:	2e01      	cmp	r6, #1
 8007c1c:	f108 3930 	add.w	r9, r8, #808464432	; 0x30303030
 8007c20:	f007 3780 	and.w	r7, r7, #2155905152	; 0x80808080
 8007c24:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8007c28:	f108 3876 	add.w	r8, r8, #1987475062	; 0x76767676
 8007c2c:	ea87 0709 	eor.w	r7, r7, r9
 8007c30:	ea83 0308 	eor.w	r3, r3, r8
  while (number >= 10U)
 8007c34:	f000 8217 	beq.w	8008066 <HAL_RTC_SetTime+0x4d2>
 8007c38:	f007 337f 	and.w	r3, r7, #2139062143	; 0x7f7f7f7f
 8007c3c:	f087 38b0 	eor.w	r8, r7, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8007c40:	f087 37f6 	eor.w	r7, r7, #4143380214	; 0xf6f6f6f6
 8007c44:	2e03      	cmp	r6, #3
 8007c46:	f103 3930 	add.w	r9, r3, #808464432	; 0x30303030
 8007c4a:	f008 3880 	and.w	r8, r8, #2155905152	; 0x80808080
 8007c4e:	f007 3780 	and.w	r7, r7, #2155905152	; 0x80808080
 8007c52:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8007c56:	ea88 0809 	eor.w	r8, r8, r9
 8007c5a:	ea83 0307 	eor.w	r3, r3, r7
  while (number >= 10U)
 8007c5e:	f040 81f9 	bne.w	8008054 <HAL_RTC_SetTime+0x4c0>
    number -= 10U;
 8007c62:	f088 33f6 	eor.w	r3, r8, #4143380214	; 0xf6f6f6f6
 8007c66:	f008 387f 	and.w	r8, r8, #2139062143	; 0x7f7f7f7f
    bcdhigh++;
 8007c6a:	2718      	movs	r7, #24
    number -= 10U;
 8007c6c:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8007c70:	f108 3876 	add.w	r8, r8, #1987475062	; 0x76767676
 8007c74:	ea83 0308 	eor.w	r3, r3, r8
  while (number >= 10U)
 8007c78:	f00e 0638 	and.w	r6, lr, #56	; 0x38
 8007c7c:	0e1b      	lsrs	r3, r3, #24
 8007c7e:	ebc6 1846 	rsb	r8, r6, r6, lsl #5
 8007c82:	45b6      	cmp	lr, r6
 8007c84:	ebc6 0888 	rsb	r8, r6, r8, lsl #2
 8007c88:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8007c8c:	fa5f fc8c 	uxtb.w	ip, ip
 8007c90:	d02e      	beq.n	8007cf0 <HAL_RTC_SetTime+0x15c>
 8007c92:	f1ac 030a 	sub.w	r3, ip, #10
    number -= 10U;
 8007c96:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8007c98:	1c77      	adds	r7, r6, #1
  while (number >= 10U)
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d928      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007c9e:	f1ac 0314 	sub.w	r3, ip, #20
    bcdhigh++;
 8007ca2:	1cb7      	adds	r7, r6, #2
    number -= 10U;
 8007ca4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d922      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007caa:	f1ac 031e 	sub.w	r3, ip, #30
    bcdhigh++;
 8007cae:	1cf7      	adds	r7, r6, #3
    number -= 10U;
 8007cb0:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007cb2:	2b09      	cmp	r3, #9
 8007cb4:	d91c      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007cb6:	f1ac 0328 	sub.w	r3, ip, #40	; 0x28
    bcdhigh++;
 8007cba:	1d37      	adds	r7, r6, #4
    number -= 10U;
 8007cbc:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007cbe:	2b09      	cmp	r3, #9
 8007cc0:	d916      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007cc2:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
    bcdhigh++;
 8007cc6:	1d77      	adds	r7, r6, #5
    number -= 10U;
 8007cc8:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	d910      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007cce:	f1ac 033c 	sub.w	r3, ip, #60	; 0x3c
    bcdhigh++;
 8007cd2:	1db7      	adds	r7, r6, #6
    number -= 10U;
 8007cd4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007cd6:	2b09      	cmp	r3, #9
 8007cd8:	d90a      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007cda:	f1ac 0346 	sub.w	r3, ip, #70	; 0x46
    bcdhigh++;
 8007cde:	1df7      	adds	r7, r6, #7
    number -= 10U;
 8007ce0:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007ce2:	2b09      	cmp	r3, #9
 8007ce4:	d904      	bls.n	8007cf0 <HAL_RTC_SetTime+0x15c>
    number -= 10U;
 8007ce6:	f1ac 0350 	sub.w	r3, ip, #80	; 0x50
    bcdhigh++;
 8007cea:	f106 0708 	add.w	r7, r6, #8
    number -= 10U;
 8007cee:	b2db      	uxtb	r3, r3
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007cf0:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8007cf4:	fa5f fc83 	uxtb.w	ip, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007cf8:	f894 e001 	ldrb.w	lr, [r4, #1]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007cfc:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  while (number >= 10U)
 8007d00:	f1be 0f09 	cmp.w	lr, #9
 8007d04:	f240 8094 	bls.w	8007e30 <HAL_RTC_SetTime+0x29c>
 8007d08:	f1ae 030a 	sub.w	r3, lr, #10
 8007d0c:	4e7f      	ldr	r6, [pc, #508]	; (8007f0c <HAL_RTC_SetTime+0x378>)
 8007d0e:	b2df      	uxtb	r7, r3
 8007d10:	fba6 6807 	umull	r6, r8, r6, r7
 8007d14:	2f4f      	cmp	r7, #79	; 0x4f
 8007d16:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8007d1a:	f108 0801 	add.w	r8, r8, #1
 8007d1e:	f240 81a9 	bls.w	8008074 <HAL_RTC_SetTime+0x4e0>
 8007d22:	f1ae 0628 	sub.w	r6, lr, #40	; 0x28
 8007d26:	2300      	movs	r3, #0
 8007d28:	ea4f 07d8 	mov.w	r7, r8, lsr #3
 8007d2c:	f366 0307 	bfi	r3, r6, #0, #8
 8007d30:	f1ae 0632 	sub.w	r6, lr, #50	; 0x32
 8007d34:	2f01      	cmp	r7, #1
 8007d36:	f366 230f 	bfi	r3, r6, #8, #8
 8007d3a:	f1ae 063c 	sub.w	r6, lr, #60	; 0x3c
 8007d3e:	f366 4317 	bfi	r3, r6, #16, #8
 8007d42:	f1ae 0646 	sub.w	r6, lr, #70	; 0x46
 8007d46:	f366 631f 	bfi	r3, r6, #24, #8
 8007d4a:	f003 397f 	and.w	r9, r3, #2139062143	; 0x7f7f7f7f
 8007d4e:	f083 36b0 	eor.w	r6, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8007d52:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 8007d56:	f109 3a30 	add.w	sl, r9, #808464432	; 0x30303030
 8007d5a:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 8007d5e:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8007d62:	f109 3976 	add.w	r9, r9, #1987475062	; 0x76767676
 8007d66:	ea86 060a 	eor.w	r6, r6, sl
 8007d6a:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 8007d6e:	f000 8178 	beq.w	8008062 <HAL_RTC_SetTime+0x4ce>
 8007d72:	f006 3a7f 	and.w	sl, r6, #2139062143	; 0x7f7f7f7f
 8007d76:	f086 33b0 	eor.w	r3, r6, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8007d7a:	f086 36f6 	eor.w	r6, r6, #4143380214	; 0xf6f6f6f6
 8007d7e:	2f03      	cmp	r7, #3
 8007d80:	f003 3980 	and.w	r9, r3, #2155905152	; 0x80808080
 8007d84:	f006 3380 	and.w	r3, r6, #2155905152	; 0x80808080
 8007d88:	f10a 3630 	add.w	r6, sl, #808464432	; 0x30303030
 8007d8c:	ea89 0606 	eor.w	r6, r9, r6
 8007d90:	f10a 3976 	add.w	r9, sl, #1987475062	; 0x76767676
 8007d94:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 8007d98:	f040 815a 	bne.w	8008050 <HAL_RTC_SetTime+0x4bc>
    number -= 10U;
 8007d9c:	f006 337f 	and.w	r3, r6, #2139062143	; 0x7f7f7f7f
 8007da0:	f086 36f6 	eor.w	r6, r6, #4143380214	; 0xf6f6f6f6
    bcdhigh++;
 8007da4:	2718      	movs	r7, #24
    number -= 10U;
 8007da6:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8007daa:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 8007dae:	4073      	eors	r3, r6
  while (number >= 10U)
 8007db0:	f008 0638 	and.w	r6, r8, #56	; 0x38
 8007db4:	0e1b      	lsrs	r3, r3, #24
 8007db6:	ebc6 1946 	rsb	r9, r6, r6, lsl #5
 8007dba:	45b0      	cmp	r8, r6
 8007dbc:	ebc6 0989 	rsb	r9, r6, r9, lsl #2
 8007dc0:	eb0e 0e49 	add.w	lr, lr, r9, lsl #1
 8007dc4:	fa5f fe8e 	uxtb.w	lr, lr
 8007dc8:	d02e      	beq.n	8007e28 <HAL_RTC_SetTime+0x294>
 8007dca:	f1ae 030a 	sub.w	r3, lr, #10
    number -= 10U;
 8007dce:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8007dd0:	1c77      	adds	r7, r6, #1
  while (number >= 10U)
 8007dd2:	2b09      	cmp	r3, #9
 8007dd4:	d928      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007dd6:	f1ae 0314 	sub.w	r3, lr, #20
    bcdhigh++;
 8007dda:	1cb7      	adds	r7, r6, #2
    number -= 10U;
 8007ddc:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	d922      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007de2:	f1ae 031e 	sub.w	r3, lr, #30
    bcdhigh++;
 8007de6:	1cf7      	adds	r7, r6, #3
    number -= 10U;
 8007de8:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d91c      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007dee:	f1ae 0328 	sub.w	r3, lr, #40	; 0x28
    bcdhigh++;
 8007df2:	1d37      	adds	r7, r6, #4
    number -= 10U;
 8007df4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d916      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007dfa:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
    bcdhigh++;
 8007dfe:	1d77      	adds	r7, r6, #5
    number -= 10U;
 8007e00:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007e02:	2b09      	cmp	r3, #9
 8007e04:	d910      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007e06:	f1ae 033c 	sub.w	r3, lr, #60	; 0x3c
    bcdhigh++;
 8007e0a:	1db7      	adds	r7, r6, #6
    number -= 10U;
 8007e0c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d90a      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007e12:	f1ae 0346 	sub.w	r3, lr, #70	; 0x46
    bcdhigh++;
 8007e16:	1df7      	adds	r7, r6, #7
    number -= 10U;
 8007e18:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007e1a:	2b09      	cmp	r3, #9
 8007e1c:	d904      	bls.n	8007e28 <HAL_RTC_SetTime+0x294>
    number -= 10U;
 8007e1e:	f1ae 0350 	sub.w	r3, lr, #80	; 0x50
    bcdhigh++;
 8007e22:	f106 0708 	add.w	r7, r6, #8
    number -= 10U;
 8007e26:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 8007e28:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8007e2c:	fa5f fe83 	uxtb.w	lr, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007e30:	78a7      	ldrb	r7, [r4, #2]
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e32:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  while (number >= 10U)
 8007e36:	2f09      	cmp	r7, #9
 8007e38:	f240 80a1 	bls.w	8007f7e <HAL_RTC_SetTime+0x3ea>
 8007e3c:	f1a7 030a 	sub.w	r3, r7, #10
 8007e40:	4e32      	ldr	r6, [pc, #200]	; (8007f0c <HAL_RTC_SetTime+0x378>)
 8007e42:	fa5f f883 	uxtb.w	r8, r3
 8007e46:	fba6 9608 	umull	r9, r6, r6, r8
 8007e4a:	f1b8 0f4f 	cmp.w	r8, #79	; 0x4f
 8007e4e:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8007e52:	f106 0601 	add.w	r6, r6, #1
 8007e56:	d95b      	bls.n	8007f10 <HAL_RTC_SetTime+0x37c>
 8007e58:	f1a7 0228 	sub.w	r2, r7, #40	; 0x28
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	ea4f 08d6 	mov.w	r8, r6, lsr #3
 8007e62:	f362 0307 	bfi	r3, r2, #0, #8
 8007e66:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
 8007e6a:	f1b8 0f01 	cmp.w	r8, #1
 8007e6e:	f362 230f 	bfi	r3, r2, #8, #8
 8007e72:	f1a7 023c 	sub.w	r2, r7, #60	; 0x3c
 8007e76:	f362 4317 	bfi	r3, r2, #16, #8
 8007e7a:	f1a7 0246 	sub.w	r2, r7, #70	; 0x46
 8007e7e:	f362 631f 	bfi	r3, r2, #24, #8
 8007e82:	f003 397f 	and.w	r9, r3, #2139062143	; 0x7f7f7f7f
 8007e86:	f083 32b0 	eor.w	r2, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8007e8a:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 8007e8e:	f109 3a30 	add.w	sl, r9, #808464432	; 0x30303030
 8007e92:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8007e96:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8007e9a:	f109 3976 	add.w	r9, r9, #1987475062	; 0x76767676
 8007e9e:	ea82 020a 	eor.w	r2, r2, sl
 8007ea2:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 8007ea6:	f000 80d9 	beq.w	800805c <HAL_RTC_SetTime+0x4c8>
 8007eaa:	f002 3a7f 	and.w	sl, r2, #2139062143	; 0x7f7f7f7f
 8007eae:	f082 33b0 	eor.w	r3, r2, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8007eb2:	f082 32f6 	eor.w	r2, r2, #4143380214	; 0xf6f6f6f6
 8007eb6:	f1b8 0f03 	cmp.w	r8, #3
 8007eba:	f003 3980 	and.w	r9, r3, #2155905152	; 0x80808080
 8007ebe:	f002 3380 	and.w	r3, r2, #2155905152	; 0x80808080
 8007ec2:	f10a 3230 	add.w	r2, sl, #808464432	; 0x30303030
 8007ec6:	ea89 0202 	eor.w	r2, r9, r2
 8007eca:	f10a 3976 	add.w	r9, sl, #1987475062	; 0x76767676
 8007ece:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 8007ed2:	f040 80ba 	bne.w	800804a <HAL_RTC_SetTime+0x4b6>
    number -= 10U;
 8007ed6:	f082 33f6 	eor.w	r3, r2, #4143380214	; 0xf6f6f6f6
 8007eda:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
    bcdhigh++;
 8007ede:	f04f 0818 	mov.w	r8, #24
    number -= 10U;
 8007ee2:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8007ee6:	f102 3276 	add.w	r2, r2, #1987475062	; 0x76767676
 8007eea:	4053      	eors	r3, r2
  while (number >= 10U)
 8007eec:	f006 0238 	and.w	r2, r6, #56	; 0x38
 8007ef0:	0e1b      	lsrs	r3, r3, #24
 8007ef2:	ebc2 1942 	rsb	r9, r2, r2, lsl #5
 8007ef6:	42b2      	cmp	r2, r6
 8007ef8:	ebc2 0989 	rsb	r9, r2, r9, lsl #2
 8007efc:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8007f00:	b2ff      	uxtb	r7, r7
 8007f02:	d039      	beq.n	8007f78 <HAL_RTC_SetTime+0x3e4>
 8007f04:	f1a7 030a 	sub.w	r3, r7, #10
 8007f08:	e002      	b.n	8007f10 <HAL_RTC_SetTime+0x37c>
 8007f0a:	bf00      	nop
 8007f0c:	cccccccd 	.word	0xcccccccd
    number -= 10U;
 8007f10:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8007f12:	f102 0801 	add.w	r8, r2, #1
  while (number >= 10U)
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d92e      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f1a:	f1a7 0314 	sub.w	r3, r7, #20
    bcdhigh++;
 8007f1e:	f102 0802 	add.w	r8, r2, #2
    number -= 10U;
 8007f22:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d927      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f28:	f1a7 031e 	sub.w	r3, r7, #30
    bcdhigh++;
 8007f2c:	f102 0803 	add.w	r8, r2, #3
    number -= 10U;
 8007f30:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007f32:	2b09      	cmp	r3, #9
 8007f34:	d920      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f36:	f1a7 0328 	sub.w	r3, r7, #40	; 0x28
    bcdhigh++;
 8007f3a:	f102 0804 	add.w	r8, r2, #4
    number -= 10U;
 8007f3e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d919      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f44:	f1a7 0332 	sub.w	r3, r7, #50	; 0x32
    bcdhigh++;
 8007f48:	f102 0805 	add.w	r8, r2, #5
    number -= 10U;
 8007f4c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d912      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f52:	f1a7 033c 	sub.w	r3, r7, #60	; 0x3c
    bcdhigh++;
 8007f56:	f102 0806 	add.w	r8, r2, #6
    number -= 10U;
 8007f5a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007f5c:	2b09      	cmp	r3, #9
 8007f5e:	d90b      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f60:	f1a7 0346 	sub.w	r3, r7, #70	; 0x46
    bcdhigh++;
 8007f64:	f102 0807 	add.w	r8, r2, #7
    number -= 10U;
 8007f68:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d904      	bls.n	8007f78 <HAL_RTC_SetTime+0x3e4>
    number -= 10U;
 8007f6e:	f1a7 0350 	sub.w	r3, r7, #80	; 0x50
    bcdhigh++;
 8007f72:	f102 0808 	add.w	r8, r2, #8
    number -= 10U;
 8007f76:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 8007f78:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8007f7c:	b2df      	uxtb	r7, r3
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f7e:	ea4c 0c00 	orr.w	ip, ip, r0
 8007f82:	ea4c 060e 	orr.w	r6, ip, lr
 8007f86:	433e      	orrs	r6, r7
 8007f88:	e00d      	b.n	8007fa6 <HAL_RTC_SetTime+0x412>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007f8a:	688b      	ldr	r3, [r1, #8]
 8007f8c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8007f90:	d044      	beq.n	800801c <HAL_RTC_SetTime+0x488>
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007f92:	78e3      	ldrb	r3, [r4, #3]
 8007f94:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007f96:	7866      	ldrb	r6, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007f98:	7822      	ldrb	r2, [r4, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007f9a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007f9c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8007fa0:	78a2      	ldrb	r2, [r4, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007fa2:	4316      	orrs	r6, r2
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007fa4:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fa6:	23ca      	movs	r3, #202	; 0xca
 8007fa8:	624b      	str	r3, [r1, #36]	; 0x24
 8007faa:	2353      	movs	r3, #83	; 0x53
 8007fac:	624b      	str	r3, [r1, #36]	; 0x24
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007fae:	68cb      	ldr	r3, [r1, #12]
 8007fb0:	065f      	lsls	r7, r3, #25
 8007fb2:	d51c      	bpl.n	8007fee <HAL_RTC_SetTime+0x45a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007fb4:	4a31      	ldr	r2, [pc, #196]	; (800807c <HAL_RTC_SetTime+0x4e8>)
 8007fb6:	4032      	ands	r2, r6
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fb8:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007fbc:	600a      	str	r2, [r1, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007fbe:	688a      	ldr	r2, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fc0:	4303      	orrs	r3, r0
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fc6:	608a      	str	r2, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fc8:	688a      	ldr	r2, [r1, #8]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fce:	68cb      	ldr	r3, [r1, #12]
 8007fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd4:	60cb      	str	r3, [r1, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007fd6:	688b      	ldr	r3, [r1, #8]
 8007fd8:	069a      	lsls	r2, r3, #26
 8007fda:	d523      	bpl.n	8008024 <HAL_RTC_SetTime+0x490>
    hrtc->State = HAL_RTC_STATE_READY;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	2000      	movs	r0, #0
 8007fe0:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fe2:	22ff      	movs	r2, #255	; 0xff
  __HAL_UNLOCK(hrtc);
 8007fe4:	2300      	movs	r3, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fe6:	624a      	str	r2, [r1, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8007fe8:	772b      	strb	r3, [r5, #28]
}
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fee:	68cb      	ldr	r3, [r1, #12]
 8007ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff4:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8007ff6:	f7fc fa49 	bl	800448c <HAL_GetTick>
 8007ffa:	4607      	mov	r7, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ffc:	6829      	ldr	r1, [r5, #0]
 8007ffe:	68cb      	ldr	r3, [r1, #12]
 8008000:	0658      	lsls	r0, r3, #25
 8008002:	d4d7      	bmi.n	8007fb4 <HAL_RTC_SetTime+0x420>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008004:	f7fc fa42 	bl	800448c <HAL_GetTick>
 8008008:	1bc0      	subs	r0, r0, r7
 800800a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800800e:	d9f5      	bls.n	8007ffc <HAL_RTC_SetTime+0x468>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008010:	2304      	movs	r3, #4
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008012:	6829      	ldr	r1, [r5, #0]
 8008014:	2001      	movs	r0, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008016:	776b      	strb	r3, [r5, #29]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008018:	68cb      	ldr	r3, [r1, #12]
 800801a:	e7e2      	b.n	8007fe2 <HAL_RTC_SetTime+0x44e>
      sTime->TimeFormat = 0x00U;
 800801c:	70e3      	strb	r3, [r4, #3]
 800801e:	e7ba      	b.n	8007f96 <HAL_RTC_SetTime+0x402>
      sTime->TimeFormat = 0x00U;
 8008020:	70e0      	strb	r0, [r4, #3]
 8008022:	e5ce      	b.n	8007bc2 <HAL_RTC_SetTime+0x2e>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008024:	68cb      	ldr	r3, [r1, #12]
 8008026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800802a:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 800802c:	f7fc fa2e 	bl	800448c <HAL_GetTick>
 8008030:	4604      	mov	r4, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008032:	e005      	b.n	8008040 <HAL_RTC_SetTime+0x4ac>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008034:	f7fc fa2a 	bl	800448c <HAL_GetTick>
 8008038:	1b00      	subs	r0, r0, r4
 800803a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800803e:	d814      	bhi.n	800806a <HAL_RTC_SetTime+0x4d6>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008040:	6829      	ldr	r1, [r5, #0]
 8008042:	68cb      	ldr	r3, [r1, #12]
 8008044:	069b      	lsls	r3, r3, #26
 8008046:	d5f5      	bpl.n	8008034 <HAL_RTC_SetTime+0x4a0>
 8008048:	e7c8      	b.n	8007fdc <HAL_RTC_SetTime+0x448>
    bcdhigh++;
 800804a:	f04f 0810 	mov.w	r8, #16
 800804e:	e74d      	b.n	8007eec <HAL_RTC_SetTime+0x358>
 8008050:	2710      	movs	r7, #16
 8008052:	e6ad      	b.n	8007db0 <HAL_RTC_SetTime+0x21c>
 8008054:	2710      	movs	r7, #16
 8008056:	e60f      	b.n	8007c78 <HAL_RTC_SetTime+0xe4>
  __HAL_LOCK(hrtc);
 8008058:	2002      	movs	r0, #2
}
 800805a:	4770      	bx	lr
    bcdhigh++;
 800805c:	f04f 0808 	mov.w	r8, #8
 8008060:	e744      	b.n	8007eec <HAL_RTC_SetTime+0x358>
 8008062:	2708      	movs	r7, #8
 8008064:	e6a4      	b.n	8007db0 <HAL_RTC_SetTime+0x21c>
 8008066:	2708      	movs	r7, #8
 8008068:	e606      	b.n	8007c78 <HAL_RTC_SetTime+0xe4>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800806a:	2304      	movs	r3, #4
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800806c:	6829      	ldr	r1, [r5, #0]
      status = HAL_ERROR;
 800806e:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008070:	776b      	strb	r3, [r5, #29]
  if (status == HAL_OK)
 8008072:	e7b6      	b.n	8007fe2 <HAL_RTC_SetTime+0x44e>
  uint32_t bcdhigh = 0U;
 8008074:	2600      	movs	r6, #0
 8008076:	e6aa      	b.n	8007dce <HAL_RTC_SetTime+0x23a>
 8008078:	2600      	movs	r6, #0
 800807a:	e60c      	b.n	8007c96 <HAL_RTC_SetTime+0x102>
 800807c:	007f7f7f 	.word	0x007f7f7f

08008080 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8008080:	7f03      	ldrb	r3, [r0, #28]
 8008082:	2b01      	cmp	r3, #1
 8008084:	f000 825a 	beq.w	800853c <HAL_RTC_SetDate+0x4bc>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008088:	2302      	movs	r3, #2
{
 800808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8008090:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008092:	7763      	strb	r3, [r4, #29]
  __HAL_LOCK(hrtc);
 8008094:	7720      	strb	r0, [r4, #28]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008096:	b34a      	cbz	r2, 80080ec <HAL_RTC_SetDate+0x6c>
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008098:	784d      	ldrb	r5, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800809a:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800809c:	022d      	lsls	r5, r5, #8
                  ((uint32_t) sDate->Date)                      | \
 800809e:	788a      	ldrb	r2, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80080a0:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80080a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80080a6:	4315      	orrs	r5, r2
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80080a8:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	2253      	movs	r2, #83	; 0x53
 80080b0:	21ca      	movs	r1, #202	; 0xca
 80080b2:	6259      	str	r1, [r3, #36]	; 0x24
 80080b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	0656      	lsls	r6, r2, #25
 80080ba:	f140 8207 	bpl.w	80084cc <HAL_RTC_SetDate+0x44c>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80080be:	4a0a      	ldr	r2, [pc, #40]	; (80080e8 <HAL_RTC_SetDate+0x68>)
 80080c0:	402a      	ands	r2, r5
 80080c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ca:	60da      	str	r2, [r3, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	0691      	lsls	r1, r2, #26
 80080d0:	f140 821b 	bpl.w	800850a <HAL_RTC_SetDate+0x48a>
    hrtc->State = HAL_RTC_STATE_READY;
 80080d4:	2201      	movs	r2, #1
 80080d6:	2000      	movs	r0, #0
 80080d8:	7762      	strb	r2, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080da:	21ff      	movs	r1, #255	; 0xff
  __HAL_UNLOCK(hrtc);
 80080dc:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080de:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80080e0:	7722      	strb	r2, [r4, #28]
}
 80080e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e6:	bf00      	nop
 80080e8:	00ffff3f 	.word	0x00ffff3f
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80080ec:	7848      	ldrb	r0, [r1, #1]
 80080ee:	06c7      	lsls	r7, r0, #27
 80080f0:	f140 8204 	bpl.w	80084fc <HAL_RTC_SetDate+0x47c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80080f4:	f020 0010 	bic.w	r0, r0, #16
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080f8:	f891 c003 	ldrb.w	ip, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80080fc:	300a      	adds	r0, #10
  while (number >= 10U)
 80080fe:	f1bc 0f09 	cmp.w	ip, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008102:	b2c0      	uxtb	r0, r0
 8008104:	7048      	strb	r0, [r1, #1]
  while (number >= 10U)
 8008106:	f240 8221 	bls.w	800854c <HAL_RTC_SetDate+0x4cc>
 800810a:	f1ac 030a 	sub.w	r3, ip, #10
 800810e:	4dd2      	ldr	r5, [pc, #840]	; (8008458 <HAL_RTC_SetDate+0x3d8>)
 8008110:	b2de      	uxtb	r6, r3
 8008112:	fba5 7506 	umull	r7, r5, r5, r6
 8008116:	2e4f      	cmp	r6, #79	; 0x4f
 8008118:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 800811c:	f105 0501 	add.w	r5, r5, #1
 8008120:	f240 821f 	bls.w	8008562 <HAL_RTC_SetDate+0x4e2>
 8008124:	f1ac 0628 	sub.w	r6, ip, #40	; 0x28
 8008128:	2300      	movs	r3, #0
 800812a:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 800812e:	f366 0307 	bfi	r3, r6, #0, #8
 8008132:	f1ac 0632 	sub.w	r6, ip, #50	; 0x32
 8008136:	f1be 0f01 	cmp.w	lr, #1
 800813a:	f366 230f 	bfi	r3, r6, #8, #8
 800813e:	f1ac 063c 	sub.w	r6, ip, #60	; 0x3c
 8008142:	f366 4317 	bfi	r3, r6, #16, #8
 8008146:	f1ac 0646 	sub.w	r6, ip, #70	; 0x46
 800814a:	f366 631f 	bfi	r3, r6, #24, #8
 800814e:	f003 377f 	and.w	r7, r3, #2139062143	; 0x7f7f7f7f
 8008152:	f083 36b0 	eor.w	r6, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008156:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 800815a:	f107 3830 	add.w	r8, r7, #808464432	; 0x30303030
 800815e:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 8008162:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8008166:	f107 3776 	add.w	r7, r7, #1987475062	; 0x76767676
 800816a:	ea86 0608 	eor.w	r6, r6, r8
 800816e:	ea83 0307 	eor.w	r3, r3, r7
  while (number >= 10U)
 8008172:	f000 81e5 	beq.w	8008540 <HAL_RTC_SetDate+0x4c0>
 8008176:	f006 337f 	and.w	r3, r6, #2139062143	; 0x7f7f7f7f
 800817a:	f086 37b0 	eor.w	r7, r6, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 800817e:	f086 36f6 	eor.w	r6, r6, #4143380214	; 0xf6f6f6f6
 8008182:	f1be 0f03 	cmp.w	lr, #3
 8008186:	f103 3830 	add.w	r8, r3, #808464432	; 0x30303030
 800818a:	f007 3780 	and.w	r7, r7, #2155905152	; 0x80808080
 800818e:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 8008192:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8008196:	ea87 0708 	eor.w	r7, r7, r8
 800819a:	ea83 0306 	eor.w	r3, r3, r6
  while (number >= 10U)
 800819e:	f040 81c9 	bne.w	8008534 <HAL_RTC_SetDate+0x4b4>
    number -= 10U;
 80081a2:	f087 33f6 	eor.w	r3, r7, #4143380214	; 0xf6f6f6f6
 80081a6:	f007 377f 	and.w	r7, r7, #2139062143	; 0x7f7f7f7f
    bcdhigh++;
 80081aa:	2618      	movs	r6, #24
    number -= 10U;
 80081ac:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80081b0:	f107 3776 	add.w	r7, r7, #1987475062	; 0x76767676
 80081b4:	407b      	eors	r3, r7
  while (number >= 10U)
 80081b6:	f005 0e38 	and.w	lr, r5, #56	; 0x38
 80081ba:	0e1b      	lsrs	r3, r3, #24
 80081bc:	ebce 174e 	rsb	r7, lr, lr, lsl #5
 80081c0:	4575      	cmp	r5, lr
 80081c2:	ebce 0787 	rsb	r7, lr, r7, lsl #2
 80081c6:	eb0c 0747 	add.w	r7, ip, r7, lsl #1
 80081ca:	fa5f fc87 	uxtb.w	ip, r7
 80081ce:	d035      	beq.n	800823c <HAL_RTC_SetDate+0x1bc>
 80081d0:	f1ac 030a 	sub.w	r3, ip, #10
    number -= 10U;
 80081d4:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80081d6:	f10e 0601 	add.w	r6, lr, #1
  while (number >= 10U)
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d92e      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 80081de:	f1ac 0314 	sub.w	r3, ip, #20
    bcdhigh++;
 80081e2:	f10e 0602 	add.w	r6, lr, #2
    number -= 10U;
 80081e6:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d927      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 80081ec:	f1ac 031e 	sub.w	r3, ip, #30
    bcdhigh++;
 80081f0:	f10e 0603 	add.w	r6, lr, #3
    number -= 10U;
 80081f4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	d920      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 80081fa:	f1ac 0328 	sub.w	r3, ip, #40	; 0x28
    bcdhigh++;
 80081fe:	f10e 0604 	add.w	r6, lr, #4
    number -= 10U;
 8008202:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008204:	2b09      	cmp	r3, #9
 8008206:	d919      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 8008208:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
    bcdhigh++;
 800820c:	f10e 0605 	add.w	r6, lr, #5
    number -= 10U;
 8008210:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008212:	2b09      	cmp	r3, #9
 8008214:	d912      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 8008216:	f1ac 033c 	sub.w	r3, ip, #60	; 0x3c
    bcdhigh++;
 800821a:	f10e 0606 	add.w	r6, lr, #6
    number -= 10U;
 800821e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008220:	2b09      	cmp	r3, #9
 8008222:	d90b      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 8008224:	f1ac 0346 	sub.w	r3, ip, #70	; 0x46
    bcdhigh++;
 8008228:	f10e 0607 	add.w	r6, lr, #7
    number -= 10U;
 800822c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800822e:	2b09      	cmp	r3, #9
 8008230:	d904      	bls.n	800823c <HAL_RTC_SetDate+0x1bc>
    number -= 10U;
 8008232:	f1ac 0350 	sub.w	r3, ip, #80	; 0x50
    bcdhigh++;
 8008236:	f10e 0608 	add.w	r6, lr, #8
    number -= 10U;
 800823a:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 800823c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8008240:	fa5f fc83 	uxtb.w	ip, r3
  while (number >= 10U)
 8008244:	2809      	cmp	r0, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008246:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  while (number >= 10U)
 800824a:	f240 809b 	bls.w	8008384 <HAL_RTC_SetDate+0x304>
 800824e:	f1a0 030a 	sub.w	r3, r0, #10
 8008252:	4d81      	ldr	r5, [pc, #516]	; (8008458 <HAL_RTC_SetDate+0x3d8>)
 8008254:	b2de      	uxtb	r6, r3
 8008256:	fba5 7506 	umull	r7, r5, r5, r6
 800825a:	2e4f      	cmp	r6, #79	; 0x4f
 800825c:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 8008260:	f105 0501 	add.w	r5, r5, #1
 8008264:	f240 817a 	bls.w	800855c <HAL_RTC_SetDate+0x4dc>
 8008268:	f1a0 0628 	sub.w	r6, r0, #40	; 0x28
 800826c:	2300      	movs	r3, #0
 800826e:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8008272:	f366 0307 	bfi	r3, r6, #0, #8
 8008276:	f1a0 0632 	sub.w	r6, r0, #50	; 0x32
 800827a:	f1be 0f01 	cmp.w	lr, #1
 800827e:	f366 230f 	bfi	r3, r6, #8, #8
 8008282:	f1a0 063c 	sub.w	r6, r0, #60	; 0x3c
 8008286:	f366 4317 	bfi	r3, r6, #16, #8
 800828a:	f1a0 0646 	sub.w	r6, r0, #70	; 0x46
 800828e:	f366 631f 	bfi	r3, r6, #24, #8
 8008292:	f003 377f 	and.w	r7, r3, #2139062143	; 0x7f7f7f7f
 8008296:	f083 36b0 	eor.w	r6, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 800829a:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 800829e:	f107 3830 	add.w	r8, r7, #808464432	; 0x30303030
 80082a2:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 80082a6:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80082aa:	f107 3776 	add.w	r7, r7, #1987475062	; 0x76767676
 80082ae:	ea86 0608 	eor.w	r6, r6, r8
 80082b2:	ea83 0307 	eor.w	r3, r3, r7
  while (number >= 10U)
 80082b6:	f000 8147 	beq.w	8008548 <HAL_RTC_SetDate+0x4c8>
 80082ba:	f006 337f 	and.w	r3, r6, #2139062143	; 0x7f7f7f7f
 80082be:	f086 37b0 	eor.w	r7, r6, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 80082c2:	f086 36f6 	eor.w	r6, r6, #4143380214	; 0xf6f6f6f6
 80082c6:	f1be 0f03 	cmp.w	lr, #3
 80082ca:	f103 3830 	add.w	r8, r3, #808464432	; 0x30303030
 80082ce:	f007 3780 	and.w	r7, r7, #2155905152	; 0x80808080
 80082d2:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 80082d6:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 80082da:	ea87 0708 	eor.w	r7, r7, r8
 80082de:	ea83 0306 	eor.w	r3, r3, r6
  while (number >= 10U)
 80082e2:	f040 8129 	bne.w	8008538 <HAL_RTC_SetDate+0x4b8>
    number -= 10U;
 80082e6:	f007 337f 	and.w	r3, r7, #2139062143	; 0x7f7f7f7f
 80082ea:	f087 37f6 	eor.w	r7, r7, #4143380214	; 0xf6f6f6f6
    bcdhigh++;
 80082ee:	2618      	movs	r6, #24
    number -= 10U;
 80082f0:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 80082f4:	f007 3780 	and.w	r7, r7, #2155905152	; 0x80808080
 80082f8:	407b      	eors	r3, r7
  while (number >= 10U)
 80082fa:	f005 0e38 	and.w	lr, r5, #56	; 0x38
 80082fe:	0e1b      	lsrs	r3, r3, #24
 8008300:	ebce 174e 	rsb	r7, lr, lr, lsl #5
 8008304:	4575      	cmp	r5, lr
 8008306:	ebce 0787 	rsb	r7, lr, r7, lsl #2
 800830a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 800830e:	b2c0      	uxtb	r0, r0
 8008310:	d035      	beq.n	800837e <HAL_RTC_SetDate+0x2fe>
 8008312:	f1a0 030a 	sub.w	r3, r0, #10
    number -= 10U;
 8008316:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8008318:	f10e 0601 	add.w	r6, lr, #1
  while (number >= 10U)
 800831c:	2b09      	cmp	r3, #9
 800831e:	d92e      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 8008320:	f1a0 0314 	sub.w	r3, r0, #20
    bcdhigh++;
 8008324:	f10e 0602 	add.w	r6, lr, #2
    number -= 10U;
 8008328:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800832a:	2b09      	cmp	r3, #9
 800832c:	d927      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 800832e:	f1a0 031e 	sub.w	r3, r0, #30
    bcdhigh++;
 8008332:	f10e 0603 	add.w	r6, lr, #3
    number -= 10U;
 8008336:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008338:	2b09      	cmp	r3, #9
 800833a:	d920      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 800833c:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
    bcdhigh++;
 8008340:	f10e 0604 	add.w	r6, lr, #4
    number -= 10U;
 8008344:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008346:	2b09      	cmp	r3, #9
 8008348:	d919      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 800834a:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
    bcdhigh++;
 800834e:	f10e 0605 	add.w	r6, lr, #5
    number -= 10U;
 8008352:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008354:	2b09      	cmp	r3, #9
 8008356:	d912      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 8008358:	f1a0 033c 	sub.w	r3, r0, #60	; 0x3c
    bcdhigh++;
 800835c:	f10e 0606 	add.w	r6, lr, #6
    number -= 10U;
 8008360:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008362:	2b09      	cmp	r3, #9
 8008364:	d90b      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 8008366:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
    bcdhigh++;
 800836a:	f10e 0607 	add.w	r6, lr, #7
    number -= 10U;
 800836e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008370:	2b09      	cmp	r3, #9
 8008372:	d904      	bls.n	800837e <HAL_RTC_SetDate+0x2fe>
    number -= 10U;
 8008374:	f1a0 0350 	sub.w	r3, r0, #80	; 0x50
    bcdhigh++;
 8008378:	f10e 0608 	add.w	r6, lr, #8
    number -= 10U;
 800837c:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 800837e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8008382:	b2d8      	uxtb	r0, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008384:	f891 e002 	ldrb.w	lr, [r1, #2]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008388:	0200      	lsls	r0, r0, #8
  while (number >= 10U)
 800838a:	f1be 0f09 	cmp.w	lr, #9
 800838e:	f240 8096 	bls.w	80084be <HAL_RTC_SetDate+0x43e>
 8008392:	f1ae 030a 	sub.w	r3, lr, #10
 8008396:	4d30      	ldr	r5, [pc, #192]	; (8008458 <HAL_RTC_SetDate+0x3d8>)
 8008398:	b2de      	uxtb	r6, r3
 800839a:	fba5 7506 	umull	r7, r5, r5, r6
 800839e:	2e4f      	cmp	r6, #79	; 0x4f
 80083a0:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 80083a4:	f105 0501 	add.w	r5, r5, #1
 80083a8:	d958      	bls.n	800845c <HAL_RTC_SetDate+0x3dc>
 80083aa:	f1ae 0228 	sub.w	r2, lr, #40	; 0x28
 80083ae:	2300      	movs	r3, #0
 80083b0:	08ee      	lsrs	r6, r5, #3
 80083b2:	f362 0307 	bfi	r3, r2, #0, #8
 80083b6:	f1ae 0232 	sub.w	r2, lr, #50	; 0x32
 80083ba:	2e01      	cmp	r6, #1
 80083bc:	f362 230f 	bfi	r3, r2, #8, #8
 80083c0:	f1ae 023c 	sub.w	r2, lr, #60	; 0x3c
 80083c4:	f362 4317 	bfi	r3, r2, #16, #8
 80083c8:	f1ae 0246 	sub.w	r2, lr, #70	; 0x46
 80083cc:	f362 631f 	bfi	r3, r2, #24, #8
 80083d0:	f003 377f 	and.w	r7, r3, #2139062143	; 0x7f7f7f7f
 80083d4:	f083 32b0 	eor.w	r2, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 80083d8:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 80083dc:	f107 3830 	add.w	r8, r7, #808464432	; 0x30303030
 80083e0:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 80083e4:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80083e8:	f107 3776 	add.w	r7, r7, #1987475062	; 0x76767676
 80083ec:	ea82 0208 	eor.w	r2, r2, r8
 80083f0:	ea83 0307 	eor.w	r3, r3, r7
  while (number >= 10U)
 80083f4:	f000 80a6 	beq.w	8008544 <HAL_RTC_SetDate+0x4c4>
 80083f8:	f002 337f 	and.w	r3, r2, #2139062143	; 0x7f7f7f7f
 80083fc:	f082 37b0 	eor.w	r7, r2, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008400:	f082 32f6 	eor.w	r2, r2, #4143380214	; 0xf6f6f6f6
 8008404:	2e03      	cmp	r6, #3
 8008406:	f103 3830 	add.w	r8, r3, #808464432	; 0x30303030
 800840a:	f007 3780 	and.w	r7, r7, #2155905152	; 0x80808080
 800840e:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008412:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8008416:	ea87 0708 	eor.w	r7, r7, r8
 800841a:	ea83 0302 	eor.w	r3, r3, r2
  while (number >= 10U)
 800841e:	f040 8087 	bne.w	8008530 <HAL_RTC_SetDate+0x4b0>
    number -= 10U;
 8008422:	f087 33f6 	eor.w	r3, r7, #4143380214	; 0xf6f6f6f6
 8008426:	f007 377f 	and.w	r7, r7, #2139062143	; 0x7f7f7f7f
    bcdhigh++;
 800842a:	2618      	movs	r6, #24
    number -= 10U;
 800842c:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8008430:	f107 3776 	add.w	r7, r7, #1987475062	; 0x76767676
 8008434:	407b      	eors	r3, r7
  while (number >= 10U)
 8008436:	f005 0238 	and.w	r2, r5, #56	; 0x38
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	ebc2 1742 	rsb	r7, r2, r2, lsl #5
 8008440:	42aa      	cmp	r2, r5
 8008442:	ebc2 0787 	rsb	r7, r2, r7, lsl #2
 8008446:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
 800844a:	fa5f fe87 	uxtb.w	lr, r7
 800844e:	d032      	beq.n	80084b6 <HAL_RTC_SetDate+0x436>
 8008450:	f1ae 030a 	sub.w	r3, lr, #10
 8008454:	e002      	b.n	800845c <HAL_RTC_SetDate+0x3dc>
 8008456:	bf00      	nop
 8008458:	cccccccd 	.word	0xcccccccd
    number -= 10U;
 800845c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 800845e:	1c56      	adds	r6, r2, #1
  while (number >= 10U)
 8008460:	2b09      	cmp	r3, #9
 8008462:	d928      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 8008464:	f1ae 0314 	sub.w	r3, lr, #20
    bcdhigh++;
 8008468:	1c96      	adds	r6, r2, #2
    number -= 10U;
 800846a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800846c:	2b09      	cmp	r3, #9
 800846e:	d922      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 8008470:	f1ae 031e 	sub.w	r3, lr, #30
    bcdhigh++;
 8008474:	1cd6      	adds	r6, r2, #3
    number -= 10U;
 8008476:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008478:	2b09      	cmp	r3, #9
 800847a:	d91c      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 800847c:	f1ae 0328 	sub.w	r3, lr, #40	; 0x28
    bcdhigh++;
 8008480:	1d16      	adds	r6, r2, #4
    number -= 10U;
 8008482:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008484:	2b09      	cmp	r3, #9
 8008486:	d916      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 8008488:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
    bcdhigh++;
 800848c:	1d56      	adds	r6, r2, #5
    number -= 10U;
 800848e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008490:	2b09      	cmp	r3, #9
 8008492:	d910      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 8008494:	f1ae 033c 	sub.w	r3, lr, #60	; 0x3c
    bcdhigh++;
 8008498:	1d96      	adds	r6, r2, #6
    number -= 10U;
 800849a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800849c:	2b09      	cmp	r3, #9
 800849e:	d90a      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 80084a0:	f1ae 0346 	sub.w	r3, lr, #70	; 0x46
    bcdhigh++;
 80084a4:	1dd6      	adds	r6, r2, #7
    number -= 10U;
 80084a6:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	d904      	bls.n	80084b6 <HAL_RTC_SetDate+0x436>
    number -= 10U;
 80084ac:	f1ae 0350 	sub.w	r3, lr, #80	; 0x50
    bcdhigh++;
 80084b0:	f102 0608 	add.w	r6, r2, #8
    number -= 10U;
 80084b4:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 80084b6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80084ba:	fa5f fe83 	uxtb.w	lr, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80084be:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084c0:	ea4c 3545 	orr.w	r5, ip, r5, lsl #13
 80084c4:	4305      	orrs	r5, r0
 80084c6:	ea45 050e 	orr.w	r5, r5, lr
 80084ca:	e5ef      	b.n	80080ac <HAL_RTC_SetDate+0x2c>
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084d2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80084d4:	f7fb ffda 	bl	800448c <HAL_GetTick>
 80084d8:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	0650      	lsls	r0, r2, #25
 80084e0:	f53f aded 	bmi.w	80080be <HAL_RTC_SetDate+0x3e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80084e4:	f7fb ffd2 	bl	800448c <HAL_GetTick>
 80084e8:	1b80      	subs	r0, r0, r6
 80084ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80084ee:	d9f4      	bls.n	80084da <HAL_RTC_SetDate+0x45a>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80084f0:	2204      	movs	r2, #4
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	2001      	movs	r0, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 80084f6:	7762      	strb	r2, [r4, #29]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	e5ee      	b.n	80080da <HAL_RTC_SetDate+0x5a>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80084fc:	f891 c003 	ldrb.w	ip, [r1, #3]
  while (number >= 10U)
 8008500:	f1bc 0f09 	cmp.w	ip, #9
 8008504:	f63f ae01 	bhi.w	800810a <HAL_RTC_SetDate+0x8a>
 8008508:	e69c      	b.n	8008244 <HAL_RTC_SetDate+0x1c4>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008510:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8008512:	f7fb ffbb 	bl	800448c <HAL_GetTick>
 8008516:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008518:	e005      	b.n	8008526 <HAL_RTC_SetDate+0x4a6>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800851a:	f7fb ffb7 	bl	800448c <HAL_GetTick>
 800851e:	1b40      	subs	r0, r0, r5
 8008520:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008524:	d815      	bhi.n	8008552 <HAL_RTC_SetDate+0x4d2>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	0692      	lsls	r2, r2, #26
 800852c:	d5f5      	bpl.n	800851a <HAL_RTC_SetDate+0x49a>
 800852e:	e5d1      	b.n	80080d4 <HAL_RTC_SetDate+0x54>
    bcdhigh++;
 8008530:	2610      	movs	r6, #16
 8008532:	e780      	b.n	8008436 <HAL_RTC_SetDate+0x3b6>
 8008534:	2610      	movs	r6, #16
 8008536:	e63e      	b.n	80081b6 <HAL_RTC_SetDate+0x136>
 8008538:	2610      	movs	r6, #16
 800853a:	e6de      	b.n	80082fa <HAL_RTC_SetDate+0x27a>
  __HAL_LOCK(hrtc);
 800853c:	2002      	movs	r0, #2
}
 800853e:	4770      	bx	lr
    bcdhigh++;
 8008540:	2608      	movs	r6, #8
 8008542:	e638      	b.n	80081b6 <HAL_RTC_SetDate+0x136>
 8008544:	2608      	movs	r6, #8
 8008546:	e776      	b.n	8008436 <HAL_RTC_SetDate+0x3b6>
 8008548:	2608      	movs	r6, #8
 800854a:	e6d6      	b.n	80082fa <HAL_RTC_SetDate+0x27a>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800854c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  while (number >= 10U)
 8008550:	e67d      	b.n	800824e <HAL_RTC_SetDate+0x1ce>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008552:	2204      	movs	r2, #4
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008554:	6823      	ldr	r3, [r4, #0]
      status = HAL_ERROR;
 8008556:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008558:	7762      	strb	r2, [r4, #29]
  if (status == HAL_OK)
 800855a:	e5be      	b.n	80080da <HAL_RTC_SetDate+0x5a>
    bcdhigh++;
 800855c:	f04f 0e00 	mov.w	lr, #0
 8008560:	e6d9      	b.n	8008316 <HAL_RTC_SetDate+0x296>
  uint32_t bcdhigh = 0U;
 8008562:	f04f 0e00 	mov.w	lr, #0
 8008566:	e635      	b.n	80081d4 <HAL_RTC_SetDate+0x154>

08008568 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8008568:	7f03      	ldrb	r3, [r0, #28]
 800856a:	2b01      	cmp	r3, #1
 800856c:	f000 8347 	beq.w	8008bfe <HAL_RTC_SetAlarm+0x696>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008570:	2302      	movs	r3, #2
{
 8008572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008576:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8008578:	2001      	movs	r0, #1
{
 800857a:	b083      	sub	sp, #12
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800857c:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hrtc);
 800857e:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008580:	7763      	strb	r3, [r4, #29]
  if (Format == RTC_FORMAT_BIN)
 8008582:	2a00      	cmp	r2, #0
 8008584:	d050      	beq.n	8008628 <HAL_RTC_SetAlarm+0xc0>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008586:	68aa      	ldr	r2, [r5, #8]
 8008588:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800858c:	f000 8328 	beq.w	8008be0 <HAL_RTC_SetAlarm+0x678>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008590:	78cb      	ldrb	r3, [r1, #3]
 8008592:	059a      	lsls	r2, r3, #22
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008594:	69cb      	ldr	r3, [r1, #28]
 8008596:	6948      	ldr	r0, [r1, #20]
 8008598:	ea43 0600 	orr.w	r6, r3, r0
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800859c:	788b      	ldrb	r3, [r1, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800859e:	431e      	orrs	r6, r3
 80085a0:	780b      	ldrb	r3, [r1, #0]
 80085a2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80085a6:	784b      	ldrb	r3, [r1, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80085a8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80085ac:	f891 3020 	ldrb.w	r3, [r1, #32]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80085b0:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 80085b4:	4316      	orrs	r6, r2
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80085b6:	698b      	ldr	r3, [r1, #24]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085b8:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80085ba:	684f      	ldr	r7, [r1, #4]
 80085bc:	431f      	orrs	r7, r3
  if (sAlarm->Alarm == RTC_ALARM_A)
 80085be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085c0:	626a      	str	r2, [r5, #36]	; 0x24
 80085c2:	2253      	movs	r2, #83	; 0x53
  if (sAlarm->Alarm == RTC_ALARM_A)
 80085c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085c8:	626a      	str	r2, [r5, #36]	; 0x24
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80085ca:	68ab      	ldr	r3, [r5, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 80085cc:	f000 82e6 	beq.w	8008b9c <HAL_RTC_SetAlarm+0x634>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80085d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085d4:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80085d6:	68ab      	ldr	r3, [r5, #8]
 80085d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085dc:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80085de:	68eb      	ldr	r3, [r5, #12]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f463 7320 	orn	r3, r3, #640	; 0x280
 80085e6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80085e8:	f7fb ff50 	bl	800448c <HAL_GetTick>
 80085ec:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80085ee:	e006      	b.n	80085fe <HAL_RTC_SetAlarm+0x96>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085f0:	f7fb ff4c 	bl	800448c <HAL_GetTick>
 80085f4:	1b40      	subs	r0, r0, r5
 80085f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80085fa:	f200 82c4 	bhi.w	8008b86 <HAL_RTC_SetAlarm+0x61e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	f012 0802 	ands.w	r8, r2, #2
 8008606:	d0f3      	beq.n	80085f0 <HAL_RTC_SetAlarm+0x88>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008608:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800860a:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008612:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hrtc);
 8008614:	2200      	movs	r2, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008616:	20ff      	movs	r0, #255	; 0xff
  hrtc->State = HAL_RTC_STATE_READY;
 8008618:	2101      	movs	r1, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800861a:	6258      	str	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800861c:	4610      	mov	r0, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800861e:	7761      	strb	r1, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8008620:	7722      	strb	r2, [r4, #28]
}
 8008622:	b003      	add	sp, #12
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008628:	68af      	ldr	r7, [r5, #8]
 800862a:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800862e:	f000 82d9 	beq.w	8008be4 <HAL_RTC_SetAlarm+0x67c>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008632:	78cf      	ldrb	r7, [r1, #3]
 8008634:	05bf      	lsls	r7, r7, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008636:	f891 c000 	ldrb.w	ip, [r1]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800863a:	69c8      	ldr	r0, [r1, #28]
  while (number >= 10U)
 800863c:	f1bc 0f09 	cmp.w	ip, #9
 8008640:	f240 809f 	bls.w	8008782 <HAL_RTC_SetAlarm+0x21a>
 8008644:	f1ac 030a 	sub.w	r3, ip, #10
 8008648:	4ed9      	ldr	r6, [pc, #868]	; (80089b0 <HAL_RTC_SetAlarm+0x448>)
 800864a:	fa5f f883 	uxtb.w	r8, r3
 800864e:	fba6 6e08 	umull	r6, lr, r6, r8
 8008652:	f1b8 0f4f 	cmp.w	r8, #79	; 0x4f
 8008656:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 800865a:	f10e 0e01 	add.w	lr, lr, #1
 800865e:	f240 82de 	bls.w	8008c1e <HAL_RTC_SetAlarm+0x6b6>
 8008662:	f1ac 0628 	sub.w	r6, ip, #40	; 0x28
 8008666:	2300      	movs	r3, #0
 8008668:	ea4f 08de 	mov.w	r8, lr, lsr #3
 800866c:	f366 0307 	bfi	r3, r6, #0, #8
 8008670:	f1ac 0632 	sub.w	r6, ip, #50	; 0x32
 8008674:	f1b8 0f01 	cmp.w	r8, #1
 8008678:	f366 230f 	bfi	r3, r6, #8, #8
 800867c:	f1ac 063c 	sub.w	r6, ip, #60	; 0x3c
 8008680:	f366 4317 	bfi	r3, r6, #16, #8
 8008684:	f1ac 0646 	sub.w	r6, ip, #70	; 0x46
 8008688:	f366 631f 	bfi	r3, r6, #24, #8
 800868c:	f003 367f 	and.w	r6, r3, #2139062143	; 0x7f7f7f7f
 8008690:	f083 39b0 	eor.w	r9, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008694:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 8008698:	f106 3a30 	add.w	sl, r6, #808464432	; 0x30303030
 800869c:	f009 3980 	and.w	r9, r9, #2155905152	; 0x80808080
 80086a0:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80086a4:	f106 3676 	add.w	r6, r6, #1987475062	; 0x76767676
 80086a8:	ea89 090a 	eor.w	r9, r9, sl
 80086ac:	ea83 0306 	eor.w	r3, r3, r6
  while (number >= 10U)
 80086b0:	f000 82b0 	beq.w	8008c14 <HAL_RTC_SetAlarm+0x6ac>
 80086b4:	f009 3a7f 	and.w	sl, r9, #2139062143	; 0x7f7f7f7f
 80086b8:	f089 36b0 	eor.w	r6, r9, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 80086bc:	f089 33f6 	eor.w	r3, r9, #4143380214	; 0xf6f6f6f6
 80086c0:	f1b8 0f03 	cmp.w	r8, #3
 80086c4:	f10a 3930 	add.w	r9, sl, #808464432	; 0x30303030
 80086c8:	f006 3680 	and.w	r6, r6, #2155905152	; 0x80808080
 80086cc:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80086d0:	ea86 0609 	eor.w	r6, r6, r9
 80086d4:	f10a 3976 	add.w	r9, sl, #1987475062	; 0x76767676
 80086d8:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 80086dc:	f040 8287 	bne.w	8008bee <HAL_RTC_SetAlarm+0x686>
    number -= 10U;
 80086e0:	f086 33f6 	eor.w	r3, r6, #4143380214	; 0xf6f6f6f6
 80086e4:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 80086e8:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80086ec:	f106 3676 	add.w	r6, r6, #1987475062	; 0x76767676
 80086f0:	4073      	eors	r3, r6
    bcdhigh++;
 80086f2:	2618      	movs	r6, #24
 80086f4:	f00e 0938 	and.w	r9, lr, #56	; 0x38
 80086f8:	0e1b      	lsrs	r3, r3, #24
 80086fa:	ebc9 1849 	rsb	r8, r9, r9, lsl #5
 80086fe:	45ce      	cmp	lr, r9
 8008700:	ebc9 0888 	rsb	r8, r9, r8, lsl #2
 8008704:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8008708:	fa5f fc8c 	uxtb.w	ip, ip
 800870c:	d035      	beq.n	800877a <HAL_RTC_SetAlarm+0x212>
 800870e:	f1ac 030a 	sub.w	r3, ip, #10
    number -= 10U;
 8008712:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8008714:	f109 0601 	add.w	r6, r9, #1
  while (number >= 10U)
 8008718:	2b09      	cmp	r3, #9
 800871a:	d92e      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 800871c:	f1ac 0314 	sub.w	r3, ip, #20
    bcdhigh++;
 8008720:	f109 0602 	add.w	r6, r9, #2
    number -= 10U;
 8008724:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008726:	2b09      	cmp	r3, #9
 8008728:	d927      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 800872a:	f1ac 031e 	sub.w	r3, ip, #30
    bcdhigh++;
 800872e:	f109 0603 	add.w	r6, r9, #3
    number -= 10U;
 8008732:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008734:	2b09      	cmp	r3, #9
 8008736:	d920      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 8008738:	f1ac 0328 	sub.w	r3, ip, #40	; 0x28
    bcdhigh++;
 800873c:	f109 0604 	add.w	r6, r9, #4
    number -= 10U;
 8008740:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008742:	2b09      	cmp	r3, #9
 8008744:	d919      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 8008746:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
    bcdhigh++;
 800874a:	f109 0605 	add.w	r6, r9, #5
    number -= 10U;
 800874e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008750:	2b09      	cmp	r3, #9
 8008752:	d912      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 8008754:	f1ac 033c 	sub.w	r3, ip, #60	; 0x3c
    bcdhigh++;
 8008758:	f109 0606 	add.w	r6, r9, #6
    number -= 10U;
 800875c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800875e:	2b09      	cmp	r3, #9
 8008760:	d90b      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 8008762:	f1ac 0346 	sub.w	r3, ip, #70	; 0x46
    bcdhigh++;
 8008766:	f109 0607 	add.w	r6, r9, #7
    number -= 10U;
 800876a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800876c:	2b09      	cmp	r3, #9
 800876e:	d904      	bls.n	800877a <HAL_RTC_SetAlarm+0x212>
    number -= 10U;
 8008770:	f1ac 0350 	sub.w	r3, ip, #80	; 0x50
    bcdhigh++;
 8008774:	f109 0608 	add.w	r6, r9, #8
    number -= 10U;
 8008778:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 800877a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800877e:	fa5f fc83 	uxtb.w	ip, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008782:	784e      	ldrb	r6, [r1, #1]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008784:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  while (number >= 10U)
 8008788:	2e09      	cmp	r6, #9
 800878a:	f240 80a0 	bls.w	80088ce <HAL_RTC_SetAlarm+0x366>
 800878e:	f1a6 090a 	sub.w	r9, r6, #10
 8008792:	4b87      	ldr	r3, [pc, #540]	; (80089b0 <HAL_RTC_SetAlarm+0x448>)
 8008794:	fa5f f889 	uxtb.w	r8, r9
 8008798:	fba3 3e08 	umull	r3, lr, r3, r8
 800879c:	f1b8 0f4f 	cmp.w	r8, #79	; 0x4f
 80087a0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 80087a4:	f10e 0e01 	add.w	lr, lr, #1
 80087a8:	f240 8236 	bls.w	8008c18 <HAL_RTC_SetAlarm+0x6b0>
 80087ac:	f1a6 0828 	sub.w	r8, r6, #40	; 0x28
 80087b0:	2300      	movs	r3, #0
 80087b2:	f368 0307 	bfi	r3, r8, #0, #8
 80087b6:	f1a6 0832 	sub.w	r8, r6, #50	; 0x32
 80087ba:	f368 230f 	bfi	r3, r8, #8, #8
 80087be:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
 80087c2:	f368 4317 	bfi	r3, r8, #16, #8
 80087c6:	f1a6 0846 	sub.w	r8, r6, #70	; 0x46
 80087ca:	f368 631f 	bfi	r3, r8, #24, #8
 80087ce:	ea4f 08de 	mov.w	r8, lr, lsr #3
 80087d2:	f003 397f 	and.w	r9, r3, #2139062143	; 0x7f7f7f7f
 80087d6:	f083 3ab0 	eor.w	sl, r3, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 80087da:	f083 33f6 	eor.w	r3, r3, #4143380214	; 0xf6f6f6f6
 80087de:	f1b8 0f01 	cmp.w	r8, #1
 80087e2:	f109 3b30 	add.w	fp, r9, #808464432	; 0x30303030
 80087e6:	f00a 3a80 	and.w	sl, sl, #2155905152	; 0x80808080
 80087ea:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80087ee:	f109 3976 	add.w	r9, r9, #1987475062	; 0x76767676
 80087f2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80087f6:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 80087fa:	f000 8208 	beq.w	8008c0e <HAL_RTC_SetAlarm+0x6a6>
 80087fe:	f00a 397f 	and.w	r9, sl, #2139062143	; 0x7f7f7f7f
 8008802:	f08a 3bb0 	eor.w	fp, sl, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008806:	f08a 3af6 	eor.w	sl, sl, #4143380214	; 0xf6f6f6f6
 800880a:	f1b8 0f03 	cmp.w	r8, #3
 800880e:	f00b 3b80 	and.w	fp, fp, #2155905152	; 0x80808080
 8008812:	f00a 3380 	and.w	r3, sl, #2155905152	; 0x80808080
 8008816:	f109 3a30 	add.w	sl, r9, #808464432	; 0x30303030
 800881a:	f109 3976 	add.w	r9, r9, #1987475062	; 0x76767676
 800881e:	ea8b 0a0a 	eor.w	sl, fp, sl
 8008822:	ea83 0309 	eor.w	r3, r3, r9
  while (number >= 10U)
 8008826:	f040 81e7 	bne.w	8008bf8 <HAL_RTC_SetAlarm+0x690>
    number -= 10U;
 800882a:	f00a 337f 	and.w	r3, sl, #2139062143	; 0x7f7f7f7f
 800882e:	f08a 38f6 	eor.w	r8, sl, #4143380214	; 0xf6f6f6f6
    bcdhigh++;
 8008832:	f04f 0918 	mov.w	r9, #24
    number -= 10U;
 8008836:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 800883a:	f008 3880 	and.w	r8, r8, #2155905152	; 0x80808080
 800883e:	ea83 0308 	eor.w	r3, r3, r8
  while (number >= 10U)
 8008842:	f00e 0838 	and.w	r8, lr, #56	; 0x38
 8008846:	0e1b      	lsrs	r3, r3, #24
 8008848:	ebc8 1a48 	rsb	sl, r8, r8, lsl #5
 800884c:	45c6      	cmp	lr, r8
 800884e:	ebc8 0a8a 	rsb	sl, r8, sl, lsl #2
 8008852:	eb06 064a 	add.w	r6, r6, sl, lsl #1
 8008856:	b2f6      	uxtb	r6, r6
 8008858:	d036      	beq.n	80088c8 <HAL_RTC_SetAlarm+0x360>
 800885a:	f1a6 090a 	sub.w	r9, r6, #10
    number -= 10U;
 800885e:	fa5f f389 	uxtb.w	r3, r9
    bcdhigh++;
 8008862:	f108 0901 	add.w	r9, r8, #1
  while (number >= 10U)
 8008866:	2b09      	cmp	r3, #9
 8008868:	d92e      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 800886a:	f1a6 0314 	sub.w	r3, r6, #20
    bcdhigh++;
 800886e:	f108 0902 	add.w	r9, r8, #2
    number -= 10U;
 8008872:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008874:	2b09      	cmp	r3, #9
 8008876:	d927      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 8008878:	f1a6 031e 	sub.w	r3, r6, #30
    bcdhigh++;
 800887c:	f108 0903 	add.w	r9, r8, #3
    number -= 10U;
 8008880:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008882:	2b09      	cmp	r3, #9
 8008884:	d920      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 8008886:	f1a6 0328 	sub.w	r3, r6, #40	; 0x28
    bcdhigh++;
 800888a:	f108 0904 	add.w	r9, r8, #4
    number -= 10U;
 800888e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008890:	2b09      	cmp	r3, #9
 8008892:	d919      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 8008894:	f1a6 0332 	sub.w	r3, r6, #50	; 0x32
    bcdhigh++;
 8008898:	f108 0905 	add.w	r9, r8, #5
    number -= 10U;
 800889c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d912      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 80088a2:	f1a6 033c 	sub.w	r3, r6, #60	; 0x3c
    bcdhigh++;
 80088a6:	f108 0906 	add.w	r9, r8, #6
    number -= 10U;
 80088aa:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d90b      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 80088b0:	f1a6 0346 	sub.w	r3, r6, #70	; 0x46
    bcdhigh++;
 80088b4:	f108 0907 	add.w	r9, r8, #7
    number -= 10U;
 80088b8:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80088ba:	2b09      	cmp	r3, #9
 80088bc:	d904      	bls.n	80088c8 <HAL_RTC_SetAlarm+0x360>
    number -= 10U;
 80088be:	f1a6 0350 	sub.w	r3, r6, #80	; 0x50
    bcdhigh++;
 80088c2:	f108 0908 	add.w	r9, r8, #8
    number -= 10U;
 80088c6:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 80088c8:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
 80088cc:	b2de      	uxtb	r6, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80088ce:	0233      	lsls	r3, r6, #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80088d0:	788e      	ldrb	r6, [r1, #2]
  while (number >= 10U)
 80088d2:	2e09      	cmp	r6, #9
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80088d4:	9301      	str	r3, [sp, #4]
  while (number >= 10U)
 80088d6:	f240 80a4 	bls.w	8008a22 <HAL_RTC_SetAlarm+0x4ba>
 80088da:	f1a6 030a 	sub.w	r3, r6, #10
 80088de:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80089b0 <HAL_RTC_SetAlarm+0x448>
 80088e2:	fa5f fe83 	uxtb.w	lr, r3
 80088e6:	fba8 980e 	umull	r9, r8, r8, lr
 80088ea:	f1be 0f4f 	cmp.w	lr, #79	; 0x4f
 80088ee:	f04f 0e00 	mov.w	lr, #0
 80088f2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80088f6:	f108 0801 	add.w	r8, r8, #1
 80088fa:	d95b      	bls.n	80089b4 <HAL_RTC_SetAlarm+0x44c>
 80088fc:	f1a6 0328 	sub.w	r3, r6, #40	; 0x28
 8008900:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
 8008904:	f363 0e07 	bfi	lr, r3, #0, #8
 8008908:	f1a6 0332 	sub.w	r3, r6, #50	; 0x32
 800890c:	f1ba 0f01 	cmp.w	sl, #1
 8008910:	f363 2e0f 	bfi	lr, r3, #8, #8
 8008914:	f1a6 033c 	sub.w	r3, r6, #60	; 0x3c
 8008918:	f363 4e17 	bfi	lr, r3, #16, #8
 800891c:	f1a6 0346 	sub.w	r3, r6, #70	; 0x46
 8008920:	f363 6e1f 	bfi	lr, r3, #24, #8
 8008924:	f00e 337f 	and.w	r3, lr, #2139062143	; 0x7f7f7f7f
 8008928:	f08e 39b0 	eor.w	r9, lr, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 800892c:	f08e 3ef6 	eor.w	lr, lr, #4143380214	; 0xf6f6f6f6
 8008930:	f103 3b30 	add.w	fp, r3, #808464432	; 0x30303030
 8008934:	f009 3980 	and.w	r9, r9, #2155905152	; 0x80808080
 8008938:	f00e 3e80 	and.w	lr, lr, #2155905152	; 0x80808080
 800893c:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8008940:	ea89 090b 	eor.w	r9, r9, fp
 8008944:	ea8e 0303 	eor.w	r3, lr, r3
  while (number >= 10U)
 8008948:	f000 815e 	beq.w	8008c08 <HAL_RTC_SetAlarm+0x6a0>
 800894c:	f009 337f 	and.w	r3, r9, #2139062143	; 0x7f7f7f7f
 8008950:	f089 3eb0 	eor.w	lr, r9, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008954:	f089 39f6 	eor.w	r9, r9, #4143380214	; 0xf6f6f6f6
 8008958:	f1ba 0f03 	cmp.w	sl, #3
 800895c:	f103 3b30 	add.w	fp, r3, #808464432	; 0x30303030
 8008960:	f00e 3e80 	and.w	lr, lr, #2155905152	; 0x80808080
 8008964:	f009 3980 	and.w	r9, r9, #2155905152	; 0x80808080
 8008968:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 800896c:	ea8e 0b0b 	eor.w	fp, lr, fp
 8008970:	ea89 0303 	eor.w	r3, r9, r3
  while (number >= 10U)
 8008974:	f040 813d 	bne.w	8008bf2 <HAL_RTC_SetAlarm+0x68a>
    number -= 10U;
 8008978:	f08b 33f6 	eor.w	r3, fp, #4143380214	; 0xf6f6f6f6
 800897c:	f00b 3b7f 	and.w	fp, fp, #2139062143	; 0x7f7f7f7f
    bcdhigh++;
 8008980:	f04f 0918 	mov.w	r9, #24
    number -= 10U;
 8008984:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8008988:	f10b 3b76 	add.w	fp, fp, #1987475062	; 0x76767676
 800898c:	ea83 030b 	eor.w	r3, r3, fp
  while (number >= 10U)
 8008990:	f008 0e38 	and.w	lr, r8, #56	; 0x38
 8008994:	0e1b      	lsrs	r3, r3, #24
 8008996:	ebce 1a4e 	rsb	sl, lr, lr, lsl #5
 800899a:	45c6      	cmp	lr, r8
 800899c:	ebce 0a8a 	rsb	sl, lr, sl, lsl #2
 80089a0:	eb06 064a 	add.w	r6, r6, sl, lsl #1
 80089a4:	b2f6      	uxtb	r6, r6
 80089a6:	d039      	beq.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
 80089a8:	f1a6 030a 	sub.w	r3, r6, #10
 80089ac:	e002      	b.n	80089b4 <HAL_RTC_SetAlarm+0x44c>
 80089ae:	bf00      	nop
 80089b0:	cccccccd 	.word	0xcccccccd
    number -= 10U;
 80089b4:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80089b6:	f10e 0901 	add.w	r9, lr, #1
  while (number >= 10U)
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d92e      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 80089be:	f1a6 0314 	sub.w	r3, r6, #20
    bcdhigh++;
 80089c2:	f10e 0902 	add.w	r9, lr, #2
    number -= 10U;
 80089c6:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80089c8:	2b09      	cmp	r3, #9
 80089ca:	d927      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 80089cc:	f1a6 031e 	sub.w	r3, r6, #30
    bcdhigh++;
 80089d0:	f10e 0903 	add.w	r9, lr, #3
    number -= 10U;
 80089d4:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d920      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 80089da:	f1a6 0328 	sub.w	r3, r6, #40	; 0x28
    bcdhigh++;
 80089de:	f10e 0904 	add.w	r9, lr, #4
    number -= 10U;
 80089e2:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80089e4:	2b09      	cmp	r3, #9
 80089e6:	d919      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 80089e8:	f1a6 0332 	sub.w	r3, r6, #50	; 0x32
    bcdhigh++;
 80089ec:	f10e 0905 	add.w	r9, lr, #5
    number -= 10U;
 80089f0:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d912      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 80089f6:	f1a6 033c 	sub.w	r3, r6, #60	; 0x3c
    bcdhigh++;
 80089fa:	f10e 0906 	add.w	r9, lr, #6
    number -= 10U;
 80089fe:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008a00:	2b09      	cmp	r3, #9
 8008a02:	d90b      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 8008a04:	f1a6 0346 	sub.w	r3, r6, #70	; 0x46
    bcdhigh++;
 8008a08:	f10e 0907 	add.w	r9, lr, #7
    number -= 10U;
 8008a0c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d904      	bls.n	8008a1c <HAL_RTC_SetAlarm+0x4b4>
    number -= 10U;
 8008a12:	f1a6 0350 	sub.w	r3, r6, #80	; 0x50
    bcdhigh++;
 8008a16:	f10e 0908 	add.w	r9, lr, #8
    number -= 10U;
 8008a1a:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 8008a1c:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
 8008a20:	b2de      	uxtb	r6, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a22:	f891 e020 	ldrb.w	lr, [r1, #32]
  while (number >= 10U)
 8008a26:	f1be 0f09 	cmp.w	lr, #9
 8008a2a:	f240 80a1 	bls.w	8008b70 <HAL_RTC_SetAlarm+0x608>
 8008a2e:	f1ae 030a 	sub.w	r3, lr, #10
 8008a32:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8008c24 <HAL_RTC_SetAlarm+0x6bc>
 8008a36:	fa5f f983 	uxtb.w	r9, r3
 8008a3a:	fba8 a809 	umull	sl, r8, r8, r9
 8008a3e:	f1b9 0f4f 	cmp.w	r9, #79	; 0x4f
 8008a42:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8008a46:	f108 0801 	add.w	r8, r8, #1
 8008a4a:	d959      	bls.n	8008b00 <HAL_RTC_SetAlarm+0x598>
 8008a4c:	f1ae 0328 	sub.w	r3, lr, #40	; 0x28
 8008a50:	2200      	movs	r2, #0
 8008a52:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
 8008a56:	f363 0207 	bfi	r2, r3, #0, #8
 8008a5a:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
 8008a5e:	f1ba 0f01 	cmp.w	sl, #1
 8008a62:	f363 220f 	bfi	r2, r3, #8, #8
 8008a66:	f1ae 033c 	sub.w	r3, lr, #60	; 0x3c
 8008a6a:	f363 4217 	bfi	r2, r3, #16, #8
 8008a6e:	f1ae 0346 	sub.w	r3, lr, #70	; 0x46
 8008a72:	f363 621f 	bfi	r2, r3, #24, #8
 8008a76:	f002 337f 	and.w	r3, r2, #2139062143	; 0x7f7f7f7f
 8008a7a:	f082 39b0 	eor.w	r9, r2, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008a7e:	f082 32f6 	eor.w	r2, r2, #4143380214	; 0xf6f6f6f6
 8008a82:	f103 3b30 	add.w	fp, r3, #808464432	; 0x30303030
 8008a86:	f009 3980 	and.w	r9, r9, #2155905152	; 0x80808080
 8008a8a:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008a8e:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8008a92:	ea89 090b 	eor.w	r9, r9, fp
 8008a96:	ea83 0302 	eor.w	r3, r3, r2
  while (number >= 10U)
 8008a9a:	f000 80b2 	beq.w	8008c02 <HAL_RTC_SetAlarm+0x69a>
 8008a9e:	f009 337f 	and.w	r3, r9, #2139062143	; 0x7f7f7f7f
 8008aa2:	f089 32b0 	eor.w	r2, r9, #2964369584	; 0xb0b0b0b0
    number -= 10U;
 8008aa6:	f089 39f6 	eor.w	r9, r9, #4143380214	; 0xf6f6f6f6
 8008aaa:	f1ba 0f03 	cmp.w	sl, #3
 8008aae:	f103 3b30 	add.w	fp, r3, #808464432	; 0x30303030
 8008ab2:	f002 3280 	and.w	r2, r2, #2155905152	; 0x80808080
 8008ab6:	f009 3980 	and.w	r9, r9, #2155905152	; 0x80808080
 8008aba:	f103 3376 	add.w	r3, r3, #1987475062	; 0x76767676
 8008abe:	ea82 0b0b 	eor.w	fp, r2, fp
 8008ac2:	ea89 0303 	eor.w	r3, r9, r3
  while (number >= 10U)
 8008ac6:	f040 808f 	bne.w	8008be8 <HAL_RTC_SetAlarm+0x680>
    number -= 10U;
 8008aca:	f08b 33f6 	eor.w	r3, fp, #4143380214	; 0xf6f6f6f6
 8008ace:	f00b 3b7f 	and.w	fp, fp, #2139062143	; 0x7f7f7f7f
    bcdhigh++;
 8008ad2:	f04f 0918 	mov.w	r9, #24
    number -= 10U;
 8008ad6:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8008ada:	f10b 3b76 	add.w	fp, fp, #1987475062	; 0x76767676
 8008ade:	ea83 030b 	eor.w	r3, r3, fp
  while (number >= 10U)
 8008ae2:	f008 0238 	and.w	r2, r8, #56	; 0x38
 8008ae6:	0e1b      	lsrs	r3, r3, #24
 8008ae8:	ebc2 1a42 	rsb	sl, r2, r2, lsl #5
 8008aec:	4542      	cmp	r2, r8
 8008aee:	ebc2 0a8a 	rsb	sl, r2, sl, lsl #2
 8008af2:	eb0e 0e4a 	add.w	lr, lr, sl, lsl #1
 8008af6:	fa5f fe8e 	uxtb.w	lr, lr
 8008afa:	d035      	beq.n	8008b68 <HAL_RTC_SetAlarm+0x600>
 8008afc:	f1ae 030a 	sub.w	r3, lr, #10
    number -= 10U;
 8008b00:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8008b02:	f102 0901 	add.w	r9, r2, #1
  while (number >= 10U)
 8008b06:	2b09      	cmp	r3, #9
 8008b08:	d92e      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b0a:	f1ae 0314 	sub.w	r3, lr, #20
    bcdhigh++;
 8008b0e:	f102 0902 	add.w	r9, r2, #2
    number -= 10U;
 8008b12:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d927      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b18:	f1ae 031e 	sub.w	r3, lr, #30
    bcdhigh++;
 8008b1c:	f102 0903 	add.w	r9, r2, #3
    number -= 10U;
 8008b20:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d920      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b26:	f1ae 0328 	sub.w	r3, lr, #40	; 0x28
    bcdhigh++;
 8008b2a:	f102 0904 	add.w	r9, r2, #4
    number -= 10U;
 8008b2e:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d919      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b34:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
    bcdhigh++;
 8008b38:	f102 0905 	add.w	r9, r2, #5
    number -= 10U;
 8008b3c:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d912      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b42:	f1ae 033c 	sub.w	r3, lr, #60	; 0x3c
    bcdhigh++;
 8008b46:	f102 0906 	add.w	r9, r2, #6
    number -= 10U;
 8008b4a:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d90b      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b50:	f1ae 0346 	sub.w	r3, lr, #70	; 0x46
    bcdhigh++;
 8008b54:	f102 0907 	add.w	r9, r2, #7
    number -= 10U;
 8008b58:	b2db      	uxtb	r3, r3
  while (number >= 10U)
 8008b5a:	2b09      	cmp	r3, #9
 8008b5c:	d904      	bls.n	8008b68 <HAL_RTC_SetAlarm+0x600>
    number -= 10U;
 8008b5e:	f1ae 0350 	sub.w	r3, lr, #80	; 0x50
    bcdhigh++;
 8008b62:	f102 0908 	add.w	r9, r2, #8
    number -= 10U;
 8008b66:	b2db      	uxtb	r3, r3
  return ((uint8_t)(bcdhigh << 4U) | number);
 8008b68:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
 8008b6c:	fa5f fe83 	uxtb.w	lr, r3
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b70:	694b      	ldr	r3, [r1, #20]
 8008b72:	9a01      	ldr	r2, [sp, #4]
 8008b74:	4303      	orrs	r3, r0
 8008b76:	433b      	orrs	r3, r7
 8008b78:	ea43 030c 	orr.w	r3, r3, ip
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	431e      	orrs	r6, r3
 8008b80:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8008b84:	e517      	b.n	80085b6 <HAL_RTC_SetAlarm+0x4e>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	21ff      	movs	r1, #255	; 0xff
        return HAL_TIMEOUT;
 8008b8c:	4618      	mov	r0, r3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b8e:	6251      	str	r1, [r2, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b90:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8008b92:	f884 801c 	strb.w	r8, [r4, #28]
}
 8008b96:	b003      	add	sp, #12
 8008b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba0:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008ba2:	68ab      	ldr	r3, [r5, #8]
 8008ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba8:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008baa:	68eb      	ldr	r3, [r5, #12]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8008bb2:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8008bb4:	f7fb fc6a 	bl	800448c <HAL_GetTick>
 8008bb8:	4605      	mov	r5, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008bba:	e005      	b.n	8008bc8 <HAL_RTC_SetAlarm+0x660>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008bbc:	f7fb fc66 	bl	800448c <HAL_GetTick>
 8008bc0:	1b40      	subs	r0, r0, r5
 8008bc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008bc6:	d8de      	bhi.n	8008b86 <HAL_RTC_SetAlarm+0x61e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	f012 0801 	ands.w	r8, r2, #1
 8008bd0:	d0f4      	beq.n	8008bbc <HAL_RTC_SetAlarm+0x654>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008bd2:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008bd4:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bdc:	609a      	str	r2, [r3, #8]
 8008bde:	e519      	b.n	8008614 <HAL_RTC_SetAlarm+0xac>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008be0:	70ca      	strb	r2, [r1, #3]
 8008be2:	e4d7      	b.n	8008594 <HAL_RTC_SetAlarm+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008be4:	70cf      	strb	r7, [r1, #3]
 8008be6:	e526      	b.n	8008636 <HAL_RTC_SetAlarm+0xce>
    bcdhigh++;
 8008be8:	f04f 0910 	mov.w	r9, #16
 8008bec:	e779      	b.n	8008ae2 <HAL_RTC_SetAlarm+0x57a>
 8008bee:	2610      	movs	r6, #16
 8008bf0:	e580      	b.n	80086f4 <HAL_RTC_SetAlarm+0x18c>
 8008bf2:	f04f 0910 	mov.w	r9, #16
 8008bf6:	e6cb      	b.n	8008990 <HAL_RTC_SetAlarm+0x428>
 8008bf8:	f04f 0910 	mov.w	r9, #16
 8008bfc:	e621      	b.n	8008842 <HAL_RTC_SetAlarm+0x2da>
  __HAL_LOCK(hrtc);
 8008bfe:	2002      	movs	r0, #2
}
 8008c00:	4770      	bx	lr
    bcdhigh++;
 8008c02:	f04f 0908 	mov.w	r9, #8
 8008c06:	e76c      	b.n	8008ae2 <HAL_RTC_SetAlarm+0x57a>
 8008c08:	f04f 0908 	mov.w	r9, #8
 8008c0c:	e6c0      	b.n	8008990 <HAL_RTC_SetAlarm+0x428>
 8008c0e:	f04f 0908 	mov.w	r9, #8
 8008c12:	e616      	b.n	8008842 <HAL_RTC_SetAlarm+0x2da>
 8008c14:	2608      	movs	r6, #8
 8008c16:	e56d      	b.n	80086f4 <HAL_RTC_SetAlarm+0x18c>
  uint32_t bcdhigh = 0U;
 8008c18:	f04f 0800 	mov.w	r8, #0
 8008c1c:	e61f      	b.n	800885e <HAL_RTC_SetAlarm+0x2f6>
 8008c1e:	f04f 0900 	mov.w	r9, #0
 8008c22:	e576      	b.n	8008712 <HAL_RTC_SetAlarm+0x1aa>
 8008c24:	cccccccd 	.word	0xcccccccd

08008c28 <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c28:	7f03      	ldrb	r3, [r0, #28]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d02f      	beq.n	8008c8e <HAL_RTCEx_SetTimeStamp+0x66>

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c2e:	6803      	ldr	r3, [r0, #0]
 8008c30:	4684      	mov	ip, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c32:	2002      	movs	r0, #2
{
 8008c34:	b500      	push	{lr}
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c36:	f88c 001d 	strb.w	r0, [ip, #29]

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c3a:	f04f 0e00 	mov.w	lr, #0
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008c40:	f020 0006 	bic.w	r0, r0, #6
 8008c44:	64d8      	str	r0, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008c48:	4302      	orrs	r2, r0
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008c4a:	4812      	ldr	r0, [pc, #72]	; (8008c94 <HAL_RTCEx_SetTimeStamp+0x6c>)
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	4010      	ands	r0, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c52:	22ca      	movs	r2, #202	; 0xca
  tmpreg |= RTC_TimeStampEdge;
 8008c54:	4301      	orrs	r1, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24
 8008c58:	2253      	movs	r2, #83	; 0x53
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c5a:	20ff      	movs	r0, #255	; 0xff
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c5e:	6099      	str	r1, [r3, #8]
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8008c68:	60da      	str	r2, [r3, #12]
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8008c72:	60da      	str	r2, [r3, #12]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7a:	609a      	str	r2, [r3, #8]
  hrtc->State = HAL_RTC_STATE_READY;
 8008c7c:	2201      	movs	r2, #1
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c7e:	6258      	str	r0, [r3, #36]	; 0x24

  return HAL_OK;
 8008c80:	4670      	mov	r0, lr
  hrtc->State = HAL_RTC_STATE_READY;
 8008c82:	f88c 201d 	strb.w	r2, [ip, #29]
  __HAL_UNLOCK(hrtc);
 8008c86:	f88c e01c 	strb.w	lr, [ip, #28]
}
 8008c8a:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hrtc);
 8008c8e:	2002      	movs	r0, #2
}
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	fffff7f7 	.word	0xfffff7f7

08008c98 <HAL_SAI_Init>:
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f000 80f7 	beq.w	8008e8c <HAL_SAI_Init+0x1f4>
{
 8008c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008ca0:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80c5 	beq.w	8008e3a <HAL_SAI_Init+0x1a2>
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008cb0:	4b77      	ldr	r3, [pc, #476]	; (8008e90 <HAL_SAI_Init+0x1f8>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8008cb2:	2002      	movs	r0, #2
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008cb4:	4977      	ldr	r1, [pc, #476]	; (8008e94 <HAL_SAI_Init+0x1fc>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008cb6:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008cb8:	681b      	ldr	r3, [r3, #0]
  hsai->State = HAL_SAI_STATE_BUSY;
 8008cba:	f884 007d 	strb.w	r0, [r4, #125]	; 0x7d
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008cbe:	fba1 1303 	umull	r1, r3, r1, r3
  __HAL_SAI_DISABLE(hsai);
 8008cc2:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008cc4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8008cc6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008cca:	4083      	lsls	r3, r0
  __HAL_SAI_DISABLE(hsai);
 8008ccc:	6011      	str	r1, [r2, #0]
 8008cce:	e002      	b.n	8008cd6 <HAL_SAI_Init+0x3e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008cd0:	6811      	ldr	r1, [r2, #0]
 8008cd2:	03cd      	lsls	r5, r1, #15
 8008cd4:	d507      	bpl.n	8008ce6 <HAL_SAI_Init+0x4e>
    if (count-- == 0)
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	d2fa      	bcs.n	8008cd0 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008cda:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  switch (hsai->Init.SynchroExt)
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	f000 80a3 	beq.w	8008e34 <HAL_SAI_Init+0x19c>
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	bf15      	itete	ne
 8008cf2:	2001      	movne	r0, #1
 8008cf4:	2021      	moveq	r0, #33	; 0x21
 8008cf6:	2100      	movne	r1, #0
 8008cf8:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	f000 8096 	beq.w	8008e2e <HAL_SAI_Init+0x196>
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	f000 8092 	beq.w	8008e2c <HAL_SAI_Init+0x194>
 8008d08:	f1a3 0301 	sub.w	r3, r3, #1
 8008d0c:	fab3 f383 	clz	r3, r3
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	029d      	lsls	r5, r3, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d14:	4b60      	ldr	r3, [pc, #384]	; (8008e98 <HAL_SAI_Init+0x200>)
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d026      	beq.n	8008d68 <HAL_SAI_Init+0xd0>
 8008d1a:	3320      	adds	r3, #32
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d023      	beq.n	8008d68 <HAL_SAI_Init+0xd0>
    SAI2->GCR = tmpregisterGCR;
 8008d20:	4b5e      	ldr	r3, [pc, #376]	; (8008e9c <HAL_SAI_Init+0x204>)
 8008d22:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d26:	69e3      	ldr	r3, [r4, #28]
 8008d28:	b323      	cbz	r3, 8008d74 <HAL_SAI_Init+0xdc>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008d2a:	4b5d      	ldr	r3, [pc, #372]	; (8008ea0 <HAL_SAI_Init+0x208>)
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	f000 8094 	beq.w	8008e5a <HAL_SAI_Init+0x1c2>
 8008d32:	3320      	adds	r3, #32
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	fab3 f383 	clz	r3, r3
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 808c 	bne.w	8008e5a <HAL_SAI_Init+0x1c2>
    hsai->Init.Mckdiv = tmpval / 10;
 8008d42:	4619      	mov	r1, r3
 8008d44:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008d46:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008d48:	2e04      	cmp	r6, #4
 8008d4a:	d115      	bne.n	8008d78 <HAL_SAI_Init+0xe0>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d4c:	6863      	ldr	r3, [r4, #4]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008d4e:	0849      	lsrs	r1, r1, #1
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d50:	f033 0002 	bics.w	r0, r3, #2
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008d54:	6221      	str	r1, [r4, #32]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008d56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d58:	d013      	beq.n	8008d82 <HAL_SAI_Init+0xea>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008d5a:	f1a0 0001 	sub.w	r0, r0, #1
 8008d5e:	fab0 f080 	clz	r0, r0
 8008d62:	0940      	lsrs	r0, r0, #5
 8008d64:	0240      	lsls	r0, r0, #9
 8008d66:	e010      	b.n	8008d8a <HAL_SAI_Init+0xf2>
    SAI1->GCR = tmpregisterGCR;
 8008d68:	4b4c      	ldr	r3, [pc, #304]	; (8008e9c <HAL_SAI_Init+0x204>)
 8008d6a:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d6e:	69e3      	ldr	r3, [r4, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d167      	bne.n	8008e44 <HAL_SAI_Init+0x1ac>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d74:	6b26      	ldr	r6, [r4, #48]	; 0x30
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008d76:	6a21      	ldr	r1, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	f033 0002 	bics.w	r0, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008d7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d80:	d1eb      	bne.n	8008d5a <HAL_SAI_Init+0xc2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008d82:	3801      	subs	r0, #1
 8008d84:	bf18      	it	ne
 8008d86:	2001      	movne	r0, #1
 8008d88:	0240      	lsls	r0, r0, #9
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d8a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8008d8c:	433b      	orrs	r3, r7
 8008d8e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8008d90:	433b      	orrs	r3, r7
 8008d92:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008d94:	433b      	orrs	r3, r7
 8008d96:	6927      	ldr	r7, [r4, #16]
 8008d98:	433b      	orrs	r3, r7
 8008d9a:	6967      	ldr	r7, [r4, #20]
 8008d9c:	433b      	orrs	r3, r7
 8008d9e:	432b      	orrs	r3, r5
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008da0:	4d40      	ldr	r5, [pc, #256]	; (8008ea4 <HAL_SAI_Init+0x20c>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008da2:	4333      	orrs	r3, r6
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008da4:	6816      	ldr	r6, [r2, #0]
 8008da6:	4035      	ands	r5, r6
 8008da8:	6015      	str	r5, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008daa:	6815      	ldr	r5, [r2, #0]
 8008dac:	432b      	orrs	r3, r5
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008dae:	4d3e      	ldr	r5, [pc, #248]	; (8008ea8 <HAL_SAI_Init+0x210>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008db0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008db4:	69a1      	ldr	r1, [r4, #24]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008db6:	4303      	orrs	r3, r0
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008db8:	483c      	ldr	r0, [pc, #240]	; (8008eac <HAL_SAI_Init+0x214>)
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008dba:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008dbc:	6853      	ldr	r3, [r2, #4]
 8008dbe:	401d      	ands	r5, r3
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008dc2:	4319      	orrs	r1, r3
 8008dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008dc6:	6055      	str	r5, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008dc8:	4319      	orrs	r1, r3
 8008dca:	6855      	ldr	r5, [r2, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008dcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008dce:	4329      	orrs	r1, r5
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008dd0:	f24f 0520 	movw	r5, #61472	; 0xf020
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008dd4:	6051      	str	r1, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008dd6:	6891      	ldr	r1, [r2, #8]
 8008dd8:	4008      	ands	r0, r1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008dda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008de0:	6090      	str	r0, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008de2:	430b      	orrs	r3, r1
 8008de4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008de6:	6890      	ldr	r0, [r2, #8]
 8008de8:	3901      	subs	r1, #1
 8008dea:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008dec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008dee:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008df0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008df4:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008df6:	4303      	orrs	r3, r0
 8008df8:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008dfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008dfc:	68d0      	ldr	r0, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008dfe:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008e00:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008e02:	4028      	ands	r0, r5
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008e08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008e0a:	60d0      	str	r0, [r2, #12]
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008e0c:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008e0e:	68d0      	ldr	r0, [r2, #12]
 8008e10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e14:	2100      	movs	r1, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008e16:	4303      	orrs	r3, r0
  return HAL_OK;
 8008e18:	4608      	mov	r0, r1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008e1a:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8008e1c:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e1e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8008e22:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8008e26:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008e2c:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008e2e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008e32:	e76f      	b.n	8008d14 <HAL_SAI_Init+0x7c>
  switch (hsai->Init.SynchroExt)
 8008e34:	2011      	movs	r0, #17
 8008e36:	2110      	movs	r1, #16
 8008e38:	e75f      	b.n	8008cfa <HAL_SAI_Init+0x62>
    hsai->Lock = HAL_UNLOCKED;
 8008e3a:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8008e3e:	f7fb f9d3 	bl	80041e8 <HAL_SAI_MspInit>
 8008e42:	e735      	b.n	8008cb0 <HAL_SAI_Init+0x18>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008e44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008e48:	f7fe fdc2 	bl	80079d0 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008e4c:	6822      	ldr	r2, [r4, #0]
 8008e4e:	4b14      	ldr	r3, [pc, #80]	; (8008ea0 <HAL_SAI_Init+0x208>)
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d002      	beq.n	8008e5a <HAL_SAI_Init+0x1c2>
 8008e54:	3320      	adds	r3, #32
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d104      	bne.n	8008e64 <HAL_SAI_Init+0x1cc>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008e5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008e5e:	f7fe fdb7 	bl	80079d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e62:	6822      	ldr	r2, [r4, #0]
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008e68:	69e1      	ldr	r1, [r4, #28]
 8008e6a:	0043      	lsls	r3, r0, #1
 8008e6c:	0249      	lsls	r1, r1, #9
 8008e6e:	fbb3 f3f1 	udiv	r3, r3, r1
    hsai->Init.Mckdiv = tmpval / 10;
 8008e72:	490f      	ldr	r1, [pc, #60]	; (8008eb0 <HAL_SAI_Init+0x218>)
 8008e74:	fba1 0103 	umull	r0, r1, r1, r3
 8008e78:	08c9      	lsrs	r1, r1, #3
    if ((tmpval % 10) > 8)
 8008e7a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8008e7e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8008e82:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1;
 8008e84:	bf08      	it	eq
 8008e86:	3101      	addeq	r1, #1
 8008e88:	6221      	str	r1, [r4, #32]
 8008e8a:	e75c      	b.n	8008d46 <HAL_SAI_Init+0xae>
    return HAL_ERROR;
 8008e8c:	2001      	movs	r0, #1
}
 8008e8e:	4770      	bx	lr
 8008e90:	20000018 	.word	0x20000018
 8008e94:	95cbec1b 	.word	0x95cbec1b
 8008e98:	40015804 	.word	0x40015804
 8008e9c:	40015000 	.word	0x40015000
 8008ea0:	40015c04 	.word	0x40015c04
 8008ea4:	ff05c010 	.word	0xff05c010
 8008ea8:	ffff1ff0 	.word	0xffff1ff0
 8008eac:	fff88000 	.word	0xfff88000
 8008eb0:	cccccccd 	.word	0xcccccccd

08008eb4 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8008eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	b089      	sub	sp, #36	; 0x24
 8008eba:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ebc:	f7fb fae6 	bl	800448c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8008ec0:	2300      	movs	r3, #0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ec2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8008ec4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ec6:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8008ec8:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ecc:	f002 f9d2 	bl	800b274 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	b110      	cbz	r0, 8008eda <SD_FindSCR.constprop.0+0x26>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	b009      	add	sp, #36	; 0x24
 8008ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008eda:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8008edc:	6828      	ldr	r0, [r5, #0]
 8008ede:	0409      	lsls	r1, r1, #16
 8008ee0:	f002 fec8 	bl	800bc74 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d1f4      	bne.n	8008ed4 <SD_FindSCR.constprop.0+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eee:	2201      	movs	r2, #1
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ef0:	9006      	str	r0, [sp, #24]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ef2:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8008ef4:	2308      	movs	r3, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ef6:	9207      	str	r2, [sp, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ef8:	2230      	movs	r2, #48	; 0x30
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008efa:	eb0d 0103 	add.w	r1, sp, r3
  config.DataLength    = 8U;
 8008efe:	9303      	str	r3, [sp, #12]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f00:	2302      	movs	r3, #2
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f02:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f08:	f002 f99e 	bl	800b248 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f0c:	6828      	ldr	r0, [r5, #0]
 8008f0e:	f003 f847 	bl	800bfa0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f12:	4604      	mov	r4, r0
 8008f14:	b140      	cbz	r0, 8008f28 <SD_FindSCR.constprop.0+0x74>
 8008f16:	e7dd      	b.n	8008ed4 <SD_FindSCR.constprop.0+0x20>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8008f18:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008f1a:	0491      	lsls	r1, r2, #18
 8008f1c:	d515      	bpl.n	8008f4a <SD_FindSCR.constprop.0+0x96>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f1e:	f7fb fab5 	bl	800448c <HAL_GetTick>
 8008f22:	1b83      	subs	r3, r0, r6
 8008f24:	3301      	adds	r3, #1
 8008f26:	d024      	beq.n	8008f72 <SD_FindSCR.constprop.0+0xbe>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8008f28:	6828      	ldr	r0, [r5, #0]
 8008f2a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008f2c:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8008f30:	d10b      	bne.n	8008f4a <SD_FindSCR.constprop.0+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008f32:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008f34:	0293      	lsls	r3, r2, #10
 8008f36:	d5ef      	bpl.n	8008f18 <SD_FindSCR.constprop.0+0x64>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008f38:	f002 f96e 	bl	800b218 <SDMMC_ReadFIFO>
 8008f3c:	ab08      	add	r3, sp, #32
 8008f3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f42:	3401      	adds	r4, #1
 8008f44:	f843 0c20 	str.w	r0, [r3, #-32]
 8008f48:	e7e9      	b.n	8008f1e <SD_FindSCR.constprop.0+0x6a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f4a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008f4c:	0712      	lsls	r2, r2, #28
 8008f4e:	d417      	bmi.n	8008f80 <SD_FindSCR.constprop.0+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f50:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008f52:	0793      	lsls	r3, r2, #30
 8008f54:	d418      	bmi.n	8008f88 <SD_FindSCR.constprop.0+0xd4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f56:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008f58:	f014 0420 	ands.w	r4, r4, #32
 8008f5c:	d10c      	bne.n	8008f78 <SD_FindSCR.constprop.0+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f5e:	f240 533a 	movw	r3, #1338	; 0x53a
 8008f62:	e9dd 2100 	ldrd	r2, r1, [sp]
 8008f66:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f68:	ba09      	rev	r1, r1
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008f6a:	ba12      	rev	r2, r2
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008f6c:	e9c7 1200 	strd	r1, r2, [r7]
  return HAL_SD_ERROR_NONE;
 8008f70:	e7b0      	b.n	8008ed4 <SD_FindSCR.constprop.0+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 8008f72:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008f76:	e7ad      	b.n	8008ed4 <SD_FindSCR.constprop.0+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f78:	2220      	movs	r2, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8008f7a:	4614      	mov	r4, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008f7c:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8008f7e:	e7a9      	b.n	8008ed4 <SD_FindSCR.constprop.0+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f80:	2208      	movs	r2, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f82:	4614      	mov	r4, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f84:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f86:	e7a5      	b.n	8008ed4 <SD_FindSCR.constprop.0+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f88:	2202      	movs	r2, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f8a:	4614      	mov	r4, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008f8c:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f8e:	e7a1      	b.n	8008ed4 <SD_FindSCR.constprop.0+0x20>

08008f90 <HAL_SD_ReadBlocks>:
{
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	460d      	mov	r5, r1
 8008f96:	b087      	sub	sp, #28
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4692      	mov	sl, r2
 8008f9c:	461f      	mov	r7, r3
 8008f9e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008fa2:	f7fb fa73 	bl	800448c <HAL_GetTick>
  if(NULL == pData)
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	d067      	beq.n	800907a <HAL_SD_ReadBlocks+0xea>
  if(hsd->State == HAL_SD_STATE_READY)
 8008faa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	fa5f f983 	uxtb.w	r9, r3
 8008fb4:	d151      	bne.n	800905a <HAL_SD_ReadBlocks+0xca>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fb6:	eb0a 0307 	add.w	r3, sl, r7
 8008fba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fbc:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fbe:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fc0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fc2:	d864      	bhi.n	800908e <HAL_SD_ReadBlocks+0xfe>
    hsd->State = HAL_SD_STATE_BUSY;
 8008fc4:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008fc6:	f04f 0b02 	mov.w	fp, #2
 8008fca:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8008fcc:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8008fce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008fd2:	f04f 0c00 	mov.w	ip, #0
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8008fd8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008fda:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008fdc:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008fe4:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8008fe8:	bf18      	it	ne
 8008fea:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008fee:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ff0:	2390      	movs	r3, #144	; 0x90
 8008ff2:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e9cd c304 	strd	ip, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ffc:	f002 f924 	bl	800b248 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8009000:	2f01      	cmp	r7, #1
 8009002:	f04f 0301 	mov.w	r3, #1
 8009006:	d932      	bls.n	800906e <HAL_SD_ReadBlocks+0xde>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009008:	4651      	mov	r1, sl
 800900a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800900c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009010:	f002 fa84 	bl	800b51c <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009014:	2800      	cmp	r0, #0
 8009016:	d142      	bne.n	800909e <HAL_SD_ReadBlocks+0x10e>
    dataremaining = config.DataLength;
 8009018:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800901c:	e004      	b.n	8009028 <HAL_SD_ReadBlocks+0x98>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800901e:	f7fb fa35 	bl	800448c <HAL_GetTick>
 8009022:	1b80      	subs	r0, r0, r6
 8009024:	4540      	cmp	r0, r8
 8009026:	d271      	bcs.n	800910c <HAL_SD_ReadBlocks+0x17c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800902c:	f412 7f95 	tst.w	r2, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009032:	d140      	bne.n	80090b6 <HAL_SD_ReadBlocks+0x126>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009034:	0411      	lsls	r1, r2, #16
 8009036:	d5f2      	bpl.n	800901e <HAL_SD_ReadBlocks+0x8e>
 8009038:	f1ba 0f00 	cmp.w	sl, #0
 800903c:	d0ef      	beq.n	800901e <HAL_SD_ReadBlocks+0x8e>
 800903e:	f105 0b20 	add.w	fp, r5, #32
 8009042:	e000      	b.n	8009046 <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f002 f8e6 	bl	800b218 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800904c:	f845 0b04 	str.w	r0, [r5], #4
        for(count = 0U; count < 8U; count++)
 8009050:	455d      	cmp	r5, fp
 8009052:	d1f7      	bne.n	8009044 <HAL_SD_ReadBlocks+0xb4>
          dataremaining--;
 8009054:	f1aa 0a20 	sub.w	sl, sl, #32
 8009058:	e7e1      	b.n	800901e <HAL_SD_ReadBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800905a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800905c:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009064:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009066:	4648      	mov	r0, r9
 8009068:	b007      	add	sp, #28
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800906e:	4651      	mov	r1, sl
 8009070:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009072:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009074:	f002 f9a8 	bl	800b3c8 <SDMMC_CmdReadSingleBlock>
 8009078:	e7cc      	b.n	8009014 <HAL_SD_ReadBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800907a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800907c:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009084:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009086:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009088:	b007      	add	sp, #28
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800908e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8009090:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009096:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009098:	b007      	add	sp, #28
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800909e:	6823      	ldr	r3, [r4, #0]
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090a0:	4a3e      	ldr	r2, [pc, #248]	; (800919c <HAL_SD_ReadBlocks+0x20c>)
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80090a4:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80090a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090a8:	4303      	orrs	r3, r0
 80090aa:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Context = SD_CONTEXT_NONE;
 80090ac:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 80090ae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80090b2:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80090b4:	e7d7      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80090b6:	05d2      	lsls	r2, r2, #23
 80090b8:	d501      	bpl.n	80090be <HAL_SD_ReadBlocks+0x12e>
 80090ba:	2f01      	cmp	r7, #1
 80090bc:	d835      	bhi.n	800912a <HAL_SD_ReadBlocks+0x19a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80090be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c0:	f012 0208 	ands.w	r2, r2, #8
 80090c4:	d146      	bne.n	8009154 <HAL_SD_ReadBlocks+0x1c4>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80090c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80090c8:	f011 0102 	ands.w	r1, r1, #2
 80090cc:	d137      	bne.n	800913e <HAL_SD_ReadBlocks+0x1ae>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80090ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d0:	0690      	lsls	r0, r2, #26
 80090d2:	d44b      	bmi.n	800916c <HAL_SD_ReadBlocks+0x1dc>
 80090d4:	4657      	mov	r7, sl
      *tempbuff = (uint8_t)(data & 0xFFU);
 80090d6:	4455      	add	r5, sl
 80090d8:	e00b      	b.n	80090f2 <HAL_SD_ReadBlocks+0x162>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80090da:	b177      	cbz	r7, 80090fa <HAL_SD_ReadBlocks+0x16a>
      data = SDMMC_ReadFIFO(hsd->Instance);
 80090dc:	f002 f89c 	bl	800b218 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80090e0:	1beb      	subs	r3, r5, r7
      dataremaining--;
 80090e2:	3f04      	subs	r7, #4
      *tempbuff = (uint8_t)(data & 0xFFU);
 80090e4:	6018      	str	r0, [r3, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80090e6:	f7fb f9d1 	bl	800448c <HAL_GetTick>
 80090ea:	1b80      	subs	r0, r0, r6
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090ec:	6823      	ldr	r3, [r4, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80090ee:	4540      	cmp	r0, r8
 80090f0:	d247      	bcs.n	8009182 <HAL_SD_ReadBlocks+0x1f2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80090f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      data = SDMMC_ReadFIFO(hsd->Instance);
 80090f4:	4618      	mov	r0, r3
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80090f6:	0292      	lsls	r2, r2, #10
 80090f8:	d4ef      	bmi.n	80090da <HAL_SD_ReadBlocks+0x14a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090fa:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 80090fe:	2201      	movs	r2, #1
    return HAL_OK;
 8009100:	f04f 0900 	mov.w	r9, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009104:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009106:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800910a:	e7ac      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800910c:	6823      	ldr	r3, [r4, #0]
        hsd->State= HAL_SD_STATE_READY;
 800910e:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009110:	4822      	ldr	r0, [pc, #136]	; (800919c <HAL_SD_ReadBlocks+0x20c>)
        hsd->Context = SD_CONTEXT_NONE;
 8009112:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8009114:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009118:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800911a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800911c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009120:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009122:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009126:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8009128:	e79d      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800912a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800912c:	2a03      	cmp	r2, #3
 800912e:	d0c6      	beq.n	80090be <HAL_SD_ReadBlocks+0x12e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009130:	4618      	mov	r0, r3
 8009132:	f002 fbf1 	bl	800b918 <SDMMC_CmdStopTransfer>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009136:	6823      	ldr	r3, [r4, #0]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009138:	2800      	cmp	r0, #0
 800913a:	d0c0      	beq.n	80090be <HAL_SD_ReadBlocks+0x12e>
 800913c:	e7b0      	b.n	80090a0 <HAL_SD_ReadBlocks+0x110>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800913e:	4917      	ldr	r1, [pc, #92]	; (800919c <HAL_SD_ReadBlocks+0x20c>)
 8009140:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009142:	2101      	movs	r1, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009146:	f043 0302 	orr.w	r3, r3, #2
 800914a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800914c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009150:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009152:	e788      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009154:	4911      	ldr	r1, [pc, #68]	; (800919c <HAL_SD_ReadBlocks+0x20c>)
      hsd->State = HAL_SD_STATE_READY;
 8009156:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009158:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800915a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8009162:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009164:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009168:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800916a:	e77c      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800916c:	4a0b      	ldr	r2, [pc, #44]	; (800919c <HAL_SD_ReadBlocks+0x20c>)
 800916e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009170:	2201      	movs	r2, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009174:	f043 0320 	orr.w	r3, r3, #32
 8009178:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800917a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800917e:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009180:	e771      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009182:	4906      	ldr	r1, [pc, #24]	; (800919c <HAL_SD_ReadBlocks+0x20c>)
        hsd->State= HAL_SD_STATE_READY;
 8009184:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009186:	6399      	str	r1, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800918a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800918e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->Context = SD_CONTEXT_NONE;
 8009190:	2300      	movs	r3, #0
        hsd->State= HAL_SD_STATE_READY;
 8009192:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009196:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8009198:	e765      	b.n	8009066 <HAL_SD_ReadBlocks+0xd6>
 800919a:	bf00      	nop
 800919c:	004005ff 	.word	0x004005ff

080091a0 <HAL_SD_WriteBlocks>:
{
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	460d      	mov	r5, r1
 80091a6:	b089      	sub	sp, #36	; 0x24
 80091a8:	4604      	mov	r4, r0
 80091aa:	4692      	mov	sl, r2
 80091ac:	461f      	mov	r7, r3
 80091ae:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80091b2:	f7fb f96b 	bl	800448c <HAL_GetTick>
  if(NULL == pData)
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	d063      	beq.n	8009282 <HAL_SD_WriteBlocks+0xe2>
  if(hsd->State == HAL_SD_STATE_READY)
 80091ba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80091be:	2b01      	cmp	r3, #1
 80091c0:	fa5f f983 	uxtb.w	r9, r3
 80091c4:	d14d      	bne.n	8009262 <HAL_SD_WriteBlocks+0xc2>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091c6:	eb0a 0307 	add.w	r3, sl, r7
 80091ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091cc:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091ce:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091d0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091d2:	d860      	bhi.n	8009296 <HAL_SD_WriteBlocks+0xf6>
    hsd->State = HAL_SD_STATE_BUSY;
 80091d4:	2303      	movs	r3, #3
 80091d6:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80091d8:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80091da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091de:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80091e0:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091e2:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091e4:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80091e6:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 80091f2:	bf18      	it	ne
 80091f4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091f8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80091fa:	027b      	lsls	r3, r7, #9
 80091fc:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80091fe:	2390      	movs	r3, #144	; 0x90
 8009200:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009202:	2301      	movs	r3, #1
 8009204:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009206:	f002 f81f 	bl	800b248 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800920a:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800920c:	4651      	mov	r1, sl
    if(NumberOfBlocks > 1U)
 800920e:	d932      	bls.n	8009276 <HAL_SD_WriteBlocks+0xd6>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009210:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009212:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009214:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009216:	f002 fad5 	bl	800b7c4 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800921a:	2800      	cmp	r0, #0
 800921c:	d143      	bne.n	80092a6 <HAL_SD_WriteBlocks+0x106>
    dataremaining = config.DataLength;
 800921e:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009222:	e004      	b.n	800922e <HAL_SD_WriteBlocks+0x8e>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009224:	f7fb f932 	bl	800448c <HAL_GetTick>
 8009228:	1b80      	subs	r0, r0, r6
 800922a:	4540      	cmp	r0, r8
 800922c:	d262      	bcs.n	80092f4 <HAL_SD_WriteBlocks+0x154>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800922e:	6820      	ldr	r0, [r4, #0]
 8009230:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009232:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009236:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009238:	d141      	bne.n	80092be <HAL_SD_WriteBlocks+0x11e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800923a:	045a      	lsls	r2, r3, #17
 800923c:	d5f2      	bpl.n	8009224 <HAL_SD_WriteBlocks+0x84>
 800923e:	f1bb 0f00 	cmp.w	fp, #0
 8009242:	d0ef      	beq.n	8009224 <HAL_SD_WriteBlocks+0x84>
 8009244:	f105 0a20 	add.w	sl, r5, #32
 8009248:	e000      	b.n	800924c <HAL_SD_WriteBlocks+0xac>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800924a:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800924c:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009250:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009252:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009254:	f001 ffe4 	bl	800b220 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009258:	4555      	cmp	r5, sl
 800925a:	d1f6      	bne.n	800924a <HAL_SD_WriteBlocks+0xaa>
          dataremaining--;
 800925c:	f1ab 0b20 	sub.w	fp, fp, #32
 8009260:	e7e0      	b.n	8009224 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8009264:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800926c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800926e:	4648      	mov	r0, r9
 8009270:	b009      	add	sp, #36	; 0x24
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009276:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009278:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800927a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800927c:	f002 f9f8 	bl	800b670 <SDMMC_CmdWriteSingleBlock>
 8009280:	e7cb      	b.n	800921a <HAL_SD_WriteBlocks+0x7a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8009284:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009288:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800928c:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800928e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8009290:	b009      	add	sp, #36	; 0x24
 8009292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8009298:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800929a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800929e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80092a0:	b009      	add	sp, #36	; 0x24
 80092a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	4a2d      	ldr	r2, [pc, #180]	; (8009360 <HAL_SD_WriteBlocks+0x1c0>)
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80092ac:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80092ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092b0:	4303      	orrs	r3, r0
 80092b2:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Context = SD_CONTEXT_NONE;
 80092b4:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 80092b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80092ba:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80092bc:	e7d7      	b.n	800926e <HAL_SD_WriteBlocks+0xce>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80092be:	05db      	lsls	r3, r3, #23
 80092c0:	d501      	bpl.n	80092c6 <HAL_SD_WriteBlocks+0x126>
 80092c2:	2f01      	cmp	r7, #1
 80092c4:	d823      	bhi.n	800930e <HAL_SD_WriteBlocks+0x16e>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092c8:	f013 0308 	ands.w	r3, r3, #8
 80092cc:	d133      	bne.n	8009336 <HAL_SD_WriteBlocks+0x196>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80092d0:	f012 0202 	ands.w	r2, r2, #2
 80092d4:	d124      	bne.n	8009320 <HAL_SD_WriteBlocks+0x180>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80092d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092d8:	f013 0310 	ands.w	r3, r3, #16
 80092dc:	d037      	beq.n	800934e <HAL_SD_WriteBlocks+0x1ae>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092de:	4b20      	ldr	r3, [pc, #128]	; (8009360 <HAL_SD_WriteBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 80092e0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092e2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80092e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092e6:	f043 0310 	orr.w	r3, r3, #16
 80092ea:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092ec:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092f0:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80092f2:	e7bc      	b.n	800926e <HAL_SD_WriteBlocks+0xce>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f4:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80092f6:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f8:	4819      	ldr	r0, [pc, #100]	; (8009360 <HAL_SD_WriteBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 80092fa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80092fc:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009300:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009302:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009304:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009306:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800930a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800930c:	e7af      	b.n	800926e <HAL_SD_WriteBlocks+0xce>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800930e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009310:	2b03      	cmp	r3, #3
 8009312:	d0d8      	beq.n	80092c6 <HAL_SD_WriteBlocks+0x126>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009314:	f002 fb00 	bl	800b918 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8009318:	2800      	cmp	r0, #0
 800931a:	d1c4      	bne.n	80092a6 <HAL_SD_WriteBlocks+0x106>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800931c:	6820      	ldr	r0, [r4, #0]
 800931e:	e7d2      	b.n	80092c6 <HAL_SD_WriteBlocks+0x126>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009320:	4a0f      	ldr	r2, [pc, #60]	; (8009360 <HAL_SD_WriteBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8009322:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009324:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009326:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009328:	f042 0202 	orr.w	r2, r2, #2
 800932c:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800932e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009332:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009334:	e79b      	b.n	800926e <HAL_SD_WriteBlocks+0xce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <HAL_SD_WriteBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8009338:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800933a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800933c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800933e:	f043 0308 	orr.w	r3, r3, #8
 8009342:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8009344:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009346:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800934a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800934c:	e78f      	b.n	800926e <HAL_SD_WriteBlocks+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800934e:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8009352:	2201      	movs	r2, #1
    return HAL_OK;
 8009354:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009356:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009358:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 800935c:	e787      	b.n	800926e <HAL_SD_WriteBlocks+0xce>
 800935e:	bf00      	nop
 8009360:	004005ff 	.word	0x004005ff

08009364 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009364:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8009366:	4603      	mov	r3, r0
 8009368:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800936a:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800936e:	0f94      	lsrs	r4, r2, #30
 8009370:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009372:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009376:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009378:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800937c:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800937e:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009380:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009384:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009386:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009388:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800938a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800938c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800938e:	0d14      	lsrs	r4, r2, #20
 8009390:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009392:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8009396:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009398:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800939c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800939e:	f3c2 3480 	ubfx	r4, r2, #14, #1
 80093a2:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093a4:	f3c2 3440 	ubfx	r4, r2, #13, #1
 80093a8:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093aa:	f3c2 3400 	ubfx	r4, r2, #12, #1
 80093ae:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093b0:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80093b2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d16f      	bne.n	8009498 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093b8:	f640 74fc 	movw	r4, #4092	; 0xffc
 80093bc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80093be:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093c2:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093c6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80093ca:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093cc:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093d0:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093d2:	f3c0 6402 	ubfx	r4, r0, #24, #3
 80093d6:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093d8:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093dc:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093de:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093e2:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093e4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093e6:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093e8:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093ea:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093ec:	f002 0207 	and.w	r2, r2, #7
 80093f0:	3202      	adds	r2, #2
 80093f2:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093f4:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093f6:	655c      	str	r4, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093f8:	f891 c008 	ldrb.w	ip, [r1, #8]
 80093fc:	f00c 0c0f 	and.w	ip, ip, #15
 8009400:	fa02 f20c 	lsl.w	r2, r2, ip
 8009404:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009406:	0a52      	lsrs	r2, r2, #9
 8009408:	fb04 f202 	mul.w	r2, r4, r2
 800940c:	65da      	str	r2, [r3, #92]	; 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800940e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8009412:	f44f 7400 	mov.w	r4, #512	; 0x200
 8009416:	661c      	str	r4, [r3, #96]	; 0x60
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009418:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800941c:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800941e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009422:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 8009424:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009426:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942a:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800942c:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009430:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009432:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009436:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009438:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800943c:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800943e:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009442:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009444:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009448:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800944c:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8009450:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009454:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009458:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800945c:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009460:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009464:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009468:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800946c:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009470:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009474:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009478:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800947c:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009480:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009484:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
 8009488:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800948a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800948e:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8009492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009496:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009498:	2801      	cmp	r0, #1
 800949a:	d10f      	bne.n	80094bc <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800949c:	0412      	lsls	r2, r2, #16
 800949e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = 512U;
 80094a0:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094a4:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80094a8:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80094ac:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094ae:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80094b0:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094b2:	3201      	adds	r2, #1
 80094b4:	0292      	lsls	r2, r2, #10
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80094ba:	e7a8      	b.n	800940e <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094bc:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80094be:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094c0:	4805      	ldr	r0, [pc, #20]	; (80094d8 <HAL_SD_GetCardCSD+0x174>)
 80094c2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 80094c4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094ce:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80094d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	004005ff 	.word	0x004005ff

080094dc <HAL_SD_InitCard>:
{
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094e0:	2300      	movs	r3, #0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094e2:	2600      	movs	r6, #0
 80094e4:	2776      	movs	r7, #118	; 0x76
  status = SDMMC_Init(hsd->Instance, Init);
 80094e6:	aa09      	add	r2, sp, #36	; 0x24
{
 80094e8:	4605      	mov	r5, r0
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094ea:	9309      	str	r3, [sp, #36]	; 0x24
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094ec:	9308      	str	r3, [sp, #32]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094ee:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  status = SDMMC_Init(hsd->Instance, Init);
 80094f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80094f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80094f8:	aa06      	add	r2, sp, #24
 80094fa:	6828      	ldr	r0, [r5, #0]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80094fc:	e9cd 3306 	strd	r3, r3, [sp, #24]
  status = SDMMC_Init(hsd->Instance, Init);
 8009500:	ca0e      	ldmia	r2, {r1, r2, r3}
 8009502:	f001 fe6b 	bl	800b1dc <SDMMC_Init>
  if(status != HAL_OK)
 8009506:	b118      	cbz	r0, 8009510 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8009508:	2601      	movs	r6, #1
}
 800950a:	4630      	mov	r0, r6
 800950c:	b019      	add	sp, #100	; 0x64
 800950e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_DISABLE(hsd);
 8009510:	4604      	mov	r4, r0
 8009512:	6828      	ldr	r0, [r5, #0]
 8009514:	6843      	ldr	r3, [r0, #4]
 8009516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800951a:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800951c:	f001 fe86 	bl	800b22c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8009520:	682a      	ldr	r2, [r5, #0]
  HAL_Delay(2);
 8009522:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8009524:	6853      	ldr	r3, [r2, #4]
 8009526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800952a:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800952c:	f7fa ffb4 	bl	8004498 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009530:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t count = 0U;
 8009532:	9405      	str	r4, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009534:	f002 fb36 	bl	800bba4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009538:	4604      	mov	r4, r0
 800953a:	b960      	cbnz	r0, 8009556 <HAL_SD_InitCard+0x7a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800953c:	6828      	ldr	r0, [r5, #0]
 800953e:	f002 fb5b 	bl	800bbf8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009542:	b988      	cbnz	r0, 8009568 <HAL_SD_InitCard+0x8c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009544:	2301      	movs	r3, #1
 8009546:	64ab      	str	r3, [r5, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009548:	2100      	movs	r1, #0
 800954a:	6828      	ldr	r0, [r5, #0]
 800954c:	f002 fb92 	bl	800bc74 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009550:	b1a0      	cbz	r0, 800957c <HAL_SD_InitCard+0xa0>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009552:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8009556:	2601      	movs	r6, #1
 8009558:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
}
 800955c:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800955e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009560:	4323      	orrs	r3, r4
 8009562:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8009564:	b019      	add	sp, #100	; 0x64
 8009566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009568:	6828      	ldr	r0, [r5, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800956a:	64ac      	str	r4, [r5, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800956c:	f002 fb1a 	bl	800bba4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009570:	2800      	cmp	r0, #0
 8009572:	f040 80c6 	bne.w	8009702 <HAL_SD_InitCard+0x226>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009576:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009578:	2b01      	cmp	r3, #1
 800957a:	d0e5      	beq.n	8009548 <HAL_SD_InitCard+0x6c>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800957c:	9b05      	ldr	r3, [sp, #20]
 800957e:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8009582:	42b3      	cmp	r3, r6
 8009584:	d81c      	bhi.n	80095c0 <HAL_SD_InitCard+0xe4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009586:	4f61      	ldr	r7, [pc, #388]	; (800970c <HAL_SD_InitCard+0x230>)
 8009588:	e011      	b.n	80095ae <HAL_SD_InitCard+0xd2>
 800958a:	6828      	ldr	r0, [r5, #0]
 800958c:	f002 fc1c 	bl	800bdc8 <SDMMC_CmdAppOperCommand>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009590:	4621      	mov	r1, r4
    if(errorstate != HAL_SD_ERROR_NONE)
 8009592:	2800      	cmp	r0, #0
 8009594:	d1dd      	bne.n	8009552 <HAL_SD_InitCard+0x76>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009596:	6828      	ldr	r0, [r5, #0]
 8009598:	f001 fe52 	bl	800b240 <SDMMC_GetResponse>
    count++;
 800959c:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800959e:	1e04      	subs	r4, r0, #0
    count++;
 80095a0:	f103 0301 	add.w	r3, r3, #1
 80095a4:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095a6:	9b05      	ldr	r3, [sp, #20]
 80095a8:	db0a      	blt.n	80095c0 <HAL_SD_InitCard+0xe4>
 80095aa:	42b3      	cmp	r3, r6
 80095ac:	d808      	bhi.n	80095c0 <HAL_SD_InitCard+0xe4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095ae:	2100      	movs	r1, #0
 80095b0:	6828      	ldr	r0, [r5, #0]
 80095b2:	f002 fb5f 	bl	800bc74 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095b6:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 80095b8:	4604      	mov	r4, r0
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0e5      	beq.n	800958a <HAL_SD_InitCard+0xae>
 80095be:	e7ca      	b.n	8009556 <HAL_SD_InitCard+0x7a>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80095c0:	9a05      	ldr	r2, [sp, #20]
 80095c2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80095c6:	429a      	cmp	r2, r3
 80095c8:	f200 809d 	bhi.w	8009706 <HAL_SD_InitCard+0x22a>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80095cc:	f3c4 7480 	ubfx	r4, r4, #30, #1
  uint16_t sd_rca = 1U;
 80095d0:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095d2:	6828      	ldr	r0, [r5, #0]
 80095d4:	646c      	str	r4, [r5, #68]	; 0x44
  uint16_t sd_rca = 1U;
 80095d6:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095da:	f001 fe2d 	bl	800b238 <SDMMC_GetPowerState>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f000 8089 	beq.w	80096f6 <HAL_SD_InitCard+0x21a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80095e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d132      	bne.n	8009650 <HAL_SD_InitCard+0x174>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80095ea:	2104      	movs	r1, #4
 80095ec:	6828      	ldr	r0, [r5, #0]
 80095ee:	f001 fe27 	bl	800b240 <SDMMC_GetResponse>
 80095f2:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095f4:	a90d      	add	r1, sp, #52	; 0x34
 80095f6:	4628      	mov	r0, r5
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80095f8:	0d1b      	lsrs	r3, r3, #20
 80095fa:	64eb      	str	r3, [r5, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095fc:	f7ff feb2 	bl	8009364 <HAL_SD_GetCardCSD>
 8009600:	4606      	mov	r6, r0
 8009602:	2800      	cmp	r0, #0
 8009604:	d17a      	bne.n	80096fc <HAL_SD_InitCard+0x220>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009606:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009608:	4603      	mov	r3, r0
 800960a:	6828      	ldr	r0, [r5, #0]
 800960c:	0412      	lsls	r2, r2, #16
 800960e:	f002 fa27 	bl	800ba60 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009612:	bb08      	cbnz	r0, 8009658 <HAL_SD_InitCard+0x17c>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009614:	462a      	mov	r2, r5
 8009616:	1d2b      	adds	r3, r5, #4
 8009618:	f852 4b10 	ldr.w	r4, [r2], #16
 800961c:	ca07      	ldmia	r2, {r0, r1, r2}
 800961e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009622:	4620      	mov	r0, r4
 8009624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009626:	f001 fdd9 	bl	800b1dc <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800962a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800962e:	6828      	ldr	r0, [r5, #0]
 8009630:	f001 fe20 	bl	800b274 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009634:	2800      	cmp	r0, #0
 8009636:	f43f af68 	beq.w	800950a <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800963a:	682a      	ldr	r2, [r5, #0]
    hsd->State = HAL_SD_STATE_READY;
 800963c:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800963e:	4934      	ldr	r1, [pc, #208]	; (8009710 <HAL_SD_InitCard+0x234>)
    return HAL_ERROR;
 8009640:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009642:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009644:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8009646:	4310      	orrs	r0, r2
 8009648:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800964a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 800964e:	e75c      	b.n	800950a <HAL_SD_InitCard+0x2e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009650:	6828      	ldr	r0, [r5, #0]
 8009652:	f002 fd49 	bl	800c0e8 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009656:	b140      	cbz	r0, 800966a <HAL_SD_InitCard+0x18e>
    hsd->State = HAL_SD_STATE_READY;
 8009658:	2601      	movs	r6, #1
 800965a:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800965e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009660:	4303      	orrs	r3, r0
}
 8009662:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8009664:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8009666:	b019      	add	sp, #100	; 0x64
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800966a:	4601      	mov	r1, r0
 800966c:	6828      	ldr	r0, [r5, #0]
 800966e:	f001 fde7 	bl	800b240 <SDMMC_GetResponse>
 8009672:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009674:	2104      	movs	r1, #4
 8009676:	6828      	ldr	r0, [r5, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009678:	676b      	str	r3, [r5, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800967a:	f001 fde1 	bl	800b240 <SDMMC_GetResponse>
 800967e:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009680:	2108      	movs	r1, #8
 8009682:	6828      	ldr	r0, [r5, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009684:	67ab      	str	r3, [r5, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009686:	f001 fddb 	bl	800b240 <SDMMC_GetResponse>
 800968a:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800968c:	210c      	movs	r1, #12
 800968e:	6828      	ldr	r0, [r5, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009690:	67eb      	str	r3, [r5, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009692:	f001 fdd5 	bl	800b240 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009696:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009698:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 800969c:	2b03      	cmp	r3, #3
 800969e:	d0a4      	beq.n	80095ea <HAL_SD_InitCard+0x10e>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096a0:	f10d 0112 	add.w	r1, sp, #18
 80096a4:	6828      	ldr	r0, [r5, #0]
 80096a6:	f002 fd99 	bl	800c1dc <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d1d4      	bne.n	8009658 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80096ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d09a      	beq.n	80095ea <HAL_SD_InitCard+0x10e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80096b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096b8:	6828      	ldr	r0, [r5, #0]
 80096ba:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 80096bc:	652b      	str	r3, [r5, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096be:	f002 fd4f 	bl	800c160 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1c8      	bne.n	8009658 <HAL_SD_InitCard+0x17c>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096c6:	4601      	mov	r1, r0
 80096c8:	6828      	ldr	r0, [r5, #0]
 80096ca:	f001 fdb9 	bl	800b240 <SDMMC_GetResponse>
 80096ce:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096d0:	2104      	movs	r1, #4
 80096d2:	6828      	ldr	r0, [r5, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096d4:	666b      	str	r3, [r5, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096d6:	f001 fdb3 	bl	800b240 <SDMMC_GetResponse>
 80096da:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096dc:	2108      	movs	r1, #8
 80096de:	6828      	ldr	r0, [r5, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096e0:	66ab      	str	r3, [r5, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096e2:	f001 fdad 	bl	800b240 <SDMMC_GetResponse>
 80096e6:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096e8:	210c      	movs	r1, #12
 80096ea:	6828      	ldr	r0, [r5, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096ec:	66eb      	str	r3, [r5, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096ee:	f001 fda7 	bl	800b240 <SDMMC_GetResponse>
 80096f2:	6728      	str	r0, [r5, #112]	; 0x70
 80096f4:	e779      	b.n	80095ea <HAL_SD_InitCard+0x10e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096f6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80096fa:	e7ad      	b.n	8009658 <HAL_SD_InitCard+0x17c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009700:	e7aa      	b.n	8009658 <HAL_SD_InitCard+0x17c>
 8009702:	4604      	mov	r4, r0
 8009704:	e727      	b.n	8009556 <HAL_SD_InitCard+0x7a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009706:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 800970a:	e724      	b.n	8009556 <HAL_SD_InitCard+0x7a>
 800970c:	c1100000 	.word	0xc1100000
 8009710:	004005ff 	.word	0x004005ff

08009714 <HAL_SD_Init>:
  if(hsd == NULL)
 8009714:	b1c8      	cbz	r0, 800974a <HAL_SD_Init+0x36>
{
 8009716:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8009718:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800971c:	4604      	mov	r4, r0
 800971e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009722:	b173      	cbz	r3, 8009742 <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 8009724:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009726:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8009728:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800972c:	f7ff fed6 	bl	80094dc <HAL_SD_InitCard>
 8009730:	b928      	cbnz	r0, 800973e <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 8009732:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009734:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8009736:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8009738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800973c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800973e:	2001      	movs	r0, #1
}
 8009740:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009742:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8009744:	f7fa fa66 	bl	8003c14 <HAL_SD_MspInit>
 8009748:	e7ec      	b.n	8009724 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800974a:	2001      	movs	r0, #1
}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop

08009750 <HAL_SD_GetCardInfo>:
{
 8009750:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009752:	e9d0 e311 	ldrd	lr, r3, [r0, #68]	; 0x44
 8009756:	e9d0 7613 	ldrd	r7, r6, [r0, #76]	; 0x4c
 800975a:	e9d0 5415 	ldrd	r5, r4, [r0, #84]	; 0x54
 800975e:	e9d0 2017 	ldrd	r2, r0, [r0, #92]	; 0x5c
 8009762:	e9c1 e300 	strd	lr, r3, [r1]
 8009766:	e9c1 2006 	strd	r2, r0, [r1, #24]
 800976a:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 800976e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009770:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 8009774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009776:	bf00      	nop

08009778 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8009778:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800977a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800977c:	4293      	cmp	r3, r2
{
 800977e:	b570      	push	{r4, r5, r6, lr}
 8009780:	4604      	mov	r4, r0
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	460e      	mov	r6, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009786:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800978a:	d024      	beq.n	80097d6 <HAL_SD_ConfigWideBusOperation+0x5e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800978c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009790:	d021      	beq.n	80097d6 <HAL_SD_ConfigWideBusOperation+0x5e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009792:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009796:	d05d      	beq.n	8009854 <HAL_SD_ConfigWideBusOperation+0xdc>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009798:	2900      	cmp	r1, #0
 800979a:	d03c      	beq.n	8009816 <HAL_SD_ConfigWideBusOperation+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800979c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800979e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097a2:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80097a6:	b9ed      	cbnz	r5, 80097e4 <HAL_SD_ConfigWideBusOperation+0x6c>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80097a8:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 80097aa:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80097ac:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80097b2:	68e3      	ldr	r3, [r4, #12]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80097b4:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80097b8:	9306      	str	r3, [sp, #24]
    (void)SDMMC_Init(hsd->Instance, Init);
 80097ba:	ab0a      	add	r3, sp, #40	; 0x28
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80097bc:	e9cd 1208 	strd	r1, r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80097c0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80097c4:	ab04      	add	r3, sp, #16
 80097c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80097ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	f001 fd05 	bl	800b1dc <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	e00d      	b.n	80097f2 <HAL_SD_ConfigWideBusOperation+0x7a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097dc:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	d0e1      	beq.n	80097a8 <HAL_SD_ConfigWideBusOperation+0x30>
    hsd->State = HAL_SD_STATE_READY;
 80097e4:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097e6:	6820      	ldr	r0, [r4, #0]
 80097e8:	4a2d      	ldr	r2, [pc, #180]	; (80098a0 <HAL_SD_ConfigWideBusOperation+0x128>)
    status = HAL_ERROR;
 80097ea:	461d      	mov	r5, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ec:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80097f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80097f6:	f001 fd3d 	bl	800b274 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80097fa:	b130      	cbz	r0, 800980a <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097fc:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80097fe:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009800:	4a27      	ldr	r2, [pc, #156]	; (80098a0 <HAL_SD_ConfigWideBusOperation+0x128>)
 8009802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009806:	4303      	orrs	r3, r0
 8009808:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800980a:	2301      	movs	r3, #1
}
 800980c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800980e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009812:	b00a      	add	sp, #40	; 0x28
 8009814:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2U] = {0U, 0U};
 8009816:	2200      	movs	r2, #0
 8009818:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800981a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 800981c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009820:	f001 fd0e 	bl	800b240 <SDMMC_GetResponse>
 8009824:	0182      	lsls	r2, r0, #6
 8009826:	d434      	bmi.n	8009892 <HAL_SD_ConfigWideBusOperation+0x11a>
  errorstate = SD_FindSCR(hsd, scr);
 8009828:	a904      	add	r1, sp, #16
 800982a:	4620      	mov	r0, r4
 800982c:	f7ff fb42 	bl	8008eb4 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009830:	b960      	cbnz	r0, 800984c <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009832:	9b05      	ldr	r3, [sp, #20]
 8009834:	03db      	lsls	r3, r3, #15
 8009836:	d52f      	bpl.n	8009898 <HAL_SD_ConfigWideBusOperation+0x120>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009838:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800983a:	6820      	ldr	r0, [r4, #0]
 800983c:	0409      	lsls	r1, r1, #16
 800983e:	f002 fa19 	bl	800bc74 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009842:	b918      	cbnz	r0, 800984c <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009844:	4601      	mov	r1, r0
 8009846:	6820      	ldr	r0, [r4, #0]
 8009848:	f002 fb00 	bl	800be4c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800984c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800984e:	4303      	orrs	r3, r0
 8009850:	63a3      	str	r3, [r4, #56]	; 0x38
 8009852:	e7c4      	b.n	80097de <HAL_SD_ConfigWideBusOperation+0x66>
  uint32_t scr[2U] = {0U, 0U};
 8009854:	2200      	movs	r2, #0
 8009856:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009858:	2100      	movs	r1, #0
 800985a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 800985c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009860:	f001 fcee 	bl	800b240 <SDMMC_GetResponse>
 8009864:	0180      	lsls	r0, r0, #6
 8009866:	d414      	bmi.n	8009892 <HAL_SD_ConfigWideBusOperation+0x11a>
  errorstate = SD_FindSCR(hsd, scr);
 8009868:	a904      	add	r1, sp, #16
 800986a:	4620      	mov	r0, r4
 800986c:	f7ff fb22 	bl	8008eb4 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009870:	2800      	cmp	r0, #0
 8009872:	d1eb      	bne.n	800984c <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009874:	9b05      	ldr	r3, [sp, #20]
 8009876:	0359      	lsls	r1, r3, #13
 8009878:	d50e      	bpl.n	8009898 <HAL_SD_ConfigWideBusOperation+0x120>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800987a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800987c:	6820      	ldr	r0, [r4, #0]
 800987e:	0409      	lsls	r1, r1, #16
 8009880:	f002 f9f8 	bl	800bc74 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009884:	2800      	cmp	r0, #0
 8009886:	d1e1      	bne.n	800984c <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009888:	2102      	movs	r1, #2
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	f002 fade 	bl	800be4c <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009890:	e7dc      	b.n	800984c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009892:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009896:	e7d9      	b.n	800984c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009898:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800989c:	e7d6      	b.n	800984c <HAL_SD_ConfigWideBusOperation+0xd4>
 800989e:	bf00      	nop
 80098a0:	004005ff 	.word	0x004005ff

080098a4 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098a4:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80098a6:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098a8:	0409      	lsls	r1, r1, #16
{
 80098aa:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f002 fcf3 	bl	800c298 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80098b2:	4601      	mov	r1, r0
 80098b4:	b120      	cbz	r0, 80098c0 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 80098b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098b8:	2000      	movs	r0, #0
 80098ba:	430b      	orrs	r3, r1
 80098bc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80098be:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	f001 fcbd 	bl	800b240 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80098c6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80098ca:	bd10      	pop	{r4, pc}

080098cc <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80098cc:	b1f0      	cbz	r0, 800990c <HAL_SDRAM_Init+0x40>
{
 80098ce:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80098d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80098d4:	4604      	mov	r4, r0
 80098d6:	460d      	mov	r5, r1
 80098d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80098dc:	b18b      	cbz	r3, 8009902 <HAL_SDRAM_Init+0x36>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80098de:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80098e0:	2302      	movs	r3, #2
 80098e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80098e6:	f851 0b04 	ldr.w	r0, [r1], #4
 80098ea:	f001 fb0f 	bl	800af0c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80098ee:	6862      	ldr	r2, [r4, #4]
 80098f0:	4629      	mov	r1, r5
 80098f2:	6820      	ldr	r0, [r4, #0]
 80098f4:	f001 fb48 	bl	800af88 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80098f8:	2301      	movs	r3, #1

  return HAL_OK;
 80098fa:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80098fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009900:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009902:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009906:	f7fa fc05 	bl	8004114 <HAL_SDRAM_MspInit>
 800990a:	e7e8      	b.n	80098de <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800990c:	2001      	movs	r0, #1
}
 800990e:	4770      	bx	lr

08009910 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009910:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009912:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009916:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009918:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800991a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800991c:	d004      	beq.n	8009928 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800991e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 8009922:	2e01      	cmp	r6, #1
 8009924:	d001      	beq.n	800992a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8009926:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009928:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800992a:	2302      	movs	r3, #2
 800992c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800992e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009930:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009934:	f001 fb76 	bl	800b024 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d003      	beq.n	8009946 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800993e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009940:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8009944:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009946:	2305      	movs	r3, #5
  return HAL_OK;
 8009948:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800994a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800994e:	bd70      	pop	{r4, r5, r6, pc}

08009950 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009950:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009952:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009956:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009958:	2b02      	cmp	r3, #2
 800995a:	b2d8      	uxtb	r0, r3
 800995c:	d005      	beq.n	800996a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800995e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009962:	2b01      	cmp	r3, #1
 8009964:	b2dd      	uxtb	r5, r3
 8009966:	d001      	beq.n	800996c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8009968:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800996a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800996c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800996e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009970:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009974:	f001 fb6e 	bl	800b054 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8009978:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800997a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800997e:	bd38      	pop	{r3, r4, r5, pc}

08009980 <HAL_SPDIFRX_Init>:
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009980:	b390      	cbz	r0, 80099e8 <HAL_SPDIFRX_Init+0x68>
{
 8009982:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009984:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009988:	4604      	mov	r4, r0
 800998a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800998e:	b333      	cbz	r3, 80099de <HAL_SPDIFRX_Init+0x5e>
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009990:	69a3      	ldr	r3, [r4, #24]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009992:	2502      	movs	r5, #2
             hspdif->Init.InputSelection |
             hspdif->Init.Retries |
 8009994:	68e0      	ldr	r0, [r4, #12]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009996:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
            );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800999a:	2500      	movs	r5, #0
             hspdif->Init.InputSelection |
 800999c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80099a0:	4313      	orrs	r3, r2
  __HAL_SPDIFRX_IDLE(hspdif);
 80099a2:	6822      	ldr	r2, [r4, #0]
             hspdif->Init.InputSelection |
 80099a4:	430b      	orrs	r3, r1
             hspdif->Init.WaitForActivity |
 80099a6:	6921      	ldr	r1, [r4, #16]
             hspdif->Init.Retries |
 80099a8:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 80099aa:	6960      	ldr	r0, [r4, #20]
             hspdif->Init.WaitForActivity |
 80099ac:	430b      	orrs	r3, r1
             hspdif->Init.DataFormat |
 80099ae:	69e1      	ldr	r1, [r4, #28]
             hspdif->Init.ChannelSelection |
 80099b0:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 80099b2:	430b      	orrs	r3, r1
             hspdif->Init.ChannelStatusMask |
 80099b4:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
             hspdif->Init.PreambleTypeMask |
 80099b8:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 80099ba:	430b      	orrs	r3, r1
             hspdif->Init.ValidityBitMask |
 80099bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80099be:	430b      	orrs	r3, r1
  __HAL_SPDIFRX_IDLE(hspdif);
 80099c0:	6811      	ldr	r1, [r2, #0]
 80099c2:	f021 0103 	bic.w	r1, r1, #3
 80099c6:	6011      	str	r1, [r2, #0]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80099c8:	4908      	ldr	r1, [pc, #32]	; (80099ec <HAL_SPDIFRX_Init+0x6c>)
  tmpreg = hspdif->Instance->CR;
 80099ca:	6810      	ldr	r0, [r2, #0]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80099cc:	4001      	ands	r1, r0

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;

  return HAL_OK;
 80099ce:	4628      	mov	r0, r5
  tmpreg |= (hspdif->Init.StereoMode |
 80099d0:	430b      	orrs	r3, r1
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80099d2:	2101      	movs	r1, #1
  hspdif->Instance->CR = tmpreg;
 80099d4:	6013      	str	r3, [r2, #0]
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80099d6:	64a5      	str	r5, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80099d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
}
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
    hspdif->Lock = HAL_UNLOCKED;
 80099de:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    HAL_SPDIFRX_MspInit(hspdif);
 80099e2:	f7fa f965 	bl	8003cb0 <HAL_SPDIFRX_MspInit>
 80099e6:	e7d3      	b.n	8009990 <HAL_SPDIFRX_Init+0x10>
    return HAL_ERROR;
 80099e8:	2001      	movs	r0, #1
}
 80099ea:	4770      	bx	lr
 80099ec:	fff88407 	.word	0xfff88407

080099f0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f000 809e 	beq.w	8009b32 <HAL_TIM_Base_Init+0x142>
{
 80099f6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80099fc:	4604      	mov	r4, r0
 80099fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d07c      	beq.n	8009b00 <HAL_TIM_Base_Init+0x110>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a06:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009a08:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a0a:	494c      	ldr	r1, [pc, #304]	; (8009b3c <HAL_TIM_Base_Init+0x14c>)
 8009a0c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a14:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009a18:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a1a:	fab1 f181 	clz	r1, r1
 8009a1e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8009a22:	d036      	beq.n	8009a92 <HAL_TIM_Base_Init+0xa2>
 8009a24:	2900      	cmp	r1, #0
 8009a26:	d134      	bne.n	8009a92 <HAL_TIM_Base_Init+0xa2>
 8009a28:	4d45      	ldr	r5, [pc, #276]	; (8009b40 <HAL_TIM_Base_Init+0x150>)
 8009a2a:	4846      	ldr	r0, [pc, #280]	; (8009b44 <HAL_TIM_Base_Init+0x154>)
 8009a2c:	4282      	cmp	r2, r0
 8009a2e:	bf18      	it	ne
 8009a30:	42aa      	cmpne	r2, r5
 8009a32:	d06a      	beq.n	8009b0a <HAL_TIM_Base_Init+0x11a>
 8009a34:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8009a38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009a3c:	1b55      	subs	r5, r2, r5
 8009a3e:	4282      	cmp	r2, r0
 8009a40:	fab5 f585 	clz	r5, r5
 8009a44:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009a48:	d069      	beq.n	8009b1e <HAL_TIM_Base_Init+0x12e>
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	d167      	bne.n	8009b1e <HAL_TIM_Base_Init+0x12e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a4e:	4d3e      	ldr	r5, [pc, #248]	; (8009b48 <HAL_TIM_Base_Init+0x158>)
 8009a50:	483e      	ldr	r0, [pc, #248]	; (8009b4c <HAL_TIM_Base_Init+0x15c>)
 8009a52:	42aa      	cmp	r2, r5
 8009a54:	bf18      	it	ne
 8009a56:	4282      	cmpne	r2, r0
 8009a58:	bf0c      	ite	eq
 8009a5a:	2501      	moveq	r5, #1
 8009a5c:	2500      	movne	r5, #0
 8009a5e:	d06a      	beq.n	8009b36 <HAL_TIM_Base_Init+0x146>
 8009a60:	4e3b      	ldr	r6, [pc, #236]	; (8009b50 <HAL_TIM_Base_Init+0x160>)
 8009a62:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8009a66:	4282      	cmp	r2, r0
 8009a68:	bf18      	it	ne
 8009a6a:	42b2      	cmpne	r2, r6
 8009a6c:	d01a      	beq.n	8009aa4 <HAL_TIM_Base_Init+0xb4>
 8009a6e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009a72:	4282      	cmp	r2, r0
 8009a74:	d05f      	beq.n	8009b36 <HAL_TIM_Base_Init+0x146>
 8009a76:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009a7a:	4282      	cmp	r2, r0
 8009a7c:	d05b      	beq.n	8009b36 <HAL_TIM_Base_Init+0x146>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a7e:	69a0      	ldr	r0, [r4, #24]
 8009a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a84:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a86:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009a88:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a8a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a8c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009a8e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a90:	e017      	b.n	8009ac2 <HAL_TIM_Base_Init+0xd2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a92:	4d30      	ldr	r5, [pc, #192]	; (8009b54 <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009a98:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a9a:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8009a9c:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a9e:	fab5 f585 	clz	r5, r5
 8009aa2:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aa4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aaa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009aac:	69a0      	ldr	r0, [r4, #24]
 8009aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009ab4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ab6:	68e3      	ldr	r3, [r4, #12]
 8009ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009aba:	6863      	ldr	r3, [r4, #4]
 8009abc:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009abe:	b9e1      	cbnz	r1, 8009afa <HAL_TIM_Base_Init+0x10a>
 8009ac0:	b9dd      	cbnz	r5, 8009afa <HAL_TIM_Base_Init+0x10a>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ac2:	2301      	movs	r3, #1
  return HAL_OK;
 8009ac4:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009ac6:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ac8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009acc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009ad0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009ad4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009ad8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ae8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009af0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009af4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009af8:	bd70      	pop	{r4, r5, r6, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	6313      	str	r3, [r2, #48]	; 0x30
 8009afe:	e7e0      	b.n	8009ac2 <HAL_TIM_Base_Init+0xd2>
    htim->Lock = HAL_UNLOCKED;
 8009b00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009b04:	f7fa f92c 	bl	8003d60 <HAL_TIM_Base_MspInit>
 8009b08:	e77d      	b.n	8009a06 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b0a:	4d12      	ldr	r5, [pc, #72]	; (8009b54 <HAL_TIM_Base_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009b10:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b12:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8009b14:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b16:	fab5 f585 	clz	r5, r5
 8009b1a:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b1c:	e7c2      	b.n	8009aa4 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8009b1e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009b24:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b26:	480c      	ldr	r0, [pc, #48]	; (8009b58 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b28:	4282      	cmp	r2, r0
 8009b2a:	d0bb      	beq.n	8009aa4 <HAL_TIM_Base_Init+0xb4>
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	d1b9      	bne.n	8009aa4 <HAL_TIM_Base_Init+0xb4>
 8009b30:	e78d      	b.n	8009a4e <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 8009b32:	2001      	movs	r0, #1
}
 8009b34:	4770      	bx	lr
 8009b36:	2500      	movs	r5, #0
 8009b38:	e7b4      	b.n	8009aa4 <HAL_TIM_Base_Init+0xb4>
 8009b3a:	bf00      	nop
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40000400 	.word	0x40000400
 8009b44:	40000800 	.word	0x40000800
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014000 	.word	0x40014000
 8009b50:	40014800 	.word	0x40014800
 8009b54:	40010400 	.word	0x40010400
 8009b58:	40000c00 	.word	0x40000c00

08009b5c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009b5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d141      	bne.n	8009be8 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b64:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009b66:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b68:	4b24      	ldr	r3, [pc, #144]	; (8009bfc <HAL_TIM_Base_Start_IT+0xa0>)
 8009b6a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009b6e:	bf18      	it	ne
 8009b70:	429a      	cmpne	r2, r3
{
 8009b72:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b74:	bf0c      	ite	eq
 8009b76:	2301      	moveq	r3, #1
 8009b78:	2300      	movne	r3, #0
 8009b7a:	4d21      	ldr	r5, [pc, #132]	; (8009c00 <HAL_TIM_Base_Start_IT+0xa4>)
 8009b7c:	4c21      	ldr	r4, [pc, #132]	; (8009c04 <HAL_TIM_Base_Start_IT+0xa8>)
 8009b7e:	42aa      	cmp	r2, r5
 8009b80:	bf08      	it	eq
 8009b82:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009b86:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b8a:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b8c:	42a2      	cmp	r2, r4
 8009b8e:	bf08      	it	eq
 8009b90:	f043 0301 	orreq.w	r3, r3, #1
 8009b94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b98:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9c:	481a      	ldr	r0, [pc, #104]	; (8009c08 <HAL_TIM_Base_Start_IT+0xac>)
 8009b9e:	42a2      	cmp	r2, r4
 8009ba0:	bf08      	it	eq
 8009ba2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ba6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba8:	4282      	cmp	r2, r0
 8009baa:	bf08      	it	eq
 8009bac:	f043 0301 	orreq.w	r3, r3, #1
 8009bb0:	4916      	ldr	r1, [pc, #88]	; (8009c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8009bb2:	428a      	cmp	r2, r1
 8009bb4:	bf08      	it	eq
 8009bb6:	f043 0301 	orreq.w	r3, r3, #1
 8009bba:	b933      	cbnz	r3, 8009bca <HAL_TIM_Base_Start_IT+0x6e>
 8009bbc:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 8009bc0:	1a10      	subs	r0, r2, r0
 8009bc2:	fab0 f080 	clz	r0, r0
 8009bc6:	0940      	lsrs	r0, r0, #5
 8009bc8:	b198      	cbz	r0, 8009bf2 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bca:	6891      	ldr	r1, [r2, #8]
 8009bcc:	4b10      	ldr	r3, [pc, #64]	; (8009c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8009bce:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd0:	2b06      	cmp	r3, #6
 8009bd2:	d00b      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x90>
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd8:	d008      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 8009bda:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8009bdc:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	6013      	str	r3, [r2, #0]
}
 8009be4:	bc30      	pop	{r4, r5}
 8009be6:	4770      	bx	lr
    return HAL_ERROR;
 8009be8:	2001      	movs	r0, #1
}
 8009bea:	4770      	bx	lr
  return HAL_OK;
 8009bec:	2000      	movs	r0, #0
}
 8009bee:	bc30      	pop	{r4, r5}
 8009bf0:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8009bf2:	6813      	ldr	r3, [r2, #0]
 8009bf4:	f043 0301 	orr.w	r3, r3, #1
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	e7f3      	b.n	8009be4 <HAL_TIM_Base_Start_IT+0x88>
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	40000400 	.word	0x40000400
 8009c04:	40000800 	.word	0x40000800
 8009c08:	40010400 	.word	0x40010400
 8009c0c:	40014000 	.word	0x40014000
 8009c10:	00010007 	.word	0x00010007

08009c14 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009c14:	2800      	cmp	r0, #0
 8009c16:	f000 809e 	beq.w	8009d56 <HAL_TIM_PWM_Init+0x142>
{
 8009c1a:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009c1c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c20:	4604      	mov	r4, r0
 8009c22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d07c      	beq.n	8009d24 <HAL_TIM_PWM_Init+0x110>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c2a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009c2c:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c2e:	494c      	ldr	r1, [pc, #304]	; (8009d60 <HAL_TIM_PWM_Init+0x14c>)
 8009c30:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009c34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c38:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009c3c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c3e:	fab1 f181 	clz	r1, r1
 8009c42:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8009c46:	d036      	beq.n	8009cb6 <HAL_TIM_PWM_Init+0xa2>
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	d134      	bne.n	8009cb6 <HAL_TIM_PWM_Init+0xa2>
 8009c4c:	4d45      	ldr	r5, [pc, #276]	; (8009d64 <HAL_TIM_PWM_Init+0x150>)
 8009c4e:	4846      	ldr	r0, [pc, #280]	; (8009d68 <HAL_TIM_PWM_Init+0x154>)
 8009c50:	4282      	cmp	r2, r0
 8009c52:	bf18      	it	ne
 8009c54:	42aa      	cmpne	r2, r5
 8009c56:	d06a      	beq.n	8009d2e <HAL_TIM_PWM_Init+0x11a>
 8009c58:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8009c5c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009c60:	1b55      	subs	r5, r2, r5
 8009c62:	4282      	cmp	r2, r0
 8009c64:	fab5 f585 	clz	r5, r5
 8009c68:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8009c6c:	d069      	beq.n	8009d42 <HAL_TIM_PWM_Init+0x12e>
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	d167      	bne.n	8009d42 <HAL_TIM_PWM_Init+0x12e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c72:	4d3e      	ldr	r5, [pc, #248]	; (8009d6c <HAL_TIM_PWM_Init+0x158>)
 8009c74:	483e      	ldr	r0, [pc, #248]	; (8009d70 <HAL_TIM_PWM_Init+0x15c>)
 8009c76:	42aa      	cmp	r2, r5
 8009c78:	bf18      	it	ne
 8009c7a:	4282      	cmpne	r2, r0
 8009c7c:	bf0c      	ite	eq
 8009c7e:	2501      	moveq	r5, #1
 8009c80:	2500      	movne	r5, #0
 8009c82:	d06a      	beq.n	8009d5a <HAL_TIM_PWM_Init+0x146>
 8009c84:	4e3b      	ldr	r6, [pc, #236]	; (8009d74 <HAL_TIM_PWM_Init+0x160>)
 8009c86:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8009c8a:	4282      	cmp	r2, r0
 8009c8c:	bf18      	it	ne
 8009c8e:	42b2      	cmpne	r2, r6
 8009c90:	d01a      	beq.n	8009cc8 <HAL_TIM_PWM_Init+0xb4>
 8009c92:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009c96:	4282      	cmp	r2, r0
 8009c98:	d05f      	beq.n	8009d5a <HAL_TIM_PWM_Init+0x146>
 8009c9a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009c9e:	4282      	cmp	r2, r0
 8009ca0:	d05b      	beq.n	8009d5a <HAL_TIM_PWM_Init+0x146>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ca2:	69a0      	ldr	r0, [r4, #24]
 8009ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ca8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009caa:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009cac:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8009cae:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cb0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009cb2:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cb4:	e017      	b.n	8009ce6 <HAL_TIM_PWM_Init+0xd2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cb6:	4d30      	ldr	r5, [pc, #192]	; (8009d78 <HAL_TIM_PWM_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009cbc:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cbe:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8009cc0:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cc2:	fab5 f585 	clz	r5, r5
 8009cc6:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cc8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd0:	69a0      	ldr	r0, [r4, #24]
 8009cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009cd8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cda:	68e3      	ldr	r3, [r4, #12]
 8009cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ce2:	b9e1      	cbnz	r1, 8009d1e <HAL_TIM_PWM_Init+0x10a>
 8009ce4:	b9dd      	cbnz	r5, 8009d1e <HAL_TIM_PWM_Init+0x10a>
  TIMx->EGR = TIM_EGR_UG;
 8009ce6:	2301      	movs	r3, #1
  return HAL_OK;
 8009ce8:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009cea:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009cf4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009cf8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009cfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d10:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009d14:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8009d1e:	6963      	ldr	r3, [r4, #20]
 8009d20:	6313      	str	r3, [r2, #48]	; 0x30
 8009d22:	e7e0      	b.n	8009ce6 <HAL_TIM_PWM_Init+0xd2>
    htim->Lock = HAL_UNLOCKED;
 8009d24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009d28:	f7fa f872 	bl	8003e10 <HAL_TIM_PWM_MspInit>
 8009d2c:	e77d      	b.n	8009c2a <HAL_TIM_PWM_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d2e:	4d12      	ldr	r5, [pc, #72]	; (8009d78 <HAL_TIM_PWM_Init+0x164>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009d34:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d36:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 8009d38:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d3a:	fab5 f585 	clz	r5, r5
 8009d3e:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d40:	e7c2      	b.n	8009cc8 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8009d42:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009d48:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d4a:	480c      	ldr	r0, [pc, #48]	; (8009d7c <HAL_TIM_PWM_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d4c:	4282      	cmp	r2, r0
 8009d4e:	d0bb      	beq.n	8009cc8 <HAL_TIM_PWM_Init+0xb4>
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	d1b9      	bne.n	8009cc8 <HAL_TIM_PWM_Init+0xb4>
 8009d54:	e78d      	b.n	8009c72 <HAL_TIM_PWM_Init+0x5e>
    return HAL_ERROR;
 8009d56:	2001      	movs	r0, #1
}
 8009d58:	4770      	bx	lr
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	e7b4      	b.n	8009cc8 <HAL_TIM_PWM_Init+0xb4>
 8009d5e:	bf00      	nop
 8009d60:	40010000 	.word	0x40010000
 8009d64:	40000400 	.word	0x40000400
 8009d68:	40000800 	.word	0x40000800
 8009d6c:	40014400 	.word	0x40014400
 8009d70:	40014000 	.word	0x40014000
 8009d74:	40014800 	.word	0x40014800
 8009d78:	40010400 	.word	0x40010400
 8009d7c:	40000c00 	.word	0x40000c00

08009d80 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8009d80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	f000 814d 	beq.w	800a024 <HAL_TIM_PWM_ConfigChannel+0x2a4>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4684      	mov	ip, r0
{
 8009d8e:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8009d90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009d94:	2a14      	cmp	r2, #20
 8009d96:	d816      	bhi.n	8009dc6 <HAL_TIM_PWM_ConfigChannel+0x46>
 8009d98:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009d9c:	0015004e 	.word	0x0015004e
 8009da0:	00150015 	.word	0x00150015
 8009da4:	0015007e 	.word	0x0015007e
 8009da8:	00150015 	.word	0x00150015
 8009dac:	001500e4 	.word	0x001500e4
 8009db0:	00150015 	.word	0x00150015
 8009db4:	001500b1 	.word	0x001500b1
 8009db8:	00150015 	.word	0x00150015
 8009dbc:	00150115 	.word	0x00150115
 8009dc0:	00150015 	.word	0x00150015
 8009dc4:	001b      	.short	0x001b
  __HAL_UNLOCK(htim);
 8009dc6:	2300      	movs	r3, #0
  switch (Channel)
 8009dc8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8009dca:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8009dce:	bc70      	pop	{r4, r5, r6}
 8009dd0:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009dd2:	6803      	ldr	r3, [r0, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dd4:	48ab      	ldr	r0, [pc, #684]	; (800a084 <HAL_TIM_PWM_ConfigChannel+0x304>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dd6:	6a1a      	ldr	r2, [r3, #32]
 8009dd8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009ddc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009dde:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009de0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009de2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009de4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009de8:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dea:	680d      	ldr	r5, [r1, #0]
 8009dec:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009df0:	688d      	ldr	r5, [r1, #8]
 8009df2:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	4da4      	ldr	r5, [pc, #656]	; (800a088 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8009df8:	42ab      	cmp	r3, r5
 8009dfa:	f000 8115 	beq.w	800a028 <HAL_TIM_PWM_ConfigChannel+0x2a8>
 8009dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e02:	42ab      	cmp	r3, r5
 8009e04:	f000 8110 	beq.w	800a028 <HAL_TIM_PWM_ConfigChannel+0x2a8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e08:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e0a:	6558      	str	r0, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e0c:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e0e:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 8009e10:	65d8      	str	r0, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2000      	movs	r0, #0

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e14:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e1c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e24:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009e2c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8009e34:	bc70      	pop	{r4, r5, r6}
 8009e36:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e38:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e3a:	4894      	ldr	r0, [pc, #592]	; (800a08c <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e3c:	6a1a      	ldr	r2, [r3, #32]
 8009e3e:	f022 0201 	bic.w	r2, r2, #1
 8009e42:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009e44:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009e46:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8009e48:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8009e4a:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e4e:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8009e50:	680d      	ldr	r5, [r1, #0]
 8009e52:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8009e54:	688d      	ldr	r5, [r1, #8]
 8009e56:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e58:	4d8b      	ldr	r5, [pc, #556]	; (800a088 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8009e5a:	42ab      	cmp	r3, r5
 8009e5c:	f000 80f0 	beq.w	800a040 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8009e60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e64:	42ab      	cmp	r3, r5
 8009e66:	f000 80eb 	beq.w	800a040 <HAL_TIM_PWM_ConfigChannel+0x2c0>
  TIMx->CR2 = tmpcr2;
 8009e6a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009e6c:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8009e6e:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e70:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8009e72:	6358      	str	r0, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8009e74:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8009e76:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	f042 0208 	orr.w	r2, r2, #8
 8009e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e80:	699a      	ldr	r2, [r3, #24]
 8009e82:	f022 0204 	bic.w	r2, r2, #4
 8009e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e88:	699a      	ldr	r2, [r3, #24]
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8009e94:	bc70      	pop	{r4, r5, r6}
 8009e96:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e98:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e9a:	487d      	ldr	r0, [pc, #500]	; (800a090 <HAL_TIM_PWM_ConfigChannel+0x310>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e9c:	6a1a      	ldr	r2, [r3, #32]
 8009e9e:	f022 0210 	bic.w	r2, r2, #16
 8009ea2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009ea4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009ea6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8009ea8:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8009eaa:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eae:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb0:	680d      	ldr	r5, [r1, #0]
 8009eb2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009eb6:	688d      	ldr	r5, [r1, #8]
 8009eb8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ebc:	4d72      	ldr	r5, [pc, #456]	; (800a088 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8009ebe:	42ab      	cmp	r3, r5
 8009ec0:	f000 80d1 	beq.w	800a066 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009ec4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	f000 80cc 	beq.w	800a066 <HAL_TIM_PWM_ConfigChannel+0x2e6>
  TIMx->CR2 = tmpcr2;
 8009ece:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009ed0:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009ed2:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ed4:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8009ed6:	6398      	str	r0, [r3, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8009ed8:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8009eda:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009edc:	699a      	ldr	r2, [r3, #24]
 8009ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ee4:	699a      	ldr	r2, [r3, #24]
 8009ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009ef2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8009efa:	bc70      	pop	{r4, r5, r6}
 8009efc:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009efe:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f00:	4863      	ldr	r0, [pc, #396]	; (800a090 <HAL_TIM_PWM_ConfigChannel+0x310>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f02:	6a1a      	ldr	r2, [r3, #32]
 8009f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f08:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009f0a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009f0c:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8009f0e:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8009f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f14:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f16:	680d      	ldr	r5, [r1, #0]
 8009f18:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f1c:	688d      	ldr	r5, [r1, #8]
 8009f1e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f22:	4d59      	ldr	r5, [pc, #356]	; (800a088 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	f000 8098 	beq.w	800a05a <HAL_TIM_PWM_ConfigChannel+0x2da>
 8009f2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009f2e:	42ab      	cmp	r3, r5
 8009f30:	f000 8093 	beq.w	800a05a <HAL_TIM_PWM_ConfigChannel+0x2da>
  TIMx->CR2 = tmpcr2;
 8009f34:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009f36:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8009f38:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f3a:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8009f3c:	6418      	str	r0, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8009f3e:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8009f40:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f4a:	69da      	ldr	r2, [r3, #28]
 8009f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f52:	69da      	ldr	r2, [r3, #28]
 8009f54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f58:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8009f60:	bc70      	pop	{r4, r5, r6}
 8009f62:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f64:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f66:	4849      	ldr	r0, [pc, #292]	; (800a08c <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f68:	6a1a      	ldr	r2, [r3, #32]
 8009f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f6e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009f70:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009f72:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8009f74:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8009f76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f7a:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8009f7c:	680d      	ldr	r5, [r1, #0]
 8009f7e:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f80:	688d      	ldr	r5, [r1, #8]
 8009f82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f86:	4d40      	ldr	r5, [pc, #256]	; (800a088 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8009f88:	42ab      	cmp	r3, r5
 8009f8a:	f000 8085 	beq.w	800a098 <HAL_TIM_PWM_ConfigChannel+0x318>
 8009f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009f92:	42ab      	cmp	r3, r5
 8009f94:	f000 8080 	beq.w	800a098 <HAL_TIM_PWM_ConfigChannel+0x318>
  TIMx->CR2 = tmpcr2;
 8009f98:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009f9a:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8009f9c:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f9e:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 8009fa0:	63d8      	str	r0, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009fa2:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8009fa4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fa6:	69da      	ldr	r2, [r3, #28]
 8009fa8:	f042 0208 	orr.w	r2, r2, #8
 8009fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fae:	69da      	ldr	r2, [r3, #28]
 8009fb0:	f022 0204 	bic.w	r2, r2, #4
 8009fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8009fc2:	bc70      	pop	{r4, r5, r6}
 8009fc4:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fc6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009fc8:	4832      	ldr	r0, [pc, #200]	; (800a094 <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009fca:	6a1a      	ldr	r2, [r3, #32]
 8009fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009fd0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009fd2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009fd4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009fd6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8009fd8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009fdc:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8009fde:	680d      	ldr	r5, [r1, #0]
 8009fe0:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009fe2:	688d      	ldr	r5, [r1, #8]
 8009fe4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe8:	4d27      	ldr	r5, [pc, #156]	; (800a088 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8009fea:	42ab      	cmp	r3, r5
 8009fec:	d022      	beq.n	800a034 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 8009fee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ff2:	42ab      	cmp	r3, r5
 8009ff4:	d01e      	beq.n	800a034 <HAL_TIM_PWM_ConfigChannel+0x2b4>
  TIMx->CR2 = tmpcr2;
 8009ff6:	605c      	str	r4, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8009ff8:	6558      	str	r0, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8009ffa:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ffc:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 8009ffe:	6598      	str	r0, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 800a000:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800a002:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a006:	f042 0208 	orr.w	r2, r2, #8
 800a00a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a00e:	f022 0204 	bic.w	r2, r2, #4
 800a012:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a016:	430a      	orrs	r2, r1
 800a018:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800a01a:	2300      	movs	r3, #0
 800a01c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 800a020:	bc70      	pop	{r4, r5, r6}
 800a022:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a024:	2002      	movs	r0, #2
}
 800a026:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a028:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a02c:	694d      	ldr	r5, [r1, #20]
 800a02e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800a032:	e6e9      	b.n	8009e08 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a034:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a038:	694d      	ldr	r5, [r1, #20]
 800a03a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800a03e:	e7da      	b.n	8009ff6 <HAL_TIM_PWM_ConfigChannel+0x276>
    tmpccer |= OC_Config->OCNPolarity;
 800a040:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a042:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a046:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800a04a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800a04c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 800a050:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800a054:	4335      	orrs	r5, r6
 800a056:	432c      	orrs	r4, r5
 800a058:	e707      	b.n	8009e6a <HAL_TIM_PWM_ConfigChannel+0xea>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a05a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a05e:	694d      	ldr	r5, [r1, #20]
 800a060:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800a064:	e766      	b.n	8009f34 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a066:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800a068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a06c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a070:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a074:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC2NE;
 800a078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a07c:	4335      	orrs	r5, r6
 800a07e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800a082:	e724      	b.n	8009ece <HAL_TIM_PWM_ConfigChannel+0x14e>
 800a084:	feff8fff 	.word	0xfeff8fff
 800a088:	40010000 	.word	0x40010000
 800a08c:	fffeff8c 	.word	0xfffeff8c
 800a090:	feff8cff 	.word	0xfeff8cff
 800a094:	fffeff8f 	.word	0xfffeff8f
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a098:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a09a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a09e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0a6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ae:	4335      	orrs	r5, r6
 800a0b0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800a0b4:	e770      	b.n	8009f98 <HAL_TIM_PWM_ConfigChannel+0x218>
 800a0b6:	bf00      	nop

0800a0b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a0b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d073      	beq.n	800a1a8 <HAL_TIM_ConfigClockSource+0xf0>
 800a0c0:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c2:	2302      	movs	r3, #2
{
 800a0c4:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800a0c6:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800a0c8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ca:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a0ce:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0d2:	4b50      	ldr	r3, [pc, #320]	; (800a214 <HAL_TIM_ConfigClockSource+0x15c>)
  tmpsmcr = htim->Instance->SMCR;
 800a0d4:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0d6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800a0d8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800a0da:	680b      	ldr	r3, [r1, #0]
 800a0dc:	2b60      	cmp	r3, #96	; 0x60
 800a0de:	d065      	beq.n	800a1ac <HAL_TIM_ConfigClockSource+0xf4>
 800a0e0:	d824      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x74>
 800a0e2:	2b40      	cmp	r3, #64	; 0x40
 800a0e4:	d07c      	beq.n	800a1e0 <HAL_TIM_ConfigClockSource+0x128>
 800a0e6:	d94b      	bls.n	800a180 <HAL_TIM_ConfigClockSource+0xc8>
 800a0e8:	2b50      	cmp	r3, #80	; 0x50
 800a0ea:	d117      	bne.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 800a0ec:	684b      	ldr	r3, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ee:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockFilter);
 800a0f0:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0f2:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0f4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a0f8:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0fa:	6a23      	ldr	r3, [r4, #32]
 800a0fc:	f023 0301 	bic.w	r3, r3, #1
 800a100:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a102:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a104:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a108:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a10c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800a10e:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a110:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a116:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a11a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a11c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a11e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a120:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a124:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a128:	bc30      	pop	{r4, r5}
 800a12a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a12c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a130:	d038      	beq.n	800a1a4 <HAL_TIM_ConfigClockSource+0xec>
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a136:	d110      	bne.n	800a15a <HAL_TIM_ConfigClockSource+0xa2>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a138:	68a0      	ldr	r0, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a13a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800a13e:	432b      	orrs	r3, r5
 800a140:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a142:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800a146:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a148:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a14c:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a14e:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a150:	68a3      	ldr	r3, [r4, #8]
 800a152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a156:	60a3      	str	r3, [r4, #8]
      break;
 800a158:	e7e0      	b.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800a15a:	2b70      	cmp	r3, #112	; 0x70
 800a15c:	d1de      	bne.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 800a15e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a160:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800a164:	432b      	orrs	r3, r5
 800a166:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a168:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800a16c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a16e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a172:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a174:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a176:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a17c:	60a3      	str	r3, [r4, #8]
      break;
 800a17e:	e7cd      	b.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800a180:	2b20      	cmp	r3, #32
 800a182:	d002      	beq.n	800a18a <HAL_TIM_ConfigClockSource+0xd2>
 800a184:	d90a      	bls.n	800a19c <HAL_TIM_ConfigClockSource+0xe4>
 800a186:	2b30      	cmp	r3, #48	; 0x30
 800a188:	d1c8      	bne.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 800a18a:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a18c:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800a18e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a192:	430b      	orrs	r3, r1
 800a194:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800a198:	60a3      	str	r3, [r4, #8]
}
 800a19a:	e7bf      	b.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800a19c:	f033 0110 	bics.w	r1, r3, #16
 800a1a0:	d1bc      	bne.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
 800a1a2:	e7f2      	b.n	800a18a <HAL_TIM_ConfigClockSource+0xd2>
  HAL_StatusTypeDef status = HAL_OK;
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e7b9      	b.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 800a1a8:	2002      	movs	r0, #2
}
 800a1aa:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1ac:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800a1ae:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b0:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 800a1b4:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1b8:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800a1ba:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1bc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1c4:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1c8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 800a1cc:	2000      	movs	r0, #0
  TIMx->CCMR1 = tmpccmr1 ;
 800a1ce:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800a1d0:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800a1d2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1d8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a1dc:	60a3      	str	r3, [r4, #8]
}
 800a1de:	e79d      	b.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 800a1e0:	684b      	ldr	r3, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e2:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockFilter);
 800a1e4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800a1e6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1e8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800a1ec:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ee:	6a23      	ldr	r3, [r4, #32]
 800a1f0:	f023 0301 	bic.w	r3, r3, #1
 800a1f4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1f6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a200:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800a202:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800a204:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a20a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a20e:	60a3      	str	r3, [r4, #8]
}
 800a210:	e784      	b.n	800a11c <HAL_TIM_ConfigClockSource+0x64>
 800a212:	bf00      	nop
 800a214:	fffe0088 	.word	0xfffe0088

0800a218 <HAL_TIM_OC_DelayElapsedCallback>:
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop

0800a21c <HAL_TIM_IC_CaptureCallback>:
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop

0800a224 <HAL_TIM_TriggerCallback>:
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop

0800a228 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a228:	6803      	ldr	r3, [r0, #0]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	0791      	lsls	r1, r2, #30
{
 800a22e:	b510      	push	{r4, lr}
 800a230:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a232:	d502      	bpl.n	800a23a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	0792      	lsls	r2, r2, #30
 800a238:	d468      	bmi.n	800a30c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	0752      	lsls	r2, r2, #29
 800a23e:	d502      	bpl.n	800a246 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	0750      	lsls	r0, r2, #29
 800a244:	d44f      	bmi.n	800a2e6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	0711      	lsls	r1, r2, #28
 800a24a:	d502      	bpl.n	800a252 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	0712      	lsls	r2, r2, #28
 800a250:	d437      	bmi.n	800a2c2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a252:	691a      	ldr	r2, [r3, #16]
 800a254:	06d0      	lsls	r0, r2, #27
 800a256:	d502      	bpl.n	800a25e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	06d1      	lsls	r1, r2, #27
 800a25c:	d41e      	bmi.n	800a29c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	07d2      	lsls	r2, r2, #31
 800a262:	d502      	bpl.n	800a26a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	07d0      	lsls	r0, r2, #31
 800a268:	d469      	bmi.n	800a33e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	0611      	lsls	r1, r2, #24
 800a26e:	d502      	bpl.n	800a276 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	0612      	lsls	r2, r2, #24
 800a274:	d46b      	bmi.n	800a34e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a276:	691a      	ldr	r2, [r3, #16]
 800a278:	05d0      	lsls	r0, r2, #23
 800a27a:	d502      	bpl.n	800a282 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	0611      	lsls	r1, r2, #24
 800a280:	d46d      	bmi.n	800a35e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a282:	691a      	ldr	r2, [r3, #16]
 800a284:	0652      	lsls	r2, r2, #25
 800a286:	d502      	bpl.n	800a28e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	0650      	lsls	r0, r2, #25
 800a28c:	d46f      	bmi.n	800a36e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	0691      	lsls	r1, r2, #26
 800a292:	d502      	bpl.n	800a29a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	0692      	lsls	r2, r2, #26
 800a298:	d449      	bmi.n	800a32e <HAL_TIM_IRQHandler+0x106>
}
 800a29a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a29c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2a0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a2a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2a4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2a6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a2ae:	d16f      	bne.n	800a390 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b0:	f7ff ffb2 	bl	800a218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f7ff ffb3 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2bc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2be:	7722      	strb	r2, [r4, #28]
 800a2c0:	e7cd      	b.n	800a25e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2c2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2c6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2ca:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	079b      	lsls	r3, r3, #30
 800a2d2:	d15a      	bne.n	800a38a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d4:	f7ff ffa0 	bl	800a218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f7ff ffa1 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2de:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2e0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e2:	7722      	strb	r2, [r4, #28]
 800a2e4:	e7b5      	b.n	800a252 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2e6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2ea:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a2ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2ee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a2f8:	d144      	bne.n	800a384 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2fa:	f7ff ff8d 	bl	800a218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff ff8e 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a304:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a306:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a308:	7722      	strb	r2, [r4, #28]
 800a30a:	e79c      	b.n	800a246 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a30c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a310:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a312:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a314:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	0799      	lsls	r1, r3, #30
 800a31a:	d130      	bne.n	800a37e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31c:	f7ff ff7c 	bl	800a218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff ff7d 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a326:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a328:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32a:	7722      	strb	r2, [r4, #28]
 800a32c:	e785      	b.n	800a23a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a32e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a332:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a334:	611a      	str	r2, [r3, #16]
}
 800a336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a33a:	f000 b8cd 	b.w	800a4d8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a33e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a342:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a344:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a346:	f7f8 fc7f 	bl	8002c48 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	e78d      	b.n	800a26a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a34e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a352:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a354:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a356:	f000 f8c1 	bl	800a4dc <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	e78b      	b.n	800a276 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a35e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a362:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a364:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a366:	f000 f8bb 	bl	800a4e0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	e789      	b.n	800a282 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a36e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a372:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a374:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a376:	f7ff ff55 	bl	800a224 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	e787      	b.n	800a28e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	f7ff ff4d 	bl	800a21c <HAL_TIM_IC_CaptureCallback>
 800a382:	e7d0      	b.n	800a326 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a384:	f7ff ff4a 	bl	800a21c <HAL_TIM_IC_CaptureCallback>
 800a388:	e7bc      	b.n	800a304 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a38a:	f7ff ff47 	bl	800a21c <HAL_TIM_IC_CaptureCallback>
 800a38e:	e7a6      	b.n	800a2de <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a390:	f7ff ff44 	bl	800a21c <HAL_TIM_IC_CaptureCallback>
 800a394:	e791      	b.n	800a2ba <HAL_TIM_IRQHandler+0x92>
 800a396:	bf00      	nop

0800a398 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a398:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d04b      	beq.n	800a438 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3a0:	6803      	ldr	r3, [r0, #0]
 800a3a2:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a4:	2002      	movs	r0, #2
{
 800a3a6:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3a8:	4d24      	ldr	r5, [pc, #144]	; (800a43c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a3aa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3ae:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a3b0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a3b2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3b4:	d029      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a3b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a3ba:	42ab      	cmp	r3, r5
 800a3bc:	d025      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3be:	4d20      	ldr	r5, [pc, #128]	; (800a440 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3c0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3c4:	42ab      	cmp	r3, r5
 800a3c6:	bf18      	it	ne
 800a3c8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a3cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a3d0:	bf0c      	ite	eq
 800a3d2:	f04f 0c01 	moveq.w	ip, #1
 800a3d6:	f04f 0c00 	movne.w	ip, #0
 800a3da:	42ab      	cmp	r3, r5
 800a3dc:	bf08      	it	eq
 800a3de:	f04c 0c01 	orreq.w	ip, ip, #1
 800a3e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a3e6:	42ab      	cmp	r3, r5
 800a3e8:	bf08      	it	eq
 800a3ea:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3ee:	680d      	ldr	r5, [r1, #0]
 800a3f0:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f2:	4d14      	ldr	r5, [pc, #80]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800a3f4:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f6:	42ab      	cmp	r3, r5
 800a3f8:	bf14      	ite	ne
 800a3fa:	4660      	movne	r0, ip
 800a3fc:	f04c 0001 	orreq.w	r0, ip, #1
 800a400:	b960      	cbnz	r0, 800a41c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a402:	4811      	ldr	r0, [pc, #68]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a404:	4283      	cmp	r3, r0
 800a406:	d009      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800a408:	e00d      	b.n	800a426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a40a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a40c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a410:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a412:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a414:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a418:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800a41a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a41c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a41e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a422:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a424:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a426:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a428:	2101      	movs	r1, #1

  return HAL_OK;
 800a42a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800a42c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a430:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a434:	bc30      	pop	{r4, r5}
 800a436:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a438:	2002      	movs	r0, #2
}
 800a43a:	4770      	bx	lr
 800a43c:	40010000 	.word	0x40010000
 800a440:	40000400 	.word	0x40000400
 800a444:	40014000 	.word	0x40014000
 800a448:	40001800 	.word	0x40001800

0800a44c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a44c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a450:	2b01      	cmp	r3, #1
 800a452:	d03d      	beq.n	800a4d0 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a454:	4602      	mov	r2, r0
 800a456:	6848      	ldr	r0, [r1, #4]
{
 800a458:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a45a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800a45e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a462:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a464:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a46a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a46c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a46e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a472:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a474:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a47a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a47c:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a47e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a482:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a484:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a48a:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a48c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a48e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800a492:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a496:	4c0f      	ldr	r4, [pc, #60]	; (800a4d4 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d00b      	beq.n	800a4b4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800a49c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a4a0:	42a0      	cmp	r0, r4
 800a4a2:	d007      	beq.n	800a4b4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800a4a4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800a4a6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800a4a8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800a4ac:	4608      	mov	r0, r1
}
 800a4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b2:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a4b4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800a4b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4ba:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a4be:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a4c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4c6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a4c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	e7e9      	b.n	800a4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800a4d0:	2002      	movs	r0, #2
}
 800a4d2:	4770      	bx	lr
 800a4d4:	40010000 	.word	0x40010000

0800a4d8 <HAL_TIMEx_CommutCallback>:
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop

0800a4dc <HAL_TIMEx_BreakCallback>:
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop

0800a4e0 <HAL_TIMEx_Break2Callback>:
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop

0800a4e4 <HAL_UART_TxCpltCallback>:
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop

0800a4e8 <HAL_UART_ErrorCallback>:
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop

0800a4ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a4f6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4fa:	f7ff fff5 	bl	800a4e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4fe:	bd08      	pop	{r3, pc}

0800a500 <HAL_UARTEx_RxEventCallback>:
}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop

0800a504 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a504:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a506:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a50a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a50c:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 800a50e:	ea12 0f0c 	tst.w	r2, ip
{
 800a512:	b570      	push	{r4, r5, r6, lr}
 800a514:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a516:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800a518:	d17b      	bne.n	800a612 <HAL_UART_IRQHandler+0x10e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a51a:	0696      	lsls	r6, r2, #26
 800a51c:	d502      	bpl.n	800a524 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a51e:	068d      	lsls	r5, r1, #26
 800a520:	f100 8112 	bmi.w	800a748 <HAL_UART_IRQHandler+0x244>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a524:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a526:	2801      	cmp	r0, #1
 800a528:	d01f      	beq.n	800a56a <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a52a:	0616      	lsls	r6, r2, #24
 800a52c:	d414      	bmi.n	800a558 <HAL_UART_IRQHandler+0x54>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a52e:	0650      	lsls	r0, r2, #25
 800a530:	d501      	bpl.n	800a536 <HAL_UART_IRQHandler+0x32>
 800a532:	064a      	lsls	r2, r1, #25
 800a534:	d400      	bmi.n	800a538 <HAL_UART_IRQHandler+0x34>
}
 800a536:	bd70      	pop	{r4, r5, r6, pc}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a53c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a540:	e843 2100 	strex	r1, r2, [r3]
 800a544:	2900      	cmp	r1, #0
 800a546:	d1f7      	bne.n	800a538 <HAL_UART_IRQHandler+0x34>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a548:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a54a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a54c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800a54e:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 800a550:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 800a552:	f7ff ffc7 	bl	800a4e4 <HAL_UART_TxCpltCallback>
}
 800a556:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a558:	060d      	lsls	r5, r1, #24
 800a55a:	d5e8      	bpl.n	800a52e <HAL_UART_IRQHandler+0x2a>
    if (huart->TxISR != NULL)
 800a55c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0e9      	beq.n	800a536 <HAL_UART_IRQHandler+0x32>
      huart->TxISR(huart);
 800a562:	4620      	mov	r0, r4
}
 800a564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800a568:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a56a:	06d5      	lsls	r5, r2, #27
 800a56c:	d5dd      	bpl.n	800a52a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a56e:	06c8      	lsls	r0, r1, #27
 800a570:	d5db      	bpl.n	800a52a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a572:	2210      	movs	r2, #16
 800a574:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	0652      	lsls	r2, r2, #25
 800a57a:	f140 80ff 	bpl.w	800a77c <HAL_UART_IRQHandler+0x278>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a57e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a580:	6802      	ldr	r2, [r0, #0]
 800a582:	6852      	ldr	r2, [r2, #4]
 800a584:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a586:	2a00      	cmp	r2, #0
 800a588:	d0d5      	beq.n	800a536 <HAL_UART_IRQHandler+0x32>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a58a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800a58e:	4291      	cmp	r1, r2
 800a590:	d9d1      	bls.n	800a536 <HAL_UART_IRQHandler+0x32>
        huart->RxXferCount = nb_remaining_rx_data;
 800a592:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a596:	69c2      	ldr	r2, [r0, #28]
 800a598:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a59c:	d02f      	beq.n	800a5fe <HAL_UART_IRQHandler+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a6:	e843 2100 	strex	r1, r2, [r3]
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	d1f7      	bne.n	800a59e <HAL_UART_IRQHandler+0x9a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	f103 0208 	add.w	r2, r3, #8
 800a5b2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	f103 0508 	add.w	r5, r3, #8
 800a5be:	e845 2100 	strex	r1, r2, [r5]
 800a5c2:	2900      	cmp	r1, #0
 800a5c4:	d1f3      	bne.n	800a5ae <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	f103 0208 	add.w	r2, r3, #8
 800a5ca:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	f103 0508 	add.w	r5, r3, #8
 800a5d6:	e845 2100 	strex	r1, r2, [r5]
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	d1f3      	bne.n	800a5c6 <HAL_UART_IRQHandler+0xc2>
          huart->RxState = HAL_UART_STATE_READY;
 800a5de:	2220      	movs	r2, #32
 800a5e0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e4:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	e843 2100 	strex	r1, r2, [r3]
 800a5f2:	2900      	cmp	r1, #0
 800a5f4:	d1f7      	bne.n	800a5e6 <HAL_UART_IRQHandler+0xe2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5f6:	f7fa fad7 	bl	8004ba8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5fa:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5fe:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a600:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a602:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a604:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a608:	1ac9      	subs	r1, r1, r3
 800a60a:	b289      	uxth	r1, r1
 800a60c:	f7ff ff78 	bl	800a500 <HAL_UARTEx_RxEventCallback>
}
 800a610:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a612:	4878      	ldr	r0, [pc, #480]	; (800a7f4 <HAL_UART_IRQHandler+0x2f0>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a614:	f005 0501 	and.w	r5, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a618:	4008      	ands	r0, r1
 800a61a:	4328      	orrs	r0, r5
 800a61c:	d082      	beq.n	800a524 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a61e:	07d6      	lsls	r6, r2, #31
 800a620:	d509      	bpl.n	800a636 <HAL_UART_IRQHandler+0x132>
 800a622:	05c8      	lsls	r0, r1, #23
 800a624:	d507      	bpl.n	800a636 <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a626:	2001      	movs	r0, #1
 800a628:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a62a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a62e:	f040 0001 	orr.w	r0, r0, #1
 800a632:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a636:	0796      	lsls	r6, r2, #30
 800a638:	f140 8081 	bpl.w	800a73e <HAL_UART_IRQHandler+0x23a>
 800a63c:	b18d      	cbz	r5, 800a662 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a63e:	2002      	movs	r0, #2
 800a640:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a642:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a646:	f040 0004 	orr.w	r0, r0, #4
 800a64a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a64e:	0750      	lsls	r0, r2, #29
 800a650:	d507      	bpl.n	800a662 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a652:	2004      	movs	r0, #4
 800a654:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a656:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a65a:	f040 0002 	orr.w	r0, r0, #2
 800a65e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a662:	0710      	lsls	r0, r2, #28
 800a664:	d50b      	bpl.n	800a67e <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a666:	f001 0020 	and.w	r0, r1, #32
 800a66a:	4328      	orrs	r0, r5
 800a66c:	d007      	beq.n	800a67e <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a66e:	2008      	movs	r0, #8
 800a670:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a672:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a676:	f040 0008 	orr.w	r0, r0, #8
 800a67a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a67e:	0516      	lsls	r6, r2, #20
 800a680:	d50a      	bpl.n	800a698 <HAL_UART_IRQHandler+0x194>
 800a682:	014d      	lsls	r5, r1, #5
 800a684:	d508      	bpl.n	800a698 <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a686:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a68a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a68c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a690:	f040 0020 	orr.w	r0, r0, #32
 800a694:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a698:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f43f af4a 	beq.w	800a536 <HAL_UART_IRQHandler+0x32>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6a2:	0690      	lsls	r0, r2, #26
 800a6a4:	d506      	bpl.n	800a6b4 <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6a6:	068a      	lsls	r2, r1, #26
 800a6a8:	d504      	bpl.n	800a6b4 <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 800a6aa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800a6ac:	b112      	cbz	r2, 800a6b4 <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6b2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800a6b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6b8:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6ba:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6be:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a6c2:	ea52 0501 	orrs.w	r5, r2, r1
 800a6c6:	f000 808f 	beq.w	800a7e8 <HAL_UART_IRQHandler+0x2e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ca:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	e843 2100 	strex	r1, r2, [r3]
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	d1f7      	bne.n	800a6ca <HAL_UART_IRQHandler+0x1c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	f103 0208 	add.w	r2, r3, #8
 800a6de:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e6:	f103 0008 	add.w	r0, r3, #8
 800a6ea:	e840 2100 	strex	r1, r2, [r0]
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	d1f3      	bne.n	800a6da <HAL_UART_IRQHandler+0x1d6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a6f4:	2a01      	cmp	r2, #1
 800a6f6:	d02c      	beq.n	800a752 <HAL_UART_IRQHandler+0x24e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	2120      	movs	r1, #32
 800a6fc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a700:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a702:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800a704:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a706:	064e      	lsls	r6, r1, #25
 800a708:	d534      	bpl.n	800a774 <HAL_UART_IRQHandler+0x270>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	f103 0208 	add.w	r2, r3, #8
 800a70e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	f103 0008 	add.w	r0, r3, #8
 800a71a:	e840 2100 	strex	r1, r2, [r0]
 800a71e:	2900      	cmp	r1, #0
 800a720:	d1f3      	bne.n	800a70a <HAL_UART_IRQHandler+0x206>
          if (huart->hdmarx != NULL)
 800a722:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a724:	b330      	cbz	r0, 800a774 <HAL_UART_IRQHandler+0x270>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a726:	4b34      	ldr	r3, [pc, #208]	; (800a7f8 <HAL_UART_IRQHandler+0x2f4>)
 800a728:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a72a:	f7fa fa87 	bl	8004c3c <HAL_DMA_Abort_IT>
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f af01 	beq.w	800a536 <HAL_UART_IRQHandler+0x32>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a734:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 800a736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a73a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a73c:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a73e:	0756      	lsls	r6, r2, #29
 800a740:	d58f      	bpl.n	800a662 <HAL_UART_IRQHandler+0x15e>
 800a742:	2d00      	cmp	r5, #0
 800a744:	d185      	bne.n	800a652 <HAL_UART_IRQHandler+0x14e>
 800a746:	e78c      	b.n	800a662 <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 800a748:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f47f af0a 	bne.w	800a564 <HAL_UART_IRQHandler+0x60>
 800a750:	e6f1      	b.n	800a536 <HAL_UART_IRQHandler+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a756:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	e843 2100 	strex	r1, r2, [r3]
 800a75e:	2900      	cmp	r1, #0
 800a760:	d0ca      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x1f4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	e853 2f00 	ldrex	r2, [r3]
 800a766:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	e843 2100 	strex	r1, r2, [r3]
 800a76e:	2900      	cmp	r1, #0
 800a770:	d1ef      	bne.n	800a752 <HAL_UART_IRQHandler+0x24e>
 800a772:	e7c1      	b.n	800a6f8 <HAL_UART_IRQHandler+0x1f4>
            HAL_UART_ErrorCallback(huart);
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff feb7 	bl	800a4e8 <HAL_UART_ErrorCallback>
}
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a77c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800a780:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 800a784:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a788:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800a78a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a78c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a78e:	2a00      	cmp	r2, #0
 800a790:	f43f aed1 	beq.w	800a536 <HAL_UART_IRQHandler+0x32>
 800a794:	2900      	cmp	r1, #0
 800a796:	f43f aece 	beq.w	800a536 <HAL_UART_IRQHandler+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a79e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	e843 2000 	strex	r0, r2, [r3]
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d1f7      	bne.n	800a79a <HAL_UART_IRQHandler+0x296>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	f103 0208 	add.w	r2, r3, #8
 800a7ae:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b6:	f103 0508 	add.w	r5, r3, #8
 800a7ba:	e845 2000 	strex	r0, r2, [r5]
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d1f3      	bne.n	800a7aa <HAL_UART_IRQHandler+0x2a6>
        huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800a7c4:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800a7c6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ca:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7cc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	e843 2000 	strex	r0, r2, [r3]
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d1f7      	bne.n	800a7cc <HAL_UART_IRQHandler+0x2c8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7dc:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7de:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7e0:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7e2:	f7ff fe8d 	bl	800a500 <HAL_UARTEx_RxEventCallback>
}
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff fe7d 	bl	800a4e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ee:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	04000120 	.word	0x04000120
 800a7f8:	0800a4ed 	.word	0x0800a4ed

0800a7fc <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7fc:	6901      	ldr	r1, [r0, #16]
 800a7fe:	6882      	ldr	r2, [r0, #8]
{
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a804:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a806:	430a      	orrs	r2, r1
 800a808:	69c0      	ldr	r0, [r0, #28]
 800a80a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a80c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a80e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a810:	49a1      	ldr	r1, [pc, #644]	; (800aa98 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a812:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a814:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a816:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a818:	430a      	orrs	r2, r1
 800a81a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a81c:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a81e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a820:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800a824:	4329      	orrs	r1, r5
 800a826:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800a828:	6a21      	ldr	r1, [r4, #32]
 800a82a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a82c:	6899      	ldr	r1, [r3, #8]
 800a82e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a832:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a834:	4999      	ldr	r1, [pc, #612]	; (800aa9c <UART_SetConfig+0x2a0>)
 800a836:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a838:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a83a:	d03f      	beq.n	800a8bc <UART_SetConfig+0xc0>
 800a83c:	4a98      	ldr	r2, [pc, #608]	; (800aaa0 <UART_SetConfig+0x2a4>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d01b      	beq.n	800a87a <UART_SetConfig+0x7e>
 800a842:	4a98      	ldr	r2, [pc, #608]	; (800aaa4 <UART_SetConfig+0x2a8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	f000 80c9 	beq.w	800a9dc <UART_SetConfig+0x1e0>
 800a84a:	4a97      	ldr	r2, [pc, #604]	; (800aaa8 <UART_SetConfig+0x2ac>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	f000 80d5 	beq.w	800a9fc <UART_SetConfig+0x200>
 800a852:	4a96      	ldr	r2, [pc, #600]	; (800aaac <UART_SetConfig+0x2b0>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d05f      	beq.n	800a918 <UART_SetConfig+0x11c>
 800a858:	4a95      	ldr	r2, [pc, #596]	; (800aab0 <UART_SetConfig+0x2b4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	f000 8090 	beq.w	800a980 <UART_SetConfig+0x184>
 800a860:	4a94      	ldr	r2, [pc, #592]	; (800aab4 <UART_SetConfig+0x2b8>)
 800a862:	4293      	cmp	r3, r2
 800a864:	f000 80eb 	beq.w	800aa3e <UART_SetConfig+0x242>
 800a868:	4a93      	ldr	r2, [pc, #588]	; (800aab8 <UART_SetConfig+0x2bc>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	f000 80fd 	beq.w	800aa6a <UART_SetConfig+0x26e>
    switch (clocksource)
 800a870:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a872:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800a874:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 800a878:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a87a:	4b90      	ldr	r3, [pc, #576]	; (800aabc <UART_SetConfig+0x2c0>)
 800a87c:	4a90      	ldr	r2, [pc, #576]	; (800aac0 <UART_SetConfig+0x2c4>)
 800a87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a882:	f003 030c 	and.w	r3, r3, #12
 800a886:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a888:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a88c:	d02d      	beq.n	800a8ea <UART_SetConfig+0xee>
    switch (clocksource)
 800a88e:	2b08      	cmp	r3, #8
 800a890:	d8ee      	bhi.n	800a870 <UART_SetConfig+0x74>
 800a892:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <UART_SetConfig+0x9c>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a945 	.word	0x0800a945
 800a89c:	0800a8d3 	.word	0x0800a8d3
 800a8a0:	0800a997 	.word	0x0800a997
 800a8a4:	0800a871 	.word	0x0800a871
 800a8a8:	0800a939 	.word	0x0800a939
 800a8ac:	0800a871 	.word	0x0800a871
 800a8b0:	0800a871 	.word	0x0800a871
 800a8b4:	0800a871 	.word	0x0800a871
 800a8b8:	0800a957 	.word	0x0800a957
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8bc:	4b7f      	ldr	r3, [pc, #508]	; (800aabc <UART_SetConfig+0x2c0>)
 800a8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c2:	f003 0303 	and.w	r3, r3, #3
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d90b      	bls.n	800a8e4 <UART_SetConfig+0xe8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a8d0:	d063      	beq.n	800a99a <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8d2:	f7fc fdb7 	bl	8007444 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d13f      	bne.n	800a95a <UART_SetConfig+0x15e>
  huart->RxISR = NULL;
 800a8da:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 800a8dc:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 800a8de:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	4a77      	ldr	r2, [pc, #476]	; (800aac4 <UART_SetConfig+0x2c8>)
 800a8e6:	5cd3      	ldrb	r3, [r2, r3]
 800a8e8:	e7ce      	b.n	800a888 <UART_SetConfig+0x8c>
    switch (clocksource)
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	d8c0      	bhi.n	800a870 <UART_SetConfig+0x74>
 800a8ee:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <UART_SetConfig+0xf8>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a9d7 	.word	0x0800a9d7
 800a8f8:	0800a99b 	.word	0x0800a99b
 800a8fc:	0800aa35 	.word	0x0800aa35
 800a900:	0800a871 	.word	0x0800a871
 800a904:	0800a9d1 	.word	0x0800a9d1
 800a908:	0800a871 	.word	0x0800a871
 800a90c:	0800a871 	.word	0x0800a871
 800a910:	0800a871 	.word	0x0800a871
 800a914:	0800aa39 	.word	0x0800aa39
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a918:	4b68      	ldr	r3, [pc, #416]	; (800aabc <UART_SetConfig+0x2c0>)
 800a91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a91e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a926:	d033      	beq.n	800a990 <UART_SetConfig+0x194>
 800a928:	d80f      	bhi.n	800a94a <UART_SetConfig+0x14e>
 800a92a:	b143      	cbz	r3, 800a93e <UART_SetConfig+0x142>
 800a92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a930:	d19e      	bne.n	800a870 <UART_SetConfig+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a932:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a936:	d04b      	beq.n	800a9d0 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 800a938:	f7fc fd40 	bl	80073bc <HAL_RCC_GetSysClockFreq>
        break;
 800a93c:	e7cb      	b.n	800a8d6 <UART_SetConfig+0xda>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a93e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a942:	d048      	beq.n	800a9d6 <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a944:	f7fc fd6e 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
        break;
 800a948:	e7c5      	b.n	800a8d6 <UART_SetConfig+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a94a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a94e:	d18f      	bne.n	800a870 <UART_SetConfig+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a950:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a954:	d070      	beq.n	800aa38 <UART_SetConfig+0x23c>
        pclk = (uint32_t) LSE_VALUE;
 800a956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a95a:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a95c:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a960:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a964:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a968:	f1a3 0110 	sub.w	r1, r3, #16
 800a96c:	4291      	cmp	r1, r2
 800a96e:	f63f af7f 	bhi.w	800a870 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a972:	6822      	ldr	r2, [r4, #0]
 800a974:	2000      	movs	r0, #0
 800a976:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800a978:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800a97a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a980:	4b4e      	ldr	r3, [pc, #312]	; (800aabc <UART_SetConfig+0x2c0>)
 800a982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a986:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a98a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a98e:	d145      	bne.n	800aa1c <UART_SetConfig+0x220>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a990:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a994:	d04e      	beq.n	800aa34 <UART_SetConfig+0x238>
    switch (clocksource)
 800a996:	484c      	ldr	r0, [pc, #304]	; (800aac8 <UART_SetConfig+0x2cc>)
 800a998:	e7df      	b.n	800a95a <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a99a:	f7fc fd53 	bl	8007444 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d09b      	beq.n	800a8da <UART_SetConfig+0xde>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9a2:	0043      	lsls	r3, r0, #1
 800a9a4:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9a6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a9ae:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9b2:	f1a3 0210 	sub.w	r2, r3, #16
 800a9b6:	428a      	cmp	r2, r1
 800a9b8:	f63f af5a 	bhi.w	800a870 <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9bc:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a9c4:	6821      	ldr	r1, [r4, #0]
 800a9c6:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9c8:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60cb      	str	r3, [r1, #12]
 800a9ce:	e750      	b.n	800a872 <UART_SetConfig+0x76>
        pclk = HAL_RCC_GetSysClockFreq();
 800a9d0:	f7fc fcf4 	bl	80073bc <HAL_RCC_GetSysClockFreq>
        break;
 800a9d4:	e7e3      	b.n	800a99e <UART_SetConfig+0x1a2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9d6:	f7fc fd25 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
        break;
 800a9da:	e7e0      	b.n	800a99e <UART_SetConfig+0x1a2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9dc:	4b37      	ldr	r3, [pc, #220]	; (800aabc <UART_SetConfig+0x2c0>)
 800a9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	d0d2      	beq.n	800a990 <UART_SetConfig+0x194>
 800a9ea:	d804      	bhi.n	800a9f6 <UART_SetConfig+0x1fa>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0a6      	beq.n	800a93e <UART_SetConfig+0x142>
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d09e      	beq.n	800a932 <UART_SetConfig+0x136>
 800a9f4:	e73c      	b.n	800a870 <UART_SetConfig+0x74>
 800a9f6:	2b30      	cmp	r3, #48	; 0x30
 800a9f8:	d0aa      	beq.n	800a950 <UART_SetConfig+0x154>
 800a9fa:	e739      	b.n	800a870 <UART_SetConfig+0x74>
 800a9fc:	4b2f      	ldr	r3, [pc, #188]	; (800aabc <UART_SetConfig+0x2c0>)
 800a9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa06:	2b80      	cmp	r3, #128	; 0x80
 800aa08:	d0c2      	beq.n	800a990 <UART_SetConfig+0x194>
 800aa0a:	d804      	bhi.n	800aa16 <UART_SetConfig+0x21a>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d096      	beq.n	800a93e <UART_SetConfig+0x142>
 800aa10:	2b40      	cmp	r3, #64	; 0x40
 800aa12:	d08e      	beq.n	800a932 <UART_SetConfig+0x136>
 800aa14:	e72c      	b.n	800a870 <UART_SetConfig+0x74>
 800aa16:	2bc0      	cmp	r3, #192	; 0xc0
 800aa18:	d09a      	beq.n	800a950 <UART_SetConfig+0x154>
 800aa1a:	e729      	b.n	800a870 <UART_SetConfig+0x74>
 800aa1c:	d806      	bhi.n	800aa2c <UART_SetConfig+0x230>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f43f af54 	beq.w	800a8cc <UART_SetConfig+0xd0>
 800aa24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa28:	d083      	beq.n	800a932 <UART_SetConfig+0x136>
 800aa2a:	e721      	b.n	800a870 <UART_SetConfig+0x74>
 800aa2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa30:	d08e      	beq.n	800a950 <UART_SetConfig+0x154>
 800aa32:	e71d      	b.n	800a870 <UART_SetConfig+0x74>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa34:	4b25      	ldr	r3, [pc, #148]	; (800aacc <UART_SetConfig+0x2d0>)
 800aa36:	e7b5      	b.n	800a9a4 <UART_SetConfig+0x1a8>
    switch (clocksource)
 800aa38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aa3c:	e7b2      	b.n	800a9a4 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa3e:	4b1f      	ldr	r3, [pc, #124]	; (800aabc <UART_SetConfig+0x2c0>)
 800aa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa44:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa4c:	d0a0      	beq.n	800a990 <UART_SetConfig+0x194>
 800aa4e:	d807      	bhi.n	800aa60 <UART_SetConfig+0x264>
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f43f af74 	beq.w	800a93e <UART_SetConfig+0x142>
 800aa56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5a:	f43f af6a 	beq.w	800a932 <UART_SetConfig+0x136>
 800aa5e:	e707      	b.n	800a870 <UART_SetConfig+0x74>
 800aa60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa64:	f43f af74 	beq.w	800a950 <UART_SetConfig+0x154>
 800aa68:	e702      	b.n	800a870 <UART_SetConfig+0x74>
 800aa6a:	4b14      	ldr	r3, [pc, #80]	; (800aabc <UART_SetConfig+0x2c0>)
 800aa6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa78:	d08a      	beq.n	800a990 <UART_SetConfig+0x194>
 800aa7a:	d807      	bhi.n	800aa8c <UART_SetConfig+0x290>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f43f af5e 	beq.w	800a93e <UART_SetConfig+0x142>
 800aa82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa86:	f43f af54 	beq.w	800a932 <UART_SetConfig+0x136>
 800aa8a:	e6f1      	b.n	800a870 <UART_SetConfig+0x74>
 800aa8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa90:	f43f af5e 	beq.w	800a950 <UART_SetConfig+0x154>
 800aa94:	e6ec      	b.n	800a870 <UART_SetConfig+0x74>
 800aa96:	bf00      	nop
 800aa98:	efff69f3 	.word	0xefff69f3
 800aa9c:	40011000 	.word	0x40011000
 800aaa0:	40004400 	.word	0x40004400
 800aaa4:	40004800 	.word	0x40004800
 800aaa8:	40004c00 	.word	0x40004c00
 800aaac:	40005000 	.word	0x40005000
 800aab0:	40011400 	.word	0x40011400
 800aab4:	40007800 	.word	0x40007800
 800aab8:	40007c00 	.word	0x40007c00
 800aabc:	40023800 	.word	0x40023800
 800aac0:	0801c854 	.word	0x0801c854
 800aac4:	0801c850 	.word	0x0801c850
 800aac8:	00f42400 	.word	0x00f42400
 800aacc:	01e84800 	.word	0x01e84800

0800aad0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aad2:	07da      	lsls	r2, r3, #31
{
 800aad4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aad6:	d506      	bpl.n	800aae6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aad8:	6801      	ldr	r1, [r0, #0]
 800aada:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800aadc:	684a      	ldr	r2, [r1, #4]
 800aade:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aae2:	4322      	orrs	r2, r4
 800aae4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aae6:	079c      	lsls	r4, r3, #30
 800aae8:	d506      	bpl.n	800aaf8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaea:	6801      	ldr	r1, [r0, #0]
 800aaec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800aaee:	684a      	ldr	r2, [r1, #4]
 800aaf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aaf4:	4322      	orrs	r2, r4
 800aaf6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaf8:	0759      	lsls	r1, r3, #29
 800aafa:	d506      	bpl.n	800ab0a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aafc:	6801      	ldr	r1, [r0, #0]
 800aafe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800ab00:	684a      	ldr	r2, [r1, #4]
 800ab02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab06:	4322      	orrs	r2, r4
 800ab08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab0a:	071a      	lsls	r2, r3, #28
 800ab0c:	d506      	bpl.n	800ab1c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab0e:	6801      	ldr	r1, [r0, #0]
 800ab10:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ab12:	684a      	ldr	r2, [r1, #4]
 800ab14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab18:	4322      	orrs	r2, r4
 800ab1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab1c:	06dc      	lsls	r4, r3, #27
 800ab1e:	d506      	bpl.n	800ab2e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab20:	6801      	ldr	r1, [r0, #0]
 800ab22:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800ab24:	688a      	ldr	r2, [r1, #8]
 800ab26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ab2a:	4322      	orrs	r2, r4
 800ab2c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab2e:	0699      	lsls	r1, r3, #26
 800ab30:	d506      	bpl.n	800ab40 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab32:	6801      	ldr	r1, [r0, #0]
 800ab34:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ab36:	688a      	ldr	r2, [r1, #8]
 800ab38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab3c:	4322      	orrs	r2, r4
 800ab3e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab40:	065a      	lsls	r2, r3, #25
 800ab42:	d50a      	bpl.n	800ab5a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab44:	6801      	ldr	r1, [r0, #0]
 800ab46:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800ab48:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab4e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800ab52:	ea42 0204 	orr.w	r2, r2, r4
 800ab56:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab58:	d00b      	beq.n	800ab72 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab5a:	061b      	lsls	r3, r3, #24
 800ab5c:	d506      	bpl.n	800ab6c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab5e:	6802      	ldr	r2, [r0, #0]
 800ab60:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800ab62:	6853      	ldr	r3, [r2, #4]
 800ab64:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	6053      	str	r3, [r2, #4]
}
 800ab6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab70:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab72:	684a      	ldr	r2, [r1, #4]
 800ab74:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800ab76:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800ab7a:	4322      	orrs	r2, r4
 800ab7c:	604a      	str	r2, [r1, #4]
 800ab7e:	e7ec      	b.n	800ab5a <UART_AdvFeatureConfig+0x8a>

0800ab80 <HAL_UART_Init>:
  if (huart == NULL)
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f000 808f 	beq.w	800aca4 <HAL_UART_Init+0x124>
{
 800ab86:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800ab88:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 8084 	beq.w	800ac9a <HAL_UART_Init+0x11a>
  __HAL_UART_DISABLE(huart);
 800ab92:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ab94:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab96:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800ab98:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800ab9a:	6813      	ldr	r3, [r2, #0]
 800ab9c:	f023 0301 	bic.w	r3, r3, #1
 800aba0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aba2:	f7ff fe2b 	bl	800a7fc <UART_SetConfig>
 800aba6:	2801      	cmp	r0, #1
 800aba8:	d075      	beq.n	800ac96 <HAL_UART_Init+0x116>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abac:	2b00      	cmp	r3, #0
 800abae:	d16e      	bne.n	800ac8e <HAL_UART_Init+0x10e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abb0:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abb2:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abc2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abcc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  tickstart = HAL_GetTick();
 800abd0:	f7f9 fc5c 	bl	800448c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abd4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800abd6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	0712      	lsls	r2, r2, #28
 800abdc:	d40a      	bmi.n	800abf4 <HAL_UART_Init+0x74>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abde:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800abe0:	2220      	movs	r2, #32
  return HAL_OK;
 800abe2:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800abe4:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800abe6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800abea:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abee:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abf0:	6663      	str	r3, [r4, #100]	; 0x64
}
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	0298      	lsls	r0, r3, #10
 800abf8:	d4f1      	bmi.n	800abde <HAL_UART_Init+0x5e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abfa:	f7f9 fc47 	bl	800448c <HAL_GetTick>
 800abfe:	1b43      	subs	r3, r0, r5
 800ac00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	d226      	bcs.n	800ac56 <HAL_UART_Init+0xd6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	0751      	lsls	r1, r2, #29
 800ac0c:	d5f2      	bpl.n	800abf4 <HAL_UART_Init+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac0e:	69da      	ldr	r2, [r3, #28]
 800ac10:	0512      	lsls	r2, r2, #20
 800ac12:	d5ef      	bpl.n	800abf4 <HAL_UART_Init+0x74>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac18:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	e843 2100 	strex	r1, r2, [r3]
 800ac26:	2900      	cmp	r1, #0
 800ac28:	d1f7      	bne.n	800ac1a <HAL_UART_Init+0x9a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	f103 0208 	add.w	r2, r3, #8
 800ac2e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac32:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	f103 0008 	add.w	r0, r3, #8
 800ac3a:	e840 2100 	strex	r1, r2, [r0]
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d1f3      	bne.n	800ac2a <HAL_UART_Init+0xaa>
          huart->gState = HAL_UART_STATE_READY;
 800ac42:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800ac44:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ac46:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 800ac4a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ac4c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	e843 2100 	strex	r1, r2, [r3]
 800ac62:	2900      	cmp	r1, #0
 800ac64:	d1f7      	bne.n	800ac56 <HAL_UART_Init+0xd6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	f103 0208 	add.w	r2, r3, #8
 800ac6a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac6e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	f103 0008 	add.w	r0, r3, #8
 800ac76:	e840 2100 	strex	r1, r2, [r0]
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d1f3      	bne.n	800ac66 <HAL_UART_Init+0xe6>
        huart->gState = HAL_UART_STATE_READY;
 800ac7e:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800ac80:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800ac82:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 800ac86:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ac88:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}
    UART_AdvFeatureConfig(huart);
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f7ff ff1e 	bl	800aad0 <UART_AdvFeatureConfig>
 800ac94:	e78c      	b.n	800abb0 <HAL_UART_Init+0x30>
    return HAL_ERROR;
 800ac96:	2001      	movs	r0, #1
}
 800ac98:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800ac9a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800ac9e:	f7f9 f959 	bl	8003f54 <HAL_UART_MspInit>
 800aca2:	e776      	b.n	800ab92 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 800aca4:	2001      	movs	r0, #1
}
 800aca6:	4770      	bx	lr

0800aca8 <UART_WaitOnFlagUntilTimeout>:
{
 800aca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acb0:	4607      	mov	r7, r0
 800acb2:	460e      	mov	r6, r1
 800acb4:	4615      	mov	r5, r2
 800acb6:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acb8:	6804      	ldr	r4, [r0, #0]
 800acba:	f1b8 3fff 	cmp.w	r8, #4294967295
 800acbe:	d10a      	bne.n	800acd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800acc0:	69e3      	ldr	r3, [r4, #28]
 800acc2:	ea36 0303 	bics.w	r3, r6, r3
 800acc6:	bf0c      	ite	eq
 800acc8:	2301      	moveq	r3, #1
 800acca:	2300      	movne	r3, #0
 800accc:	429d      	cmp	r5, r3
 800acce:	d0f7      	beq.n	800acc0 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800acd0:	2000      	movs	r0, #0
}
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd6:	69e2      	ldr	r2, [r4, #28]
 800acd8:	ea36 0202 	bics.w	r2, r6, r2
 800acdc:	bf0c      	ite	eq
 800acde:	2301      	moveq	r3, #1
 800ace0:	2300      	movne	r3, #0
 800ace2:	42ab      	cmp	r3, r5
 800ace4:	d1f4      	bne.n	800acd0 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace6:	f7f9 fbd1 	bl	800448c <HAL_GetTick>
 800acea:	eba0 0009 	sub.w	r0, r0, r9
 800acee:	4540      	cmp	r0, r8
 800acf0:	d832      	bhi.n	800ad58 <UART_WaitOnFlagUntilTimeout+0xb0>
 800acf2:	f1b8 0f00 	cmp.w	r8, #0
 800acf6:	d02f      	beq.n	800ad58 <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800acf8:	683c      	ldr	r4, [r7, #0]
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	4622      	mov	r2, r4
 800acfe:	0758      	lsls	r0, r3, #29
 800ad00:	d5db      	bpl.n	800acba <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad02:	69e3      	ldr	r3, [r4, #28]
 800ad04:	0519      	lsls	r1, r3, #20
 800ad06:	d5d8      	bpl.n	800acba <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad0c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	e844 3100 	strex	r1, r3, [r4]
 800ad1a:	b139      	cbz	r1, 800ad2c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	e852 3f00 	ldrex	r3, [r2]
 800ad20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	e842 3100 	strex	r1, r3, [r2]
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	d1f7      	bne.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	f102 0308 	add.w	r3, r2, #8
 800ad30:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	f102 0008 	add.w	r0, r2, #8
 800ad3c:	e840 3100 	strex	r1, r3, [r0]
 800ad40:	2900      	cmp	r1, #0
 800ad42:	d1f3      	bne.n	800ad2c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800ad44:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800ad46:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ad48:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 800ad4c:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ad4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          return HAL_TIMEOUT;
 800ad56:	e7bc      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800ad58:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad62:	e842 3100 	strex	r1, r3, [r2]
 800ad66:	2900      	cmp	r1, #0
 800ad68:	d1f7      	bne.n	800ad5a <UART_WaitOnFlagUntilTimeout+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6a:	f102 0308 	add.w	r3, r2, #8
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad72:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	f102 0008 	add.w	r0, r2, #8
 800ad7a:	e840 3100 	strex	r1, r3, [r0]
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	d1f3      	bne.n	800ad6a <UART_WaitOnFlagUntilTimeout+0xc2>
        huart->gState = HAL_UART_STATE_READY;
 800ad82:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800ad84:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800ad86:	f887 1078 	strb.w	r1, [r7, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 800ad8a:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        return HAL_TIMEOUT;
 800ad90:	e79f      	b.n	800acd2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800ad92:	bf00      	nop

0800ad94 <HAL_UART_Transmit>:
{
 800ad94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad98:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ad9a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800ad9c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	f040 8087 	bne.w	800aeb2 <HAL_UART_Transmit+0x11e>
    if ((pData == NULL) || (Size == 0U))
 800ada4:	4689      	mov	r9, r1
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d03f      	beq.n	800ae2a <HAL_UART_Transmit+0x96>
 800adaa:	fab2 f782 	clz	r7, r2
 800adae:	4614      	mov	r4, r2
 800adb0:	097f      	lsrs	r7, r7, #5
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	d039      	beq.n	800ae2a <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adb6:	2321      	movs	r3, #33	; 0x21
 800adb8:	4605      	mov	r5, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adba:	f8c0 7084 	str.w	r7, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adbe:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 800adc0:	f7f9 fb64 	bl	800448c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adc4:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800adc6:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 800adc8:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800add0:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800add4:	f000 8090 	beq.w	800aef8 <HAL_UART_Transmit+0x164>
    while (huart->TxXferCount > 0U)
 800add8:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800addc:	b29b      	uxth	r3, r3
 800adde:	b1b3      	cbz	r3, 800ae0e <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade0:	682c      	ldr	r4, [r5, #0]
 800ade2:	1c71      	adds	r1, r6, #1
 800ade4:	d125      	bne.n	800ae32 <HAL_UART_Transmit+0x9e>
 800ade6:	69e2      	ldr	r2, [r4, #28]
 800ade8:	0612      	lsls	r2, r2, #24
 800adea:	d5fc      	bpl.n	800ade6 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800adec:	f1b9 0f00 	cmp.w	r9, #0
 800adf0:	d05a      	beq.n	800aea8 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800adf2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800adf6:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800adf8:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800adfc:	3b01      	subs	r3, #1
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae04:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e9      	bne.n	800ade2 <HAL_UART_Transmit+0x4e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae0e:	4643      	mov	r3, r8
 800ae10:	2200      	movs	r2, #0
 800ae12:	2140      	movs	r1, #64	; 0x40
 800ae14:	4628      	mov	r0, r5
 800ae16:	9600      	str	r6, [sp, #0]
 800ae18:	f7ff ff46 	bl	800aca8 <UART_WaitOnFlagUntilTimeout>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d172      	bne.n	800af06 <HAL_UART_Transmit+0x172>
    huart->gState = HAL_UART_STATE_READY;
 800ae20:	2320      	movs	r3, #32
 800ae22:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800ae2a:	2001      	movs	r0, #1
}
 800ae2c:	b003      	add	sp, #12
 800ae2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae32:	69e3      	ldr	r3, [r4, #28]
 800ae34:	061b      	lsls	r3, r3, #24
 800ae36:	d4d9      	bmi.n	800adec <HAL_UART_Transmit+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae38:	f7f9 fb28 	bl	800448c <HAL_GetTick>
 800ae3c:	eba0 0008 	sub.w	r0, r0, r8
 800ae40:	4286      	cmp	r6, r0
 800ae42:	d33a      	bcc.n	800aeba <HAL_UART_Transmit+0x126>
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	d038      	beq.n	800aeba <HAL_UART_Transmit+0x126>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae48:	682c      	ldr	r4, [r5, #0]
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	0752      	lsls	r2, r2, #29
 800ae50:	d5c7      	bpl.n	800ade2 <HAL_UART_Transmit+0x4e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae52:	69e2      	ldr	r2, [r4, #28]
 800ae54:	0510      	lsls	r0, r2, #20
 800ae56:	d5c4      	bpl.n	800ade2 <HAL_UART_Transmit+0x4e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae5c:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	e844 2100 	strex	r1, r2, [r4]
 800ae6a:	b139      	cbz	r1, 800ae7c <HAL_UART_Transmit+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	e853 2f00 	ldrex	r2, [r3]
 800ae70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	e843 2100 	strex	r1, r2, [r3]
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	d1f7      	bne.n	800ae6c <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	f103 0208 	add.w	r2, r3, #8
 800ae80:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae84:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	f103 0008 	add.w	r0, r3, #8
 800ae8c:	e840 2100 	strex	r1, r2, [r0]
 800ae90:	2900      	cmp	r1, #0
 800ae92:	d1f3      	bne.n	800ae7c <HAL_UART_Transmit+0xe8>
          huart->gState = HAL_UART_STATE_READY;
 800ae94:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800ae96:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ae98:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
          huart->gState = HAL_UART_STATE_READY;
 800ae9c:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ae9e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aea2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800aea6:	e7c1      	b.n	800ae2c <HAL_UART_Transmit+0x98>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aea8:	f837 3b02 	ldrh.w	r3, [r7], #2
 800aeac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb0:	e7a1      	b.n	800adf6 <HAL_UART_Transmit+0x62>
    return HAL_BUSY;
 800aeb2:	2002      	movs	r0, #2
}
 800aeb4:	b003      	add	sp, #12
 800aeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeba:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aec0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec4:	e843 2100 	strex	r1, r2, [r3]
 800aec8:	2900      	cmp	r1, #0
 800aeca:	d1f7      	bne.n	800aebc <HAL_UART_Transmit+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aecc:	f103 0208 	add.w	r2, r3, #8
 800aed0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	f103 0008 	add.w	r0, r3, #8
 800aedc:	e840 2100 	strex	r1, r2, [r0]
 800aee0:	2900      	cmp	r1, #0
 800aee2:	d1f3      	bne.n	800aecc <HAL_UART_Transmit+0x138>
        huart->gState = HAL_UART_STATE_READY;
 800aee4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800aee6:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800aee8:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
        huart->gState = HAL_UART_STATE_READY;
 800aeec:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800aeee:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
}
 800aef2:	b003      	add	sp, #12
 800aef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef8:	692b      	ldr	r3, [r5, #16]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f47f af6c 	bne.w	800add8 <HAL_UART_Transmit+0x44>
 800af00:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800af02:	4699      	mov	r9, r3
 800af04:	e768      	b.n	800add8 <HAL_UART_Transmit+0x44>
      return HAL_TIMEOUT;
 800af06:	2003      	movs	r0, #3
 800af08:	e790      	b.n	800ae2c <HAL_UART_Transmit+0x98>
 800af0a:	bf00      	nop

0800af0c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af0c:	680b      	ldr	r3, [r1, #0]
{
 800af0e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af10:	b9d3      	cbnz	r3, 800af48 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af12:	6804      	ldr	r4, [r0, #0]
 800af14:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800af18:	684a      	ldr	r2, [r1, #4]
 800af1a:	4023      	ands	r3, r4
 800af1c:	4313      	orrs	r3, r2
 800af1e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800af22:	4323      	orrs	r3, r4
 800af24:	4313      	orrs	r3, r2
 800af26:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800af2a:	4323      	orrs	r3, r4
 800af2c:	4313      	orrs	r3, r2
 800af2e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800af32:	4323      	orrs	r3, r4
 800af34:	4313      	orrs	r3, r2
 800af36:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800af3a:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800af3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af40:	4313      	orrs	r3, r2
 800af42:	6003      	str	r3, [r0, #0]
}
 800af44:	2000      	movs	r0, #0
 800af46:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af48:	6802      	ldr	r2, [r0, #0]
 800af4a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800af4e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800af52:	4322      	orrs	r2, r4
 800af54:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800af56:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af5a:	4322      	orrs	r2, r4
 800af5c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800af5e:	6842      	ldr	r2, [r0, #4]
 800af60:	4013      	ands	r3, r2
 800af62:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800af66:	4323      	orrs	r3, r4
 800af68:	4313      	orrs	r3, r2
 800af6a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800af6e:	4323      	orrs	r3, r4
 800af70:	4313      	orrs	r3, r2
 800af72:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800af76:	4323      	orrs	r3, r4
}
 800af78:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800af7c:	4313      	orrs	r3, r2
 800af7e:	6043      	str	r3, [r0, #4]
}
 800af80:	2000      	movs	r0, #0
 800af82:	4770      	bx	lr
 800af84:	ffff8000 	.word	0xffff8000

0800af88 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800af88:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800af8a:	bb0a      	cbnz	r2, 800afd0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af8c:	6883      	ldr	r3, [r0, #8]
 800af8e:	e9d1 2400 	ldrd	r2, r4, [r1]
 800af92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af96:	3c01      	subs	r4, #1
 800af98:	3a01      	subs	r2, #1
 800af9a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800af9e:	4313      	orrs	r3, r2
 800afa0:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800afa4:	3c01      	subs	r4, #1
 800afa6:	3a01      	subs	r2, #1
 800afa8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800afac:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800afb0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800afb4:	698a      	ldr	r2, [r1, #24]
 800afb6:	3d01      	subs	r5, #1
 800afb8:	1e61      	subs	r1, r4, #1
 800afba:	3a01      	subs	r2, #1
 800afbc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800afc0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800afc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800afc8:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afca:	6083      	str	r3, [r0, #8]
}
 800afcc:	2000      	movs	r0, #0
 800afce:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afd0:	6885      	ldr	r5, [r0, #8]
 800afd2:	68ca      	ldr	r2, [r1, #12]
 800afd4:	4b12      	ldr	r3, [pc, #72]	; (800b020 <FMC_SDRAM_Timing_Init+0x98>)
 800afd6:	1e54      	subs	r4, r2, #1
 800afd8:	694a      	ldr	r2, [r1, #20]
 800afda:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800afdc:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afde:	3a01      	subs	r2, #1
 800afe0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800afe4:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afe8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800afec:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aff0:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aff2:	68c3      	ldr	r3, [r0, #12]
 800aff4:	3c01      	subs	r4, #1
 800aff6:	3a01      	subs	r2, #1
 800aff8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800affc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b000:	690c      	ldr	r4, [r1, #16]
 800b002:	4313      	orrs	r3, r2
 800b004:	698a      	ldr	r2, [r1, #24]
 800b006:	1e61      	subs	r1, r4, #1
 800b008:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b00c:	3a01      	subs	r2, #1
 800b00e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b012:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
 800b016:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b018:	60c3      	str	r3, [r0, #12]
}
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	ff0f0fff 	.word	0xff0f0fff

0800b024 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b024:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b026:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800b02a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b02c:	6900      	ldr	r0, [r0, #16]
 800b02e:	4323      	orrs	r3, r4
 800b030:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800b034:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b038:	4c05      	ldr	r4, [pc, #20]	; (800b050 <FMC_SDRAM_SendCommand+0x2c>)
 800b03a:	3901      	subs	r1, #1
 800b03c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b03e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b040:	4323      	orrs	r3, r4
}
 800b042:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b046:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800b04a:	6113      	str	r3, [r2, #16]
}
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	ffc00000 	.word	0xffc00000

0800b054 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b054:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b056:	4b05      	ldr	r3, [pc, #20]	; (800b06c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800b058:	2000      	movs	r0, #0
{
 800b05a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b05c:	6954      	ldr	r4, [r2, #20]
 800b05e:	4023      	ands	r3, r4
}
 800b060:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b064:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b068:	6151      	str	r1, [r2, #20]
}
 800b06a:	4770      	bx	lr
 800b06c:	ffffc001 	.word	0xffffc001

0800b070 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b074:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b076:	fa94 f2a4 	rbit	r2, r4
 800b07a:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b07e:	fa34 f302 	lsrs.w	r3, r4, r2
 800b082:	f000 808b 	beq.w	800b19c <LL_GPIO_Init+0x12c>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b086:	f04f 0e01 	mov.w	lr, #1
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b08a:	f04f 0c03 	mov.w	ip, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b08e:	f04f 0b0f 	mov.w	fp, #15
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b092:	43e6      	mvns	r6, r4
 800b094:	e018      	b.n	800b0c8 <LL_GPIO_Init+0x58>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b096:	f8d0 8000 	ldr.w	r8, [r0]
 800b09a:	fa93 f9a3 	rbit	r9, r3
 800b09e:	fab9 f989 	clz	r9, r9
 800b0a2:	fa93 f3a3 	rbit	r3, r3
 800b0a6:	fab3 f383 	clz	r3, r3
 800b0aa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	fa0c f909 	lsl.w	r9, ip, r9
 800b0b4:	409d      	lsls	r5, r3
 800b0b6:	ea28 0809 	bic.w	r8, r8, r9
 800b0ba:	ea48 0505 	orr.w	r5, r8, r5
 800b0be:	6005      	str	r5, [r0, #0]
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800b0c0:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b0c2:	fa34 f302 	lsrs.w	r3, r4, r2
 800b0c6:	d069      	beq.n	800b19c <LL_GPIO_Init+0x12c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b0c8:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin)
 800b0cc:	4023      	ands	r3, r4
 800b0ce:	d0f7      	beq.n	800b0c0 <LL_GPIO_Init+0x50>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b0d0:	684d      	ldr	r5, [r1, #4]
 800b0d2:	f105 38ff 	add.w	r8, r5, #4294967295
 800b0d6:	f1b8 0f01 	cmp.w	r8, #1
 800b0da:	d823      	bhi.n	800b124 <LL_GPIO_Init+0xb4>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b0dc:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800b0e0:	fa93 f8a3 	rbit	r8, r3
 800b0e4:	fab8 f888 	clz	r8, r8
 800b0e8:	fa93 f9a3 	rbit	r9, r3
 800b0ec:	fab9 f989 	clz	r9, r9
 800b0f0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b0f4:	688f      	ldr	r7, [r1, #8]
 800b0f6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b0fa:	fa0c f808 	lsl.w	r8, ip, r8
 800b0fe:	ea2a 0a08 	bic.w	sl, sl, r8
 800b102:	fa07 f809 	lsl.w	r8, r7, r9
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b106:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b108:	ea4a 0a08 	orr.w	sl, sl, r8
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b10c:	fb07 f904 	mul.w	r9, r7, r4
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b110:	f8c0 a008 	str.w	sl, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b114:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b118:	ea06 0808 	and.w	r8, r6, r8
 800b11c:	ea48 0809 	orr.w	r8, r8, r9
 800b120:	f8c0 8004 	str.w	r8, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b124:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b128:	fa93 f8a3 	rbit	r8, r3
 800b12c:	fab8 f888 	clz	r8, r8
 800b130:	fa93 f9a3 	rbit	r9, r3
 800b134:	fab9 f989 	clz	r9, r9
 800b138:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800b13c:	690f      	ldr	r7, [r1, #16]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b13e:	2d02      	cmp	r5, #2
 800b140:	fa0c f808 	lsl.w	r8, ip, r8
 800b144:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b148:	ea2a 0a08 	bic.w	sl, sl, r8
 800b14c:	fa07 f809 	lsl.w	r8, r7, r9
 800b150:	ea4a 0a08 	orr.w	sl, sl, r8
 800b154:	f8c0 a00c 	str.w	sl, [r0, #12]
 800b158:	d19d      	bne.n	800b096 <LL_GPIO_Init+0x26>
 800b15a:	fa93 f8a3 	rbit	r8, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b15e:	fab8 f888 	clz	r8, r8
 800b162:	f1b8 0f07 	cmp.w	r8, #7
 800b166:	dc1c      	bgt.n	800b1a2 <LL_GPIO_Init+0x132>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800b168:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800b16c:	fa93 f8a3 	rbit	r8, r3
 800b170:	fab8 f888 	clz	r8, r8
 800b174:	fa93 f9a3 	rbit	r9, r3
 800b178:	fab9 f989 	clz	r9, r9
 800b17c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800b180:	694f      	ldr	r7, [r1, #20]
 800b182:	fa0b f808 	lsl.w	r8, fp, r8
 800b186:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b18a:	ea2a 0a08 	bic.w	sl, sl, r8
 800b18e:	fa07 f809 	lsl.w	r8, r7, r9
 800b192:	ea4a 0a08 	orr.w	sl, sl, r8
 800b196:	f8c0 a020 	str.w	sl, [r0, #32]
}
 800b19a:	e77c      	b.n	800b096 <LL_GPIO_Init+0x26>
  }
  return (SUCCESS);
}
 800b19c:	2000      	movs	r0, #0
 800b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b1a2:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 800b1a6:	ea4f 2813 	mov.w	r8, r3, lsr #8
 800b1aa:	fa98 faa8 	rbit	sl, r8
 800b1ae:	faba fa8a 	clz	sl, sl
 800b1b2:	fa98 f8a8 	rbit	r8, r8
 800b1b6:	fab8 f888 	clz	r8, r8
 800b1ba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800b1be:	694f      	ldr	r7, [r1, #20]
 800b1c0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800b1c4:	fa0b fa0a 	lsl.w	sl, fp, sl
 800b1c8:	fa07 f808 	lsl.w	r8, r7, r8
 800b1cc:	ea29 090a 	bic.w	r9, r9, sl
 800b1d0:	ea49 0908 	orr.w	r9, r9, r8
 800b1d4:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b1d8:	e75d      	b.n	800b096 <LL_GPIO_Init+0x26>
 800b1da:	bf00      	nop

0800b1dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1dc:	b084      	sub	sp, #16
 800b1de:	b410      	push	{r4}
 800b1e0:	f10d 0c08 	add.w	ip, sp, #8
 800b1e4:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800b1e8:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	9803      	ldr	r0, [sp, #12]
             Init.ClockBypass         |\
 800b1ee:	9904      	ldr	r1, [sp, #16]
  tmpreg |= (Init.ClockEdge           |\
 800b1f0:	4303      	orrs	r3, r0
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b1f2:	6850      	ldr	r0, [r2, #4]
             Init.ClockBypass         |\
 800b1f4:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800b1f6:	e9dd 4105 	ldrd	r4, r1, [sp, #20]
 800b1fa:	4323      	orrs	r3, r4
             Init.HardwareFlowControl |\
 800b1fc:	9c07      	ldr	r4, [sp, #28]
             Init.BusWide             |\
 800b1fe:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b200:	4904      	ldr	r1, [pc, #16]	; (800b214 <SDMMC_Init+0x38>)
             Init.HardwareFlowControl |\
 800b202:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b204:	4001      	ands	r1, r0

  return HAL_OK;
}
 800b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20a:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b20c:	430b      	orrs	r3, r1
}
 800b20e:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b210:	6053      	str	r3, [r2, #4]
}
 800b212:	4770      	bx	lr
 800b214:	ffff8100 	.word	0xffff8100

0800b218 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b218:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop

0800b220 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b220:	4603      	mov	r3, r0
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b222:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b224:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b22a:	4770      	bx	lr

0800b22c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b22c:	4603      	mov	r3, r0
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b22e:	2203      	movs	r2, #3

  return HAL_OK;
}
 800b230:	2000      	movs	r0, #0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b232:	601a      	str	r2, [r3, #0]
}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b238:	6800      	ldr	r0, [r0, #0]
}
 800b23a:	f000 0003 	and.w	r0, r0, #3
 800b23e:	4770      	bx	lr

0800b240 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b240:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 800b242:	5840      	ldr	r0, [r0, r1]
}  
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop

0800b248 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b248:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b24a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   |\
 800b24e:	690d      	ldr	r5, [r1, #16]
{
 800b250:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b252:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b254:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800b256:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b258:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 800b25a:	432b      	orrs	r3, r5
                       Data->TransferMode  |\
 800b25c:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 800b25e:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b260:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 800b262:	4303      	orrs	r3, r0

  return HAL_OK;

}
 800b264:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b266:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
 800b26a:	430b      	orrs	r3, r1
}
 800b26c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b26e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop

0800b274 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b274:	4b50      	ldr	r3, [pc, #320]	; (800b3b8 <SDMMC_CmdBlockLength+0x144>)
{
 800b276:	4684      	mov	ip, r0
 800b278:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	4c4f      	ldr	r4, [pc, #316]	; (800b3bc <SDMMC_CmdBlockLength+0x148>)
  SDMMCx->ARG = Command->Argument;
 800b27e:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b280:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b284:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b286:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b28a:	4b4d      	ldr	r3, [pc, #308]	; (800b3c0 <SDMMC_CmdBlockLength+0x14c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b28c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b28e:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b290:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b294:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
 800b298:	f8cc 300c 	str.w	r3, [ip, #12]
  
  do
  {
    if (count-- == 0U)
 800b29c:	b152      	cbz	r2, 800b2b4 <SDMMC_CmdBlockLength+0x40>
 800b29e:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800b2a0:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b2a4:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2a6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b2aa:	d001      	beq.n	800b2b0 <SDMMC_CmdBlockLength+0x3c>
 800b2ac:	0510      	lsls	r0, r2, #20
 800b2ae:	d506      	bpl.n	800b2be <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800b2b0:	1c5c      	adds	r4, r3, #1
 800b2b2:	d1f5      	bne.n	800b2a0 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800b2b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b2b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2bc:	4770      	bx	lr
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2be:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b2c2:	0759      	lsls	r1, r3, #29
 800b2c4:	d442      	bmi.n	800b34c <SDMMC_CmdBlockLength+0xd8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2c6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b2ca:	f010 0001 	ands.w	r0, r0, #1
 800b2ce:	d137      	bne.n	800b340 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2d0:	23c5      	movs	r3, #197	; 0xc5
 800b2d2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2d6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b10      	cmp	r3, #16
 800b2de:	d133      	bne.n	800b348 <SDMMC_CmdBlockLength+0xd4>
  return (*(__IO uint32_t *) tmp);
 800b2e0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b2e4:	4837      	ldr	r0, [pc, #220]	; (800b3c4 <SDMMC_CmdBlockLength+0x150>)
 800b2e6:	4018      	ands	r0, r3
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d0e5      	beq.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	db32      	blt.n	800b356 <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b2f0:	005a      	lsls	r2, r3, #1
 800b2f2:	d433      	bmi.n	800b35c <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b2f4:	009c      	lsls	r4, r3, #2
 800b2f6:	d433      	bmi.n	800b360 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b2f8:	00d9      	lsls	r1, r3, #3
 800b2fa:	d433      	bmi.n	800b364 <SDMMC_CmdBlockLength+0xf0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2fc:	011a      	lsls	r2, r3, #4
 800b2fe:	d434      	bmi.n	800b36a <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b300:	015c      	lsls	r4, r3, #5
 800b302:	d435      	bmi.n	800b370 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b304:	01d9      	lsls	r1, r3, #7
 800b306:	d436      	bmi.n	800b376 <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b308:	021a      	lsls	r2, r3, #8
 800b30a:	d437      	bmi.n	800b37c <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b30c:	025c      	lsls	r4, r3, #9
 800b30e:	d438      	bmi.n	800b382 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b310:	0299      	lsls	r1, r3, #10
 800b312:	d442      	bmi.n	800b39a <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b314:	02da      	lsls	r2, r3, #11
 800b316:	d43d      	bmi.n	800b394 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b318:	035c      	lsls	r4, r3, #13
 800b31a:	d438      	bmi.n	800b38e <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b31c:	0399      	lsls	r1, r3, #14
 800b31e:	d433      	bmi.n	800b388 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b320:	03da      	lsls	r2, r3, #15
 800b322:	d446      	bmi.n	800b3b2 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b324:	041c      	lsls	r4, r3, #16
 800b326:	d441      	bmi.n	800b3ac <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b328:	0459      	lsls	r1, r3, #17
 800b32a:	d43c      	bmi.n	800b3a6 <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b32c:	049a      	lsls	r2, r3, #18
 800b32e:	d437      	bmi.n	800b3a0 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b330:	f013 0f08 	tst.w	r3, #8
 800b334:	bf14      	ite	ne
 800b336:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b33a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b33e:	e7bb      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b340:	2301      	movs	r3, #1
 800b342:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b346:	e7b7      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b348:	2001      	movs	r0, #1
 800b34a:	e7b5      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b34c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b34e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b350:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b354:	e7b0      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b356:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b35a:	e7ad      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b35c:	2040      	movs	r0, #64	; 0x40
 800b35e:	e7ab      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b360:	2080      	movs	r0, #128	; 0x80
 800b362:	e7a9      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b364:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b368:	e7a6      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b36a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b36e:	e7a3      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b370:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b374:	e7a0      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b376:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b37a:	e79d      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b37c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b380:	e79a      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b382:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b386:	e797      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b388:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b38c:	e794      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b38e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b392:	e791      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CC_ERR;
 800b394:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b398:	e78e      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b39a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b39e:	e78b      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800b3a0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b3a4:	e788      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b3a6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b3aa:	e785      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b3ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b3b0:	e782      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b3b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b3b6:	e77f      	b.n	800b2b8 <SDMMC_CmdBlockLength+0x44>
 800b3b8:	20000018 	.word	0x20000018
 800b3bc:	10624dd3 	.word	0x10624dd3
 800b3c0:	fffff000 	.word	0xfffff000
 800b3c4:	fdffe008 	.word	0xfdffe008

0800b3c8 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3c8:	4a50      	ldr	r2, [pc, #320]	; (800b50c <SDMMC_CmdReadSingleBlock+0x144>)
{
 800b3ca:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3cc:	4b50      	ldr	r3, [pc, #320]	; (800b510 <SDMMC_CmdReadSingleBlock+0x148>)
 800b3ce:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b3d0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3d4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b3d8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b3dc:	484d      	ldr	r0, [pc, #308]	; (800b514 <SDMMC_CmdReadSingleBlock+0x14c>)
 800b3de:	f240 4351 	movw	r3, #1105	; 0x451
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b3e4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3e6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b3ea:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3ec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b3f0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b3f4:	1e53      	subs	r3, r2, #1
 800b3f6:	b14a      	cbz	r2, 800b40c <SDMMC_CmdReadSingleBlock+0x44>
    sta_reg = SDMMCx->STA;
 800b3f8:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b3fc:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3fe:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b402:	d001      	beq.n	800b408 <SDMMC_CmdReadSingleBlock+0x40>
 800b404:	0512      	lsls	r2, r2, #20
 800b406:	d504      	bpl.n	800b412 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800b408:	1c59      	adds	r1, r3, #1
 800b40a:	d1f5      	bne.n	800b3f8 <SDMMC_CmdReadSingleBlock+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800b40c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b410:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b412:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b416:	0758      	lsls	r0, r3, #29
 800b418:	d445      	bmi.n	800b4a6 <SDMMC_CmdReadSingleBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b41a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b41e:	f010 0001 	ands.w	r0, r0, #1
 800b422:	d137      	bne.n	800b494 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b424:	23c5      	movs	r3, #197	; 0xc5
 800b426:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b42a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b11      	cmp	r3, #17
 800b432:	d136      	bne.n	800b4a2 <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b434:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b438:	4837      	ldr	r0, [pc, #220]	; (800b518 <SDMMC_CmdReadSingleBlock+0x150>)
 800b43a:	4018      	ands	r0, r3
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d02f      	beq.n	800b4a0 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b440:	2b00      	cmp	r3, #0
 800b442:	db35      	blt.n	800b4b0 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b444:	0059      	lsls	r1, r3, #1
 800b446:	d436      	bmi.n	800b4b6 <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b448:	009a      	lsls	r2, r3, #2
 800b44a:	d436      	bmi.n	800b4ba <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b44c:	00d9      	lsls	r1, r3, #3
 800b44e:	d436      	bmi.n	800b4be <SDMMC_CmdReadSingleBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b450:	011a      	lsls	r2, r3, #4
 800b452:	d437      	bmi.n	800b4c4 <SDMMC_CmdReadSingleBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b454:	0159      	lsls	r1, r3, #5
 800b456:	d438      	bmi.n	800b4ca <SDMMC_CmdReadSingleBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b458:	01da      	lsls	r2, r3, #7
 800b45a:	d439      	bmi.n	800b4d0 <SDMMC_CmdReadSingleBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b45c:	0219      	lsls	r1, r3, #8
 800b45e:	d43a      	bmi.n	800b4d6 <SDMMC_CmdReadSingleBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b460:	025a      	lsls	r2, r3, #9
 800b462:	d43b      	bmi.n	800b4dc <SDMMC_CmdReadSingleBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b464:	0299      	lsls	r1, r3, #10
 800b466:	d445      	bmi.n	800b4f4 <SDMMC_CmdReadSingleBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b468:	02da      	lsls	r2, r3, #11
 800b46a:	d440      	bmi.n	800b4ee <SDMMC_CmdReadSingleBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b46c:	0359      	lsls	r1, r3, #13
 800b46e:	d43b      	bmi.n	800b4e8 <SDMMC_CmdReadSingleBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b470:	039a      	lsls	r2, r3, #14
 800b472:	d436      	bmi.n	800b4e2 <SDMMC_CmdReadSingleBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b474:	03d9      	lsls	r1, r3, #15
 800b476:	d446      	bmi.n	800b506 <SDMMC_CmdReadSingleBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b478:	041a      	lsls	r2, r3, #16
 800b47a:	d441      	bmi.n	800b500 <SDMMC_CmdReadSingleBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b47c:	0459      	lsls	r1, r3, #17
 800b47e:	d43c      	bmi.n	800b4fa <SDMMC_CmdReadSingleBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b480:	049a      	lsls	r2, r3, #18
 800b482:	d40b      	bmi.n	800b49c <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b484:	f013 0f08 	tst.w	r3, #8
 800b488:	bf14      	ite	ne
 800b48a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b48e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b492:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b494:	2301      	movs	r3, #1
 800b496:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b49a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b49c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b4a0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4a6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4a8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4ae:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b4b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b4b4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b4b6:	2040      	movs	r0, #64	; 0x40
 800b4b8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b4ba:	2080      	movs	r0, #128	; 0x80
 800b4bc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b4be:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b4c2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b4c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b4c8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b4ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b4ce:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b4d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b4d4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b4da:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b4e0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b4e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b4e6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b4e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b4ec:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b4ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b4f2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b4f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b4f8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b4fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b4fe:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b500:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b504:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b506:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b50a:	4770      	bx	lr
 800b50c:	20000018 	.word	0x20000018
 800b510:	10624dd3 	.word	0x10624dd3
 800b514:	fffff000 	.word	0xfffff000
 800b518:	fdffe008 	.word	0xfdffe008

0800b51c <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b51c:	4a50      	ldr	r2, [pc, #320]	; (800b660 <SDMMC_CmdReadMultiBlock+0x144>)
{
 800b51e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b520:	4b50      	ldr	r3, [pc, #320]	; (800b664 <SDMMC_CmdReadMultiBlock+0x148>)
 800b522:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b524:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b528:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b52c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b530:	484d      	ldr	r0, [pc, #308]	; (800b668 <SDMMC_CmdReadMultiBlock+0x14c>)
 800b532:	f240 4352 	movw	r3, #1106	; 0x452
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b536:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b538:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b53a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b53e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b540:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b544:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b548:	1e53      	subs	r3, r2, #1
 800b54a:	b14a      	cbz	r2, 800b560 <SDMMC_CmdReadMultiBlock+0x44>
    sta_reg = SDMMCx->STA;
 800b54c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b550:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b552:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b556:	d001      	beq.n	800b55c <SDMMC_CmdReadMultiBlock+0x40>
 800b558:	0512      	lsls	r2, r2, #20
 800b55a:	d504      	bpl.n	800b566 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800b55c:	1c59      	adds	r1, r3, #1
 800b55e:	d1f5      	bne.n	800b54c <SDMMC_CmdReadMultiBlock+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800b560:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b564:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b566:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b56a:	0758      	lsls	r0, r3, #29
 800b56c:	d445      	bmi.n	800b5fa <SDMMC_CmdReadMultiBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b56e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b572:	f010 0001 	ands.w	r0, r0, #1
 800b576:	d137      	bne.n	800b5e8 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b578:	23c5      	movs	r3, #197	; 0xc5
 800b57a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b57e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b12      	cmp	r3, #18
 800b586:	d136      	bne.n	800b5f6 <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b588:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b58c:	4837      	ldr	r0, [pc, #220]	; (800b66c <SDMMC_CmdReadMultiBlock+0x150>)
 800b58e:	4018      	ands	r0, r3
 800b590:	2800      	cmp	r0, #0
 800b592:	d02f      	beq.n	800b5f4 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b594:	2b00      	cmp	r3, #0
 800b596:	db35      	blt.n	800b604 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b598:	0059      	lsls	r1, r3, #1
 800b59a:	d436      	bmi.n	800b60a <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b59c:	009a      	lsls	r2, r3, #2
 800b59e:	d436      	bmi.n	800b60e <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5a0:	00d9      	lsls	r1, r3, #3
 800b5a2:	d436      	bmi.n	800b612 <SDMMC_CmdReadMultiBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b5a4:	011a      	lsls	r2, r3, #4
 800b5a6:	d437      	bmi.n	800b618 <SDMMC_CmdReadMultiBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5a8:	0159      	lsls	r1, r3, #5
 800b5aa:	d438      	bmi.n	800b61e <SDMMC_CmdReadMultiBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5ac:	01da      	lsls	r2, r3, #7
 800b5ae:	d439      	bmi.n	800b624 <SDMMC_CmdReadMultiBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b5b0:	0219      	lsls	r1, r3, #8
 800b5b2:	d43a      	bmi.n	800b62a <SDMMC_CmdReadMultiBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b5b4:	025a      	lsls	r2, r3, #9
 800b5b6:	d43b      	bmi.n	800b630 <SDMMC_CmdReadMultiBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b5b8:	0299      	lsls	r1, r3, #10
 800b5ba:	d445      	bmi.n	800b648 <SDMMC_CmdReadMultiBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b5bc:	02da      	lsls	r2, r3, #11
 800b5be:	d440      	bmi.n	800b642 <SDMMC_CmdReadMultiBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b5c0:	0359      	lsls	r1, r3, #13
 800b5c2:	d43b      	bmi.n	800b63c <SDMMC_CmdReadMultiBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b5c4:	039a      	lsls	r2, r3, #14
 800b5c6:	d436      	bmi.n	800b636 <SDMMC_CmdReadMultiBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b5c8:	03d9      	lsls	r1, r3, #15
 800b5ca:	d446      	bmi.n	800b65a <SDMMC_CmdReadMultiBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b5cc:	041a      	lsls	r2, r3, #16
 800b5ce:	d441      	bmi.n	800b654 <SDMMC_CmdReadMultiBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b5d0:	0459      	lsls	r1, r3, #17
 800b5d2:	d43c      	bmi.n	800b64e <SDMMC_CmdReadMultiBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b5d4:	049a      	lsls	r2, r3, #18
 800b5d6:	d40b      	bmi.n	800b5f0 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b5d8:	f013 0f08 	tst.w	r3, #8
 800b5dc:	bf14      	ite	ne
 800b5de:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b5e2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b5e6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5ee:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b5f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b5f4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5fa:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5fc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5fe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b602:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b604:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b608:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b60a:	2040      	movs	r0, #64	; 0x40
 800b60c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b60e:	2080      	movs	r0, #128	; 0x80
 800b610:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b612:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b616:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b618:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b61c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b61e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b622:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b624:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b628:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b62a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b62e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b630:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b634:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b636:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b63a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b63c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b640:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b642:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b646:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b648:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b64c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b64e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b652:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b654:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b658:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b65a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b65e:	4770      	bx	lr
 800b660:	20000018 	.word	0x20000018
 800b664:	10624dd3 	.word	0x10624dd3
 800b668:	fffff000 	.word	0xfffff000
 800b66c:	fdffe008 	.word	0xfdffe008

0800b670 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b670:	4b50      	ldr	r3, [pc, #320]	; (800b7b4 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 800b672:	4684      	mov	ip, r0
 800b674:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	4c4f      	ldr	r4, [pc, #316]	; (800b7b8 <SDMMC_CmdWriteSingleBlock+0x148>)
  SDMMCx->ARG = Command->Argument;
 800b67a:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b67c:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b680:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b682:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b686:	4b4d      	ldr	r3, [pc, #308]	; (800b7bc <SDMMC_CmdWriteSingleBlock+0x14c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b688:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b68a:	4003      	ands	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b68c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b690:	f443 638b 	orr.w	r3, r3, #1112	; 0x458
 800b694:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b698:	b152      	cbz	r2, 800b6b0 <SDMMC_CmdWriteSingleBlock+0x40>
 800b69a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800b69c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b6a0:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6a2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b6a6:	d001      	beq.n	800b6ac <SDMMC_CmdWriteSingleBlock+0x3c>
 800b6a8:	0510      	lsls	r0, r2, #20
 800b6aa:	d506      	bpl.n	800b6ba <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800b6ac:	1c5c      	adds	r4, r3, #1
 800b6ae:	d1f5      	bne.n	800b69c <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800b6b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6b8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6ba:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b6be:	0759      	lsls	r1, r3, #29
 800b6c0:	d442      	bmi.n	800b748 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6c2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b6c6:	f010 0001 	ands.w	r0, r0, #1
 800b6ca:	d137      	bne.n	800b73c <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6cc:	23c5      	movs	r3, #197	; 0xc5
 800b6ce:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b6d2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b18      	cmp	r3, #24
 800b6da:	d133      	bne.n	800b744 <SDMMC_CmdWriteSingleBlock+0xd4>
  return (*(__IO uint32_t *) tmp);
 800b6dc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6e0:	4837      	ldr	r0, [pc, #220]	; (800b7c0 <SDMMC_CmdWriteSingleBlock+0x150>)
 800b6e2:	4018      	ands	r0, r3
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d0e5      	beq.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	db32      	blt.n	800b752 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6ec:	005a      	lsls	r2, r3, #1
 800b6ee:	d433      	bmi.n	800b758 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6f0:	009c      	lsls	r4, r3, #2
 800b6f2:	d433      	bmi.n	800b75c <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6f4:	00d9      	lsls	r1, r3, #3
 800b6f6:	d433      	bmi.n	800b760 <SDMMC_CmdWriteSingleBlock+0xf0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6f8:	011a      	lsls	r2, r3, #4
 800b6fa:	d434      	bmi.n	800b766 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b6fc:	015c      	lsls	r4, r3, #5
 800b6fe:	d435      	bmi.n	800b76c <SDMMC_CmdWriteSingleBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b700:	01d9      	lsls	r1, r3, #7
 800b702:	d436      	bmi.n	800b772 <SDMMC_CmdWriteSingleBlock+0x102>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b704:	021a      	lsls	r2, r3, #8
 800b706:	d437      	bmi.n	800b778 <SDMMC_CmdWriteSingleBlock+0x108>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b708:	025c      	lsls	r4, r3, #9
 800b70a:	d438      	bmi.n	800b77e <SDMMC_CmdWriteSingleBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b70c:	0299      	lsls	r1, r3, #10
 800b70e:	d442      	bmi.n	800b796 <SDMMC_CmdWriteSingleBlock+0x126>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b710:	02da      	lsls	r2, r3, #11
 800b712:	d43d      	bmi.n	800b790 <SDMMC_CmdWriteSingleBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b714:	035c      	lsls	r4, r3, #13
 800b716:	d438      	bmi.n	800b78a <SDMMC_CmdWriteSingleBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b718:	0399      	lsls	r1, r3, #14
 800b71a:	d433      	bmi.n	800b784 <SDMMC_CmdWriteSingleBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b71c:	03da      	lsls	r2, r3, #15
 800b71e:	d446      	bmi.n	800b7ae <SDMMC_CmdWriteSingleBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b720:	041c      	lsls	r4, r3, #16
 800b722:	d441      	bmi.n	800b7a8 <SDMMC_CmdWriteSingleBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b724:	0459      	lsls	r1, r3, #17
 800b726:	d43c      	bmi.n	800b7a2 <SDMMC_CmdWriteSingleBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b728:	049a      	lsls	r2, r3, #18
 800b72a:	d437      	bmi.n	800b79c <SDMMC_CmdWriteSingleBlock+0x12c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b72c:	f013 0f08 	tst.w	r3, #8
 800b730:	bf14      	ite	ne
 800b732:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b736:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b73a:	e7bb      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b73c:	2301      	movs	r3, #1
 800b73e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b742:	e7b7      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b744:	2001      	movs	r0, #1
 800b746:	e7b5      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b748:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b74a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b74c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b750:	e7b0      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b752:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b756:	e7ad      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b758:	2040      	movs	r0, #64	; 0x40
 800b75a:	e7ab      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b75c:	2080      	movs	r0, #128	; 0x80
 800b75e:	e7a9      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b760:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b764:	e7a6      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b76a:	e7a3      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b76c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b770:	e7a0      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b772:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b776:	e79d      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b778:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b77c:	e79a      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b77e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b782:	e797      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b784:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b788:	e794      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b78a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b78e:	e791      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CC_ERR;
 800b790:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b794:	e78e      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b796:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b79a:	e78b      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800b79c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b7a0:	e788      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b7a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b7a6:	e785      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b7a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b7ac:	e782      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b7ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b7b2:	e77f      	b.n	800b6b4 <SDMMC_CmdWriteSingleBlock+0x44>
 800b7b4:	20000018 	.word	0x20000018
 800b7b8:	10624dd3 	.word	0x10624dd3
 800b7bc:	fffff000 	.word	0xfffff000
 800b7c0:	fdffe008 	.word	0xfdffe008

0800b7c4 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7c4:	4a50      	ldr	r2, [pc, #320]	; (800b908 <SDMMC_CmdWriteMultiBlock+0x144>)
{
 800b7c6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7c8:	4b50      	ldr	r3, [pc, #320]	; (800b90c <SDMMC_CmdWriteMultiBlock+0x148>)
 800b7ca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b7cc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7d0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b7d4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b7d8:	484d      	ldr	r0, [pc, #308]	; (800b910 <SDMMC_CmdWriteMultiBlock+0x14c>)
 800b7da:	f240 4359 	movw	r3, #1113	; 0x459
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b7e0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7e2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b7e6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7e8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b7ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b7f0:	1e53      	subs	r3, r2, #1
 800b7f2:	b14a      	cbz	r2, 800b808 <SDMMC_CmdWriteMultiBlock+0x44>
    sta_reg = SDMMCx->STA;
 800b7f4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b7f8:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7fa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b7fe:	d001      	beq.n	800b804 <SDMMC_CmdWriteMultiBlock+0x40>
 800b800:	0512      	lsls	r2, r2, #20
 800b802:	d504      	bpl.n	800b80e <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800b804:	1c59      	adds	r1, r3, #1
 800b806:	d1f5      	bne.n	800b7f4 <SDMMC_CmdWriteMultiBlock+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800b808:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b80c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b80e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b812:	0758      	lsls	r0, r3, #29
 800b814:	d445      	bmi.n	800b8a2 <SDMMC_CmdWriteMultiBlock+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b816:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b81a:	f010 0001 	ands.w	r0, r0, #1
 800b81e:	d137      	bne.n	800b890 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b820:	23c5      	movs	r3, #197	; 0xc5
 800b822:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b826:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b19      	cmp	r3, #25
 800b82e:	d136      	bne.n	800b89e <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b830:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b834:	4837      	ldr	r0, [pc, #220]	; (800b914 <SDMMC_CmdWriteMultiBlock+0x150>)
 800b836:	4018      	ands	r0, r3
 800b838:	2800      	cmp	r0, #0
 800b83a:	d02f      	beq.n	800b89c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	db35      	blt.n	800b8ac <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b840:	0059      	lsls	r1, r3, #1
 800b842:	d436      	bmi.n	800b8b2 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b844:	009a      	lsls	r2, r3, #2
 800b846:	d436      	bmi.n	800b8b6 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b848:	00d9      	lsls	r1, r3, #3
 800b84a:	d436      	bmi.n	800b8ba <SDMMC_CmdWriteMultiBlock+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b84c:	011a      	lsls	r2, r3, #4
 800b84e:	d437      	bmi.n	800b8c0 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b850:	0159      	lsls	r1, r3, #5
 800b852:	d438      	bmi.n	800b8c6 <SDMMC_CmdWriteMultiBlock+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b854:	01da      	lsls	r2, r3, #7
 800b856:	d439      	bmi.n	800b8cc <SDMMC_CmdWriteMultiBlock+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b858:	0219      	lsls	r1, r3, #8
 800b85a:	d43a      	bmi.n	800b8d2 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b85c:	025a      	lsls	r2, r3, #9
 800b85e:	d43b      	bmi.n	800b8d8 <SDMMC_CmdWriteMultiBlock+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b860:	0299      	lsls	r1, r3, #10
 800b862:	d445      	bmi.n	800b8f0 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b864:	02da      	lsls	r2, r3, #11
 800b866:	d440      	bmi.n	800b8ea <SDMMC_CmdWriteMultiBlock+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b868:	0359      	lsls	r1, r3, #13
 800b86a:	d43b      	bmi.n	800b8e4 <SDMMC_CmdWriteMultiBlock+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b86c:	039a      	lsls	r2, r3, #14
 800b86e:	d436      	bmi.n	800b8de <SDMMC_CmdWriteMultiBlock+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b870:	03d9      	lsls	r1, r3, #15
 800b872:	d446      	bmi.n	800b902 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b874:	041a      	lsls	r2, r3, #16
 800b876:	d441      	bmi.n	800b8fc <SDMMC_CmdWriteMultiBlock+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b878:	0459      	lsls	r1, r3, #17
 800b87a:	d43c      	bmi.n	800b8f6 <SDMMC_CmdWriteMultiBlock+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b87c:	049a      	lsls	r2, r3, #18
 800b87e:	d40b      	bmi.n	800b898 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b880:	f013 0f08 	tst.w	r3, #8
 800b884:	bf14      	ite	ne
 800b886:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b88a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b88e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b890:	2301      	movs	r3, #1
 800b892:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b896:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b898:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b89c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b89e:	2001      	movs	r0, #1
 800b8a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8a2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8a4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8aa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8ac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b8b0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8b2:	2040      	movs	r0, #64	; 0x40
 800b8b4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8b6:	2080      	movs	r0, #128	; 0x80
 800b8b8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b8be:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b8c4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b8ca:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b8d0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b8d6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b8dc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b8e2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b8e8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b8ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b8ee:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b8f4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b8f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b8fa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b900:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b902:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b906:	4770      	bx	lr
 800b908:	20000018 	.word	0x20000018
 800b90c:	10624dd3 	.word	0x10624dd3
 800b910:	fffff000 	.word	0xfffff000
 800b914:	fdffe008 	.word	0xfdffe008

0800b918 <SDMMC_CmdStopTransfer>:
{
 800b918:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b91a:	4a4c      	ldr	r2, [pc, #304]	; (800ba4c <SDMMC_CmdStopTransfer+0x134>)
 800b91c:	4b4c      	ldr	r3, [pc, #304]	; (800ba50 <SDMMC_CmdStopTransfer+0x138>)
 800b91e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b920:	484c      	ldr	r0, [pc, #304]	; (800ba54 <SDMMC_CmdStopTransfer+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b922:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b926:	f240 434c 	movw	r3, #1100	; 0x44c
{
 800b92a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800b92c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b92e:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800b930:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b932:	68cc      	ldr	r4, [r1, #12]
 800b934:	4020      	ands	r0, r4
 800b936:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b938:	4847      	ldr	r0, [pc, #284]	; (800ba58 <SDMMC_CmdStopTransfer+0x140>)
 800b93a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b93e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800b940:	b14a      	cbz	r2, 800b956 <SDMMC_CmdStopTransfer+0x3e>
 800b942:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800b944:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800b946:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b948:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b94c:	d001      	beq.n	800b952 <SDMMC_CmdStopTransfer+0x3a>
 800b94e:	0514      	lsls	r4, r2, #20
 800b950:	d506      	bpl.n	800b960 <SDMMC_CmdStopTransfer+0x48>
    if (count-- == 0U)
 800b952:	1c5a      	adds	r2, r3, #1
 800b954:	d1f6      	bne.n	800b944 <SDMMC_CmdStopTransfer+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800b956:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b95e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b960:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b962:	0758      	lsls	r0, r3, #29
 800b964:	d43d      	bmi.n	800b9e2 <SDMMC_CmdStopTransfer+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b966:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b968:	f010 0001 	ands.w	r0, r0, #1
 800b96c:	d134      	bne.n	800b9d8 <SDMMC_CmdStopTransfer+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b96e:	23c5      	movs	r3, #197	; 0xc5
 800b970:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b972:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b0c      	cmp	r3, #12
 800b978:	d131      	bne.n	800b9de <SDMMC_CmdStopTransfer+0xc6>
  return (*(__IO uint32_t *) tmp);
 800b97a:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b97c:	4837      	ldr	r0, [pc, #220]	; (800ba5c <SDMMC_CmdStopTransfer+0x144>)
 800b97e:	4018      	ands	r0, r3
 800b980:	2800      	cmp	r0, #0
 800b982:	d0ea      	beq.n	800b95a <SDMMC_CmdStopTransfer+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b984:	2b00      	cmp	r3, #0
 800b986:	db30      	blt.n	800b9ea <SDMMC_CmdStopTransfer+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b988:	005a      	lsls	r2, r3, #1
 800b98a:	d431      	bmi.n	800b9f0 <SDMMC_CmdStopTransfer+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b98c:	009c      	lsls	r4, r3, #2
 800b98e:	d431      	bmi.n	800b9f4 <SDMMC_CmdStopTransfer+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b990:	00d9      	lsls	r1, r3, #3
 800b992:	d431      	bmi.n	800b9f8 <SDMMC_CmdStopTransfer+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b994:	011a      	lsls	r2, r3, #4
 800b996:	d432      	bmi.n	800b9fe <SDMMC_CmdStopTransfer+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b998:	015c      	lsls	r4, r3, #5
 800b99a:	d433      	bmi.n	800ba04 <SDMMC_CmdStopTransfer+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b99c:	01d9      	lsls	r1, r3, #7
 800b99e:	d434      	bmi.n	800ba0a <SDMMC_CmdStopTransfer+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9a0:	021a      	lsls	r2, r3, #8
 800b9a2:	d435      	bmi.n	800ba10 <SDMMC_CmdStopTransfer+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9a4:	025c      	lsls	r4, r3, #9
 800b9a6:	d436      	bmi.n	800ba16 <SDMMC_CmdStopTransfer+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9a8:	0299      	lsls	r1, r3, #10
 800b9aa:	d440      	bmi.n	800ba2e <SDMMC_CmdStopTransfer+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9ac:	02da      	lsls	r2, r3, #11
 800b9ae:	d43b      	bmi.n	800ba28 <SDMMC_CmdStopTransfer+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9b0:	035c      	lsls	r4, r3, #13
 800b9b2:	d436      	bmi.n	800ba22 <SDMMC_CmdStopTransfer+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9b4:	0399      	lsls	r1, r3, #14
 800b9b6:	d431      	bmi.n	800ba1c <SDMMC_CmdStopTransfer+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9b8:	03da      	lsls	r2, r3, #15
 800b9ba:	d444      	bmi.n	800ba46 <SDMMC_CmdStopTransfer+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9bc:	041c      	lsls	r4, r3, #16
 800b9be:	d43f      	bmi.n	800ba40 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9c0:	0459      	lsls	r1, r3, #17
 800b9c2:	d43a      	bmi.n	800ba3a <SDMMC_CmdStopTransfer+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9c4:	049a      	lsls	r2, r3, #18
 800b9c6:	d435      	bmi.n	800ba34 <SDMMC_CmdStopTransfer+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9c8:	f013 0f08 	tst.w	r3, #8
 800b9cc:	bf14      	ite	ne
 800b9ce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b9d2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b9d6:	e7c0      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9d8:	2301      	movs	r3, #1
 800b9da:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9dc:	e7bd      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e7bb      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9e2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9e4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9e6:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9e8:	e7b7      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9ea:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b9ee:	e7b4      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9f0:	2040      	movs	r0, #64	; 0x40
 800b9f2:	e7b2      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b9f4:	2080      	movs	r0, #128	; 0x80
 800b9f6:	e7b0      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b9f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b9fc:	e7ad      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b9fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ba02:	e7aa      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ba08:	e7a7      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ba0e:	e7a4      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ba14:	e7a1      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba16:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ba1a:	e79e      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ba20:	e79b      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ba26:	e798      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_CC_ERR;
 800ba28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ba2c:	e795      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ba32:	e792      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800ba34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ba38:	e78f      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ba3e:	e78c      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ba44:	e789      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ba4a:	e786      	b.n	800b95a <SDMMC_CmdStopTransfer+0x42>
 800ba4c:	20000018 	.word	0x20000018
 800ba50:	10624dd3 	.word	0x10624dd3
 800ba54:	fffff000 	.word	0xfffff000
 800ba58:	05f5e100 	.word	0x05f5e100
 800ba5c:	fdffe008 	.word	0xfdffe008

0800ba60 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba60:	4b4c      	ldr	r3, [pc, #304]	; (800bb94 <SDMMC_CmdSelDesel+0x134>)
{
 800ba62:	4601      	mov	r1, r0
 800ba64:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4d4b      	ldr	r5, [pc, #300]	; (800bb98 <SDMMC_CmdSelDesel+0x138>)
  SDMMCx->ARG = Command->Argument;
 800ba6a:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba6c:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba70:	4c4a      	ldr	r4, [pc, #296]	; (800bb9c <SDMMC_CmdSelDesel+0x13c>)
 800ba72:	68c5      	ldr	r5, [r0, #12]
 800ba74:	f240 4047 	movw	r0, #1095	; 0x447
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba78:	0a5a      	lsrs	r2, r3, #9
 800ba7a:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba7e:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba80:	fb03 f202 	mul.w	r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba84:	4320      	orrs	r0, r4
 800ba86:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800ba88:	b14a      	cbz	r2, 800ba9e <SDMMC_CmdSelDesel+0x3e>
 800ba8a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800ba8c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800ba8e:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba90:	f012 0f45 	tst.w	r2, #69	; 0x45
 800ba94:	d001      	beq.n	800ba9a <SDMMC_CmdSelDesel+0x3a>
 800ba96:	0512      	lsls	r2, r2, #20
 800ba98:	d505      	bpl.n	800baa6 <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 800ba9a:	1c58      	adds	r0, r3, #1
 800ba9c:	d1f6      	bne.n	800ba8c <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ba9e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800baa2:	bc30      	pop	{r4, r5}
 800baa4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800baa8:	075b      	lsls	r3, r3, #29
 800baaa:	d43d      	bmi.n	800bb28 <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baac:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800baae:	f010 0001 	ands.w	r0, r0, #1
 800bab2:	d134      	bne.n	800bb1e <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab4:	23c5      	movs	r3, #197	; 0xc5
 800bab6:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bab8:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b07      	cmp	r3, #7
 800babe:	d131      	bne.n	800bb24 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 800bac0:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bac2:	4837      	ldr	r0, [pc, #220]	; (800bba0 <SDMMC_CmdSelDesel+0x140>)
 800bac4:	4018      	ands	r0, r3
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d0eb      	beq.n	800baa2 <SDMMC_CmdSelDesel+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800baca:	2b00      	cmp	r3, #0
 800bacc:	db30      	blt.n	800bb30 <SDMMC_CmdSelDesel+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bace:	005d      	lsls	r5, r3, #1
 800bad0:	d431      	bmi.n	800bb36 <SDMMC_CmdSelDesel+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bad2:	009c      	lsls	r4, r3, #2
 800bad4:	d431      	bmi.n	800bb3a <SDMMC_CmdSelDesel+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bad6:	00d9      	lsls	r1, r3, #3
 800bad8:	d431      	bmi.n	800bb3e <SDMMC_CmdSelDesel+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bada:	011a      	lsls	r2, r3, #4
 800badc:	d432      	bmi.n	800bb44 <SDMMC_CmdSelDesel+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bade:	015d      	lsls	r5, r3, #5
 800bae0:	d433      	bmi.n	800bb4a <SDMMC_CmdSelDesel+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bae2:	01dc      	lsls	r4, r3, #7
 800bae4:	d434      	bmi.n	800bb50 <SDMMC_CmdSelDesel+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bae6:	0219      	lsls	r1, r3, #8
 800bae8:	d435      	bmi.n	800bb56 <SDMMC_CmdSelDesel+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800baea:	025a      	lsls	r2, r3, #9
 800baec:	d436      	bmi.n	800bb5c <SDMMC_CmdSelDesel+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800baee:	029d      	lsls	r5, r3, #10
 800baf0:	d440      	bmi.n	800bb74 <SDMMC_CmdSelDesel+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800baf2:	02dc      	lsls	r4, r3, #11
 800baf4:	d43b      	bmi.n	800bb6e <SDMMC_CmdSelDesel+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800baf6:	0359      	lsls	r1, r3, #13
 800baf8:	d436      	bmi.n	800bb68 <SDMMC_CmdSelDesel+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bafa:	039a      	lsls	r2, r3, #14
 800bafc:	d431      	bmi.n	800bb62 <SDMMC_CmdSelDesel+0x102>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bafe:	03dd      	lsls	r5, r3, #15
 800bb00:	d444      	bmi.n	800bb8c <SDMMC_CmdSelDesel+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb02:	041c      	lsls	r4, r3, #16
 800bb04:	d43f      	bmi.n	800bb86 <SDMMC_CmdSelDesel+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb06:	0459      	lsls	r1, r3, #17
 800bb08:	d43a      	bmi.n	800bb80 <SDMMC_CmdSelDesel+0x120>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb0a:	049a      	lsls	r2, r3, #18
 800bb0c:	d435      	bmi.n	800bb7a <SDMMC_CmdSelDesel+0x11a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb0e:	f013 0f08 	tst.w	r3, #8
 800bb12:	bf14      	ite	ne
 800bb14:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bb18:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bb1c:	e7c1      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb1e:	2301      	movs	r3, #1
 800bb20:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb22:	e7be      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb24:	2001      	movs	r0, #1
 800bb26:	e7bc      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb28:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb2a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb2c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb2e:	e7b8      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb30:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bb34:	e7b5      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb36:	2040      	movs	r0, #64	; 0x40
 800bb38:	e7b3      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb3a:	2080      	movs	r0, #128	; 0x80
 800bb3c:	e7b1      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bb42:	e7ae      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb44:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb48:	e7ab      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb4e:	e7a8      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bb54:	e7a5      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bb5a:	e7a2      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bb60:	e79f      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb62:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bb66:	e79c      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bb6c:	e799      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CC_ERR;
 800bb6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bb72:	e796      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bb78:	e793      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800bb7a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800bb7e:	e790      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb80:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bb84:	e78d      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bb8a:	e78a      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bb90:	e787      	b.n	800baa2 <SDMMC_CmdSelDesel+0x42>
 800bb92:	bf00      	nop
 800bb94:	20000018 	.word	0x20000018
 800bb98:	10624dd3 	.word	0x10624dd3
 800bb9c:	fffff000 	.word	0xfffff000
 800bba0:	fdffe008 	.word	0xfdffe008

0800bba4 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bba4:	4b11      	ldr	r3, [pc, #68]	; (800bbec <SDMMC_CmdGoIdleState+0x48>)
{
 800bba6:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bba8:	4a11      	ldr	r2, [pc, #68]	; (800bbf0 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbaa:	681b      	ldr	r3, [r3, #0]
{
 800bbac:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbae:	4c11      	ldr	r4, [pc, #68]	; (800bbf4 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800bbb0:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbb2:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800bbb6:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbb8:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbba:	0a5b      	lsrs	r3, r3, #9
 800bbbc:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbc0:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbc2:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbca:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbcc:	e002      	b.n	800bbd4 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bbce:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800bbd0:	0612      	lsls	r2, r2, #24
 800bbd2:	d405      	bmi.n	800bbe0 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	d2fa      	bcs.n	800bbce <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800bbd8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bbdc:	bc30      	pop	{r4, r5}
 800bbde:	4770      	bx	lr
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbe0:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 800bbe2:	2000      	movs	r0, #0
}
 800bbe4:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbe6:	638b      	str	r3, [r1, #56]	; 0x38
}
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20000018 	.word	0x20000018
 800bbf0:	fffff000 	.word	0xfffff000
 800bbf4:	10624dd3 	.word	0x10624dd3

0800bbf8 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbf8:	4b1b      	ldr	r3, [pc, #108]	; (800bc68 <SDMMC_CmdOperCond+0x70>)
{
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbfe:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800bc00:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc04:	4c19      	ldr	r4, [pc, #100]	; (800bc6c <SDMMC_CmdOperCond+0x74>)
  SDMMCx->ARG = Command->Argument;
 800bc06:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc08:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc0c:	4b18      	ldr	r3, [pc, #96]	; (800bc70 <SDMMC_CmdOperCond+0x78>)
 800bc0e:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc10:	f241 3088 	movw	r0, #5000	; 0x1388
 800bc14:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc16:	4023      	ands	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc18:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc1c:	f443 6089 	orr.w	r0, r3, #1096	; 0x448
 800bc20:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800bc22:	b14a      	cbz	r2, 800bc38 <SDMMC_CmdOperCond+0x40>
 800bc24:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bc26:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800bc28:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc2a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bc2e:	d001      	beq.n	800bc34 <SDMMC_CmdOperCond+0x3c>
 800bc30:	0510      	lsls	r0, r2, #20
 800bc32:	d505      	bpl.n	800bc40 <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 800bc34:	1c5c      	adds	r4, r3, #1
 800bc36:	d1f6      	bne.n	800bc26 <SDMMC_CmdOperCond+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800bc38:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bc3c:	bc30      	pop	{r4, r5}
 800bc3e:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc40:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bc42:	075a      	lsls	r2, r3, #29
 800bc44:	d40c      	bmi.n	800bc60 <SDMMC_CmdOperCond+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc46:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bc48:	f010 0001 	ands.w	r0, r0, #1
 800bc4c:	d105      	bne.n	800bc5a <SDMMC_CmdOperCond+0x62>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bc50:	065b      	lsls	r3, r3, #25
 800bc52:	d5f3      	bpl.n	800bc3c <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc54:	2340      	movs	r3, #64	; 0x40
 800bc56:	638b      	str	r3, [r1, #56]	; 0x38
 800bc58:	e7f0      	b.n	800bc3c <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc5e:	e7ed      	b.n	800bc3c <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc60:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc62:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc64:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc66:	e7e9      	b.n	800bc3c <SDMMC_CmdOperCond+0x44>
 800bc68:	20000018 	.word	0x20000018
 800bc6c:	10624dd3 	.word	0x10624dd3
 800bc70:	fffff000 	.word	0xfffff000

0800bc74 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc74:	4a50      	ldr	r2, [pc, #320]	; (800bdb8 <SDMMC_CmdAppCommand+0x144>)
{
 800bc76:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc78:	4b50      	ldr	r3, [pc, #320]	; (800bdbc <SDMMC_CmdAppCommand+0x148>)
 800bc7a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bc7c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc80:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc84:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bc88:	484d      	ldr	r0, [pc, #308]	; (800bdc0 <SDMMC_CmdAppCommand+0x14c>)
 800bc8a:	f240 4377 	movw	r3, #1143	; 0x477
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc8e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc90:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc92:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc96:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc98:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc9c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bca0:	1e53      	subs	r3, r2, #1
 800bca2:	b14a      	cbz	r2, 800bcb8 <SDMMC_CmdAppCommand+0x44>
    sta_reg = SDMMCx->STA;
 800bca4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bca8:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcaa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bcae:	d001      	beq.n	800bcb4 <SDMMC_CmdAppCommand+0x40>
 800bcb0:	0512      	lsls	r2, r2, #20
 800bcb2:	d504      	bpl.n	800bcbe <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800bcb4:	1c59      	adds	r1, r3, #1
 800bcb6:	d1f5      	bne.n	800bca4 <SDMMC_CmdAppCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800bcb8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bcbc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcbe:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bcc2:	0758      	lsls	r0, r3, #29
 800bcc4:	d445      	bmi.n	800bd52 <SDMMC_CmdAppCommand+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bcc6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bcca:	f010 0001 	ands.w	r0, r0, #1
 800bcce:	d137      	bne.n	800bd40 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcd0:	23c5      	movs	r3, #197	; 0xc5
 800bcd2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bcd6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b37      	cmp	r3, #55	; 0x37
 800bcde:	d136      	bne.n	800bd4e <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800bce0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bce4:	4837      	ldr	r0, [pc, #220]	; (800bdc4 <SDMMC_CmdAppCommand+0x150>)
 800bce6:	4018      	ands	r0, r3
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d02f      	beq.n	800bd4c <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	db35      	blt.n	800bd5c <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bcf0:	0059      	lsls	r1, r3, #1
 800bcf2:	d436      	bmi.n	800bd62 <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bcf4:	009a      	lsls	r2, r3, #2
 800bcf6:	d436      	bmi.n	800bd66 <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bcf8:	00d9      	lsls	r1, r3, #3
 800bcfa:	d436      	bmi.n	800bd6a <SDMMC_CmdAppCommand+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bcfc:	011a      	lsls	r2, r3, #4
 800bcfe:	d437      	bmi.n	800bd70 <SDMMC_CmdAppCommand+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd00:	0159      	lsls	r1, r3, #5
 800bd02:	d438      	bmi.n	800bd76 <SDMMC_CmdAppCommand+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd04:	01da      	lsls	r2, r3, #7
 800bd06:	d439      	bmi.n	800bd7c <SDMMC_CmdAppCommand+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd08:	0219      	lsls	r1, r3, #8
 800bd0a:	d43a      	bmi.n	800bd82 <SDMMC_CmdAppCommand+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd0c:	025a      	lsls	r2, r3, #9
 800bd0e:	d43b      	bmi.n	800bd88 <SDMMC_CmdAppCommand+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd10:	0299      	lsls	r1, r3, #10
 800bd12:	d445      	bmi.n	800bda0 <SDMMC_CmdAppCommand+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bd14:	02da      	lsls	r2, r3, #11
 800bd16:	d440      	bmi.n	800bd9a <SDMMC_CmdAppCommand+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bd18:	0359      	lsls	r1, r3, #13
 800bd1a:	d43b      	bmi.n	800bd94 <SDMMC_CmdAppCommand+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bd1c:	039a      	lsls	r2, r3, #14
 800bd1e:	d436      	bmi.n	800bd8e <SDMMC_CmdAppCommand+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bd20:	03d9      	lsls	r1, r3, #15
 800bd22:	d446      	bmi.n	800bdb2 <SDMMC_CmdAppCommand+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bd24:	041a      	lsls	r2, r3, #16
 800bd26:	d441      	bmi.n	800bdac <SDMMC_CmdAppCommand+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd28:	0459      	lsls	r1, r3, #17
 800bd2a:	d43c      	bmi.n	800bda6 <SDMMC_CmdAppCommand+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd2c:	049a      	lsls	r2, r3, #18
 800bd2e:	d40b      	bmi.n	800bd48 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd30:	f013 0f08 	tst.w	r3, #8
 800bd34:	bf14      	ite	ne
 800bd36:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bd3a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bd3e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd40:	2301      	movs	r3, #1
 800bd42:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd46:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bd48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bd4c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd4e:	2001      	movs	r0, #1
 800bd50:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd52:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd54:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd56:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd5a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bd5c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bd60:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bd62:	2040      	movs	r0, #64	; 0x40
 800bd64:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd66:	2080      	movs	r0, #128	; 0x80
 800bd68:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bd6e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd70:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bd74:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd76:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bd7a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bd80:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bd86:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bd8c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bd8e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bd92:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bd98:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bd9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bd9e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bda0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bda4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bda6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bdaa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bdac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bdb0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bdb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bdb6:	4770      	bx	lr
 800bdb8:	20000018 	.word	0x20000018
 800bdbc:	10624dd3 	.word	0x10624dd3
 800bdc0:	fffff000 	.word	0xfffff000
 800bdc4:	fdffe008 	.word	0xfdffe008

0800bdc8 <SDMMC_CmdAppOperCommand>:
{
 800bdc8:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdca:	4b1c      	ldr	r3, [pc, #112]	; (800be3c <SDMMC_CmdAppOperCommand+0x74>)
{
 800bdcc:	4684      	mov	ip, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bdce:	4c1c      	ldr	r4, [pc, #112]	; (800be40 <SDMMC_CmdAppOperCommand+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdd0:	481c      	ldr	r0, [pc, #112]	; (800be44 <SDMMC_CmdAppOperCommand+0x7c>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bdd2:	430c      	orrs	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdd4:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdd6:	4b1c      	ldr	r3, [pc, #112]	; (800be48 <SDMMC_CmdAppOperCommand+0x80>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdd8:	fba0 0202 	umull	r0, r2, r0, r2
 800bddc:	f241 3088 	movw	r0, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 800bde0:	f8cc 4008 	str.w	r4, [ip, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bde4:	f8dc 100c 	ldr.w	r1, [ip, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bde8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdea:	400b      	ands	r3, r1
 800bdec:	f240 4169 	movw	r1, #1129	; 0x469
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdf0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdf4:	4319      	orrs	r1, r3
 800bdf6:	f8cc 100c 	str.w	r1, [ip, #12]
    if (count-- == 0U)
 800bdfa:	b152      	cbz	r2, 800be12 <SDMMC_CmdAppOperCommand+0x4a>
 800bdfc:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bdfe:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800be02:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be04:	f012 0f45 	tst.w	r2, #69	; 0x45
 800be08:	d001      	beq.n	800be0e <SDMMC_CmdAppOperCommand+0x46>
 800be0a:	0512      	lsls	r2, r2, #20
 800be0c:	d506      	bpl.n	800be1c <SDMMC_CmdAppOperCommand+0x54>
    if (count-- == 0U)
 800be0e:	1c59      	adds	r1, r3, #1
 800be10:	d1f5      	bne.n	800bdfe <SDMMC_CmdAppOperCommand+0x36>
      return SDMMC_ERROR_TIMEOUT;
 800be12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800be16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be1a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be1c:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800be20:	f010 0004 	ands.w	r0, r0, #4
 800be24:	d105      	bne.n	800be32 <SDMMC_CmdAppOperCommand+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be26:	23c5      	movs	r3, #197	; 0xc5
}
 800be28:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be2c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
}
 800be30:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be32:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be34:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be36:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be3a:	e7ec      	b.n	800be16 <SDMMC_CmdAppOperCommand+0x4e>
 800be3c:	20000018 	.word	0x20000018
 800be40:	80100000 	.word	0x80100000
 800be44:	10624dd3 	.word	0x10624dd3
 800be48:	fffff000 	.word	0xfffff000

0800be4c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be4c:	4a50      	ldr	r2, [pc, #320]	; (800bf90 <SDMMC_CmdBusWidth+0x144>)
{
 800be4e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be50:	4b50      	ldr	r3, [pc, #320]	; (800bf94 <SDMMC_CmdBusWidth+0x148>)
 800be52:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800be54:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be58:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be5c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800be60:	484d      	ldr	r0, [pc, #308]	; (800bf98 <SDMMC_CmdBusWidth+0x14c>)
 800be62:	f240 4346 	movw	r3, #1094	; 0x446
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be66:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be68:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be6a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be6e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be70:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be74:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800be78:	1e53      	subs	r3, r2, #1
 800be7a:	b14a      	cbz	r2, 800be90 <SDMMC_CmdBusWidth+0x44>
    sta_reg = SDMMCx->STA;
 800be7c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800be80:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be82:	f012 0f45 	tst.w	r2, #69	; 0x45
 800be86:	d001      	beq.n	800be8c <SDMMC_CmdBusWidth+0x40>
 800be88:	0512      	lsls	r2, r2, #20
 800be8a:	d504      	bpl.n	800be96 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800be8c:	1c59      	adds	r1, r3, #1
 800be8e:	d1f5      	bne.n	800be7c <SDMMC_CmdBusWidth+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800be90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800be94:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be96:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800be9a:	0758      	lsls	r0, r3, #29
 800be9c:	d445      	bmi.n	800bf2a <SDMMC_CmdBusWidth+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be9e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bea2:	f010 0001 	ands.w	r0, r0, #1
 800bea6:	d137      	bne.n	800bf18 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bea8:	23c5      	movs	r3, #197	; 0xc5
 800beaa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800beae:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b06      	cmp	r3, #6
 800beb6:	d136      	bne.n	800bf26 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800beb8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bebc:	4837      	ldr	r0, [pc, #220]	; (800bf9c <SDMMC_CmdBusWidth+0x150>)
 800bebe:	4018      	ands	r0, r3
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d02f      	beq.n	800bf24 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	db35      	blt.n	800bf34 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bec8:	0059      	lsls	r1, r3, #1
 800beca:	d436      	bmi.n	800bf3a <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800becc:	009a      	lsls	r2, r3, #2
 800bece:	d436      	bmi.n	800bf3e <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bed0:	00d9      	lsls	r1, r3, #3
 800bed2:	d436      	bmi.n	800bf42 <SDMMC_CmdBusWidth+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bed4:	011a      	lsls	r2, r3, #4
 800bed6:	d437      	bmi.n	800bf48 <SDMMC_CmdBusWidth+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bed8:	0159      	lsls	r1, r3, #5
 800beda:	d438      	bmi.n	800bf4e <SDMMC_CmdBusWidth+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bedc:	01da      	lsls	r2, r3, #7
 800bede:	d439      	bmi.n	800bf54 <SDMMC_CmdBusWidth+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bee0:	0219      	lsls	r1, r3, #8
 800bee2:	d43a      	bmi.n	800bf5a <SDMMC_CmdBusWidth+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bee4:	025a      	lsls	r2, r3, #9
 800bee6:	d43b      	bmi.n	800bf60 <SDMMC_CmdBusWidth+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bee8:	0299      	lsls	r1, r3, #10
 800beea:	d445      	bmi.n	800bf78 <SDMMC_CmdBusWidth+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800beec:	02da      	lsls	r2, r3, #11
 800beee:	d440      	bmi.n	800bf72 <SDMMC_CmdBusWidth+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bef0:	0359      	lsls	r1, r3, #13
 800bef2:	d43b      	bmi.n	800bf6c <SDMMC_CmdBusWidth+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bef4:	039a      	lsls	r2, r3, #14
 800bef6:	d436      	bmi.n	800bf66 <SDMMC_CmdBusWidth+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bef8:	03d9      	lsls	r1, r3, #15
 800befa:	d446      	bmi.n	800bf8a <SDMMC_CmdBusWidth+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800befc:	041a      	lsls	r2, r3, #16
 800befe:	d441      	bmi.n	800bf84 <SDMMC_CmdBusWidth+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bf00:	0459      	lsls	r1, r3, #17
 800bf02:	d43c      	bmi.n	800bf7e <SDMMC_CmdBusWidth+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bf04:	049a      	lsls	r2, r3, #18
 800bf06:	d40b      	bmi.n	800bf20 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf08:	f013 0f08 	tst.w	r3, #8
 800bf0c:	bf14      	ite	ne
 800bf0e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bf12:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bf16:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf1e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bf20:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bf24:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf26:	2001      	movs	r0, #1
 800bf28:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf2a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf2c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf2e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf32:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bf34:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bf38:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bf3a:	2040      	movs	r0, #64	; 0x40
 800bf3c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf3e:	2080      	movs	r0, #128	; 0x80
 800bf40:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf42:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bf46:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf48:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bf4c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf4e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bf52:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bf58:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bf5e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bf64:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bf66:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bf6a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bf70:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bf72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bf76:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bf7c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bf82:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bf84:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bf88:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bf8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bf8e:	4770      	bx	lr
 800bf90:	20000018 	.word	0x20000018
 800bf94:	10624dd3 	.word	0x10624dd3
 800bf98:	fffff000 	.word	0xfffff000
 800bf9c:	fdffe008 	.word	0xfdffe008

0800bfa0 <SDMMC_CmdSendSCR>:
{
 800bfa0:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bfa2:	4a4d      	ldr	r2, [pc, #308]	; (800c0d8 <SDMMC_CmdSendSCR+0x138>)
 800bfa4:	4b4d      	ldr	r3, [pc, #308]	; (800c0dc <SDMMC_CmdSendSCR+0x13c>)
 800bfa6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfa8:	484d      	ldr	r0, [pc, #308]	; (800c0e0 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bfaa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfae:	f240 4373 	movw	r3, #1139	; 0x473
{
 800bfb2:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800bfb4:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bfb6:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800bfb8:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfba:	68cc      	ldr	r4, [r1, #12]
 800bfbc:	4020      	ands	r0, r4
 800bfbe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bfc0:	f241 3088 	movw	r0, #5000	; 0x1388
 800bfc4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfc8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800bfca:	b14a      	cbz	r2, 800bfe0 <SDMMC_CmdSendSCR+0x40>
 800bfcc:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bfce:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800bfd0:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfd2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bfd6:	d001      	beq.n	800bfdc <SDMMC_CmdSendSCR+0x3c>
 800bfd8:	0514      	lsls	r4, r2, #20
 800bfda:	d506      	bpl.n	800bfea <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	d1f6      	bne.n	800bfce <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800bfe0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bfe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bfec:	0758      	lsls	r0, r3, #29
 800bfee:	d43d      	bmi.n	800c06c <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bff0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bff2:	f010 0001 	ands.w	r0, r0, #1
 800bff6:	d134      	bne.n	800c062 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bff8:	23c5      	movs	r3, #197	; 0xc5
 800bffa:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bffc:	690b      	ldr	r3, [r1, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b33      	cmp	r3, #51	; 0x33
 800c002:	d131      	bne.n	800c068 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c004:	694b      	ldr	r3, [r1, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c006:	4837      	ldr	r0, [pc, #220]	; (800c0e4 <SDMMC_CmdSendSCR+0x144>)
 800c008:	4018      	ands	r0, r3
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d0ea      	beq.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c00e:	2b00      	cmp	r3, #0
 800c010:	db30      	blt.n	800c074 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c012:	005a      	lsls	r2, r3, #1
 800c014:	d431      	bmi.n	800c07a <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c016:	009c      	lsls	r4, r3, #2
 800c018:	d431      	bmi.n	800c07e <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c01a:	00d9      	lsls	r1, r3, #3
 800c01c:	d431      	bmi.n	800c082 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c01e:	011a      	lsls	r2, r3, #4
 800c020:	d432      	bmi.n	800c088 <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c022:	015c      	lsls	r4, r3, #5
 800c024:	d433      	bmi.n	800c08e <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c026:	01d9      	lsls	r1, r3, #7
 800c028:	d434      	bmi.n	800c094 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c02a:	021a      	lsls	r2, r3, #8
 800c02c:	d435      	bmi.n	800c09a <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c02e:	025c      	lsls	r4, r3, #9
 800c030:	d436      	bmi.n	800c0a0 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c032:	0299      	lsls	r1, r3, #10
 800c034:	d440      	bmi.n	800c0b8 <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c036:	02da      	lsls	r2, r3, #11
 800c038:	d43b      	bmi.n	800c0b2 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c03a:	035c      	lsls	r4, r3, #13
 800c03c:	d436      	bmi.n	800c0ac <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c03e:	0399      	lsls	r1, r3, #14
 800c040:	d431      	bmi.n	800c0a6 <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c042:	03da      	lsls	r2, r3, #15
 800c044:	d444      	bmi.n	800c0d0 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c046:	041c      	lsls	r4, r3, #16
 800c048:	d43f      	bmi.n	800c0ca <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c04a:	0459      	lsls	r1, r3, #17
 800c04c:	d43a      	bmi.n	800c0c4 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c04e:	049a      	lsls	r2, r3, #18
 800c050:	d435      	bmi.n	800c0be <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c052:	f013 0f08 	tst.w	r3, #8
 800c056:	bf14      	ite	ne
 800c058:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c05c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c060:	e7c0      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c062:	2301      	movs	r3, #1
 800c064:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c066:	e7bd      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c068:	2001      	movs	r0, #1
 800c06a:	e7bb      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c06c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c06e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c070:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c072:	e7b7      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c074:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c078:	e7b4      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c07a:	2040      	movs	r0, #64	; 0x40
 800c07c:	e7b2      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c07e:	2080      	movs	r0, #128	; 0x80
 800c080:	e7b0      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c082:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c086:	e7ad      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c088:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c08c:	e7aa      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c08e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c092:	e7a7      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c094:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c098:	e7a4      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c09a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c09e:	e7a1      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c0a4:	e79e      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c0a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c0aa:	e79b      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c0ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c0b0:	e798      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c0b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c0b6:	e795      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c0b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c0bc:	e792      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c0be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c0c2:	e78f      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c0c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c0c8:	e78c      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c0ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c0ce:	e789      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c0d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c0d4:	e786      	b.n	800bfe4 <SDMMC_CmdSendSCR+0x44>
 800c0d6:	bf00      	nop
 800c0d8:	20000018 	.word	0x20000018
 800c0dc:	10624dd3 	.word	0x10624dd3
 800c0e0:	fffff000 	.word	0xfffff000
 800c0e4:	fdffe008 	.word	0xfdffe008

0800c0e8 <SDMMC_CmdSendCID>:
{
 800c0e8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0ea:	4a1a      	ldr	r2, [pc, #104]	; (800c154 <SDMMC_CmdSendCID+0x6c>)
 800c0ec:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <SDMMC_CmdSendCID+0x70>)
 800c0ee:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c0f0:	481a      	ldr	r0, [pc, #104]	; (800c15c <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0f2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c0f6:	f240 43c2 	movw	r3, #1218	; 0x4c2
{
 800c0fa:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c0fc:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0fe:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800c100:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c102:	68cc      	ldr	r4, [r1, #12]
 800c104:	4020      	ands	r0, r4
 800c106:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c108:	f241 3088 	movw	r0, #5000	; 0x1388
 800c10c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c110:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c112:	b14a      	cbz	r2, 800c128 <SDMMC_CmdSendCID+0x40>
 800c114:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c116:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c118:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c11a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c11e:	d001      	beq.n	800c124 <SDMMC_CmdSendCID+0x3c>
 800c120:	0512      	lsls	r2, r2, #20
 800c122:	d506      	bpl.n	800c132 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800c124:	1c58      	adds	r0, r3, #1
 800c126:	d1f6      	bne.n	800c116 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c128:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c130:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c132:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c134:	075b      	lsls	r3, r3, #29
 800c136:	d409      	bmi.n	800c14c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c138:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 800c13a:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c13e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c146:	23c5      	moveq	r3, #197	; 0xc5
 800c148:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c14a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c14c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c14e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c150:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c152:	e7eb      	b.n	800c12c <SDMMC_CmdSendCID+0x44>
 800c154:	20000018 	.word	0x20000018
 800c158:	10624dd3 	.word	0x10624dd3
 800c15c:	fffff000 	.word	0xfffff000

0800c160 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c160:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <SDMMC_CmdSendCSD+0x70>)
{
 800c162:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c164:	4b1b      	ldr	r3, [pc, #108]	; (800c1d4 <SDMMC_CmdSendCSD+0x74>)
 800c166:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c168:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c16c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c170:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c174:	4818      	ldr	r0, [pc, #96]	; (800c1d8 <SDMMC_CmdSendCSD+0x78>)
 800c176:	f240 43c9 	movw	r3, #1225	; 0x4c9
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c17a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c17c:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c17e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c182:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c184:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c188:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c18c:	1e53      	subs	r3, r2, #1
 800c18e:	b14a      	cbz	r2, 800c1a4 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800c190:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c194:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c196:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c19a:	d001      	beq.n	800c1a0 <SDMMC_CmdSendCSD+0x40>
 800c19c:	0512      	lsls	r2, r2, #20
 800c19e:	d504      	bpl.n	800c1aa <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800c1a0:	1c59      	adds	r1, r3, #1
 800c1a2:	d1f5      	bne.n	800c190 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c1a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c1a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1aa:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c1ae:	075b      	lsls	r3, r3, #29
 800c1b0:	d409      	bmi.n	800c1c6 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1b2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c1b6:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1ba:	bf14      	ite	ne
 800c1bc:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1be:	23c5      	moveq	r3, #197	; 0xc5
 800c1c0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c1c4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1c6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1c8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1ca:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1ce:	4770      	bx	lr
 800c1d0:	20000018 	.word	0x20000018
 800c1d4:	10624dd3 	.word	0x10624dd3
 800c1d8:	fffff000 	.word	0xfffff000

0800c1dc <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800c1dc:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1de:	4a2b      	ldr	r2, [pc, #172]	; (800c28c <SDMMC_CmdSetRelAdd+0xb0>)
{
 800c1e0:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1e2:	6812      	ldr	r2, [r2, #0]
{
 800c1e4:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c1e6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c1e8:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1ea:	4829      	ldr	r0, [pc, #164]	; (800c290 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c1ec:	4c29      	ldr	r4, [pc, #164]	; (800c294 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1ee:	fba0 0202 	umull	r0, r2, r0, r2
 800c1f2:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c1f6:	401c      	ands	r4, r3
 800c1f8:	f240 4343 	movw	r3, #1091	; 0x443
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1fc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c1fe:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c200:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c204:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c208:	b152      	cbz	r2, 800c220 <SDMMC_CmdSetRelAdd+0x44>
 800c20a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c20c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c210:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c212:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c216:	d001      	beq.n	800c21c <SDMMC_CmdSetRelAdd+0x40>
 800c218:	0514      	lsls	r4, r2, #20
 800c21a:	d506      	bpl.n	800c22a <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800c21c:	1c5a      	adds	r2, r3, #1
 800c21e:	d1f5      	bne.n	800c20c <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c220:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c224:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c228:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c22a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c22e:	0758      	lsls	r0, r3, #29
 800c230:	d421      	bmi.n	800c276 <SDMMC_CmdSetRelAdd+0x9a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c232:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c236:	f010 0001 	ands.w	r0, r0, #1
 800c23a:	d116      	bne.n	800c26a <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c23c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b03      	cmp	r3, #3
 800c244:	d115      	bne.n	800c272 <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c246:	23c5      	movs	r3, #197	; 0xc5
 800c248:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800c24c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c250:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800c254:	d017      	beq.n	800c286 <SDMMC_CmdSetRelAdd+0xaa>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c256:	045a      	lsls	r2, r3, #17
 800c258:	d412      	bmi.n	800c280 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c25a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c25e:	bf14      	ite	ne
 800c260:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c264:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c268:	e7dc      	b.n	800c224 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c26a:	2301      	movs	r3, #1
 800c26c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c270:	e7d8      	b.n	800c224 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c272:	2001      	movs	r0, #1
 800c274:	e7d6      	b.n	800c224 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c276:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c278:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c27a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c27e:	e7d1      	b.n	800c224 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c284:	e7ce      	b.n	800c224 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c286:	0c1b      	lsrs	r3, r3, #16
 800c288:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800c28a:	e7cb      	b.n	800c224 <SDMMC_CmdSetRelAdd+0x48>
 800c28c:	20000018 	.word	0x20000018
 800c290:	10624dd3 	.word	0x10624dd3
 800c294:	fffff000 	.word	0xfffff000

0800c298 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c298:	4a50      	ldr	r2, [pc, #320]	; (800c3dc <SDMMC_CmdSendStatus+0x144>)
{
 800c29a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c29c:	4b50      	ldr	r3, [pc, #320]	; (800c3e0 <SDMMC_CmdSendStatus+0x148>)
 800c29e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c2a0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c2a4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c2a8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c2ac:	484d      	ldr	r0, [pc, #308]	; (800c3e4 <SDMMC_CmdSendStatus+0x14c>)
 800c2ae:	f240 434d 	movw	r3, #1101	; 0x44d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c2b2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c2b4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c2b6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c2ba:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c2bc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c2c0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c2c4:	1e53      	subs	r3, r2, #1
 800c2c6:	b14a      	cbz	r2, 800c2dc <SDMMC_CmdSendStatus+0x44>
    sta_reg = SDMMCx->STA;
 800c2c8:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c2cc:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2ce:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c2d2:	d001      	beq.n	800c2d8 <SDMMC_CmdSendStatus+0x40>
 800c2d4:	0512      	lsls	r2, r2, #20
 800c2d6:	d504      	bpl.n	800c2e2 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800c2d8:	1c59      	adds	r1, r3, #1
 800c2da:	d1f5      	bne.n	800c2c8 <SDMMC_CmdSendStatus+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c2dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c2e0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2e2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c2e6:	0758      	lsls	r0, r3, #29
 800c2e8:	d445      	bmi.n	800c376 <SDMMC_CmdSendStatus+0xde>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2ea:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c2ee:	f010 0001 	ands.w	r0, r0, #1
 800c2f2:	d137      	bne.n	800c364 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2f4:	23c5      	movs	r3, #197	; 0xc5
 800c2f6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c2fa:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b0d      	cmp	r3, #13
 800c302:	d136      	bne.n	800c372 <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800c304:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c308:	4837      	ldr	r0, [pc, #220]	; (800c3e8 <SDMMC_CmdSendStatus+0x150>)
 800c30a:	4018      	ands	r0, r3
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d02f      	beq.n	800c370 <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c310:	2b00      	cmp	r3, #0
 800c312:	db35      	blt.n	800c380 <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c314:	0059      	lsls	r1, r3, #1
 800c316:	d436      	bmi.n	800c386 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c318:	009a      	lsls	r2, r3, #2
 800c31a:	d436      	bmi.n	800c38a <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c31c:	00d9      	lsls	r1, r3, #3
 800c31e:	d436      	bmi.n	800c38e <SDMMC_CmdSendStatus+0xf6>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c320:	011a      	lsls	r2, r3, #4
 800c322:	d437      	bmi.n	800c394 <SDMMC_CmdSendStatus+0xfc>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c324:	0159      	lsls	r1, r3, #5
 800c326:	d438      	bmi.n	800c39a <SDMMC_CmdSendStatus+0x102>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c328:	01da      	lsls	r2, r3, #7
 800c32a:	d439      	bmi.n	800c3a0 <SDMMC_CmdSendStatus+0x108>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c32c:	0219      	lsls	r1, r3, #8
 800c32e:	d43a      	bmi.n	800c3a6 <SDMMC_CmdSendStatus+0x10e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c330:	025a      	lsls	r2, r3, #9
 800c332:	d43b      	bmi.n	800c3ac <SDMMC_CmdSendStatus+0x114>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c334:	0299      	lsls	r1, r3, #10
 800c336:	d445      	bmi.n	800c3c4 <SDMMC_CmdSendStatus+0x12c>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c338:	02da      	lsls	r2, r3, #11
 800c33a:	d440      	bmi.n	800c3be <SDMMC_CmdSendStatus+0x126>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c33c:	0359      	lsls	r1, r3, #13
 800c33e:	d43b      	bmi.n	800c3b8 <SDMMC_CmdSendStatus+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c340:	039a      	lsls	r2, r3, #14
 800c342:	d436      	bmi.n	800c3b2 <SDMMC_CmdSendStatus+0x11a>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c344:	03d9      	lsls	r1, r3, #15
 800c346:	d446      	bmi.n	800c3d6 <SDMMC_CmdSendStatus+0x13e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c348:	041a      	lsls	r2, r3, #16
 800c34a:	d441      	bmi.n	800c3d0 <SDMMC_CmdSendStatus+0x138>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c34c:	0459      	lsls	r1, r3, #17
 800c34e:	d43c      	bmi.n	800c3ca <SDMMC_CmdSendStatus+0x132>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c350:	049a      	lsls	r2, r3, #18
 800c352:	d40b      	bmi.n	800c36c <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c354:	f013 0f08 	tst.w	r3, #8
 800c358:	bf14      	ite	ne
 800c35a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c35e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c362:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c364:	2301      	movs	r3, #1
 800c366:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c36a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c36c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c370:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c372:	2001      	movs	r0, #1
 800c374:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c376:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c378:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c37a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c37e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c380:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c384:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c386:	2040      	movs	r0, #64	; 0x40
 800c388:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c38a:	2080      	movs	r0, #128	; 0x80
 800c38c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c38e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c392:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c394:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c398:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c39a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c39e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c3a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c3a4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c3aa:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c3b0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c3b6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c3b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c3bc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c3be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c3c2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c3c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c3c8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c3ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c3ce:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c3d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c3d4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c3d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c3da:	4770      	bx	lr
 800c3dc:	20000018 	.word	0x20000018
 800c3e0:	10624dd3 	.word	0x10624dd3
 800c3e4:	fffff000 	.word	0xfffff000
 800c3e8:	fdffe008 	.word	0xfdffe008

0800c3ec <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800c3ec:	6803      	ldr	r3, [r0, #0]
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	065b      	lsls	r3, r3, #25
 800c3f2:	d42f      	bmi.n	800c454 <LL_SPI_Init+0x68>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800c3f4:	6948      	ldr	r0, [r1, #20]
{
 800c3f6:	b470      	push	{r4, r5, r6}
    MODIFY_REG(SPIx->CR1,
 800c3f8:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c3fc:	6816      	ldr	r6, [r2, #0]
 800c3fe:	4323      	orrs	r3, r4
 800c400:	68cc      	ldr	r4, [r1, #12]
 800c402:	6a0d      	ldr	r5, [r1, #32]
 800c404:	4323      	orrs	r3, r4
 800c406:	690c      	ldr	r4, [r1, #16]
 800c408:	4323      	orrs	r3, r4
 800c40a:	698c      	ldr	r4, [r1, #24]
 800c40c:	4303      	orrs	r3, r0
 800c40e:	4323      	orrs	r3, r4
 800c410:	69cc      	ldr	r4, [r1, #28]
 800c412:	4323      	orrs	r3, r4
 800c414:	4c14      	ldr	r4, [pc, #80]	; (800c468 <LL_SPI_Init+0x7c>)
 800c416:	432b      	orrs	r3, r5
 800c418:	4034      	ands	r4, r6
 800c41a:	4323      	orrs	r3, r4
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800c41c:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(SPIx->CR1,
 800c41e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(SPIx->CR2,
 800c420:	ea44 4010 	orr.w	r0, r4, r0, lsr #16
 800c424:	6856      	ldr	r6, [r2, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800c426:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    MODIFY_REG(SPIx->CR2,
 800c42a:	4b10      	ldr	r3, [pc, #64]	; (800c46c <LL_SPI_Init+0x80>)
 800c42c:	ea03 0306 	and.w	r3, r3, r6
 800c430:	ea40 0003 	orr.w	r0, r0, r3
 800c434:	6050      	str	r0, [r2, #4]
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800c436:	d203      	bcs.n	800c440 <LL_SPI_Init+0x54>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800c438:	6853      	ldr	r3, [r2, #4]
 800c43a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c43e:	6053      	str	r3, [r2, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800c440:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800c444:	d00c      	beq.n	800c460 <LL_SPI_Init+0x74>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 800c446:	2000      	movs	r0, #0
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c448:	69d3      	ldr	r3, [r2, #28]
 800c44a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  return status;
}
 800c44e:	bc70      	pop	{r4, r5, r6}
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c450:	61d3      	str	r3, [r2, #28]
}
 800c452:	4770      	bx	lr
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c454:	69d3      	ldr	r3, [r2, #28]
  ErrorStatus status = ERROR;
 800c456:	2001      	movs	r0, #1
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c45c:	61d3      	str	r3, [r2, #28]
}
 800c45e:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800c460:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
    status = SUCCESS;
 800c462:	2000      	movs	r0, #0
 800c464:	6113      	str	r3, [r2, #16]
}
 800c466:	e7ef      	b.n	800c448 <LL_SPI_Init+0x5c>
 800c468:	ffff0040 	.word	0xffff0040
 800c46c:	fffff0fb 	.word	0xfffff0fb

0800c470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c470:	b084      	sub	sp, #16
 800c472:	4684      	mov	ip, r0
 800c474:	b500      	push	{lr}
 800c476:	b083      	sub	sp, #12
 800c478:	f10d 0e14 	add.w	lr, sp, #20
 800c47c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c482:	2b01      	cmp	r3, #1
 800c484:	d133      	bne.n	800c4ee <USB_CoreInit+0x7e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c486:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c488:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800c48c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c48e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800c492:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c494:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c496:	68c2      	ldr	r2, [r0, #12]
 800c498:	ea03 0302 	and.w	r3, r3, r2
 800c49c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c49e:	68c3      	ldr	r3, [r0, #12]
 800c4a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c4a4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800c4a6:	d068      	beq.n	800c57a <USB_CoreInit+0x10a>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800c4a8:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800c4aa:	4a36      	ldr	r2, [pc, #216]	; (800c584 <USB_CoreInit+0x114>)
  __IO uint32_t count = 0U;
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	e003      	b.n	800c4b8 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4b0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	db34      	blt.n	800c522 <USB_CoreInit+0xb2>
    count++;
 800c4b8:	9b00      	ldr	r3, [sp, #0]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d9f5      	bls.n	800c4b0 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800c4c4:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800c4c6:	9b08      	ldr	r3, [sp, #32]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d10b      	bne.n	800c4e4 <USB_CoreInit+0x74>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c4cc:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c4d0:	f043 0306 	orr.w	r3, r3, #6
 800c4d4:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4d8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c4dc:	f043 0320 	orr.w	r3, r3, #32
 800c4e0:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800c4e4:	b003      	add	sp, #12
 800c4e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ea:	b004      	add	sp, #16
 800c4ec:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c4ee:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800c4f0:	2100      	movs	r1, #0
    if (count > 200000U)
 800c4f2:	4a24      	ldr	r2, [pc, #144]	; (800c584 <USB_CoreInit+0x114>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f8:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800c4fa:	9101      	str	r1, [sp, #4]
 800c4fc:	e003      	b.n	800c506 <USB_CoreInit+0x96>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4fe:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c502:	2b00      	cmp	r3, #0
 800c504:	db23      	blt.n	800c54e <USB_CoreInit+0xde>
    count++;
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	3301      	adds	r3, #1
 800c50a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	4293      	cmp	r3, r2
 800c510:	d9f5      	bls.n	800c4fe <USB_CoreInit+0x8e>
      return HAL_TIMEOUT;
 800c512:	2003      	movs	r0, #3
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c514:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800c518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c51c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800c520:	e7d1      	b.n	800c4c6 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800c522:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800c524:	4a17      	ldr	r2, [pc, #92]	; (800c584 <USB_CoreInit+0x114>)
  count = 0U;
 800c526:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c528:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c52c:	f043 0301 	orr.w	r3, r3, #1
 800c530:	f8cc 3010 	str.w	r3, [ip, #16]
 800c534:	e004      	b.n	800c540 <USB_CoreInit+0xd0>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c536:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800c53a:	f010 0001 	ands.w	r0, r0, #1
 800c53e:	d0c2      	beq.n	800c4c6 <USB_CoreInit+0x56>
    count++;
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	3301      	adds	r3, #1
 800c544:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800c546:	9b00      	ldr	r3, [sp, #0]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d9f4      	bls.n	800c536 <USB_CoreInit+0xc6>
 800c54c:	e7ba      	b.n	800c4c4 <USB_CoreInit+0x54>
  count = 0U;
 800c54e:	2300      	movs	r3, #0
    if (count > 200000U)
 800c550:	4a0c      	ldr	r2, [pc, #48]	; (800c584 <USB_CoreInit+0x114>)
  count = 0U;
 800c552:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c554:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c558:	f043 0301 	orr.w	r3, r3, #1
 800c55c:	f8cc 3010 	str.w	r3, [ip, #16]
 800c560:	e004      	b.n	800c56c <USB_CoreInit+0xfc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c562:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800c566:	f010 0001 	ands.w	r0, r0, #1
 800c56a:	d0d3      	beq.n	800c514 <USB_CoreInit+0xa4>
    count++;
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	3301      	adds	r3, #1
 800c570:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c572:	9b01      	ldr	r3, [sp, #4]
 800c574:	4293      	cmp	r3, r2
 800c576:	d9f4      	bls.n	800c562 <USB_CoreInit+0xf2>
 800c578:	e7cb      	b.n	800c512 <USB_CoreInit+0xa2>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c57a:	68c3      	ldr	r3, [r0, #12]
 800c57c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c580:	60c3      	str	r3, [r0, #12]
 800c582:	e791      	b.n	800c4a8 <USB_CoreInit+0x38>
 800c584:	00030d40 	.word	0x00030d40

0800c588 <USB_DisableGlobalInt>:
{
 800c588:	4603      	mov	r3, r0
}
 800c58a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	f022 0201 	bic.w	r2, r2, #1
 800c592:	609a      	str	r2, [r3, #8]
}
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop

0800c598 <USB_SetCurrentMode>:
{
 800c598:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c59a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800c59c:	2901      	cmp	r1, #1
{
 800c59e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c5a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c5a4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800c5a6:	d017      	beq.n	800c5d8 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800c5a8:	b9a1      	cbnz	r1, 800c5d4 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c5aa:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800c5ac:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c5ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5b2:	60c3      	str	r3, [r0, #12]
 800c5b4:	e001      	b.n	800c5ba <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c5b6:	2c32      	cmp	r4, #50	; 0x32
 800c5b8:	d00c      	beq.n	800c5d4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800c5ba:	2001      	movs	r0, #1
      ms++;
 800c5bc:	4404      	add	r4, r0
      HAL_Delay(1U);
 800c5be:	f7f7 ff6b 	bl	8004498 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800c5c2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c5c4:	07db      	lsls	r3, r3, #31
 800c5c6:	d4f6      	bmi.n	800c5b6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800c5c8:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800c5cc:	fab0 f080 	clz	r0, r0
 800c5d0:	0940      	lsrs	r0, r0, #5
}
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c5d4:	2001      	movs	r0, #1
}
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5d8:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800c5da:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5e0:	60c3      	str	r3, [r0, #12]
 800c5e2:	e001      	b.n	800c5e8 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c5e4:	2c32      	cmp	r4, #50	; 0x32
 800c5e6:	d0f5      	beq.n	800c5d4 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800c5e8:	2001      	movs	r0, #1
      ms++;
 800c5ea:	4404      	add	r4, r0
      HAL_Delay(1U);
 800c5ec:	f7f7 ff54 	bl	8004498 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800c5f0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c5f2:	07da      	lsls	r2, r3, #31
 800c5f4:	d5f6      	bpl.n	800c5e4 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800c5f6:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800c5fa:	fab0 f080 	clz	r0, r0
 800c5fe:	0940      	lsrs	r0, r0, #5
 800c600:	e7e7      	b.n	800c5d2 <USB_SetCurrentMode+0x3a>
 800c602:	bf00      	nop

0800c604 <USB_FlushTxFifo>:
{
 800c604:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800c606:	2300      	movs	r3, #0
    if (count > 200000U)
 800c608:	4a12      	ldr	r2, [pc, #72]	; (800c654 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	e002      	b.n	800c614 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c60e:	6903      	ldr	r3, [r0, #16]
 800c610:	2b00      	cmp	r3, #0
 800c612:	db08      	blt.n	800c626 <USB_FlushTxFifo+0x22>
    count++;
 800c614:	9b01      	ldr	r3, [sp, #4]
 800c616:	3301      	adds	r3, #1
 800c618:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c61a:	9b01      	ldr	r3, [sp, #4]
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d9f6      	bls.n	800c60e <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800c620:	2003      	movs	r0, #3
}
 800c622:	b002      	add	sp, #8
 800c624:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c626:	0189      	lsls	r1, r1, #6
  count = 0U;
 800c628:	2300      	movs	r3, #0
    if (count > 200000U)
 800c62a:	4a0a      	ldr	r2, [pc, #40]	; (800c654 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c62c:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800c630:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c632:	6101      	str	r1, [r0, #16]
 800c634:	e003      	b.n	800c63e <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c636:	6903      	ldr	r3, [r0, #16]
 800c638:	f013 0320 	ands.w	r3, r3, #32
 800c63c:	d006      	beq.n	800c64c <USB_FlushTxFifo+0x48>
    count++;
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	3301      	adds	r3, #1
 800c642:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	4293      	cmp	r3, r2
 800c648:	d9f5      	bls.n	800c636 <USB_FlushTxFifo+0x32>
 800c64a:	e7e9      	b.n	800c620 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 800c64c:	4618      	mov	r0, r3
}
 800c64e:	b002      	add	sp, #8
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	00030d40 	.word	0x00030d40

0800c658 <USB_FlushRxFifo>:
{
 800c658:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800c65a:	2300      	movs	r3, #0
    if (count > 200000U)
 800c65c:	4a11      	ldr	r2, [pc, #68]	; (800c6a4 <USB_FlushRxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	e002      	b.n	800c668 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c662:	6903      	ldr	r3, [r0, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	db08      	blt.n	800c67a <USB_FlushRxFifo+0x22>
    count++;
 800c668:	9b01      	ldr	r3, [sp, #4]
 800c66a:	3301      	adds	r3, #1
 800c66c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	4293      	cmp	r3, r2
 800c672:	d9f6      	bls.n	800c662 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 800c674:	2003      	movs	r0, #3
}
 800c676:	b002      	add	sp, #8
 800c678:	4770      	bx	lr
  count = 0U;
 800c67a:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c67c:	2310      	movs	r3, #16
    if (count > 200000U)
 800c67e:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <USB_FlushRxFifo+0x4c>)
  count = 0U;
 800c680:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c682:	6103      	str	r3, [r0, #16]
 800c684:	e003      	b.n	800c68e <USB_FlushRxFifo+0x36>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c686:	6903      	ldr	r3, [r0, #16]
 800c688:	f013 0310 	ands.w	r3, r3, #16
 800c68c:	d006      	beq.n	800c69c <USB_FlushRxFifo+0x44>
    count++;
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	3301      	adds	r3, #1
 800c692:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c694:	9b01      	ldr	r3, [sp, #4]
 800c696:	4293      	cmp	r3, r2
 800c698:	d9f5      	bls.n	800c686 <USB_FlushRxFifo+0x2e>
 800c69a:	e7eb      	b.n	800c674 <USB_FlushRxFifo+0x1c>
  return HAL_OK;
 800c69c:	4618      	mov	r0, r3
}
 800c69e:	b002      	add	sp, #8
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	00030d40 	.word	0x00030d40

0800c6a8 <USB_ReadPacket>:
{
 800c6a8:	b530      	push	{r4, r5, lr}
  for (i = 0U; i < count32b; i++)
 800c6aa:	ea5f 0e92 	movs.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800c6ae:	f002 0503 	and.w	r5, r2, #3
  for (i = 0U; i < count32b; i++)
 800c6b2:	d00b      	beq.n	800c6cc <USB_ReadPacket+0x24>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c6b4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800c6b8:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6be:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 800c6c0:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6c2:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 800c6c6:	d1f9      	bne.n	800c6bc <USB_ReadPacket+0x14>
    pDest++;
 800c6c8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 800c6cc:	b16d      	cbz	r5, 800c6ea <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c6ce:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 800c6d2:	1e6b      	subs	r3, r5, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c6d4:	6802      	ldr	r2, [r0, #0]
      remaining_bytes--;
 800c6d6:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c6d8:	700a      	strb	r2, [r1, #0]
    } while (remaining_bytes != 0U);
 800c6da:	b12b      	cbz	r3, 800c6e8 <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c6dc:	0a10      	lsrs	r0, r2, #8
    } while (remaining_bytes != 0U);
 800c6de:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c6e0:	7048      	strb	r0, [r1, #1]
    } while (remaining_bytes != 0U);
 800c6e2:	d001      	beq.n	800c6e8 <USB_ReadPacket+0x40>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c6e4:	0c12      	lsrs	r2, r2, #16
 800c6e6:	708a      	strb	r2, [r1, #2]
      pDest++;
 800c6e8:	4429      	add	r1, r5
}
 800c6ea:	4608      	mov	r0, r1
 800c6ec:	bd30      	pop	{r4, r5, pc}
 800c6ee:	bf00      	nop

0800c6f0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800c6f0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800c6f2:	6980      	ldr	r0, [r0, #24]
}
 800c6f4:	4010      	ands	r0, r2
 800c6f6:	4770      	bx	lr

0800c6f8 <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 800c6f8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800c6fc:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c700:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
}
 800c704:	4018      	ands	r0, r3
 800c706:	4770      	bx	lr

0800c708 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800c708:	6940      	ldr	r0, [r0, #20]
}
 800c70a:	f000 0001 	and.w	r0, r0, #1
 800c70e:	4770      	bx	lr

0800c710 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c710:	b084      	sub	sp, #16
 800c712:	4684      	mov	ip, r0
 800c714:	b430      	push	{r4, r5}
 800c716:	b082      	sub	sp, #8
 800c718:	ac05      	add	r4, sp, #20
 800c71a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c71e:	2300      	movs	r3, #0
 800c720:	4611      	mov	r1, r2
 800c722:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c726:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c72c:	6383      	str	r3, [r0, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c72e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c730:	05dd      	lsls	r5, r3, #23
 800c732:	d565      	bpl.n	800c800 <USB_HostInit+0xf0>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c738:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 800c73c:	f000 808a 	beq.w	800c854 <USB_HostInit+0x144>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c740:	f023 0304 	bic.w	r3, r3, #4
 800c744:	f8cc 3400 	str.w	r3, [ip, #1024]	; 0x400
  __IO uint32_t count = 0U;
 800c748:	2300      	movs	r3, #0
    if (count > 200000U)
 800c74a:	4a45      	ldr	r2, [pc, #276]	; (800c860 <USB_HostInit+0x150>)
  __IO uint32_t count = 0U;
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	e003      	b.n	800c758 <USB_HostInit+0x48>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c750:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	db69      	blt.n	800c82c <USB_HostInit+0x11c>
    count++;
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	3301      	adds	r3, #1
 800c75c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800c75e:	9b00      	ldr	r3, [sp, #0]
 800c760:	4293      	cmp	r3, r2
 800c762:	d9f5      	bls.n	800c750 <USB_HostInit+0x40>
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
  {
    ret = HAL_ERROR;
 800c764:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 800c766:	2300      	movs	r3, #0
    if (count > 200000U)
 800c768:	4a3d      	ldr	r2, [pc, #244]	; (800c860 <USB_HostInit+0x150>)
  __IO uint32_t count = 0U;
 800c76a:	9301      	str	r3, [sp, #4]
 800c76c:	e003      	b.n	800c776 <USB_HostInit+0x66>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c76e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	db47      	blt.n	800c806 <USB_HostInit+0xf6>
    count++;
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	3301      	adds	r3, #1
 800c77a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c77c:	9b01      	ldr	r3, [sp, #4]
 800c77e:	4293      	cmp	r3, r2
 800c780:	d9f5      	bls.n	800c76e <USB_HostInit+0x5e>
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
  {
    ret = HAL_ERROR;
 800c782:	2001      	movs	r0, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c784:	b159      	cbz	r1, 800c79e <USB_HostInit+0x8e>
 800c786:	2200      	movs	r2, #0
 800c788:	f50c 63a0 	add.w	r3, ip, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c78c:	f04f 35ff 	mov.w	r5, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800c790:	4614      	mov	r4, r2
  for (i = 0U; i < cfg.Host_channels; i++)
 800c792:	3201      	adds	r2, #1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c794:	609d      	str	r5, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c796:	60dc      	str	r4, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c798:	3320      	adds	r3, #32
 800c79a:	4291      	cmp	r1, r2
 800c79c:	d1f9      	bne.n	800c792 <USB_HostInit+0x82>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c79e:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8cc 2018 	str.w	r2, [ip, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c7a8:	f8cc 3014 	str.w	r3, [ip, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c7ac:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 800c7b0:	05db      	lsls	r3, r3, #23
 800c7b2:	d51b      	bpl.n	800c7ec <USB_HostInit+0xdc>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c7b4:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c7b8:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <USB_HostInit+0x154>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c7ba:	4b2b      	ldr	r3, [pc, #172]	; (800c868 <USB_HostInit+0x158>)
    USBx->GRXFSIZ  = 0x200U;
 800c7bc:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c7c0:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c7c4:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	b92b      	cbnz	r3, 800c7d8 <USB_HostInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c7cc:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c7d0:	f043 0310 	orr.w	r3, r3, #16
 800c7d4:	f8cc 3018 	str.w	r3, [ip, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c7d8:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800c7dc:	4b23      	ldr	r3, [pc, #140]	; (800c86c <USB_HostInit+0x15c>)
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	f8cc 3018 	str.w	r3, [ip, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 800c7e4:	b002      	add	sp, #8
 800c7e6:	bc30      	pop	{r4, r5}
 800c7e8:	b004      	add	sp, #16
 800c7ea:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800c7ec:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c7ee:	4a20      	ldr	r2, [pc, #128]	; (800c870 <USB_HostInit+0x160>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c7f0:	4b20      	ldr	r3, [pc, #128]	; (800c874 <USB_HostInit+0x164>)
    USBx->GRXFSIZ  = 0x80U;
 800c7f2:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c7f6:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c7fa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
 800c7fe:	e7e3      	b.n	800c7c8 <USB_HostInit+0xb8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c800:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800c804:	e79c      	b.n	800c740 <USB_HostInit+0x30>
  count = 0U;
 800c806:	2200      	movs	r2, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c808:	2310      	movs	r3, #16
  count = 0U;
 800c80a:	9201      	str	r2, [sp, #4]
    if (count > 200000U)
 800c80c:	4a14      	ldr	r2, [pc, #80]	; (800c860 <USB_HostInit+0x150>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c80e:	f8cc 3010 	str.w	r3, [ip, #16]
 800c812:	e003      	b.n	800c81c <USB_HostInit+0x10c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c814:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c818:	06dc      	lsls	r4, r3, #27
 800c81a:	d5b3      	bpl.n	800c784 <USB_HostInit+0x74>
    count++;
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	3301      	adds	r3, #1
 800c820:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800c822:	9b01      	ldr	r3, [sp, #4]
 800c824:	4293      	cmp	r3, r2
 800c826:	d9f5      	bls.n	800c814 <USB_HostInit+0x104>
    ret = HAL_ERROR;
 800c828:	2001      	movs	r0, #1
 800c82a:	e7ab      	b.n	800c784 <USB_HostInit+0x74>
  count = 0U;
 800c82c:	2000      	movs	r0, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c82e:	f44f 6384 	mov.w	r3, #1056	; 0x420
    if (count > 200000U)
 800c832:	4a0b      	ldr	r2, [pc, #44]	; (800c860 <USB_HostInit+0x150>)
  count = 0U;
 800c834:	9000      	str	r0, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c836:	f8cc 3010 	str.w	r3, [ip, #16]
 800c83a:	e004      	b.n	800c846 <USB_HostInit+0x136>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c83c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800c840:	f010 0020 	ands.w	r0, r0, #32
 800c844:	d08f      	beq.n	800c766 <USB_HostInit+0x56>
    count++;
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800c84c:	9b00      	ldr	r3, [sp, #0]
 800c84e:	4293      	cmp	r3, r2
 800c850:	d9f4      	bls.n	800c83c <USB_HostInit+0x12c>
 800c852:	e787      	b.n	800c764 <USB_HostInit+0x54>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c854:	f043 0304 	orr.w	r3, r3, #4
 800c858:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 800c85c:	e774      	b.n	800c748 <USB_HostInit+0x38>
 800c85e:	bf00      	nop
 800c860:	00030d40 	.word	0x00030d40
 800c864:	01000200 	.word	0x01000200
 800c868:	00e00300 	.word	0x00e00300
 800c86c:	a3200008 	.word	0xa3200008
 800c870:	00600080 	.word	0x00600080
 800c874:	004000e0 	.word	0x004000e0

0800c878 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c878:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c87c:	f001 0303 	and.w	r3, r1, #3

  if (freq == HCFG_48_MHZ)
 800c880:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c882:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800c886:	f022 0203 	bic.w	r2, r2, #3
 800c88a:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c88e:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800c892:	ea43 0302 	orr.w	r3, r3, r2
 800c896:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800c89a:	d009      	beq.n	800c8b0 <USB_InitFSLSPClkSel+0x38>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800c89c:	2902      	cmp	r1, #2
 800c89e:	d001      	beq.n	800c8a4 <USB_InitFSLSPClkSel+0x2c>
  {
    /* ... */
  }

  return HAL_OK;
}
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	4770      	bx	lr
    USBx_HOST->HFIR = 6000U;
 800c8a4:	f241 7370 	movw	r3, #6000	; 0x1770
}
 800c8a8:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 6000U;
 800c8aa:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800c8ae:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800c8b0:	f64b 3380 	movw	r3, #48000	; 0xbb80
}
 800c8b4:	2000      	movs	r0, #0
    USBx_HOST->HFIR = 48000U;
 800c8b6:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800c8ba:	4770      	bx	lr

0800c8bc <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c8bc:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
}
 800c8c0:	b280      	uxth	r0, r0
 800c8c2:	4770      	bx	lr

0800c8c4 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c8c4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 800c8c8:	2300      	movs	r3, #0
{
 800c8ca:	b410      	push	{r4}
 800c8cc:	b083      	sub	sp, #12
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c8ce:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
  __IO uint32_t count = 0U;
 800c8d2:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c8d4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c8d8:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c8dc:	6882      	ldr	r2, [r0, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c8de:	0c9b      	lsrs	r3, r3, #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c8e0:	0692      	lsls	r2, r2, #26
 800c8e2:	d501      	bpl.n	800c8e8 <USB_HC_Halt+0x24>
 800c8e4:	2c00      	cmp	r4, #0
 800c8e6:	da25      	bge.n	800c934 <USB_HC_Halt+0x70>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c8e8:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c8ec:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800c8f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8f4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c8f8:	d021      	beq.n	800c93e <USB_HC_Halt+0x7a>
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c8fa:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800c8fe:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c902:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c906:	d13a      	bne.n	800c97e <USB_HC_Halt+0xba>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c90c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c910:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800c914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c918:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800c91c:	e003      	b.n	800c926 <USB_HC_Halt+0x62>

        if (count > 1000U)
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c91e:	f8dc 3000 	ldr.w	r3, [ip]
 800c922:	2b00      	cmp	r3, #0
 800c924:	da06      	bge.n	800c934 <USB_HC_Halt+0x70>
        count++;
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	3301      	adds	r3, #1
 800c92a:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 800c92c:	9b01      	ldr	r3, [sp, #4]
 800c92e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c932:	d9f4      	bls.n	800c91e <USB_HC_Halt+0x5a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800c934:	2000      	movs	r0, #0
 800c936:	b003      	add	sp, #12
 800c938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c93c:	4770      	bx	lr
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c93e:	6883      	ldr	r3, [r0, #8]
 800c940:	069b      	lsls	r3, r3, #26
 800c942:	d4f7      	bmi.n	800c934 <USB_HC_Halt+0x70>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c944:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c946:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c94a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c94e:	d116      	bne.n	800c97e <USB_HC_Halt+0xba>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c954:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c958:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800c95c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c960:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800c964:	e003      	b.n	800c96e <USB_HC_Halt+0xaa>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c966:	f8dc 3000 	ldr.w	r3, [ip]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dae2      	bge.n	800c934 <USB_HC_Halt+0x70>
          count++;
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	3301      	adds	r3, #1
 800c972:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 800c974:	9b01      	ldr	r3, [sp, #4]
 800c976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c97a:	d9f4      	bls.n	800c966 <USB_HC_Halt+0xa2>
 800c97c:	e7da      	b.n	800c934 <USB_HC_Halt+0x70>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c97e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 800c982:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c984:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800c988:	b003      	add	sp, #12
 800c98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c990:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c992:	4903      	ldr	r1, [pc, #12]	; (800c9a0 <MX_FATFS_Init+0x10>)
 800c994:	4803      	ldr	r0, [pc, #12]	; (800c9a4 <MX_FATFS_Init+0x14>)
 800c996:	f000 f8f5 	bl	800cb84 <FATFS_LinkDriver>
 800c99a:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <MX_FATFS_Init+0x18>)
 800c99c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c99e:	bd08      	pop	{r3, pc}
 800c9a0:	200263c4 	.word	0x200263c4
 800c9a4:	0801c864 	.word	0x0801c864
 800c9a8:	200263c8 	.word	0x200263c8

0800c9ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	4694      	mov	ip, r2
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9b4:	460a      	mov	r2, r1
 800c9b6:	4663      	mov	r3, ip
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	9400      	str	r4, [sp, #0]
 800c9bc:	4803      	ldr	r0, [pc, #12]	; (800c9cc <BSP_SD_ReadBlocks+0x20>)
 800c9be:	f7fc fae7 	bl	8008f90 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c9c2:	3800      	subs	r0, #0
 800c9c4:	bf18      	it	ne
 800c9c6:	2001      	movne	r0, #1
 800c9c8:	b002      	add	sp, #8
 800c9ca:	bd10      	pop	{r4, pc}
 800c9cc:	20019cf4 	.word	0x20019cf4

0800c9d0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	4694      	mov	ip, r2
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9d8:	460a      	mov	r2, r1
 800c9da:	4663      	mov	r3, ip
 800c9dc:	4601      	mov	r1, r0
 800c9de:	9400      	str	r4, [sp, #0]
 800c9e0:	4803      	ldr	r0, [pc, #12]	; (800c9f0 <BSP_SD_WriteBlocks+0x20>)
 800c9e2:	f7fc fbdd 	bl	80091a0 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c9e6:	3800      	subs	r0, #0
 800c9e8:	bf18      	it	ne
 800c9ea:	2001      	movne	r0, #1
 800c9ec:	b002      	add	sp, #8
 800c9ee:	bd10      	pop	{r4, pc}
 800c9f0:	20019cf4 	.word	0x20019cf4

0800c9f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c9f4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c9f6:	4803      	ldr	r0, [pc, #12]	; (800ca04 <BSP_SD_GetCardState+0x10>)
 800c9f8:	f7fc ff54 	bl	80098a4 <HAL_SD_GetCardState>
}
 800c9fc:	3804      	subs	r0, #4
 800c9fe:	bf18      	it	ne
 800ca00:	2001      	movne	r0, #1
 800ca02:	bd08      	pop	{r3, pc}
 800ca04:	20019cf4 	.word	0x20019cf4

0800ca08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca08:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ca0a:	4801      	ldr	r0, [pc, #4]	; (800ca10 <BSP_SD_GetCardInfo+0x8>)
 800ca0c:	f7fc bea0 	b.w	8009750 <HAL_SD_GetCardInfo>
 800ca10:	20019cf4 	.word	0x20019cf4

0800ca14 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ca14:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800ca16:	2301      	movs	r3, #1
{
 800ca18:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800ca1a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca1e:	f000 f821 	bl	800ca64 <BSP_PlatformIsDetected>
 800ca22:	b908      	cbnz	r0, 800ca28 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800ca24:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800ca28:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800ca2c:	b003      	add	sp, #12
 800ca2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca32:	bf00      	nop

0800ca34 <BSP_SD_Init>:
{
 800ca34:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ca36:	f7ff ffed 	bl	800ca14 <BSP_SD_IsDetected>
 800ca3a:	2801      	cmp	r0, #1
 800ca3c:	d001      	beq.n	800ca42 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ca3e:	2002      	movs	r0, #2
}
 800ca40:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800ca42:	4807      	ldr	r0, [pc, #28]	; (800ca60 <BSP_SD_Init+0x2c>)
 800ca44:	f7fc fe66 	bl	8009714 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1f9      	bne.n	800ca40 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ca4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca50:	4803      	ldr	r0, [pc, #12]	; (800ca60 <BSP_SD_Init+0x2c>)
 800ca52:	f7fc fe91 	bl	8009778 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ca56:	3800      	subs	r0, #0
 800ca58:	bf18      	it	ne
 800ca5a:	2001      	movne	r0, #1
}
 800ca5c:	bd08      	pop	{r3, pc}
 800ca5e:	bf00      	nop
 800ca60:	20019cf4 	.word	0x20019cf4

0800ca64 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ca68:	4803      	ldr	r0, [pc, #12]	; (800ca78 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800ca6a:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca6c:	f7f8 fd64 	bl	8005538 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800ca70:	fab0 f080 	clz	r0, r0
 800ca74:	0940      	lsrs	r0, r0, #5
 800ca76:	bd08      	pop	{r3, pc}
 800ca78:	40020800 	.word	0x40020800

0800ca7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ca7c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800ca7e:	4c0a      	ldr	r4, [pc, #40]	; (800caa8 <SD_initialize+0x2c>)
 800ca80:	2501      	movs	r5, #1
 800ca82:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ca84:	f7ff ffd6 	bl	800ca34 <BSP_SD_Init>
 800ca88:	b108      	cbz	r0, 800ca8e <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ca8a:	7820      	ldrb	r0, [r4, #0]
}
 800ca8c:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800ca8e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ca90:	f7ff ffb0 	bl	800c9f4 <BSP_SD_GetCardState>
 800ca94:	b918      	cbnz	r0, 800ca9e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800ca96:	7823      	ldrb	r3, [r4, #0]
 800ca98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca9c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ca9e:	7823      	ldrb	r3, [r4, #0]
 800caa0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800caa2:	7023      	strb	r3, [r4, #0]
  return Stat;
 800caa4:	7820      	ldrb	r0, [r4, #0]
}
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	20000024 	.word	0x20000024

0800caac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800caac:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800caae:	2301      	movs	r3, #1
 800cab0:	4c05      	ldr	r4, [pc, #20]	; (800cac8 <SD_status+0x1c>)
 800cab2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800cab4:	f7ff ff9e 	bl	800c9f4 <BSP_SD_GetCardState>
 800cab8:	b918      	cbnz	r0, 800cac2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800caba:	7823      	ldrb	r3, [r4, #0]
 800cabc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cac0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800cac2:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	bf00      	nop
 800cac8:	20000024 	.word	0x20000024

0800cacc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cacc:	b508      	push	{r3, lr}
 800cace:	4608      	mov	r0, r1
 800cad0:	4611      	mov	r1, r2
 800cad2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295
 800cad8:	f7ff ff68 	bl	800c9ac <BSP_SD_ReadBlocks>
 800cadc:	b108      	cbz	r0, 800cae2 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800cade:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800cae0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cae2:	f7ff ff87 	bl	800c9f4 <BSP_SD_GetCardState>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d0fa      	beq.n	800cae0 <SD_read+0x14>
 800caea:	f7ff ff83 	bl	800c9f4 <BSP_SD_GetCardState>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d1f7      	bne.n	800cae2 <SD_read+0x16>
 800caf2:	e7f5      	b.n	800cae0 <SD_read+0x14>

0800caf4 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800caf4:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <SD_ioctl+0x64>)
{
 800caf6:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800caf8:	7818      	ldrb	r0, [r3, #0]
{
 800cafa:	b089      	sub	sp, #36	; 0x24
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cafc:	f010 0401 	ands.w	r4, r0, #1
 800cb00:	d106      	bne.n	800cb10 <SD_ioctl+0x1c>
 800cb02:	4615      	mov	r5, r2

  switch (cmd)
 800cb04:	2903      	cmp	r1, #3
 800cb06:	d824      	bhi.n	800cb52 <SD_ioctl+0x5e>
 800cb08:	e8df f001 	tbb	[pc, r1]
 800cb0c:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cb10:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800cb12:	4620      	mov	r0, r4
 800cb14:	b009      	add	sp, #36	; 0x24
 800cb16:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800cb18:	460c      	mov	r4, r1
}
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	b009      	add	sp, #36	; 0x24
 800cb1e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cb20:	4668      	mov	r0, sp
 800cb22:	f7ff ff71 	bl	800ca08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb26:	9b06      	ldr	r3, [sp, #24]
}
 800cb28:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cb2a:	602b      	str	r3, [r5, #0]
}
 800cb2c:	b009      	add	sp, #36	; 0x24
 800cb2e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cb30:	4668      	mov	r0, sp
 800cb32:	f7ff ff69 	bl	800ca08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb36:	9b07      	ldr	r3, [sp, #28]
}
 800cb38:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cb3a:	802b      	strh	r3, [r5, #0]
}
 800cb3c:	b009      	add	sp, #36	; 0x24
 800cb3e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cb40:	4668      	mov	r0, sp
 800cb42:	f7ff ff61 	bl	800ca08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb46:	9b07      	ldr	r3, [sp, #28]
}
 800cb48:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cb4a:	0a5b      	lsrs	r3, r3, #9
 800cb4c:	602b      	str	r3, [r5, #0]
}
 800cb4e:	b009      	add	sp, #36	; 0x24
 800cb50:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800cb52:	2404      	movs	r4, #4
 800cb54:	e7dd      	b.n	800cb12 <SD_ioctl+0x1e>
 800cb56:	bf00      	nop
 800cb58:	20000024 	.word	0x20000024

0800cb5c <SD_write>:
{
 800cb5c:	b508      	push	{r3, lr}
 800cb5e:	4608      	mov	r0, r1
 800cb60:	4611      	mov	r1, r2
 800cb62:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cb64:	f04f 33ff 	mov.w	r3, #4294967295
 800cb68:	f7ff ff32 	bl	800c9d0 <BSP_SD_WriteBlocks>
 800cb6c:	b108      	cbz	r0, 800cb72 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800cb6e:	2001      	movs	r0, #1
}
 800cb70:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cb72:	f7ff ff3f 	bl	800c9f4 <BSP_SD_GetCardState>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d0fa      	beq.n	800cb70 <SD_write+0x14>
 800cb7a:	f7ff ff3b 	bl	800c9f4 <BSP_SD_GetCardState>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d1f7      	bne.n	800cb72 <SD_write+0x16>
 800cb82:	e7f5      	b.n	800cb70 <SD_write+0x14>

0800cb84 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800cb84:	4b11      	ldr	r3, [pc, #68]	; (800cbcc <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb86:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800cb88:	7a5c      	ldrb	r4, [r3, #9]
 800cb8a:	b9cc      	cbnz	r4, 800cbc0 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800cb8c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800cb90:	7a5c      	ldrb	r4, [r3, #9]
 800cb92:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800cb94:	7a5c      	ldrb	r4, [r3, #9]
 800cb96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb9a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800cb9c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800cb9e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800cba0:	441c      	add	r4, r3
 800cba2:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800cba4:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800cba6:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800cba8:	b2e4      	uxtb	r4, r4
 800cbaa:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800cbac:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800cbae:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800cbb0:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800cbb2:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800cbba:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800cbbc:	708b      	strb	r3, [r1, #2]
}
 800cbbe:	4770      	bx	lr
  uint8_t ret = 1;
 800cbc0:	2201      	movs	r2, #1
}
 800cbc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	200263cc 	.word	0x200263cc

0800cbd0 <mnv1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnv1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800cbd0:	b570      	push	{r4, r5, r6, lr}
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_mnv1_weights_map, 1, params)) {
 800cbd2:	4ebe      	ldr	r6, [pc, #760]	; (800cecc <mnv1_configure_weights+0x2fc>)
{
 800cbd4:	460a      	mov	r2, r1
 800cbd6:	4605      	mov	r5, r0
  if (ai_platform_get_weights_map(g_mnv1_weights_map, 1, params)) {
 800cbd8:	2101      	movs	r1, #1
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f000 ff36 	bl	800da4c <ai_platform_get_weights_map>
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	f000 82e4 	beq.w	800d1b0 <mnv1_configure_weights+0x5e0>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800cbe8:	49b9      	ldr	r1, [pc, #740]	; (800ced0 <mnv1_configure_weights+0x300>)
    conv2d_1_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 0);
    conv2d_1_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 0);
    
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800cbea:	4aba      	ldr	r2, [pc, #744]	; (800ced4 <mnv1_configure_weights+0x304>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800cbec:	6808      	ldr	r0, [r1, #0]
    conv2d_1_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 0);
 800cbee:	6833      	ldr	r3, [r6, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800cbf0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 1024);
    conv2d_5_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 1024);
    
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_5_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 2176);
 800cbf4:	f503 6508 	add.w	r5, r3, #2176	; 0x880
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800cbf8:	6008      	str	r0, [r1, #0]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800cbfa:	6810      	ldr	r0, [r2, #0]
 800cbfc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_1_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 0);
 800cc00:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc04:	6010      	str	r0, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 432);
 800cc06:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc0a:	49b3      	ldr	r1, [pc, #716]	; (800ced8 <mnv1_configure_weights+0x308>)
    conv2d_1_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 432);
 800cc0c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc10:	6808      	ldr	r0, [r1, #0]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc12:	4ab2      	ldr	r2, [pc, #712]	; (800cedc <mnv1_configure_weights+0x30c>)
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc14:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc18:	6008      	str	r0, [r1, #0]
    conv2d_3_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 496);
 800cc1a:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 800cc1e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc22:	6810      	ldr	r0, [r2, #0]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc24:	49ae      	ldr	r1, [pc, #696]	; (800cee0 <mnv1_configure_weights+0x310>)
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc26:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc2a:	6010      	str	r0, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 640);
 800cc2c:	f503 7020 	add.w	r0, r3, #640	; 0x280
 800cc30:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc34:	6808      	ldr	r0, [r1, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc36:	4aab      	ldr	r2, [pc, #684]	; (800cee4 <mnv1_configure_weights+0x314>)
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc38:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc3c:	6008      	str	r0, [r1, #0]
    conv2d_4_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 704);
 800cc3e:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 800cc42:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc46:	6810      	ldr	r0, [r2, #0]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc48:	49a7      	ldr	r1, [pc, #668]	; (800cee8 <mnv1_configure_weights+0x318>)
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc4a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc4e:	6010      	str	r0, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 960);
 800cc50:	f503 7070 	add.w	r0, r3, #960	; 0x3c0
 800cc54:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc58:	6808      	ldr	r0, [r1, #0]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc5a:	4aa4      	ldr	r2, [pc, #656]	; (800ceec <mnv1_configure_weights+0x31c>)
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc5c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_5_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 2176);
 800cc60:	6095      	str	r5, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc62:	6008      	str	r0, [r1, #0]
    conv2d_5_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 1024);
 800cc64:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 800cc68:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc6c:	6810      	ldr	r0, [r2, #0]
    conv2d_5_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 2176);
    
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc6e:	49a0      	ldr	r1, [pc, #640]	; (800cef0 <mnv1_configure_weights+0x320>)
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc70:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc74:	6010      	str	r0, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 2176);
 800cc76:	60d5      	str	r5, [r2, #12]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_10_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 8480);
    conv2d_10_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 8480);
    
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_11_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 8832);
 800cc78:	f503 550a 	add.w	r5, r3, #8832	; 0x2280
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc7c:	6808      	ldr	r0, [r1, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc7e:	4a9d      	ldr	r2, [pc, #628]	; (800cef4 <mnv1_configure_weights+0x324>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc80:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc84:	6008      	str	r0, [r1, #0]
    conv2d_7_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 2464);
 800cc86:	f503 601a 	add.w	r0, r3, #2464	; 0x9a0
 800cc8a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc8e:	6810      	ldr	r0, [r2, #0]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800cc90:	4999      	ldr	r1, [pc, #612]	; (800cef8 <mnv1_configure_weights+0x328>)
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800cc92:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cc96:	6010      	str	r0, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 3112);
 800cc98:	f603 4028 	addw	r0, r3, #3112	; 0xc28
 800cc9c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800cca0:	6808      	ldr	r0, [r1, #0]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800cca2:	4a96      	ldr	r2, [pc, #600]	; (800cefc <mnv1_configure_weights+0x32c>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 800cca4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cca8:	6008      	str	r0, [r1, #0]
    conv2d_8_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 3400);
 800ccaa:	f603 5048 	addw	r0, r3, #3400	; 0xd48
 800ccae:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800ccb2:	6810      	ldr	r0, [r2, #0]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800ccb4:	4992      	ldr	r1, [pc, #584]	; (800cf00 <mnv1_configure_weights+0x330>)
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800ccb6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ccba:	6010      	str	r0, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 5128);
 800ccbc:	f241 4008 	movw	r0, #5128	; 0x1408
 800ccc0:	4418      	add	r0, r3
 800ccc2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800ccc6:	6808      	ldr	r0, [r1, #0]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800ccc8:	4a8e      	ldr	r2, [pc, #568]	; (800cf04 <mnv1_configure_weights+0x334>)
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800ccca:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ccce:	6008      	str	r0, [r1, #0]
    conv2d_9_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 5224);
 800ccd0:	f241 4068 	movw	r0, #5224	; 0x1468
 800ccd4:	4418      	add	r0, r3
 800ccd6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800ccda:	6810      	ldr	r0, [r2, #0]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800ccdc:	498a      	ldr	r1, [pc, #552]	; (800cf08 <mnv1_configure_weights+0x338>)
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800ccde:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cce2:	6010      	str	r0, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 7336);
 800cce4:	f641 40a8 	movw	r0, #7336	; 0x1ca8
 800cce8:	4418      	add	r0, r3
 800ccea:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800ccee:	6808      	ldr	r0, [r1, #0]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800ccf0:	4a86      	ldr	r2, [pc, #536]	; (800cf0c <mnv1_configure_weights+0x33c>)
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800ccf2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ccf6:	6008      	str	r0, [r1, #0]
    conv2d_10_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 7688);
 800ccf8:	f641 6008 	movw	r0, #7688	; 0x1e08
 800ccfc:	4418      	add	r0, r3
 800ccfe:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_10_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 8480);
 800cd02:	f242 1120 	movw	r1, #8480	; 0x2120
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd06:	6810      	ldr	r0, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 8480);
 800cd08:	4419      	add	r1, r3
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd0a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_10_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 8480);
 800cd0e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd12:	497f      	ldr	r1, [pc, #508]	; (800cf10 <mnv1_configure_weights+0x340>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd14:	6010      	str	r0, [r2, #0]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd16:	6808      	ldr	r0, [r1, #0]
    conv2d_11_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 8832);
    
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd18:	4a7e      	ldr	r2, [pc, #504]	; (800cf14 <mnv1_configure_weights+0x344>)
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd1a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cd1e:	6008      	str	r0, [r1, #0]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd20:	6810      	ldr	r0, [r2, #0]
 800cd22:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_11_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 8832);
 800cd26:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd2a:	6010      	str	r0, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 10944);
 800cd2c:	f503 502b 	add.w	r0, r3, #10944	; 0x2ac0
    conv2d_11_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 10944);
    
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd30:	4979      	ldr	r1, [pc, #484]	; (800cf18 <mnv1_configure_weights+0x348>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 14976);
    conv2d_16_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 14976);
    
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 18816);
 800cd32:	f503 4593 	add.w	r5, r3, #18816	; 0x4980
    conv2d_11_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 10944);
 800cd36:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd3a:	6808      	ldr	r0, [r1, #0]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd3c:	4a77      	ldr	r2, [pc, #476]	; (800cf1c <mnv1_configure_weights+0x34c>)
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd3e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cd42:	6008      	str	r0, [r1, #0]
    conv2d_13_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 11040);
 800cd44:	f642 3020 	movw	r0, #11040	; 0x2b20
 800cd48:	4418      	add	r0, r3
 800cd4a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd4e:	6810      	ldr	r0, [r2, #0]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd50:	4973      	ldr	r1, [pc, #460]	; (800cf20 <mnv1_configure_weights+0x350>)
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd52:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cd56:	6010      	str	r0, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 13344);
 800cd58:	f243 4020 	movw	r0, #13344	; 0x3420
 800cd5c:	4418      	add	r0, r3
 800cd5e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd62:	6808      	ldr	r0, [r1, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd64:	4a6f      	ldr	r2, [pc, #444]	; (800cf24 <mnv1_configure_weights+0x354>)
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd66:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cd6a:	6008      	str	r0, [r1, #0]
    conv2d_15_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 13728);
 800cd6c:	f243 50a0 	movw	r0, #13728	; 0x35a0
 800cd70:	4418      	add	r0, r3
 800cd72:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd76:	6810      	ldr	r0, [r2, #0]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd78:	496b      	ldr	r1, [pc, #428]	; (800cf28 <mnv1_configure_weights+0x358>)
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd7a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cd7e:	6010      	str	r0, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 14592);
 800cd80:	f503 5064 	add.w	r0, r3, #14592	; 0x3900
 800cd84:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd88:	6808      	ldr	r0, [r1, #0]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd8a:	4a68      	ldr	r2, [pc, #416]	; (800cf2c <mnv1_configure_weights+0x35c>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd8c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cd90:	6008      	str	r0, [r1, #0]
    conv2d_16_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 14976);
 800cd92:	f503 506a 	add.w	r0, r3, #14976	; 0x3a80
 800cd96:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd9a:	6810      	ldr	r0, [r2, #0]
    conv2d_16_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 18816);
    
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800cd9c:	4964      	ldr	r1, [pc, #400]	; (800cf30 <mnv1_configure_weights+0x360>)
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800cd9e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_16_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 18816);
 800cda2:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 800cda6:	6010      	str	r0, [r2, #0]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800cda8:	6808      	ldr	r0, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 18976);
    conv2d_17_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 18976);
    
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800cdaa:	4a62      	ldr	r2, [pc, #392]	; (800cf34 <mnv1_configure_weights+0x364>)
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800cdac:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cdb0:	6008      	str	r0, [r1, #0]
    conv2d_17_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 18976);
 800cdb2:	f644 2020 	movw	r0, #18976	; 0x4a20
 800cdb6:	4418      	add	r0, r3
 800cdb8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800cdbc:	6810      	ldr	r0, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 28536);
    conv2d_17_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 28536);
    
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800cdbe:	495e      	ldr	r1, [pc, #376]	; (800cf38 <mnv1_configure_weights+0x368>)
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800cdc0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cdc4:	6010      	str	r0, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 28536);
 800cdc6:	f646 7078 	movw	r0, #28536	; 0x6f78
 800cdca:	4418      	add	r0, r3
 800cdcc:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800cdd0:	6808      	ldr	r0, [r1, #0]
    conv2d_18_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 29492);
    conv2d_18_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 29492);
    
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800cdd2:	4a5a      	ldr	r2, [pc, #360]	; (800cf3c <mnv1_configure_weights+0x36c>)
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800cdd4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cdd8:	6008      	str	r0, [r1, #0]
    conv2d_18_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 29492);
 800cdda:	f247 3034 	movw	r0, #29492	; 0x7334
 800cdde:	4418      	add	r0, r3
 800cde0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800cde4:	6810      	ldr	r0, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 31644);
    conv2d_18_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 31644);
    
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800cde6:	4956      	ldr	r1, [pc, #344]	; (800cf40 <mnv1_configure_weights+0x370>)
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800cde8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cdec:	6010      	str	r0, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 31644);
 800cdee:	f647 309c 	movw	r0, #31644	; 0x7b9c
 800cdf2:	4418      	add	r0, r3
 800cdf4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800cdf8:	6808      	ldr	r0, [r1, #0]
    conv2d_19_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 32600);
    conv2d_19_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 32600);
    
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800cdfa:	4a52      	ldr	r2, [pc, #328]	; (800cf44 <mnv1_configure_weights+0x374>)
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800cdfc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ce00:	6008      	str	r0, [r1, #0]
    conv2d_19_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 32600);
 800ce02:	f647 7058 	movw	r0, #32600	; 0x7f58
 800ce06:	4418      	add	r0, r3
 800ce08:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce0c:	6810      	ldr	r0, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 42160);
    conv2d_19_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 42160);
    
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce0e:	494e      	ldr	r1, [pc, #312]	; (800cf48 <mnv1_configure_weights+0x378>)
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce10:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ce14:	6010      	str	r0, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 42160);
 800ce16:	f24a 40b0 	movw	r0, #42160	; 0xa4b0
 800ce1a:	4418      	add	r0, r3
 800ce1c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce20:	6808      	ldr	r0, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 42320);
    conv2d_21_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 42320);
    
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce22:	4a4a      	ldr	r2, [pc, #296]	; (800cf4c <mnv1_configure_weights+0x37c>)
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce24:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ce28:	6008      	str	r0, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 42320);
 800ce2a:	f24a 5050 	movw	r0, #42320	; 0xa550
 800ce2e:	4418      	add	r0, r3
 800ce30:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce34:	6810      	ldr	r0, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 51920);
 800ce36:	f64c 21d0 	movw	r1, #51920	; 0xcad0
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce3a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_21_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 51920);
 800ce3e:	4419      	add	r1, r3
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce40:	6010      	str	r0, [r2, #0]
    conv2d_21_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 51920);
    
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_22_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 52880);
 800ce42:	f64c 6090 	movw	r0, #52880	; 0xce90
    conv2d_21_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 51920);
 800ce46:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 52880);
 800ce4a:	4418      	add	r0, r3
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce4c:	4940      	ldr	r1, [pc, #256]	; (800cf50 <mnv1_configure_weights+0x380>)
    conv2d_22_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 52880);
    
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce4e:	4a41      	ldr	r2, [pc, #260]	; (800cf54 <mnv1_configure_weights+0x384>)
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce50:	680d      	ldr	r5, [r1, #0]
    conv2d_22_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 52880);
 800ce52:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce56:	6810      	ldr	r0, [r2, #0]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce58:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce5c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce60:	600d      	str	r5, [r1, #0]
    conv2d_22_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 55040);
    conv2d_22_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 55040);
    
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce62:	493d      	ldr	r1, [pc, #244]	; (800cf58 <mnv1_configure_weights+0x388>)
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce64:	6010      	str	r0, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 55040);
 800ce66:	f503 4057 	add.w	r0, r3, #55040	; 0xd700
 800ce6a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce6e:	6808      	ldr	r0, [r1, #0]
    conv2d_23_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 56000);
    conv2d_23_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 56000);
    
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce70:	4a3a      	ldr	r2, [pc, #232]	; (800cf5c <mnv1_configure_weights+0x38c>)
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce72:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ce76:	6008      	str	r0, [r1, #0]
    conv2d_23_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 56000);
 800ce78:	f64d 20c0 	movw	r0, #56000	; 0xdac0
 800ce7c:	4418      	add	r0, r3
 800ce7e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce82:	6810      	ldr	r0, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 65600);
    conv2d_23_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 65600);
    
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce84:	4936      	ldr	r1, [pc, #216]	; (800cf60 <mnv1_configure_weights+0x390>)
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce86:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ce8a:	6010      	str	r0, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 65600);
 800ce8c:	4835      	ldr	r0, [pc, #212]	; (800cf64 <mnv1_configure_weights+0x394>)
 800ce8e:	4418      	add	r0, r3
 800ce90:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce94:	6808      	ldr	r0, [r1, #0]
    conv2d_25_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 65760);
    conv2d_25_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 65760);
    
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 800ce96:	4a34      	ldr	r2, [pc, #208]	; (800cf68 <mnv1_configure_weights+0x398>)
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 800ce98:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ce9c:	6008      	str	r0, [r1, #0]
    conv2d_25_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 65760);
 800ce9e:	4833      	ldr	r0, [pc, #204]	; (800cf6c <mnv1_configure_weights+0x39c>)
 800cea0:	4418      	add	r0, r3
 800cea2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 800cea6:	6810      	ldr	r0, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 70560);
    conv2d_25_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 70560);
    
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800cea8:	4931      	ldr	r1, [pc, #196]	; (800cf70 <mnv1_configure_weights+0x3a0>)
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 800ceaa:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800ceae:	6010      	str	r0, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 70560);
 800ceb0:	4830      	ldr	r0, [pc, #192]	; (800cf74 <mnv1_configure_weights+0x3a4>)
 800ceb2:	4418      	add	r0, r3
 800ceb4:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800ceb8:	6808      	ldr	r0, [r1, #0]
    conv2d_26_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 71040);
    conv2d_26_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 71040);
    
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800ceba:	4a2f      	ldr	r2, [pc, #188]	; (800cf78 <mnv1_configure_weights+0x3a8>)
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800cebc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cec0:	6008      	str	r0, [r1, #0]
    conv2d_26_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 71040);
 800cec2:	482e      	ldr	r0, [pc, #184]	; (800cf7c <mnv1_configure_weights+0x3ac>)
 800cec4:	4418      	add	r0, r3
 800cec6:	e9c1 0002 	strd	r0, r0, [r1, #8]
 800ceca:	e059      	b.n	800cf80 <mnv1_configure_weights+0x3b0>
 800cecc:	20026708 	.word	0x20026708
 800ced0:	20002e58 	.word	0x20002e58
 800ced4:	20002d88 	.word	0x20002d88
 800ced8:	20004068 	.word	0x20004068
 800cedc:	20003f40 	.word	0x20003f40
 800cee0:	200045c0 	.word	0x200045c0
 800cee4:	200044f0 	.word	0x200044f0
 800cee8:	200046c0 	.word	0x200046c0
 800ceec:	200045f0 	.word	0x200045f0
 800cef0:	20004818 	.word	0x20004818
 800cef4:	200046f0 	.word	0x200046f0
 800cef8:	20004918 	.word	0x20004918
 800cefc:	20004848 	.word	0x20004848
 800cf00:	20004a18 	.word	0x20004a18
 800cf04:	20004948 	.word	0x20004948
 800cf08:	200025a8 	.word	0x200025a8
 800cf0c:	20002480 	.word	0x20002480
 800cf10:	200026a8 	.word	0x200026a8
 800cf14:	200025d8 	.word	0x200025d8
 800cf18:	200027a8 	.word	0x200027a8
 800cf1c:	200026d8 	.word	0x200026d8
 800cf20:	20002900 	.word	0x20002900
 800cf24:	200027d8 	.word	0x200027d8
 800cf28:	20002a00 	.word	0x20002a00
 800cf2c:	20002930 	.word	0x20002930
 800cf30:	20002b00 	.word	0x20002b00
 800cf34:	20002a30 	.word	0x20002a30
 800cf38:	20002c58 	.word	0x20002c58
 800cf3c:	20002b30 	.word	0x20002b30
 800cf40:	20002d58 	.word	0x20002d58
 800cf44:	20002c88 	.word	0x20002c88
 800cf48:	20002f58 	.word	0x20002f58
 800cf4c:	20002e88 	.word	0x20002e88
 800cf50:	200030b0 	.word	0x200030b0
 800cf54:	20002f88 	.word	0x20002f88
 800cf58:	200031b0 	.word	0x200031b0
 800cf5c:	200030e0 	.word	0x200030e0
 800cf60:	200032b0 	.word	0x200032b0
 800cf64:	00010040 	.word	0x00010040
 800cf68:	200031e0 	.word	0x200031e0
 800cf6c:	000100e0 	.word	0x000100e0
 800cf70:	20003408 	.word	0x20003408
 800cf74:	000113a0 	.word	0x000113a0
 800cf78:	200032e0 	.word	0x200032e0
 800cf7c:	00011580 	.word	0x00011580
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf80:	6810      	ldr	r0, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 72120);
 800cf82:	498f      	ldr	r1, [pc, #572]	; (800d1c0 <mnv1_configure_weights+0x5f0>)
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf84:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_26_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 72120);
 800cf88:	4419      	add	r1, r3
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf8a:	6010      	str	r0, [r2, #0]
    conv2d_26_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 72120);
    
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_27_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 72600);
 800cf8c:	488d      	ldr	r0, [pc, #564]	; (800d1c4 <mnv1_configure_weights+0x5f4>)
    conv2d_26_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 72120);
 800cf8e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 72600);
 800cf92:	4418      	add	r0, r3
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800cf94:	498c      	ldr	r1, [pc, #560]	; (800d1c8 <mnv1_configure_weights+0x5f8>)
    conv2d_27_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 72600);
    
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf96:	4a8d      	ldr	r2, [pc, #564]	; (800d1cc <mnv1_configure_weights+0x5fc>)
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800cf98:	680d      	ldr	r5, [r1, #0]
    conv2d_27_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 72600);
 800cf9a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 800cf9e:	6810      	ldr	r0, [r2, #0]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfa0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfa4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfa8:	600d      	str	r5, [r1, #0]
    conv2d_27_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 78360);
    conv2d_27_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 78360);
    
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfaa:	4989      	ldr	r1, [pc, #548]	; (800d1d0 <mnv1_configure_weights+0x600>)
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfac:	6010      	str	r0, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 78360);
 800cfae:	4889      	ldr	r0, [pc, #548]	; (800d1d4 <mnv1_configure_weights+0x604>)
 800cfb0:	4418      	add	r0, r3
 800cfb2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfb6:	6808      	ldr	r0, [r1, #0]
    conv2d_28_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 78552);
    conv2d_28_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 78552);
    
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfb8:	4a87      	ldr	r2, [pc, #540]	; (800d1d8 <mnv1_configure_weights+0x608>)
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfba:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cfbe:	6008      	str	r0, [r1, #0]
    conv2d_28_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 78552);
 800cfc0:	4886      	ldr	r0, [pc, #536]	; (800d1dc <mnv1_configure_weights+0x60c>)
 800cfc2:	4418      	add	r0, r3
 800cfc4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfc8:	6810      	ldr	r0, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 85464);
    conv2d_28_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 85464);
    
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfca:	4985      	ldr	r1, [pc, #532]	; (800d1e0 <mnv1_configure_weights+0x610>)
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfcc:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cfd0:	6010      	str	r0, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 85464);
 800cfd2:	4884      	ldr	r0, [pc, #528]	; (800d1e4 <mnv1_configure_weights+0x614>)
 800cfd4:	4418      	add	r0, r3
 800cfd6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfda:	6808      	ldr	r0, [r1, #0]
    conv2d_29_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 86040);
    conv2d_29_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 86040);
    
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfdc:	4a82      	ldr	r2, [pc, #520]	; (800d1e8 <mnv1_configure_weights+0x618>)
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfde:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cfe2:	6008      	str	r0, [r1, #0]
    conv2d_29_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 86040);
 800cfe4:	4881      	ldr	r0, [pc, #516]	; (800d1ec <mnv1_configure_weights+0x61c>)
 800cfe6:	4418      	add	r0, r3
 800cfe8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800cfec:	6810      	ldr	r0, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 87336);
    conv2d_29_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 87336);
    
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800cfee:	4980      	ldr	r1, [pc, #512]	; (800d1f0 <mnv1_configure_weights+0x620>)
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800cff0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800cff4:	6010      	str	r0, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 87336);
 800cff6:	487f      	ldr	r0, [pc, #508]	; (800d1f4 <mnv1_configure_weights+0x624>)
 800cff8:	4418      	add	r0, r3
 800cffa:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800cffe:	6808      	ldr	r0, [r1, #0]
    conv2d_30_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 87912);
    conv2d_30_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 87912);
    
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800d000:	4a7d      	ldr	r2, [pc, #500]	; (800d1f8 <mnv1_configure_weights+0x628>)
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800d002:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d006:	6008      	str	r0, [r1, #0]
    conv2d_30_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 87912);
 800d008:	487c      	ldr	r0, [pc, #496]	; (800d1fc <mnv1_configure_weights+0x62c>)
 800d00a:	4418      	add	r0, r3
 800d00c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800d010:	6810      	ldr	r0, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 94824);
 800d012:	497b      	ldr	r1, [pc, #492]	; (800d200 <mnv1_configure_weights+0x630>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800d014:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_30_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 94824);
 800d018:	4419      	add	r1, r3
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800d01a:	6010      	str	r0, [r2, #0]
    conv2d_30_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 94824);
    
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_32_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 95016);
 800d01c:	4879      	ldr	r0, [pc, #484]	; (800d204 <mnv1_configure_weights+0x634>)
    conv2d_30_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 94824);
 800d01e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_32_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 95016);
 800d022:	4418      	add	r0, r3
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 800d024:	4978      	ldr	r1, [pc, #480]	; (800d208 <mnv1_configure_weights+0x638>)
    conv2d_32_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 95016);
    
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 800d026:	4a79      	ldr	r2, [pc, #484]	; (800d20c <mnv1_configure_weights+0x63c>)
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 800d028:	680d      	ldr	r5, [r1, #0]
    conv2d_32_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 95016);
 800d02a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 800d02e:	6810      	ldr	r0, [r2, #0]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 800d030:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 800d034:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 800d038:	600d      	str	r5, [r1, #0]
    conv2d_32_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 108840);
    conv2d_32_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 108840);
    
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 800d03a:	4975      	ldr	r1, [pc, #468]	; (800d210 <mnv1_configure_weights+0x640>)
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 800d03c:	6010      	str	r0, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 108840);
 800d03e:	4875      	ldr	r0, [pc, #468]	; (800d214 <mnv1_configure_weights+0x644>)
 800d040:	4418      	add	r0, r3
 800d042:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 800d046:	6808      	ldr	r0, [r1, #0]
    conv2d_34_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 109992);
    conv2d_34_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 109992);
    
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 800d048:	4a73      	ldr	r2, [pc, #460]	; (800d218 <mnv1_configure_weights+0x648>)
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 800d04a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d04e:	6008      	str	r0, [r1, #0]
    conv2d_34_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 109992);
 800d050:	4872      	ldr	r0, [pc, #456]	; (800d21c <mnv1_configure_weights+0x64c>)
 800d052:	4418      	add	r0, r3
 800d054:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 800d058:	6810      	ldr	r0, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 112584);
    conv2d_34_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 112584);
    
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 800d05a:	4971      	ldr	r1, [pc, #452]	; (800d220 <mnv1_configure_weights+0x650>)
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 800d05c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d060:	6010      	str	r0, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 112584);
 800d062:	4870      	ldr	r0, [pc, #448]	; (800d224 <mnv1_configure_weights+0x654>)
 800d064:	4418      	add	r0, r3
 800d066:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 800d06a:	6808      	ldr	r0, [r1, #0]
    conv2d_35_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 113736);
    conv2d_35_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 113736);
    
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 800d06c:	4a6e      	ldr	r2, [pc, #440]	; (800d228 <mnv1_configure_weights+0x658>)
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 800d06e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d072:	6008      	str	r0, [r1, #0]
    conv2d_35_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 113736);
 800d074:	486d      	ldr	r0, [pc, #436]	; (800d22c <mnv1_configure_weights+0x65c>)
 800d076:	4418      	add	r0, r3
 800d078:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 800d07c:	6810      	ldr	r0, [r2, #0]
    conv2d_35_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 141384);
    conv2d_35_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 141384);
    
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 800d07e:	496c      	ldr	r1, [pc, #432]	; (800d230 <mnv1_configure_weights+0x660>)
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 800d080:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d084:	6010      	str	r0, [r2, #0]
    conv2d_35_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 141384);
 800d086:	486b      	ldr	r0, [pc, #428]	; (800d234 <mnv1_configure_weights+0x664>)
 800d088:	4418      	add	r0, r3
 800d08a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 800d08e:	6808      	ldr	r0, [r1, #0]
    conv2d_36_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 141768);
    conv2d_36_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 141768);
    
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800d090:	4a69      	ldr	r2, [pc, #420]	; (800d238 <mnv1_configure_weights+0x668>)
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 800d092:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d096:	6008      	str	r0, [r1, #0]
    conv2d_36_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 141768);
 800d098:	4868      	ldr	r0, [pc, #416]	; (800d23c <mnv1_configure_weights+0x66c>)
 800d09a:	4418      	add	r0, r3
 800d09c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0a0:	6810      	ldr	r0, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 196968);
 800d0a2:	4967      	ldr	r1, [pc, #412]	; (800d240 <mnv1_configure_weights+0x670>)
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0a4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_36_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 196968);
 800d0a8:	4419      	add	r1, r3
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0aa:	6010      	str	r0, [r2, #0]
    conv2d_36_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 196968);
    
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_37_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 199268);
 800d0ac:	4865      	ldr	r0, [pc, #404]	; (800d244 <mnv1_configure_weights+0x674>)
    conv2d_36_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 196968);
 800d0ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 199268);
 800d0b2:	4418      	add	r0, r3
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0b4:	4964      	ldr	r1, [pc, #400]	; (800d248 <mnv1_configure_weights+0x678>)
    conv2d_37_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 199268);
    
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0b6:	4a65      	ldr	r2, [pc, #404]	; (800d24c <mnv1_configure_weights+0x67c>)
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0b8:	680d      	ldr	r5, [r1, #0]
    conv2d_37_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 199268);
 800d0ba:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0be:	6810      	ldr	r0, [r2, #0]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0c0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0c4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0c8:	600d      	str	r5, [r1, #0]
    conv2d_37_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 204444);
    conv2d_37_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 204444);
    
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0ca:	4961      	ldr	r1, [pc, #388]	; (800d250 <mnv1_configure_weights+0x680>)
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0cc:	6010      	str	r0, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 204444);
 800d0ce:	4861      	ldr	r0, [pc, #388]	; (800d254 <mnv1_configure_weights+0x684>)
 800d0d0:	4418      	add	r0, r3
 800d0d2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0d6:	6808      	ldr	r0, [r1, #0]
    conv2d_38_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 206744);
    conv2d_38_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 206744);
    
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0d8:	4a5f      	ldr	r2, [pc, #380]	; (800d258 <mnv1_configure_weights+0x688>)
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0da:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d0de:	6008      	str	r0, [r1, #0]
    conv2d_38_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 206744);
 800d0e0:	485e      	ldr	r0, [pc, #376]	; (800d25c <mnv1_configure_weights+0x68c>)
 800d0e2:	4418      	add	r0, r3
 800d0e4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0e8:	6810      	ldr	r0, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 261944);
    conv2d_38_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 261944);
    
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0ea:	495d      	ldr	r1, [pc, #372]	; (800d260 <mnv1_configure_weights+0x690>)
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0ec:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d0f0:	6010      	str	r0, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 261944);
 800d0f2:	485c      	ldr	r0, [pc, #368]	; (800d264 <mnv1_configure_weights+0x694>)
 800d0f4:	4418      	add	r0, r3
 800d0f6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0fa:	6808      	ldr	r0, [r1, #0]
    conv2d_40_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 262328);
    conv2d_40_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 262328);
    
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 800d0fc:	4a5a      	ldr	r2, [pc, #360]	; (800d268 <mnv1_configure_weights+0x698>)
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800d0fe:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d102:	6008      	str	r0, [r1, #0]
    conv2d_40_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 262328);
 800d104:	4859      	ldr	r0, [pc, #356]	; (800d26c <mnv1_configure_weights+0x69c>)
 800d106:	4418      	add	r0, r3
 800d108:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 800d10c:	6810      	ldr	r0, [r2, #0]
    conv2d_40_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 317624);
    conv2d_40_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 317624);
    
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 800d10e:	4958      	ldr	r1, [pc, #352]	; (800d270 <mnv1_configure_weights+0x6a0>)
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 800d110:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d114:	6010      	str	r0, [r2, #0]
    conv2d_40_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 317624);
 800d116:	4857      	ldr	r0, [pc, #348]	; (800d274 <mnv1_configure_weights+0x6a4>)
 800d118:	4418      	add	r0, r3
 800d11a:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 800d11e:	6808      	ldr	r0, [r1, #0]
    conv2d_41_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 319928);
    conv2d_41_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 319928);
    
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 800d120:	4a55      	ldr	r2, [pc, #340]	; (800d278 <mnv1_configure_weights+0x6a8>)
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 800d122:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d126:	6008      	str	r0, [r1, #0]
    conv2d_41_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 319928);
 800d128:	4854      	ldr	r0, [pc, #336]	; (800d27c <mnv1_configure_weights+0x6ac>)
 800d12a:	4418      	add	r0, r3
 800d12c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 800d130:	6810      	ldr	r0, [r2, #0]
    conv2d_41_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 325112);
 800d132:	4953      	ldr	r1, [pc, #332]	; (800d280 <mnv1_configure_weights+0x6b0>)
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 800d134:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_41_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 325112);
 800d138:	4419      	add	r1, r3
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 800d13a:	6010      	str	r0, [r2, #0]
    conv2d_41_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 325112);
    
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_42_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 327416);
 800d13c:	4851      	ldr	r0, [pc, #324]	; (800d284 <mnv1_configure_weights+0x6b4>)
    conv2d_41_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 325112);
 800d13e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 327416);
 800d142:	4418      	add	r0, r3
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 800d144:	4950      	ldr	r1, [pc, #320]	; (800d288 <mnv1_configure_weights+0x6b8>)
    conv2d_42_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 327416);
    
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 800d146:	4a51      	ldr	r2, [pc, #324]	; (800d28c <mnv1_configure_weights+0x6bc>)
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 800d148:	680d      	ldr	r5, [r1, #0]
    conv2d_42_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 327416);
 800d14a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 800d14e:	6810      	ldr	r0, [r2, #0]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 800d150:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 800d154:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 800d158:	600d      	str	r5, [r1, #0]
    conv2d_42_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 382712);
    conv2d_42_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 382712);
    
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800d15a:	494d      	ldr	r1, [pc, #308]	; (800d290 <mnv1_configure_weights+0x6c0>)
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 800d15c:	6010      	str	r0, [r2, #0]
    conv2d_42_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 382712);
 800d15e:	484d      	ldr	r0, [pc, #308]	; (800d294 <mnv1_configure_weights+0x6c4>)
 800d160:	4418      	add	r0, r3
 800d162:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800d166:	6808      	ldr	r0, [r1, #0]
    conv2d_44_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 383096);
    conv2d_44_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 383096);
    
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 800d168:	4a4b      	ldr	r2, [pc, #300]	; (800d298 <mnv1_configure_weights+0x6c8>)
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800d16a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d16e:	6008      	str	r0, [r1, #0]
    conv2d_44_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 383096);
 800d170:	484a      	ldr	r0, [pc, #296]	; (800d29c <mnv1_configure_weights+0x6cc>)
 800d172:	4418      	add	r0, r3
 800d174:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 800d178:	6810      	ldr	r0, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 438392);
    conv2d_44_bias_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 438392);
    
    gemm_46_weights_array.format |= AI_FMT_FLAG_CONST;
 800d17a:	4949      	ldr	r1, [pc, #292]	; (800d2a0 <mnv1_configure_weights+0x6d0>)
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 800d17c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d180:	6010      	str	r0, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 438392);
 800d182:	4848      	ldr	r0, [pc, #288]	; (800d2a4 <mnv1_configure_weights+0x6d4>)
 800d184:	4418      	add	r0, r3
 800d186:	e9c2 0002 	strd	r0, r0, [r2, #8]
    gemm_46_weights_array.format |= AI_FMT_FLAG_CONST;
 800d18a:	6808      	ldr	r0, [r1, #0]
    gemm_46_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 440696);
    gemm_46_weights_array.data_start = AI_PTR(g_mnv1_weights_map[0] + 440696);
    
    gemm_46_bias_array.format |= AI_FMT_FLAG_CONST;
 800d18c:	4a46      	ldr	r2, [pc, #280]	; (800d2a8 <mnv1_configure_weights+0x6d8>)
    gemm_46_weights_array.format |= AI_FMT_FLAG_CONST;
 800d18e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800d192:	6008      	str	r0, [r1, #0]
    gemm_46_weights_array.data = AI_PTR(g_mnv1_weights_map[0] + 440696);
 800d194:	4845      	ldr	r0, [pc, #276]	; (800d2ac <mnv1_configure_weights+0x6dc>)
 800d196:	4418      	add	r0, r3
 800d198:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_46_bias_array.format |= AI_FMT_FLAG_CONST;
 800d19c:	6810      	ldr	r0, [r2, #0]
    gemm_46_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 455672);
 800d19e:	4944      	ldr	r1, [pc, #272]	; (800d2b0 <mnv1_configure_weights+0x6e0>)
    gemm_46_bias_array.format |= AI_FMT_FLAG_CONST;
 800d1a0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    gemm_46_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 455672);
 800d1a4:	4419      	add	r1, r3
    gemm_46_bias_array.format |= AI_FMT_FLAG_CONST;
 800d1a6:	6010      	str	r0, [r2, #0]
    
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 800d1a8:	4620      	mov	r0, r4
    gemm_46_bias_array.data = AI_PTR(g_mnv1_weights_map[0] + 455672);
 800d1aa:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800d1b0:	2212      	movs	r2, #18
 800d1b2:	2130      	movs	r1, #48	; 0x30
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f000 fe1f 	bl	800ddf8 <ai_platform_network_set_error>
}
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
 800d1be:	bf00      	nop
 800d1c0:	000119b8 	.word	0x000119b8
 800d1c4:	00011b98 	.word	0x00011b98
 800d1c8:	20003508 	.word	0x20003508
 800d1cc:	20003438 	.word	0x20003438
 800d1d0:	20003608 	.word	0x20003608
 800d1d4:	00013218 	.word	0x00013218
 800d1d8:	20003538 	.word	0x20003538
 800d1dc:	000132d8 	.word	0x000132d8
 800d1e0:	20003760 	.word	0x20003760
 800d1e4:	00014dd8 	.word	0x00014dd8
 800d1e8:	20003638 	.word	0x20003638
 800d1ec:	00015018 	.word	0x00015018
 800d1f0:	20003860 	.word	0x20003860
 800d1f4:	00015528 	.word	0x00015528
 800d1f8:	20003790 	.word	0x20003790
 800d1fc:	00015768 	.word	0x00015768
 800d200:	00017268 	.word	0x00017268
 800d204:	00017328 	.word	0x00017328
 800d208:	20003960 	.word	0x20003960
 800d20c:	20003890 	.word	0x20003890
 800d210:	20003ab8 	.word	0x20003ab8
 800d214:	0001a928 	.word	0x0001a928
 800d218:	20003990 	.word	0x20003990
 800d21c:	0001ada8 	.word	0x0001ada8
 800d220:	20003bb8 	.word	0x20003bb8
 800d224:	0001b7c8 	.word	0x0001b7c8
 800d228:	20003ae8 	.word	0x20003ae8
 800d22c:	0001bc48 	.word	0x0001bc48
 800d230:	20003cb8 	.word	0x20003cb8
 800d234:	00022848 	.word	0x00022848
 800d238:	20003be8 	.word	0x20003be8
 800d23c:	000229c8 	.word	0x000229c8
 800d240:	00030168 	.word	0x00030168
 800d244:	00030a64 	.word	0x00030a64
 800d248:	20003e10 	.word	0x20003e10
 800d24c:	20003ce8 	.word	0x20003ce8
 800d250:	20003f10 	.word	0x20003f10
 800d254:	00031e9c 	.word	0x00031e9c
 800d258:	20003e40 	.word	0x20003e40
 800d25c:	00032798 	.word	0x00032798
 800d260:	20004168 	.word	0x20004168
 800d264:	0003ff38 	.word	0x0003ff38
 800d268:	20004098 	.word	0x20004098
 800d26c:	000400b8 	.word	0x000400b8
 800d270:	200042c0 	.word	0x200042c0
 800d274:	0004d8b8 	.word	0x0004d8b8
 800d278:	20004198 	.word	0x20004198
 800d27c:	0004e1b8 	.word	0x0004e1b8
 800d280:	0004f5f8 	.word	0x0004f5f8
 800d284:	0004fef8 	.word	0x0004fef8
 800d288:	200043c0 	.word	0x200043c0
 800d28c:	200042f0 	.word	0x200042f0
 800d290:	200044c0 	.word	0x200044c0
 800d294:	0005d6f8 	.word	0x0005d6f8
 800d298:	200043f0 	.word	0x200043f0
 800d29c:	0005d878 	.word	0x0005d878
 800d2a0:	20004db8 	.word	0x20004db8
 800d2a4:	0006b078 	.word	0x0006b078
 800d2a8:	20004d10 	.word	0x20004d10
 800d2ac:	0006b978 	.word	0x0006b978
 800d2b0:	0006f3f8 	.word	0x0006f3f8

0800d2b4 <mnv1_configure_activations>:
{
 800d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ai_platform_get_activations_map(g_mnv1_activations_map, 1, params)) {
 800d2b8:	4dce      	ldr	r5, [pc, #824]	; (800d5f4 <mnv1_configure_activations+0x340>)
{
 800d2ba:	460a      	mov	r2, r1
 800d2bc:	b093      	sub	sp, #76	; 0x4c
 800d2be:	4604      	mov	r4, r0
  if (ai_platform_get_activations_map(g_mnv1_activations_map, 1, params)) {
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	f000 fc1a 	bl	800dafc <ai_platform_get_activations_map>
 800d2c8:	4683      	mov	fp, r0
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	f000 828a 	beq.w	800d7e4 <mnv1_configure_activations+0x530>
    serving_default_input_80_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31516);
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	f647 321c 	movw	r2, #31516	; 0x7b1c
 800d2d6:	48c8      	ldr	r0, [pc, #800]	; (800d5f8 <mnv1_configure_activations+0x344>)
    conversion_0_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31512);
 800d2d8:	f647 3118 	movw	r1, #31512	; 0x7b18
    serving_default_input_80_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31516);
 800d2dc:	441a      	add	r2, r3
    conv2d_29_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29280);
 800d2de:	f247 2a60 	movw	sl, #29280	; 0x7260
    conversion_0_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31512);
 800d2e2:	4419      	add	r1, r3
    conv2d_25_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 6480);
 800d2e4:	f641 1450 	movw	r4, #6480	; 0x1950
    conv2d_29_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29280);
 800d2e8:	4655      	mov	r5, sl
    conv2d_32_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11232);
 800d2ea:	f642 3ae0 	movw	sl, #11232	; 0x2be0
    conv2d_25_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 6480);
 800d2ee:	191c      	adds	r4, r3, r4
    conv2d_13_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12880);
 800d2f0:	f243 2950 	movw	r9, #12880	; 0x3250
    conv2d_29_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29280);
 800d2f4:	195d      	adds	r5, r3, r5
    conv2d_17_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5896);
 800d2f6:	f241 7808 	movw	r8, #5896	; 0x1708
    conv2d_13_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12880);
 800d2fa:	4499      	add	r9, r3
    conv2d_18_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 21192);
 800d2fc:	f245 2ec8 	movw	lr, #21192	; 0x52c8
    conv2d_17_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5896);
 800d300:	4498      	add	r8, r3
    conv2d_18_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 45092);
 800d302:	f24b 0c24 	movw	ip, #45092	; 0xb024
    conv2d_18_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 21192);
 800d306:	449e      	add	lr, r3
    conv2d_19_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4700);
 800d308:	f241 275c 	movw	r7, #4700	; 0x125c
    conv2d_18_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 45092);
 800d30c:	449c      	add	ip, r3
    eltwise_20_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 7260);
 800d30e:	f641 465c 	movw	r6, #7260	; 0x1c5c
    conv2d_19_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4700);
 800d312:	441f      	add	r7, r3
    eltwise_20_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 7260);
 800d314:	441e      	add	r6, r3
    serving_default_input_80_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31516);
 800d316:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conversion_0_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31512);
 800d31a:	48b8      	ldr	r0, [pc, #736]	; (800d5fc <mnv1_configure_activations+0x348>)
    conv2d_1_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 80668);
 800d31c:	4ab8      	ldr	r2, [pc, #736]	; (800d600 <mnv1_configure_activations+0x34c>)
    conversion_0_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 31512);
 800d31e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 80668);
 800d322:	441a      	add	r2, r3
 800d324:	48b7      	ldr	r0, [pc, #732]	; (800d604 <mnv1_configure_activations+0x350>)
    conv2d_1_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14088);
 800d326:	f243 7108 	movw	r1, #14088	; 0x3708
    conv2d_1_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 80668);
 800d32a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_1_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14088);
 800d32e:	4419      	add	r1, r3
 800d330:	48b5      	ldr	r0, [pc, #724]	; (800d608 <mnv1_configure_activations+0x354>)
    conv2d_3_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12024);
 800d332:	f642 62f8 	movw	r2, #12024	; 0x2ef8
    conv2d_1_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14088);
 800d336:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_3_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12024);
 800d33a:	441a      	add	r2, r3
 800d33c:	48b3      	ldr	r0, [pc, #716]	; (800d60c <mnv1_configure_activations+0x358>)
    conv2d_3_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 79624);
 800d33e:	49b4      	ldr	r1, [pc, #720]	; (800d610 <mnv1_configure_activations+0x35c>)
    conv2d_3_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12024);
 800d340:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 79624);
 800d344:	4419      	add	r1, r3
 800d346:	48b3      	ldr	r0, [pc, #716]	; (800d614 <mnv1_configure_activations+0x360>)
    conv2d_3_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11512);
 800d348:	f642 42f8 	movw	r2, #11512	; 0x2cf8
    conv2d_3_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 79624);
 800d34c:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_3_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11512);
 800d350:	441a      	add	r2, r3
 800d352:	48b1      	ldr	r0, [pc, #708]	; (800d618 <mnv1_configure_activations+0x364>)
    conv2d_4_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 11288);
 800d354:	f642 4118 	movw	r1, #11288	; 0x2c18
    conv2d_3_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11512);
 800d358:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 11288);
 800d35c:	4419      	add	r1, r3
 800d35e:	48af      	ldr	r0, [pc, #700]	; (800d61c <mnv1_configure_activations+0x368>)
    conv2d_4_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 65480);
 800d360:	f64f 72c8 	movw	r2, #65480	; 0xffc8
    conv2d_4_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 11288);
 800d364:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_4_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 65480);
 800d368:	441a      	add	r2, r3
 800d36a:	48ad      	ldr	r0, [pc, #692]	; (800d620 <mnv1_configure_activations+0x36c>)
    conv2d_5_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 81864);
 800d36c:	49ad      	ldr	r1, [pc, #692]	; (800d624 <mnv1_configure_activations+0x370>)
    conv2d_4_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 65480);
 800d36e:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 81864);
 800d372:	4419      	add	r1, r3
 800d374:	48ac      	ldr	r0, [pc, #688]	; (800d628 <mnv1_configure_activations+0x374>)
    conv2d_5_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5832);
 800d376:	f241 62c8 	movw	r2, #5832	; 0x16c8
    conv2d_5_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 81864);
 800d37a:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_5_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5832);
 800d37e:	441a      	add	r2, r3
 800d380:	49aa      	ldr	r1, [pc, #680]	; (800d62c <mnv1_configure_activations+0x378>)
    conv2d_7_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1152);
 800d382:	f503 6090 	add.w	r0, r3, #1152	; 0x480
    conv2d_5_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5832);
 800d386:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1152);
 800d38a:	49a9      	ldr	r1, [pc, #676]	; (800d630 <mnv1_configure_activations+0x37c>)
    conv2d_7_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 79980);
 800d38c:	4aa9      	ldr	r2, [pc, #676]	; (800d634 <mnv1_configure_activations+0x380>)
    conv2d_7_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1152);
 800d38e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 79980);
 800d392:	441a      	add	r2, r3
 800d394:	49a8      	ldr	r1, [pc, #672]	; (800d638 <mnv1_configure_activations+0x384>)
    conv2d_7_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d396:	48a9      	ldr	r0, [pc, #676]	; (800d63c <mnv1_configure_activations+0x388>)
    conv2d_7_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 79980);
 800d398:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 18432);
 800d39c:	f503 4190 	add.w	r1, r3, #18432	; 0x4800
 800d3a0:	4aa7      	ldr	r2, [pc, #668]	; (800d640 <mnv1_configure_activations+0x38c>)
 800d3a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18960);
 800d3a6:	f644 2210 	movw	r2, #18960	; 0x4a10
 800d3aa:	49a6      	ldr	r1, [pc, #664]	; (800d644 <mnv1_configure_activations+0x390>)
 800d3ac:	441a      	add	r2, r3
    conv2d_7_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d3ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_8_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18960);
 800d3b2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_9_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25104);
 800d3b6:	f246 2210 	movw	r2, #25104	; 0x6210
 800d3ba:	49a3      	ldr	r1, [pc, #652]	; (800d648 <mnv1_configure_activations+0x394>)
    conv2d_9_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d3bc:	48a3      	ldr	r0, [pc, #652]	; (800d64c <mnv1_configure_activations+0x398>)
    conv2d_9_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25104);
 800d3be:	441a      	add	r2, r3
    conv2d_25_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 6480);
 800d3c0:	9406      	str	r4, [sp, #24]
    conv2d_29_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14880);
 800d3c2:	f643 2420 	movw	r4, #14880	; 0x3a20
    conv2d_29_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29280);
 800d3c6:	950a      	str	r5, [sp, #40]	; 0x28
    conv2d_9_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25104);
 800d3c8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_10_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 47632);
 800d3cc:	f64b 2110 	movw	r1, #47632	; 0xba10
    conv2d_29_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14880);
 800d3d0:	191c      	adds	r4, r3, r4
    conv2d_9_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d3d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_10_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 47632);
 800d3d6:	4419      	add	r1, r3
 800d3d8:	489d      	ldr	r0, [pc, #628]	; (800d650 <mnv1_configure_activations+0x39c>)
    conv2d_29_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14880);
 800d3da:	9409      	str	r4, [sp, #36]	; 0x24
    conv2d_10_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 47632);
 800d3dc:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_10_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25104);
 800d3e0:	499c      	ldr	r1, [pc, #624]	; (800d654 <mnv1_configure_activations+0x3a0>)
    conv2d_10_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d3e2:	489d      	ldr	r0, [pc, #628]	; (800d658 <mnv1_configure_activations+0x3a4>)
    conv2d_10_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25104);
 800d3e4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_11_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 592);
 800d3e8:	f503 7114 	add.w	r1, r3, #592	; 0x250
 800d3ec:	4a9b      	ldr	r2, [pc, #620]	; (800d65c <mnv1_configure_activations+0x3a8>)
 800d3ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    eltwise_12_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 6736);
 800d3f2:	f641 2250 	movw	r2, #6736	; 0x1a50
 800d3f6:	499a      	ldr	r1, [pc, #616]	; (800d660 <mnv1_configure_activations+0x3ac>)
 800d3f8:	441a      	add	r2, r3
 800d3fa:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_15_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 37456);
 800d3fe:	f249 2250 	movw	r2, #37456	; 0x9250
 800d402:	4998      	ldr	r1, [pc, #608]	; (800d664 <mnv1_configure_activations+0x3b0>)
 800d404:	441a      	add	r2, r3
 800d406:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_15_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d40a:	4a97      	ldr	r2, [pc, #604]	; (800d668 <mnv1_configure_activations+0x3b4>)
    conv2d_15_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3556);
 800d40c:	f603 51e4 	addw	r1, r3, #3556	; 0xde4
    conv2d_15_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d410:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_22_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25180);
 800d414:	f246 225c 	movw	r2, #25180	; 0x625c
    conv2d_15_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3556);
 800d418:	9103      	str	r1, [sp, #12]
    conv2d_26_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4444);
 800d41a:	f241 115c 	movw	r1, #4444	; 0x115c
    conv2d_22_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25180);
 800d41e:	441a      	add	r2, r3
    conv2d_26_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4444);
 800d420:	1859      	adds	r1, r3, r1
    conv2d_22_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25180);
 800d422:	9204      	str	r2, [sp, #16]
    conv2d_22_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 49180);
 800d424:	f24c 021c 	movw	r2, #49180	; 0xc01c
    conv2d_26_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4444);
 800d428:	9108      	str	r1, [sp, #32]
    conv2d_22_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 49180);
 800d42a:	189a      	adds	r2, r3, r2
 800d42c:	9205      	str	r2, [sp, #20]
    conv2d_26_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14160);
 800d42e:	f243 7250 	movw	r2, #14160	; 0x3750
 800d432:	189a      	adds	r2, r3, r2
 800d434:	9207      	str	r2, [sp, #28]
    conv2d_32_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11232);
 800d436:	4652      	mov	r2, sl
    conv2d_34_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29664);
 800d438:	f247 3ae0 	movw	sl, #29664	; 0x73e0
    conv2d_32_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11232);
 800d43c:	189a      	adds	r2, r3, r2
    conv2d_34_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29664);
 800d43e:	4651      	mov	r1, sl
    conv2d_34_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 10660);
 800d440:	f642 1aa4 	movw	sl, #10660	; 0x29a4
    conv2d_32_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11232);
 800d444:	920b      	str	r2, [sp, #44]	; 0x2c
    conv2d_34_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 10660);
 800d446:	4654      	mov	r4, sl
    conv2d_36_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9784);
 800d448:	f242 6a38 	movw	sl, #9784	; 0x2638
    conv2d_34_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29664);
 800d44c:	1859      	adds	r1, r3, r1
    conv2d_36_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9784);
 800d44e:	4655      	mov	r5, sl
    conv2d_37_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18984);
 800d450:	f644 2a28 	movw	sl, #18984	; 0x4a28
    conv2d_34_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 10660);
 800d454:	191c      	adds	r4, r3, r4
    conv2d_34_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29664);
 800d456:	910c      	str	r1, [sp, #48]	; 0x30
    conv2d_37_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18984);
 800d458:	4652      	mov	r2, sl
    conv2d_37_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 39684);
 800d45a:	f649 3a04 	movw	sl, #39684	; 0x9b04
    conv2d_36_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9784);
 800d45e:	195d      	adds	r5, r3, r5
    conv2d_37_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 39684);
 800d460:	4651      	mov	r1, sl
    conv2d_38_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 12848);
 800d462:	f243 2a30 	movw	sl, #12848	; 0x3230
    conv2d_37_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18984);
 800d466:	189a      	adds	r2, r3, r2
    conv2d_37_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 39684);
 800d468:	1859      	adds	r1, r3, r1
    conv2d_10_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d46a:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_11_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d46e:	487f      	ldr	r0, [pc, #508]	; (800d66c <mnv1_configure_activations+0x3b8>)
 800d470:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d474:	487e      	ldr	r0, [pc, #504]	; (800d670 <mnv1_configure_activations+0x3bc>)
 800d476:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_34_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 10660);
 800d47a:	940d      	str	r4, [sp, #52]	; 0x34
    conv2d_38_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 12848);
 800d47c:	4654      	mov	r4, sl
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d47e:	f245 0a40 	movw	sl, #20544	; 0x5040
    conv2d_36_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9784);
 800d482:	950e      	str	r5, [sp, #56]	; 0x38
    conv2d_37_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18984);
 800d484:	920f      	str	r2, [sp, #60]	; 0x3c
    conv2d_38_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 12848);
 800d486:	191c      	adds	r4, r3, r4
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d488:	4655      	mov	r5, sl
    conv2d_41_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 41280);
 800d48a:	f24a 1a40 	movw	sl, #41280	; 0xa140
    conv2d_38_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 12848);
 800d48e:	9401      	str	r4, [sp, #4]
    conv2d_17_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3344);
 800d490:	f503 6451 	add.w	r4, r3, #3344	; 0xd10
    conv2d_41_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 41280);
 800d494:	4652      	mov	r2, sl
    conv2d_40_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d496:	f503 5aa2 	add.w	sl, r3, #5184	; 0x1440
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d49a:	195d      	adds	r5, r3, r5
    conv2d_21_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9820);
 800d49c:	f242 605c 	movw	r0, #9820	; 0x265c
    conv2d_40_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d4a0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    conv2d_41_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 41280);
 800d4a4:	189a      	adds	r2, r3, r2
    conv2d_13_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12880);
 800d4a6:	f8df a248 	ldr.w	sl, [pc, #584]	; 800d6f0 <mnv1_configure_activations+0x43c>
    conv2d_21_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9820);
 800d4aa:	4418      	add	r0, r3
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d4ac:	9510      	str	r5, [sp, #64]	; 0x40
    conv2d_15_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3556);
 800d4ae:	9d03      	ldr	r5, [sp, #12]
    conv2d_37_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 39684);
 800d4b0:	9100      	str	r1, [sp, #0]
    conv2d_28_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 4032);
 800d4b2:	f503 617c 	add.w	r1, r3, #4032	; 0xfc0
    conv2d_41_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 41280);
 800d4b6:	9202      	str	r2, [sp, #8]
    conv2d_36_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3648);
 800d4b8:	f503 6264 	add.w	r2, r3, #3648	; 0xe40
    conv2d_13_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 12880);
 800d4bc:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_15_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3556);
 800d4c0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 800d6f4 <mnv1_configure_activations+0x440>
    conv2d_16_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 784);
 800d4c4:	f503 7a44 	add.w	sl, r3, #784	; 0x310
    conv2d_15_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3556);
 800d4c8:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d4cc:	f8df 9228 	ldr.w	r9, [pc, #552]	; 800d6f8 <mnv1_configure_activations+0x444>
 800d4d0:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_16_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 784);
 800d4d4:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800d6fc <mnv1_configure_activations+0x448>
 800d4d8:	e9c9 aa02 	strd	sl, sl, [r9, #8]
    conv2d_17_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3344);
 800d4dc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800d700 <mnv1_configure_activations+0x44c>
 800d4e0:	e9c9 4402 	strd	r4, r4, [r9, #8]
    conv2d_17_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5896);
 800d4e4:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d704 <mnv1_configure_activations+0x450>
 800d4e8:	e9c9 8802 	strd	r8, r8, [r9, #8]
    conv2d_18_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 21192);
 800d4ec:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800d708 <mnv1_configure_activations+0x454>
 800d4f0:	e9c8 ee02 	strd	lr, lr, [r8, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3344);
 800d4f4:	f8df e214 	ldr.w	lr, [pc, #532]	; 800d70c <mnv1_configure_activations+0x458>
 800d4f8:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_18_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 45092);
 800d4fc:	f8df e210 	ldr.w	lr, [pc, #528]	; 800d710 <mnv1_configure_activations+0x45c>
 800d500:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_19_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3344);
 800d504:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800d714 <mnv1_configure_activations+0x460>
 800d508:	e9cc 4402 	strd	r4, r4, [ip, #8]
    conv2d_19_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4700);
 800d50c:	4c59      	ldr	r4, [pc, #356]	; (800d674 <mnv1_configure_activations+0x3c0>)
 800d50e:	e9c4 7702 	strd	r7, r7, [r4, #8]
    eltwise_20_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 7260);
 800d512:	4c59      	ldr	r4, [pc, #356]	; (800d678 <mnv1_configure_activations+0x3c4>)
 800d514:	e9c4 6602 	strd	r6, r6, [r4, #8]
    conv2d_21_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d518:	4c58      	ldr	r4, [pc, #352]	; (800d67c <mnv1_configure_activations+0x3c8>)
 800d51a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_21_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9820);
 800d51e:	4c58      	ldr	r4, [pc, #352]	; (800d680 <mnv1_configure_activations+0x3cc>)
    conv2d_22_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25180);
 800d520:	9d04      	ldr	r5, [sp, #16]
    conv2d_22_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 49180);
 800d522:	9e05      	ldr	r6, [sp, #20]
    conv2d_21_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9820);
 800d524:	e9c4 0002 	strd	r0, r0, [r4, #8]
    conv2d_22_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 25180);
 800d528:	4c56      	ldr	r4, [pc, #344]	; (800d684 <mnv1_configure_activations+0x3d0>)
 800d52a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 9820);
 800d52e:	4c56      	ldr	r4, [pc, #344]	; (800d688 <mnv1_configure_activations+0x3d4>)
 800d530:	e9c4 0002 	strd	r0, r0, [r4, #8]
    conv2d_22_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 49180);
 800d534:	4855      	ldr	r0, [pc, #340]	; (800d68c <mnv1_configure_activations+0x3d8>)
    conv2d_23_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1360);
 800d536:	f503 64aa 	add.w	r4, r3, #1360	; 0x550
    conv2d_22_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 49180);
 800d53a:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_23_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d53e:	4854      	ldr	r0, [pc, #336]	; (800d690 <mnv1_configure_activations+0x3dc>)
    conv2d_25_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 6480);
 800d540:	9e06      	ldr	r6, [sp, #24]
    conv2d_23_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d542:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_23_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1360);
 800d546:	4853      	ldr	r0, [pc, #332]	; (800d694 <mnv1_configure_activations+0x3e0>)
 800d548:	e9c0 4402 	strd	r4, r4, [r0, #8]
    eltwise_24_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3920);
 800d54c:	f503 6475 	add.w	r4, r3, #3920	; 0xf50
 800d550:	4851      	ldr	r0, [pc, #324]	; (800d698 <mnv1_configure_activations+0x3e4>)
 800d552:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_25_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d556:	4851      	ldr	r0, [pc, #324]	; (800d69c <mnv1_configure_activations+0x3e8>)
    conv2d_27_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 960);
 800d558:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
    conv2d_25_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d55c:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_25_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 6480);
 800d560:	484f      	ldr	r0, [pc, #316]	; (800d6a0 <mnv1_configure_activations+0x3ec>)
 800d562:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_26_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14160);
 800d566:	9e07      	ldr	r6, [sp, #28]
 800d568:	484e      	ldr	r0, [pc, #312]	; (800d6a4 <mnv1_configure_activations+0x3f0>)
 800d56a:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d56e:	484e      	ldr	r0, [pc, #312]	; (800d6a8 <mnv1_configure_activations+0x3f4>)
    conv2d_26_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4444);
 800d570:	9e08      	ldr	r6, [sp, #32]
    conv2d_26_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d572:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_26_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 4444);
 800d576:	484d      	ldr	r0, [pc, #308]	; (800d6ac <mnv1_configure_activations+0x3f8>)
 800d578:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_27_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d57c:	484c      	ldr	r0, [pc, #304]	; (800d6b0 <mnv1_configure_activations+0x3fc>)
 800d57e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_27_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 960);
 800d582:	484c      	ldr	r0, [pc, #304]	; (800d6b4 <mnv1_configure_activations+0x400>)
 800d584:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_28_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 4032);
 800d588:	484b      	ldr	r0, [pc, #300]	; (800d6b8 <mnv1_configure_activations+0x404>)
    conv2d_28_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5664);
 800d58a:	f503 54b1 	add.w	r4, r3, #5664	; 0x1620
    conv2d_29_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14880);
 800d58e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    conv2d_28_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 4032);
 800d590:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_28_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5664);
 800d594:	4849      	ldr	r0, [pc, #292]	; (800d6bc <mnv1_configure_activations+0x408>)
 800d596:	e9c0 4402 	strd	r4, r4, [r0, #8]
    conv2d_29_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14880);
 800d59a:	4849      	ldr	r0, [pc, #292]	; (800d6c0 <mnv1_configure_activations+0x40c>)
 800d59c:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_29_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 4032);
 800d5a0:	4848      	ldr	r0, [pc, #288]	; (800d6c4 <mnv1_configure_activations+0x410>)
    conv2d_29_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29280);
 800d5a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    conv2d_29_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 4032);
 800d5a4:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_29_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29280);
 800d5a8:	4847      	ldr	r0, [pc, #284]	; (800d6c8 <mnv1_configure_activations+0x414>)
 800d5aa:	e9c0 6602 	strd	r6, r6, [r0, #8]
    conv2d_30_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 4032);
 800d5ae:	4847      	ldr	r0, [pc, #284]	; (800d6cc <mnv1_configure_activations+0x418>)
 800d5b0:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_30_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5088);
 800d5b4:	f503 509f 	add.w	r0, r3, #5088	; 0x13e0
 800d5b8:	4945      	ldr	r1, [pc, #276]	; (800d6d0 <mnv1_configure_activations+0x41c>)
 800d5ba:	e9c1 0002 	strd	r0, r0, [r1, #8]
    eltwise_31_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 8160);
 800d5be:	f503 50ff 	add.w	r0, r3, #8160	; 0x1fe0
 800d5c2:	4944      	ldr	r1, [pc, #272]	; (800d6d4 <mnv1_configure_activations+0x420>)
 800d5c4:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_32_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d5c8:	4943      	ldr	r1, [pc, #268]	; (800d6d8 <mnv1_configure_activations+0x424>)
    conv2d_32_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11232);
 800d5ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    conv2d_32_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d5cc:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_32_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11232);
 800d5d0:	4942      	ldr	r1, [pc, #264]	; (800d6dc <mnv1_configure_activations+0x428>)
 800d5d2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_34_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 29664);
 800d5d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5d8:	4941      	ldr	r1, [pc, #260]	; (800d6e0 <mnv1_configure_activations+0x42c>)
 800d5da:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_34_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d5de:	4941      	ldr	r1, [pc, #260]	; (800d6e4 <mnv1_configure_activations+0x430>)
    conv2d_34_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 10660);
 800d5e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    conv2d_34_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d5e2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_34_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 10660);
 800d5e6:	4940      	ldr	r1, [pc, #256]	; (800d6e8 <mnv1_configure_activations+0x434>)
 800d5e8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_35_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d5ec:	493f      	ldr	r1, [pc, #252]	; (800d6ec <mnv1_configure_activations+0x438>)
    conv2d_35_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 2112);
 800d5ee:	f503 6004 	add.w	r0, r3, #2112	; 0x840
 800d5f2:	e091      	b.n	800d718 <mnv1_configure_activations+0x464>
 800d5f4:	20026704 	.word	0x20026704
 800d5f8:	20004ed0 	.word	0x20004ed0
 800d5fc:	20004a68 	.word	0x20004a68
 800d600:	00013b1c 	.word	0x00013b1c
 800d604:	20002e28 	.word	0x20002e28
 800d608:	20002df8 	.word	0x20002df8
 800d60c:	20004008 	.word	0x20004008
 800d610:	00013708 	.word	0x00013708
 800d614:	20004038 	.word	0x20004038
 800d618:	20003fb0 	.word	0x20003fb0
 800d61c:	20004590 	.word	0x20004590
 800d620:	20004560 	.word	0x20004560
 800d624:	00013fc8 	.word	0x00013fc8
 800d628:	20004690 	.word	0x20004690
 800d62c:	20004660 	.word	0x20004660
 800d630:	200047b8 	.word	0x200047b8
 800d634:	0001386c 	.word	0x0001386c
 800d638:	200047e8 	.word	0x200047e8
 800d63c:	20004760 	.word	0x20004760
 800d640:	200048e8 	.word	0x200048e8
 800d644:	200048b8 	.word	0x200048b8
 800d648:	200049b8 	.word	0x200049b8
 800d64c:	200049e8 	.word	0x200049e8
 800d650:	20002548 	.word	0x20002548
 800d654:	200024f0 	.word	0x200024f0
 800d658:	20002578 	.word	0x20002578
 800d65c:	20002648 	.word	0x20002648
 800d660:	20004b08 	.word	0x20004b08
 800d664:	200028a0 	.word	0x200028a0
 800d668:	200028d0 	.word	0x200028d0
 800d66c:	20002678 	.word	0x20002678
 800d670:	20002778 	.word	0x20002778
 800d674:	20002cf8 	.word	0x20002cf8
 800d678:	20004b58 	.word	0x20004b58
 800d67c:	20002f28 	.word	0x20002f28
 800d680:	20002ef8 	.word	0x20002ef8
 800d684:	20003050 	.word	0x20003050
 800d688:	20003080 	.word	0x20003080
 800d68c:	20002ff8 	.word	0x20002ff8
 800d690:	20003180 	.word	0x20003180
 800d694:	20003150 	.word	0x20003150
 800d698:	20004ba8 	.word	0x20004ba8
 800d69c:	20003280 	.word	0x20003280
 800d6a0:	20003250 	.word	0x20003250
 800d6a4:	200033a8 	.word	0x200033a8
 800d6a8:	200033d8 	.word	0x200033d8
 800d6ac:	20003350 	.word	0x20003350
 800d6b0:	200034d8 	.word	0x200034d8
 800d6b4:	200034a8 	.word	0x200034a8
 800d6b8:	200035d8 	.word	0x200035d8
 800d6bc:	200035a8 	.word	0x200035a8
 800d6c0:	20003700 	.word	0x20003700
 800d6c4:	20003730 	.word	0x20003730
 800d6c8:	200036a8 	.word	0x200036a8
 800d6cc:	20003830 	.word	0x20003830
 800d6d0:	20003800 	.word	0x20003800
 800d6d4:	20004bf8 	.word	0x20004bf8
 800d6d8:	20003930 	.word	0x20003930
 800d6dc:	20003900 	.word	0x20003900
 800d6e0:	20003a58 	.word	0x20003a58
 800d6e4:	20003a88 	.word	0x20003a88
 800d6e8:	20003a00 	.word	0x20003a00
 800d6ec:	20003b88 	.word	0x20003b88
 800d6f0:	20002748 	.word	0x20002748
 800d6f4:	20002848 	.word	0x20002848
 800d6f8:	200029d0 	.word	0x200029d0
 800d6fc:	200029a0 	.word	0x200029a0
 800d700:	20002ad0 	.word	0x20002ad0
 800d704:	20002aa0 	.word	0x20002aa0
 800d708:	20002bf8 	.word	0x20002bf8
 800d70c:	20002c28 	.word	0x20002c28
 800d710:	20002ba0 	.word	0x20002ba0
 800d714:	20002d28 	.word	0x20002d28
    conv2d_35_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d718:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_35_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 2112);
 800d71c:	4936      	ldr	r1, [pc, #216]	; (800d7f8 <mnv1_configure_activations+0x544>)
    conv2d_40_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d71e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d720:	9d10      	ldr	r5, [sp, #64]	; 0x40
    conv2d_35_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 2112);
 800d722:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_36_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3648);
 800d726:	4935      	ldr	r1, [pc, #212]	; (800d7fc <mnv1_configure_activations+0x548>)
    conv2d_36_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9784);
 800d728:	980e      	ldr	r0, [sp, #56]	; 0x38
    conv2d_36_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 3648);
 800d72a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_36_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 9784);
 800d72e:	4934      	ldr	r1, [pc, #208]	; (800d800 <mnv1_configure_activations+0x54c>)
 800d730:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_37_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 18984);
 800d734:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d736:	4933      	ldr	r1, [pc, #204]	; (800d804 <mnv1_configure_activations+0x550>)
 800d738:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_37_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 39684);
 800d73c:	9800      	ldr	r0, [sp, #0]
 800d73e:	4932      	ldr	r1, [pc, #200]	; (800d808 <mnv1_configure_activations+0x554>)
 800d740:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_37_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3648);
 800d744:	4931      	ldr	r1, [pc, #196]	; (800d80c <mnv1_configure_activations+0x558>)
    conv2d_38_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 12848);
 800d746:	9801      	ldr	r0, [sp, #4]
    conv2d_37_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3648);
 800d748:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_38_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 12848);
 800d74c:	4930      	ldr	r1, [pc, #192]	; (800d810 <mnv1_configure_activations+0x55c>)
 800d74e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_38_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d752:	4930      	ldr	r1, [pc, #192]	; (800d814 <mnv1_configure_activations+0x560>)
    conv2d_42_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d754:	4830      	ldr	r0, [pc, #192]	; (800d818 <mnv1_configure_activations+0x564>)
    conv2d_38_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d756:	e9c1 3302 	strd	r3, r3, [r1, #8]
    eltwise_39_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 3648);
 800d75a:	4930      	ldr	r1, [pc, #192]	; (800d81c <mnv1_configure_activations+0x568>)
 800d75c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_40_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d760:	4a2f      	ldr	r2, [pc, #188]	; (800d820 <mnv1_configure_activations+0x56c>)
    conv2d_40_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11328);
 800d762:	f503 5131 	add.w	r1, r3, #11328	; 0x2c40
    conv2d_40_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d766:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_40_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 11328);
 800d76a:	4a2e      	ldr	r2, [pc, #184]	; (800d824 <mnv1_configure_activations+0x570>)
 800d76c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d770:	4a2d      	ldr	r2, [pc, #180]	; (800d828 <mnv1_configure_activations+0x574>)
    conv2d_41_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 41280);
 800d772:	9902      	ldr	r1, [sp, #8]
    conv2d_41_pad_before_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 20544);
 800d774:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_41_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 41280);
 800d778:	4a2c      	ldr	r2, [pc, #176]	; (800d82c <mnv1_configure_activations+0x578>)
 800d77a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d77e:	4a2c      	ldr	r2, [pc, #176]	; (800d830 <mnv1_configure_activations+0x57c>)
    conv2d_42_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14400);
 800d780:	f503 5161 	add.w	r1, r3, #14400	; 0x3840
    conv2d_41_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 5184);
 800d784:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_42_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 14400);
 800d788:	4a2a      	ldr	r2, [pc, #168]	; (800d834 <mnv1_configure_activations+0x580>)
 800d78a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 1536);
 800d78e:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
 800d792:	4a29      	ldr	r2, [pc, #164]	; (800d838 <mnv1_configure_activations+0x584>)
 800d794:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 7680);
 800d798:	f503 51f0 	add.w	r1, r3, #7680	; 0x1e00
 800d79c:	4a27      	ldr	r2, [pc, #156]	; (800d83c <mnv1_configure_activations+0x588>)
    conv2d_42_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d79e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_44_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 7680);
 800d7a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    eltwise_43_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7a6:	4826      	ldr	r0, [pc, #152]	; (800d840 <mnv1_configure_activations+0x58c>)
    gemm_46_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 576);
 800d7a8:	f503 7110 	add.w	r1, r3, #576	; 0x240
 800d7ac:	4a25      	ldr	r2, [pc, #148]	; (800d844 <mnv1_configure_activations+0x590>)
    eltwise_43_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
    gemm_46_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 576);
 800d7b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    pool_45_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7b6:	4824      	ldr	r0, [pc, #144]	; (800d848 <mnv1_configure_activations+0x594>)
    gemm_46_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1728);
 800d7b8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800d7bc:	4a23      	ldr	r2, [pc, #140]	; (800d84c <mnv1_configure_activations+0x598>)
    pool_45_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7be:	e9c0 3302 	strd	r3, r3, [r0, #8]
    gemm_46_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 1728);
 800d7c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_47_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7c6:	4822      	ldr	r0, [pc, #136]	; (800d850 <mnv1_configure_activations+0x59c>)
    nl_47_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 104);
 800d7c8:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d7cc:	4a21      	ldr	r2, [pc, #132]	; (800d854 <mnv1_configure_activations+0x5a0>)
    nl_47_scratch0_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
    nl_47_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 104);
 800d7d2:	e9c2 1102 	strd	r1, r1, [r2, #8]
}
 800d7d6:	4658      	mov	r0, fp
    conversion_48_output_array.data = AI_PTR(g_mnv1_activations_map[0] + 0);
 800d7d8:	4a1f      	ldr	r2, [pc, #124]	; (800d858 <mnv1_configure_activations+0x5a4>)
 800d7da:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
 800d7de:	b013      	add	sp, #76	; 0x4c
 800d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800d7e4:	2213      	movs	r2, #19
 800d7e6:	2130      	movs	r1, #48	; 0x30
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 fb05 	bl	800ddf8 <ai_platform_network_set_error>
}
 800d7ee:	4658      	mov	r0, fp
 800d7f0:	b013      	add	sp, #76	; 0x4c
 800d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20003b58 	.word	0x20003b58
 800d7fc:	20003c88 	.word	0x20003c88
 800d800:	20003c58 	.word	0x20003c58
 800d804:	20003db0 	.word	0x20003db0
 800d808:	20003de0 	.word	0x20003de0
 800d80c:	20003d58 	.word	0x20003d58
 800d810:	20003ee0 	.word	0x20003ee0
 800d814:	20003eb0 	.word	0x20003eb0
 800d818:	20004390 	.word	0x20004390
 800d81c:	20004c48 	.word	0x20004c48
 800d820:	20004138 	.word	0x20004138
 800d824:	20004108 	.word	0x20004108
 800d828:	20004260 	.word	0x20004260
 800d82c:	20004290 	.word	0x20004290
 800d830:	20004208 	.word	0x20004208
 800d834:	20004360 	.word	0x20004360
 800d838:	20004490 	.word	0x20004490
 800d83c:	20004460 	.word	0x20004460
 800d840:	20004c98 	.word	0x20004c98
 800d844:	20004d88 	.word	0x20004d88
 800d848:	20004ea0 	.word	0x20004ea0
 800d84c:	20004d58 	.word	0x20004d58
 800d850:	20004e38 	.word	0x20004e38
 800d854:	20004e08 	.word	0x20004e08
 800d858:	20004ab8 	.word	0x20004ab8

0800d85c <ai_mnv1_get_error>:
}

AI_API_ENTRY
ai_error ai_mnv1_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800d85c:	f000 b9c0 	b.w	800dbe0 <ai_platform_network_get_error>

0800d860 <ai_mnv1_create_and_init>:
}

AI_API_ENTRY
ai_error ai_mnv1_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800d860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return ai_platform_network_create(
 800d864:	2300      	movs	r3, #0
{
 800d866:	b091      	sub	sp, #68	; 0x44
  return ai_platform_network_create(
 800d868:	2405      	movs	r4, #5
{
 800d86a:	460f      	mov	r7, r1
  return ai_platform_network_create(
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	4619      	mov	r1, r3
 800d870:	9400      	str	r4, [sp, #0]
{
 800d872:	4616      	mov	r6, r2
  return ai_platform_network_create(
 800d874:	2301      	movs	r3, #1
 800d876:	4a2f      	ldr	r2, [pc, #188]	; (800d934 <ai_mnv1_create_and_init+0xd4>)
{
 800d878:	4680      	mov	r8, r0
  return ai_platform_network_create(
 800d87a:	f000 fdd7 	bl	800e42c <ai_platform_network_create>
    ai_error err;
    ai_network_params params;

    err = ai_mnv1_create(network, AI_MNV1_DATA_CONFIG);
    if (err.type != AI_ERROR_NONE)
 800d87e:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 800d882:	4604      	mov	r4, r0
 800d884:	d003      	beq.n	800d88e <ai_mnv1_create_and_init+0x2e>
#endif
    if (ai_mnv1_init(*network, &params) != true) {
        err = ai_mnv1_get_error(*network);
    }
    return err;
}
 800d886:	4620      	mov	r0, r4
 800d888:	b011      	add	sp, #68	; 0x44
 800d88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ai_mnv1_data_params_get(&params) != true) {
 800d88e:	a802      	add	r0, sp, #8
 800d890:	f000 f870 	bl	800d974 <ai_mnv1_data_params_get>
 800d894:	2800      	cmp	r0, #0
 800d896:	d046      	beq.n	800d926 <ai_mnv1_create_and_init+0xc6>
    if (activations) {
 800d898:	b17f      	cbz	r7, 800d8ba <ai_mnv1_create_and_init+0x5a>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800d89a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d89e:	b163      	cbz	r3, 800d8ba <ai_mnv1_create_and_init+0x5a>
 800d8a0:	3f04      	subs	r7, #4
 800d8a2:	464d      	mov	r5, r9
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800d8aa:	a805      	add	r0, sp, #20
        for (int idx=0;idx<params.map_activations.size;idx++)
 800d8ac:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800d8ae:	f000 f8b9 	bl	800da24 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800d8b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d8b6:	42ab      	cmp	r3, r5
 800d8b8:	dcf4      	bgt.n	800d8a4 <ai_mnv1_create_and_init+0x44>
    if (weights) {
 800d8ba:	b17e      	cbz	r6, 800d8dc <ai_mnv1_create_and_init+0x7c>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800d8bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d8c0:	b163      	cbz	r3, 800d8dc <ai_mnv1_create_and_init+0x7c>
 800d8c2:	3e04      	subs	r6, #4
 800d8c4:	2500      	movs	r5, #0
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800d8cc:	a803      	add	r0, sp, #12
        for (int idx=0;idx<params.map_weights.size;idx++)
 800d8ce:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800d8d0:	f000 f8a8 	bl	800da24 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800d8d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d8d8:	42ab      	cmp	r3, r5
 800d8da:	dcf4      	bgt.n	800d8c6 <ai_mnv1_create_and_init+0x66>
    if (ai_mnv1_init(*network, &params) != true) {
 800d8dc:	f8d8 7000 	ldr.w	r7, [r8]

AI_API_ENTRY
ai_bool ai_mnv1_init(
  ai_handle network, const ai_network_params* params)
{
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800d8e0:	a902      	add	r1, sp, #8
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	f000 ff7c 	bl	800e7e0 <ai_platform_network_init>
  if (!net_ctx) return false;
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	b1a0      	cbz	r0, 800d916 <ai_mnv1_create_and_init+0xb6>

  ai_bool ok = true;
  ok &= mnv1_configure_weights(net_ctx, params);
 800d8ec:	a902      	add	r1, sp, #8
 800d8ee:	f7ff f96f 	bl	800cbd0 <mnv1_configure_weights>
 800d8f2:	4605      	mov	r5, r0
  ok &= mnv1_configure_activations(net_ctx, params);
 800d8f4:	a902      	add	r1, sp, #8
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f7ff fcdc 	bl	800d2b4 <mnv1_configure_activations>
 800d8fc:	4005      	ands	r5, r0

  ok &= ai_platform_network_post_init(network);
 800d8fe:	4638      	mov	r0, r7
 800d900:	b2ed      	uxtb	r5, r5
 800d902:	f001 f909 	bl	800eb18 <ai_platform_network_post_init>
    if (ai_mnv1_init(*network, &params) != true) {
 800d906:	b135      	cbz	r5, 800d916 <ai_mnv1_create_and_init+0xb6>
 800d908:	b128      	cbz	r0, 800d916 <ai_mnv1_create_and_init+0xb6>
    return err;
 800d90a:	f369 0407 	bfi	r4, r9, #0, #8
}
 800d90e:	4620      	mov	r0, r4
 800d910:	b011      	add	sp, #68	; 0x44
 800d912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return ai_platform_network_get_error(network);
 800d916:	f8d8 0000 	ldr.w	r0, [r8]
 800d91a:	f000 f961 	bl	800dbe0 <ai_platform_network_get_error>
 800d91e:	4604      	mov	r4, r0
 800d920:	fa5f f980 	uxtb.w	r9, r0
 800d924:	e7f1      	b.n	800d90a <ai_mnv1_create_and_init+0xaa>
 800d926:	f8d8 0000 	ldr.w	r0, [r8]
 800d92a:	f000 f959 	bl	800dbe0 <ai_platform_network_get_error>
 800d92e:	4604      	mov	r4, r0
        return err;
 800d930:	e7a9      	b.n	800d886 <ai_mnv1_create_and_init+0x26>
 800d932:	bf00      	nop
 800d934:	20004ca8 	.word	0x20004ca8

0800d938 <ai_mnv1_inputs_get>:
  if (network == AI_HANDLE_NULL) {
 800d938:	b108      	cbz	r0, 800d93e <ai_mnv1_inputs_get+0x6>
  return ai_platform_inputs_get(network, n_buffer);
 800d93a:	f000 ba63 	b.w	800de04 <ai_platform_inputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800d93e:	4b03      	ldr	r3, [pc, #12]	; (800d94c <ai_mnv1_inputs_get+0x14>)
 800d940:	4a03      	ldr	r2, [pc, #12]	; (800d950 <ai_mnv1_inputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800d942:	4618      	mov	r0, r3
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800d944:	601a      	str	r2, [r3, #0]
  return ai_platform_inputs_get(network, n_buffer);
 800d946:	f000 ba5d 	b.w	800de04 <ai_platform_inputs_get>
 800d94a:	bf00      	nop
 800d94c:	20004ca8 	.word	0x20004ca8
 800d950:	a1c00100 	.word	0xa1c00100

0800d954 <ai_mnv1_outputs_get>:
  if (network == AI_HANDLE_NULL) {
 800d954:	b108      	cbz	r0, 800d95a <ai_mnv1_outputs_get+0x6>
  return ai_platform_outputs_get(network, n_buffer);
 800d956:	f000 bbe1 	b.w	800e11c <ai_platform_outputs_get>
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800d95a:	4b03      	ldr	r3, [pc, #12]	; (800d968 <ai_mnv1_outputs_get+0x14>)
 800d95c:	4a03      	ldr	r2, [pc, #12]	; (800d96c <ai_mnv1_outputs_get+0x18>)
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800d95e:	4618      	mov	r0, r3
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800d960:	601a      	str	r2, [r3, #0]
  return ai_platform_outputs_get(network, n_buffer);
 800d962:	f000 bbdb 	b.w	800e11c <ai_platform_outputs_get>
 800d966:	bf00      	nop
 800d968:	20004ca8 	.word	0x20004ca8
 800d96c:	a1c00100 	.word	0xa1c00100

0800d970 <ai_mnv1_run>:

AI_API_ENTRY
ai_i32 ai_mnv1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800d970:	f001 b9fc 	b.w	800ed6c <ai_platform_network_process>

0800d974 <ai_mnv1_data_params_get>:
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mnv1_data_params_get(ai_network_params* params)
{
  if (!params) return false;
 800d974:	4603      	mov	r3, r0
 800d976:	b1a0      	cbz	r0, 800d9a2 <ai_mnv1_data_params_get+0x2e>
{
 800d978:	b510      	push	{r4, lr}
  
  const ai_buffer_array map_activations = 
 800d97a:	4c0a      	ldr	r4, [pc, #40]	; (800d9a4 <ai_mnv1_data_params_get+0x30>)
{
 800d97c:	b084      	sub	sp, #16
  const ai_buffer_array map_activations = 
 800d97e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d982:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNV1_DATA_ACTIVATIONS_COUNT, g_mnv1_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800d984:	3408      	adds	r4, #8
 800d986:	f10d 0c08 	add.w	ip, sp, #8
  const ai_buffer_array map_activations = 
 800d98a:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800d98e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d992:	e88c 0003 	stmia.w	ip, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNV1_DATA_WEIGHTS_COUNT, g_mnv1_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800d996:	4661      	mov	r1, ip
 800d998:	4618      	mov	r0, r3
 800d99a:	f000 f907 	bl	800dbac <ai_platform_bind_network_params>
}
 800d99e:	b004      	add	sp, #16
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	4770      	bx	lr
 800d9a4:	08019180 	.word	0x08019180

0800d9a8 <ai_buffer_get_size>:
 800d9a8:	b368      	cbz	r0, 800da06 <ai_buffer_get_size+0x5e>
 800d9aa:	4b17      	ldr	r3, [pc, #92]	; (800da08 <ai_buffer_get_size+0x60>)
 800d9ac:	4a17      	ldr	r2, [pc, #92]	; (800da0c <ai_buffer_get_size+0x64>)
 800d9ae:	b410      	push	{r4}
 800d9b0:	6804      	ldr	r4, [r0, #0]
 800d9b2:	4023      	ands	r3, r4
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d123      	bne.n	800da00 <ai_buffer_get_size+0x58>
 800d9b8:	b311      	cbz	r1, 800da00 <ai_buffer_get_size+0x58>
 800d9ba:	6984      	ldr	r4, [r0, #24]
 800d9bc:	6862      	ldr	r2, [r4, #4]
 800d9be:	321f      	adds	r2, #31
 800d9c0:	f022 021f 	bic.w	r2, r2, #31
 800d9c4:	7d03      	ldrb	r3, [r0, #20]
 800d9c6:	6941      	ldr	r1, [r0, #20]
 800d9c8:	f1a3 0301 	sub.w	r3, r3, #1
 800d9cc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800d9d0:	fab3 f383 	clz	r3, r3
 800d9d4:	095b      	lsrs	r3, r3, #5
 800d9d6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800d9da:	da0c      	bge.n	800d9f6 <ai_buffer_get_size+0x4e>
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d103      	bne.n	800d9e8 <ai_buffer_get_size+0x40>
 800d9e0:	2802      	cmp	r0, #2
 800d9e2:	f04f 0302 	mov.w	r3, #2
 800d9e6:	d006      	beq.n	800d9f6 <ai_buffer_get_size+0x4e>
 800d9e8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	4298      	cmp	r0, r3
 800d9f0:	fb01 f202 	mul.w	r2, r1, r2
 800d9f4:	d1f2      	bne.n	800d9dc <ai_buffer_get_size+0x34>
 800d9f6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800d9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	6984      	ldr	r4, [r0, #24]
 800da02:	6862      	ldr	r2, [r4, #4]
 800da04:	e7de      	b.n	800d9c4 <ai_buffer_get_size+0x1c>
 800da06:	4770      	bx	lr
 800da08:	017fffff 	.word	0x017fffff
 800da0c:	000400c0 	.word	0x000400c0

0800da10 <ai_buffer_array_sane>:
 800da10:	b138      	cbz	r0, 800da22 <ai_buffer_array_sane+0x12>
 800da12:	6843      	ldr	r3, [r0, #4]
 800da14:	b123      	cbz	r3, 800da20 <ai_buffer_array_sane+0x10>
 800da16:	8840      	ldrh	r0, [r0, #2]
 800da18:	3800      	subs	r0, #0
 800da1a:	bf18      	it	ne
 800da1c:	2001      	movne	r0, #1
 800da1e:	4770      	bx	lr
 800da20:	4618      	mov	r0, r3
 800da22:	4770      	bx	lr

0800da24 <ai_buffer_array_item_set_address>:
 800da24:	b150      	cbz	r0, 800da3c <ai_buffer_array_item_set_address+0x18>
 800da26:	6843      	ldr	r3, [r0, #4]
 800da28:	b14b      	cbz	r3, 800da3e <ai_buffer_array_item_set_address+0x1a>
 800da2a:	8840      	ldrh	r0, [r0, #2]
 800da2c:	b900      	cbnz	r0, 800da30 <ai_buffer_array_item_set_address+0xc>
 800da2e:	4770      	bx	lr
 800da30:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800da34:	2001      	movs	r0, #1
 800da36:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da3a:	604a      	str	r2, [r1, #4]
 800da3c:	4770      	bx	lr
 800da3e:	4618      	mov	r0, r3
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop

0800da44 <_ai_platform_acquire_crc>:
 800da44:	2001      	movs	r0, #1
 800da46:	4770      	bx	lr

0800da48 <_ai_platform_release_crc>:
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop

0800da4c <ai_platform_get_weights_map>:
 800da4c:	2900      	cmp	r1, #0
 800da4e:	bf18      	it	ne
 800da50:	2800      	cmpne	r0, #0
 800da52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da54:	bf0c      	ite	eq
 800da56:	2401      	moveq	r4, #1
 800da58:	2400      	movne	r4, #0
 800da5a:	2a00      	cmp	r2, #0
 800da5c:	bf08      	it	eq
 800da5e:	f044 0401 	orreq.w	r4, r4, #1
 800da62:	b114      	cbz	r4, 800da6a <ai_platform_get_weights_map+0x1e>
 800da64:	2400      	movs	r4, #0
 800da66:	4620      	mov	r0, r4
 800da68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da6a:	4616      	mov	r6, r2
 800da6c:	4b22      	ldr	r3, [pc, #136]	; (800daf8 <ai_platform_get_weights_map+0xac>)
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	4605      	mov	r5, r0
 800da72:	460f      	mov	r7, r1
 800da74:	429a      	cmp	r2, r3
 800da76:	d022      	beq.n	800dabe <ai_platform_get_weights_map+0x72>
 800da78:	6870      	ldr	r0, [r6, #4]
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d0f2      	beq.n	800da64 <ai_platform_get_weights_map+0x18>
 800da7e:	6806      	ldr	r6, [r0, #0]
 800da80:	429e      	cmp	r6, r3
 800da82:	d006      	beq.n	800da92 <ai_platform_get_weights_map+0x46>
 800da84:	f1a1 0401 	sub.w	r4, r1, #1
 800da88:	6028      	str	r0, [r5, #0]
 800da8a:	fab4 f484 	clz	r4, r4
 800da8e:	0964      	lsrs	r4, r4, #5
 800da90:	e7e9      	b.n	800da66 <ai_platform_get_weights_map+0x1a>
 800da92:	3d04      	subs	r5, #4
 800da94:	4602      	mov	r2, r0
 800da96:	4621      	mov	r1, r4
 800da98:	e000      	b.n	800da9c <ai_platform_get_weights_map+0x50>
 800da9a:	4619      	mov	r1, r3
 800da9c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800daa0:	42b3      	cmp	r3, r6
 800daa2:	d025      	beq.n	800daf0 <ai_platform_get_weights_map+0xa4>
 800daa4:	f845 3f04 	str.w	r3, [r5, #4]!
 800daa8:	1c4b      	adds	r3, r1, #1
 800daaa:	429f      	cmp	r7, r3
 800daac:	d8f5      	bhi.n	800da9a <ai_platform_get_weights_map+0x4e>
 800daae:	d1da      	bne.n	800da66 <ai_platform_get_weights_map+0x1a>
 800dab0:	3102      	adds	r1, #2
 800dab2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800dab6:	42b3      	cmp	r3, r6
 800dab8:	d1d5      	bne.n	800da66 <ai_platform_get_weights_map+0x1a>
 800daba:	2401      	movs	r4, #1
 800dabc:	e7d3      	b.n	800da66 <ai_platform_get_weights_map+0x1a>
 800dabe:	1d30      	adds	r0, r6, #4
 800dac0:	f7ff ffa6 	bl	800da10 <ai_buffer_array_sane>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0cd      	beq.n	800da64 <ai_platform_get_weights_map+0x18>
 800dac8:	88f3      	ldrh	r3, [r6, #6]
 800daca:	429f      	cmp	r7, r3
 800dacc:	d1ca      	bne.n	800da64 <ai_platform_get_weights_map+0x18>
 800dace:	3d04      	subs	r5, #4
 800dad0:	4622      	mov	r2, r4
 800dad2:	68b3      	ldr	r3, [r6, #8]
 800dad4:	4423      	add	r3, r4
 800dad6:	341c      	adds	r4, #28
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	b123      	cbz	r3, 800dae6 <ai_platform_get_weights_map+0x9a>
 800dadc:	3201      	adds	r2, #1
 800dade:	f845 3f04 	str.w	r3, [r5, #4]!
 800dae2:	4297      	cmp	r7, r2
 800dae4:	d8f5      	bhi.n	800dad2 <ai_platform_get_weights_map+0x86>
 800dae6:	1abc      	subs	r4, r7, r2
 800dae8:	fab4 f484 	clz	r4, r4
 800daec:	0964      	lsrs	r4, r4, #5
 800daee:	e7ba      	b.n	800da66 <ai_platform_get_weights_map+0x1a>
 800daf0:	428f      	cmp	r7, r1
 800daf2:	d1b8      	bne.n	800da66 <ai_platform_get_weights_map+0x1a>
 800daf4:	e7e1      	b.n	800daba <ai_platform_get_weights_map+0x6e>
 800daf6:	bf00      	nop
 800daf8:	a1facade 	.word	0xa1facade

0800dafc <ai_platform_get_activations_map>:
 800dafc:	2900      	cmp	r1, #0
 800dafe:	bf18      	it	ne
 800db00:	2800      	cmpne	r0, #0
 800db02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db04:	bf0c      	ite	eq
 800db06:	2401      	moveq	r4, #1
 800db08:	2400      	movne	r4, #0
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	bf08      	it	eq
 800db0e:	f044 0401 	orreq.w	r4, r4, #1
 800db12:	b114      	cbz	r4, 800db1a <ai_platform_get_activations_map+0x1e>
 800db14:	2400      	movs	r4, #0
 800db16:	4620      	mov	r0, r4
 800db18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db1a:	4616      	mov	r6, r2
 800db1c:	4b22      	ldr	r3, [pc, #136]	; (800dba8 <ai_platform_get_activations_map+0xac>)
 800db1e:	6812      	ldr	r2, [r2, #0]
 800db20:	4605      	mov	r5, r0
 800db22:	460f      	mov	r7, r1
 800db24:	429a      	cmp	r2, r3
 800db26:	d022      	beq.n	800db6e <ai_platform_get_activations_map+0x72>
 800db28:	6a30      	ldr	r0, [r6, #32]
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d0f2      	beq.n	800db14 <ai_platform_get_activations_map+0x18>
 800db2e:	6806      	ldr	r6, [r0, #0]
 800db30:	429e      	cmp	r6, r3
 800db32:	d006      	beq.n	800db42 <ai_platform_get_activations_map+0x46>
 800db34:	f1a1 0401 	sub.w	r4, r1, #1
 800db38:	6028      	str	r0, [r5, #0]
 800db3a:	fab4 f484 	clz	r4, r4
 800db3e:	0964      	lsrs	r4, r4, #5
 800db40:	e7e9      	b.n	800db16 <ai_platform_get_activations_map+0x1a>
 800db42:	3d04      	subs	r5, #4
 800db44:	4602      	mov	r2, r0
 800db46:	4621      	mov	r1, r4
 800db48:	e000      	b.n	800db4c <ai_platform_get_activations_map+0x50>
 800db4a:	4619      	mov	r1, r3
 800db4c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800db50:	42b3      	cmp	r3, r6
 800db52:	d026      	beq.n	800dba2 <ai_platform_get_activations_map+0xa6>
 800db54:	f845 3f04 	str.w	r3, [r5, #4]!
 800db58:	1c4b      	adds	r3, r1, #1
 800db5a:	429f      	cmp	r7, r3
 800db5c:	d8f5      	bhi.n	800db4a <ai_platform_get_activations_map+0x4e>
 800db5e:	d1da      	bne.n	800db16 <ai_platform_get_activations_map+0x1a>
 800db60:	3102      	adds	r1, #2
 800db62:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800db66:	42b3      	cmp	r3, r6
 800db68:	d1d5      	bne.n	800db16 <ai_platform_get_activations_map+0x1a>
 800db6a:	2401      	movs	r4, #1
 800db6c:	e7d3      	b.n	800db16 <ai_platform_get_activations_map+0x1a>
 800db6e:	f106 000c 	add.w	r0, r6, #12
 800db72:	f7ff ff4d 	bl	800da10 <ai_buffer_array_sane>
 800db76:	2800      	cmp	r0, #0
 800db78:	d0cc      	beq.n	800db14 <ai_platform_get_activations_map+0x18>
 800db7a:	89f3      	ldrh	r3, [r6, #14]
 800db7c:	429f      	cmp	r7, r3
 800db7e:	d1c9      	bne.n	800db14 <ai_platform_get_activations_map+0x18>
 800db80:	3d04      	subs	r5, #4
 800db82:	4622      	mov	r2, r4
 800db84:	6933      	ldr	r3, [r6, #16]
 800db86:	4423      	add	r3, r4
 800db88:	341c      	adds	r4, #28
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	b123      	cbz	r3, 800db98 <ai_platform_get_activations_map+0x9c>
 800db8e:	3201      	adds	r2, #1
 800db90:	f845 3f04 	str.w	r3, [r5, #4]!
 800db94:	4297      	cmp	r7, r2
 800db96:	d8f5      	bhi.n	800db84 <ai_platform_get_activations_map+0x88>
 800db98:	1abc      	subs	r4, r7, r2
 800db9a:	fab4 f484 	clz	r4, r4
 800db9e:	0964      	lsrs	r4, r4, #5
 800dba0:	e7b9      	b.n	800db16 <ai_platform_get_activations_map+0x1a>
 800dba2:	428f      	cmp	r7, r1
 800dba4:	d1b7      	bne.n	800db16 <ai_platform_get_activations_map+0x1a>
 800dba6:	e7e0      	b.n	800db6a <ai_platform_get_activations_map+0x6e>
 800dba8:	a1facade 	.word	0xa1facade

0800dbac <ai_platform_bind_network_params>:
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	bf18      	it	ne
 800dbb0:	2900      	cmpne	r1, #0
 800dbb2:	d010      	beq.n	800dbd6 <ai_platform_bind_network_params+0x2a>
 800dbb4:	b178      	cbz	r0, 800dbd6 <ai_platform_bind_network_params+0x2a>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	4808      	ldr	r0, [pc, #32]	; (800dbdc <ai_platform_bind_network_params+0x30>)
 800dbba:	f103 0c0c 	add.w	ip, r3, #12
 800dbbe:	f843 0b04 	str.w	r0, [r3], #4
 800dbc2:	c903      	ldmia	r1, {r0, r1}
 800dbc4:	e883 0003 	stmia.w	r3, {r0, r1}
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbce:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	4770      	bx	lr
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	4618      	mov	r0, r3
 800dbda:	4770      	bx	lr
 800dbdc:	a1facade 	.word	0xa1facade

0800dbe0 <ai_platform_network_get_error>:
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d03f      	beq.n	800dc66 <ai_platform_network_get_error+0x86>
 800dbe6:	4b7d      	ldr	r3, [pc, #500]	; (800dddc <ai_platform_network_get_error+0x1fc>)
 800dbe8:	4604      	mov	r4, r0
 800dbea:	6802      	ldr	r2, [r0, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d13a      	bne.n	800dc66 <ai_platform_network_get_error+0x86>
 800dbf0:	f7ff ff28 	bl	800da44 <_ai_platform_acquire_crc>
 800dbf4:	4b7a      	ldr	r3, [pc, #488]	; (800dde0 <ai_platform_network_get_error+0x200>)
 800dbf6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc00:	189a      	adds	r2, r3, r2
 800dc02:	2a01      	cmp	r2, #1
 800dc04:	f240 8086 	bls.w	800dd14 <ai_platform_network_get_error+0x134>
 800dc08:	f240 4249 	movw	r2, #1097	; 0x449
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	f000 8081 	beq.w	800dd14 <ai_platform_network_get_error+0x134>
 800dc12:	4a74      	ldr	r2, [pc, #464]	; (800dde4 <ai_platform_network_get_error+0x204>)
 800dc14:	6813      	ldr	r3, [r2, #0]
 800dc16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dc1e:	f000 8087 	beq.w	800dd30 <ai_platform_network_get_error+0x150>
 800dc22:	6813      	ldr	r3, [r2, #0]
 800dc24:	f240 4183 	movw	r1, #1155	; 0x483
 800dc28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc2c:	428b      	cmp	r3, r1
 800dc2e:	f000 80a9 	beq.w	800dd84 <ai_platform_network_get_error+0x1a4>
 800dc32:	6813      	ldr	r3, [r2, #0]
 800dc34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc38:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dc3c:	f000 80c0 	beq.w	800ddc0 <ai_platform_network_get_error+0x1e0>
 800dc40:	6813      	ldr	r3, [r2, #0]
 800dc42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f040 8082 	bne.w	800dd50 <ai_platform_network_get_error+0x170>
 800dc4c:	4a66      	ldr	r2, [pc, #408]	; (800dde8 <ai_platform_network_get_error+0x208>)
 800dc4e:	2301      	movs	r3, #1
 800dc50:	6093      	str	r3, [r2, #8]
 800dc52:	6893      	ldr	r3, [r2, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1fc      	bne.n	800dc52 <ai_platform_network_get_error+0x72>
 800dc58:	4964      	ldr	r1, [pc, #400]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dc5a:	4b65      	ldr	r3, [pc, #404]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dc5c:	6011      	str	r1, [r2, #0]
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d075      	beq.n	800dd50 <ai_platform_network_get_error+0x170>
 800dc64:	e7fe      	b.n	800dc64 <ai_platform_network_get_error+0x84>
 800dc66:	f7ff feed 	bl	800da44 <_ai_platform_acquire_crc>
 800dc6a:	4b5d      	ldr	r3, [pc, #372]	; (800dde0 <ai_platform_network_get_error+0x200>)
 800dc6c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc76:	185a      	adds	r2, r3, r1
 800dc78:	2a01      	cmp	r2, #1
 800dc7a:	d929      	bls.n	800dcd0 <ai_platform_network_get_error+0xf0>
 800dc7c:	f240 4249 	movw	r2, #1097	; 0x449
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d025      	beq.n	800dcd0 <ai_platform_network_get_error+0xf0>
 800dc84:	4a57      	ldr	r2, [pc, #348]	; (800dde4 <ai_platform_network_get_error+0x204>)
 800dc86:	6813      	ldr	r3, [r2, #0]
 800dc88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dc90:	d02b      	beq.n	800dcea <ai_platform_network_get_error+0x10a>
 800dc92:	6813      	ldr	r3, [r2, #0]
 800dc94:	f240 4183 	movw	r1, #1155	; 0x483
 800dc98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc9c:	428b      	cmp	r3, r1
 800dc9e:	d060      	beq.n	800dd62 <ai_platform_network_get_error+0x182>
 800dca0:	6813      	ldr	r3, [r2, #0]
 800dca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dca6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dcaa:	d07c      	beq.n	800dda6 <ai_platform_network_get_error+0x1c6>
 800dcac:	6813      	ldr	r3, [r2, #0]
 800dcae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d129      	bne.n	800dd0a <ai_platform_network_get_error+0x12a>
 800dcb6:	4a4c      	ldr	r2, [pc, #304]	; (800dde8 <ai_platform_network_get_error+0x208>)
 800dcb8:	2301      	movs	r3, #1
 800dcba:	6093      	str	r3, [r2, #8]
 800dcbc:	6893      	ldr	r3, [r2, #8]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1fc      	bne.n	800dcbc <ai_platform_network_get_error+0xdc>
 800dcc2:	494a      	ldr	r1, [pc, #296]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dcc4:	4b4a      	ldr	r3, [pc, #296]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dcc6:	6011      	str	r1, [r2, #0]
 800dcc8:	6812      	ldr	r2, [r2, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d01d      	beq.n	800dd0a <ai_platform_network_get_error+0x12a>
 800dcce:	e7fe      	b.n	800dcce <ai_platform_network_get_error+0xee>
 800dcd0:	4a45      	ldr	r2, [pc, #276]	; (800dde8 <ai_platform_network_get_error+0x208>)
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	6093      	str	r3, [r2, #8]
 800dcd6:	6893      	ldr	r3, [r2, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1fc      	bne.n	800dcd6 <ai_platform_network_get_error+0xf6>
 800dcdc:	4943      	ldr	r1, [pc, #268]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dcde:	4b44      	ldr	r3, [pc, #272]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dce0:	6011      	str	r1, [r2, #0]
 800dce2:	6812      	ldr	r2, [r2, #0]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d010      	beq.n	800dd0a <ai_platform_network_get_error+0x12a>
 800dce8:	e7fe      	b.n	800dce8 <ai_platform_network_get_error+0x108>
 800dcea:	4a42      	ldr	r2, [pc, #264]	; (800ddf4 <ai_platform_network_get_error+0x214>)
 800dcec:	2301      	movs	r3, #1
 800dcee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dcf2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1fb      	bne.n	800dcf2 <ai_platform_network_get_error+0x112>
 800dcfa:	493c      	ldr	r1, [pc, #240]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dcfc:	4b3c      	ldr	r3, [pc, #240]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dcfe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dd02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d111      	bne.n	800dd2e <ai_platform_network_get_error+0x14e>
 800dd0a:	f7ff fe9d 	bl	800da48 <_ai_platform_release_crc>
 800dd0e:	f241 0010 	movw	r0, #4112	; 0x1010
 800dd12:	bd10      	pop	{r4, pc}
 800dd14:	4a34      	ldr	r2, [pc, #208]	; (800dde8 <ai_platform_network_get_error+0x208>)
 800dd16:	2301      	movs	r3, #1
 800dd18:	6093      	str	r3, [r2, #8]
 800dd1a:	6893      	ldr	r3, [r2, #8]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1fc      	bne.n	800dd1a <ai_platform_network_get_error+0x13a>
 800dd20:	4932      	ldr	r1, [pc, #200]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dd22:	4b33      	ldr	r3, [pc, #204]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dd24:	6011      	str	r1, [r2, #0]
 800dd26:	6812      	ldr	r2, [r2, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d011      	beq.n	800dd50 <ai_platform_network_get_error+0x170>
 800dd2c:	e7fe      	b.n	800dd2c <ai_platform_network_get_error+0x14c>
 800dd2e:	e7fe      	b.n	800dd2e <ai_platform_network_get_error+0x14e>
 800dd30:	4a30      	ldr	r2, [pc, #192]	; (800ddf4 <ai_platform_network_get_error+0x214>)
 800dd32:	2301      	movs	r3, #1
 800dd34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dd38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1fb      	bne.n	800dd38 <ai_platform_network_get_error+0x158>
 800dd40:	492a      	ldr	r1, [pc, #168]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dd42:	4b2b      	ldr	r3, [pc, #172]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dd44:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dd48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d107      	bne.n	800dd60 <ai_platform_network_get_error+0x180>
 800dd50:	f7ff fe7a 	bl	800da48 <_ai_platform_release_crc>
 800dd54:	f104 0010 	add.w	r0, r4, #16
 800dd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd5c:	f001 bae4 	b.w	800f328 <core_get_error>
 800dd60:	e7fe      	b.n	800dd60 <ai_platform_network_get_error+0x180>
 800dd62:	4a24      	ldr	r2, [pc, #144]	; (800ddf4 <ai_platform_network_get_error+0x214>)
 800dd64:	2301      	movs	r3, #1
 800dd66:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dd6a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1fb      	bne.n	800dd6a <ai_platform_network_get_error+0x18a>
 800dd72:	491e      	ldr	r1, [pc, #120]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dd74:	4b1e      	ldr	r3, [pc, #120]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dd76:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dd7a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d0c3      	beq.n	800dd0a <ai_platform_network_get_error+0x12a>
 800dd82:	e7fe      	b.n	800dd82 <ai_platform_network_get_error+0x1a2>
 800dd84:	4a1b      	ldr	r2, [pc, #108]	; (800ddf4 <ai_platform_network_get_error+0x214>)
 800dd86:	2301      	movs	r3, #1
 800dd88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dd8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1fb      	bne.n	800dd8c <ai_platform_network_get_error+0x1ac>
 800dd94:	4915      	ldr	r1, [pc, #84]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800dd96:	4b16      	ldr	r3, [pc, #88]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800dd98:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dd9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d0d5      	beq.n	800dd50 <ai_platform_network_get_error+0x170>
 800dda4:	e7fe      	b.n	800dda4 <ai_platform_network_get_error+0x1c4>
 800dda6:	4a10      	ldr	r2, [pc, #64]	; (800dde8 <ai_platform_network_get_error+0x208>)
 800dda8:	2301      	movs	r3, #1
 800ddaa:	6093      	str	r3, [r2, #8]
 800ddac:	6893      	ldr	r3, [r2, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1fc      	bne.n	800ddac <ai_platform_network_get_error+0x1cc>
 800ddb2:	490e      	ldr	r1, [pc, #56]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800ddb4:	4b0e      	ldr	r3, [pc, #56]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800ddb6:	6011      	str	r1, [r2, #0]
 800ddb8:	6812      	ldr	r2, [r2, #0]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d0a5      	beq.n	800dd0a <ai_platform_network_get_error+0x12a>
 800ddbe:	e7fe      	b.n	800ddbe <ai_platform_network_get_error+0x1de>
 800ddc0:	4a09      	ldr	r2, [pc, #36]	; (800dde8 <ai_platform_network_get_error+0x208>)
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	6093      	str	r3, [r2, #8]
 800ddc6:	6893      	ldr	r3, [r2, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1fc      	bne.n	800ddc6 <ai_platform_network_get_error+0x1e6>
 800ddcc:	4907      	ldr	r1, [pc, #28]	; (800ddec <ai_platform_network_get_error+0x20c>)
 800ddce:	4b08      	ldr	r3, [pc, #32]	; (800ddf0 <ai_platform_network_get_error+0x210>)
 800ddd0:	6011      	str	r1, [r2, #0]
 800ddd2:	6812      	ldr	r2, [r2, #0]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d0bb      	beq.n	800dd50 <ai_platform_network_get_error+0x170>
 800ddd8:	e7fe      	b.n	800ddd8 <ai_platform_network_get_error+0x1f8>
 800ddda:	bf00      	nop
 800dddc:	a1c00100 	.word	0xa1c00100
 800dde0:	e0042000 	.word	0xe0042000
 800dde4:	5c001000 	.word	0x5c001000
 800dde8:	40023000 	.word	0x40023000
 800ddec:	f407a5c2 	.word	0xf407a5c2
 800ddf0:	b5e8b5cd 	.word	0xb5e8b5cd
 800ddf4:	58024000 	.word	0x58024000

0800ddf8 <ai_platform_network_set_error>:
 800ddf8:	b110      	cbz	r0, 800de00 <ai_platform_network_set_error+0x8>
 800ddfa:	3010      	adds	r0, #16
 800ddfc:	f001 ba9a 	b.w	800f334 <core_set_error>
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop

0800de04 <ai_platform_inputs_get>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	b085      	sub	sp, #20
 800de0a:	9102      	str	r1, [sp, #8]
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f000 8093 	beq.w	800df38 <ai_platform_inputs_get+0x134>
 800de12:	4baa      	ldr	r3, [pc, #680]	; (800e0bc <ai_platform_inputs_get+0x2b8>)
 800de14:	4681      	mov	r9, r0
 800de16:	6802      	ldr	r2, [r0, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	f040 808d 	bne.w	800df38 <ai_platform_inputs_get+0x134>
 800de1e:	f7ff fe11 	bl	800da44 <_ai_platform_acquire_crc>
 800de22:	4ba7      	ldr	r3, [pc, #668]	; (800e0c0 <ai_platform_inputs_get+0x2bc>)
 800de24:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de2e:	189a      	adds	r2, r3, r2
 800de30:	2a01      	cmp	r2, #1
 800de32:	f240 80da 	bls.w	800dfea <ai_platform_inputs_get+0x1e6>
 800de36:	f240 4249 	movw	r2, #1097	; 0x449
 800de3a:	4293      	cmp	r3, r2
 800de3c:	f000 80d5 	beq.w	800dfea <ai_platform_inputs_get+0x1e6>
 800de40:	4aa0      	ldr	r2, [pc, #640]	; (800e0c4 <ai_platform_inputs_get+0x2c0>)
 800de42:	6813      	ldr	r3, [r2, #0]
 800de44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de48:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800de4c:	f000 80dc 	beq.w	800e008 <ai_platform_inputs_get+0x204>
 800de50:	6813      	ldr	r3, [r2, #0]
 800de52:	f240 4183 	movw	r1, #1155	; 0x483
 800de56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de5a:	428b      	cmp	r3, r1
 800de5c:	f000 810e 	beq.w	800e07c <ai_platform_inputs_get+0x278>
 800de60:	6813      	ldr	r3, [r2, #0]
 800de62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de66:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800de6a:	f000 8143 	beq.w	800e0f4 <ai_platform_inputs_get+0x2f0>
 800de6e:	6813      	ldr	r3, [r2, #0]
 800de70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 8113 	beq.w	800e0a0 <ai_platform_inputs_get+0x29c>
 800de7a:	f7ff fde5 	bl	800da48 <_ai_platform_release_crc>
 800de7e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 80d2 	beq.w	800e02c <ai_platform_inputs_get+0x228>
 800de88:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800de8c:	f1ba 0f00 	cmp.w	sl, #0
 800de90:	f000 80cc 	beq.w	800e02c <ai_platform_inputs_get+0x228>
 800de94:	2100      	movs	r1, #0
 800de96:	f8cd 900c 	str.w	r9, [sp, #12]
 800de9a:	460d      	mov	r5, r1
 800de9c:	4689      	mov	r9, r1
 800de9e:	e016      	b.n	800dece <ai_platform_inputs_get+0xca>
 800dea0:	9a01      	ldr	r2, [sp, #4]
 800dea2:	2301      	movs	r3, #1
 800dea4:	f848 3002 	str.w	r3, [r8, r2]
 800dea8:	69b2      	ldr	r2, [r6, #24]
 800deaa:	f04f 0301 	mov.w	r3, #1
 800deae:	6856      	ldr	r6, [r2, #4]
 800deb0:	3501      	adds	r5, #1
 800deb2:	f109 091c 	add.w	r9, r9, #28
 800deb6:	7523      	strb	r3, [r4, #20]
 800deb8:	2300      	movs	r3, #0
 800deba:	6962      	ldr	r2, [r4, #20]
 800debc:	60a7      	str	r7, [r4, #8]
 800debe:	f36b 221f 	bfi	r2, fp, #8, #24
 800dec2:	6126      	str	r6, [r4, #16]
 800dec4:	61a1      	str	r1, [r4, #24]
 800dec6:	60e3      	str	r3, [r4, #12]
 800dec8:	6162      	str	r2, [r4, #20]
 800deca:	e9c4 0c00 	strd	r0, ip, [r4]
 800dece:	f8ba 3000 	ldrh.w	r3, [sl]
 800ded2:	b2ac      	uxth	r4, r5
 800ded4:	42ab      	cmp	r3, r5
 800ded6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	f240 80b5 	bls.w	800e04a <ai_platform_inputs_get+0x246>
 800dee0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 80b0 	beq.w	800e04a <ai_platform_inputs_get+0x246>
 800deea:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800deee:	2e00      	cmp	r6, #0
 800def0:	f000 80ab 	beq.w	800e04a <ai_platform_inputs_get+0x246>
 800def4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800def8:	69b2      	ldr	r2, [r6, #24]
 800defa:	68f1      	ldr	r1, [r6, #12]
 800defc:	6810      	ldr	r0, [r2, #0]
 800defe:	9100      	str	r1, [sp, #0]
 800df00:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800df04:	68b3      	ldr	r3, [r6, #8]
 800df06:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800df0a:	444c      	add	r4, r9
 800df0c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800df10:	f008 f8e8 	bl	80160e4 <ai_array_to_buffer_fmt>
 800df14:	69b2      	ldr	r2, [r6, #24]
 800df16:	9900      	ldr	r1, [sp, #0]
 800df18:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800df1c:	2f00      	cmp	r7, #0
 800df1e:	d0c4      	beq.n	800deaa <ai_platform_inputs_get+0xa6>
 800df20:	2200      	movs	r2, #0
 800df22:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800df26:	6832      	ldr	r2, [r6, #0]
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	b112      	cbz	r2, 800df32 <ai_platform_inputs_get+0x12e>
 800df2c:	8852      	ldrh	r2, [r2, #2]
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d1b6      	bne.n	800dea0 <ai_platform_inputs_get+0x9c>
 800df32:	69b2      	ldr	r2, [r6, #24]
 800df34:	2700      	movs	r7, #0
 800df36:	e7b8      	b.n	800deaa <ai_platform_inputs_get+0xa6>
 800df38:	f7ff fd84 	bl	800da44 <_ai_platform_acquire_crc>
 800df3c:	4b60      	ldr	r3, [pc, #384]	; (800e0c0 <ai_platform_inputs_get+0x2bc>)
 800df3e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df48:	185a      	adds	r2, r3, r1
 800df4a:	2a01      	cmp	r2, #1
 800df4c:	d92a      	bls.n	800dfa4 <ai_platform_inputs_get+0x1a0>
 800df4e:	f240 4249 	movw	r2, #1097	; 0x449
 800df52:	4293      	cmp	r3, r2
 800df54:	d026      	beq.n	800dfa4 <ai_platform_inputs_get+0x1a0>
 800df56:	4a5b      	ldr	r2, [pc, #364]	; (800e0c4 <ai_platform_inputs_get+0x2c0>)
 800df58:	6813      	ldr	r3, [r2, #0]
 800df5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df5e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800df62:	d02c      	beq.n	800dfbe <ai_platform_inputs_get+0x1ba>
 800df64:	6813      	ldr	r3, [r2, #0]
 800df66:	f240 4183 	movw	r1, #1155	; 0x483
 800df6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df6e:	428b      	cmp	r3, r1
 800df70:	d073      	beq.n	800e05a <ai_platform_inputs_get+0x256>
 800df72:	6813      	ldr	r3, [r2, #0]
 800df74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df78:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800df7c:	f000 80ac 	beq.w	800e0d8 <ai_platform_inputs_get+0x2d4>
 800df80:	6813      	ldr	r3, [r2, #0]
 800df82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df86:	2b00      	cmp	r3, #0
 800df88:	d129      	bne.n	800dfde <ai_platform_inputs_get+0x1da>
 800df8a:	4a4f      	ldr	r2, [pc, #316]	; (800e0c8 <ai_platform_inputs_get+0x2c4>)
 800df8c:	2301      	movs	r3, #1
 800df8e:	6093      	str	r3, [r2, #8]
 800df90:	6893      	ldr	r3, [r2, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1fc      	bne.n	800df90 <ai_platform_inputs_get+0x18c>
 800df96:	494d      	ldr	r1, [pc, #308]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800df98:	4b4d      	ldr	r3, [pc, #308]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800df9a:	6011      	str	r1, [r2, #0]
 800df9c:	6812      	ldr	r2, [r2, #0]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d01d      	beq.n	800dfde <ai_platform_inputs_get+0x1da>
 800dfa2:	e7fe      	b.n	800dfa2 <ai_platform_inputs_get+0x19e>
 800dfa4:	4a48      	ldr	r2, [pc, #288]	; (800e0c8 <ai_platform_inputs_get+0x2c4>)
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	6093      	str	r3, [r2, #8]
 800dfaa:	6893      	ldr	r3, [r2, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1fc      	bne.n	800dfaa <ai_platform_inputs_get+0x1a6>
 800dfb0:	4946      	ldr	r1, [pc, #280]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800dfb2:	4b47      	ldr	r3, [pc, #284]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800dfb4:	6011      	str	r1, [r2, #0]
 800dfb6:	6812      	ldr	r2, [r2, #0]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d010      	beq.n	800dfde <ai_platform_inputs_get+0x1da>
 800dfbc:	e7fe      	b.n	800dfbc <ai_platform_inputs_get+0x1b8>
 800dfbe:	4a45      	ldr	r2, [pc, #276]	; (800e0d4 <ai_platform_inputs_get+0x2d0>)
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dfc6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1fb      	bne.n	800dfc6 <ai_platform_inputs_get+0x1c2>
 800dfce:	493f      	ldr	r1, [pc, #252]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800dfd0:	4b3f      	ldr	r3, [pc, #252]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800dfd2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dfd6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d113      	bne.n	800e006 <ai_platform_inputs_get+0x202>
 800dfde:	f7ff fd33 	bl	800da48 <_ai_platform_release_crc>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	b005      	add	sp, #20
 800dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfea:	4a37      	ldr	r2, [pc, #220]	; (800e0c8 <ai_platform_inputs_get+0x2c4>)
 800dfec:	2301      	movs	r3, #1
 800dfee:	6093      	str	r3, [r2, #8]
 800dff0:	6893      	ldr	r3, [r2, #8]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1fc      	bne.n	800dff0 <ai_platform_inputs_get+0x1ec>
 800dff6:	4b35      	ldr	r3, [pc, #212]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	4b35      	ldr	r3, [pc, #212]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800dffc:	6812      	ldr	r2, [r2, #0]
 800dffe:	429a      	cmp	r2, r3
 800e000:	f43f af3b 	beq.w	800de7a <ai_platform_inputs_get+0x76>
 800e004:	e7fe      	b.n	800e004 <ai_platform_inputs_get+0x200>
 800e006:	e7fe      	b.n	800e006 <ai_platform_inputs_get+0x202>
 800e008:	4a32      	ldr	r2, [pc, #200]	; (800e0d4 <ai_platform_inputs_get+0x2d0>)
 800e00a:	2301      	movs	r3, #1
 800e00c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e010:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1fb      	bne.n	800e010 <ai_platform_inputs_get+0x20c>
 800e018:	4b2c      	ldr	r3, [pc, #176]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800e01a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e01e:	4b2c      	ldr	r3, [pc, #176]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800e020:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e024:	429a      	cmp	r2, r3
 800e026:	f43f af28 	beq.w	800de7a <ai_platform_inputs_get+0x76>
 800e02a:	e7fe      	b.n	800e02a <ai_platform_inputs_get+0x226>
 800e02c:	2400      	movs	r4, #0
 800e02e:	2218      	movs	r2, #24
 800e030:	2111      	movs	r1, #17
 800e032:	f109 0010 	add.w	r0, r9, #16
 800e036:	f001 f97d 	bl	800f334 <core_set_error>
 800e03a:	4620      	mov	r0, r4
 800e03c:	9b02      	ldr	r3, [sp, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0d0      	beq.n	800dfe4 <ai_platform_inputs_get+0x1e0>
 800e042:	801c      	strh	r4, [r3, #0]
 800e044:	b005      	add	sp, #20
 800e046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e04e:	2c00      	cmp	r4, #0
 800e050:	d0ec      	beq.n	800e02c <ai_platform_inputs_get+0x228>
 800e052:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e056:	6858      	ldr	r0, [r3, #4]
 800e058:	e7f0      	b.n	800e03c <ai_platform_inputs_get+0x238>
 800e05a:	4a1e      	ldr	r2, [pc, #120]	; (800e0d4 <ai_platform_inputs_get+0x2d0>)
 800e05c:	2301      	movs	r3, #1
 800e05e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e062:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1fb      	bne.n	800e062 <ai_platform_inputs_get+0x25e>
 800e06a:	4918      	ldr	r1, [pc, #96]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800e06c:	4b18      	ldr	r3, [pc, #96]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800e06e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e072:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e076:	429a      	cmp	r2, r3
 800e078:	d0b1      	beq.n	800dfde <ai_platform_inputs_get+0x1da>
 800e07a:	e7fe      	b.n	800e07a <ai_platform_inputs_get+0x276>
 800e07c:	4a15      	ldr	r2, [pc, #84]	; (800e0d4 <ai_platform_inputs_get+0x2d0>)
 800e07e:	2301      	movs	r3, #1
 800e080:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e084:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1fb      	bne.n	800e084 <ai_platform_inputs_get+0x280>
 800e08c:	4b0f      	ldr	r3, [pc, #60]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800e08e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e092:	4b0f      	ldr	r3, [pc, #60]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800e094:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e098:	429a      	cmp	r2, r3
 800e09a:	f43f aeee 	beq.w	800de7a <ai_platform_inputs_get+0x76>
 800e09e:	e7fe      	b.n	800e09e <ai_platform_inputs_get+0x29a>
 800e0a0:	4a09      	ldr	r2, [pc, #36]	; (800e0c8 <ai_platform_inputs_get+0x2c4>)
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	6093      	str	r3, [r2, #8]
 800e0a6:	6893      	ldr	r3, [r2, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1fc      	bne.n	800e0a6 <ai_platform_inputs_get+0x2a2>
 800e0ac:	4b07      	ldr	r3, [pc, #28]	; (800e0cc <ai_platform_inputs_get+0x2c8>)
 800e0ae:	6013      	str	r3, [r2, #0]
 800e0b0:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <ai_platform_inputs_get+0x2cc>)
 800e0b2:	6812      	ldr	r2, [r2, #0]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	f43f aee0 	beq.w	800de7a <ai_platform_inputs_get+0x76>
 800e0ba:	e7fe      	b.n	800e0ba <ai_platform_inputs_get+0x2b6>
 800e0bc:	a1c00100 	.word	0xa1c00100
 800e0c0:	e0042000 	.word	0xe0042000
 800e0c4:	5c001000 	.word	0x5c001000
 800e0c8:	40023000 	.word	0x40023000
 800e0cc:	f407a5c2 	.word	0xf407a5c2
 800e0d0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e0d4:	58024000 	.word	0x58024000
 800e0d8:	4a0d      	ldr	r2, [pc, #52]	; (800e110 <ai_platform_inputs_get+0x30c>)
 800e0da:	2301      	movs	r3, #1
 800e0dc:	6093      	str	r3, [r2, #8]
 800e0de:	6893      	ldr	r3, [r2, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1fc      	bne.n	800e0de <ai_platform_inputs_get+0x2da>
 800e0e4:	490b      	ldr	r1, [pc, #44]	; (800e114 <ai_platform_inputs_get+0x310>)
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <ai_platform_inputs_get+0x314>)
 800e0e8:	6011      	str	r1, [r2, #0]
 800e0ea:	6812      	ldr	r2, [r2, #0]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	f43f af76 	beq.w	800dfde <ai_platform_inputs_get+0x1da>
 800e0f2:	e7fe      	b.n	800e0f2 <ai_platform_inputs_get+0x2ee>
 800e0f4:	4a06      	ldr	r2, [pc, #24]	; (800e110 <ai_platform_inputs_get+0x30c>)
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	6093      	str	r3, [r2, #8]
 800e0fa:	6893      	ldr	r3, [r2, #8]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d1fc      	bne.n	800e0fa <ai_platform_inputs_get+0x2f6>
 800e100:	4b04      	ldr	r3, [pc, #16]	; (800e114 <ai_platform_inputs_get+0x310>)
 800e102:	6013      	str	r3, [r2, #0]
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <ai_platform_inputs_get+0x314>)
 800e106:	6812      	ldr	r2, [r2, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	f43f aeb6 	beq.w	800de7a <ai_platform_inputs_get+0x76>
 800e10e:	e7fe      	b.n	800e10e <ai_platform_inputs_get+0x30a>
 800e110:	40023000 	.word	0x40023000
 800e114:	f407a5c2 	.word	0xf407a5c2
 800e118:	b5e8b5cd 	.word	0xb5e8b5cd

0800e11c <ai_platform_outputs_get>:
 800e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e120:	b085      	sub	sp, #20
 800e122:	9102      	str	r1, [sp, #8]
 800e124:	2800      	cmp	r0, #0
 800e126:	f000 808f 	beq.w	800e248 <ai_platform_outputs_get+0x12c>
 800e12a:	4ba8      	ldr	r3, [pc, #672]	; (800e3cc <ai_platform_outputs_get+0x2b0>)
 800e12c:	4681      	mov	r9, r0
 800e12e:	6802      	ldr	r2, [r0, #0]
 800e130:	429a      	cmp	r2, r3
 800e132:	f040 8089 	bne.w	800e248 <ai_platform_outputs_get+0x12c>
 800e136:	f7ff fc85 	bl	800da44 <_ai_platform_acquire_crc>
 800e13a:	4ba5      	ldr	r3, [pc, #660]	; (800e3d0 <ai_platform_outputs_get+0x2b4>)
 800e13c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e146:	189a      	adds	r2, r3, r2
 800e148:	2a01      	cmp	r2, #1
 800e14a:	f240 80d6 	bls.w	800e2fa <ai_platform_outputs_get+0x1de>
 800e14e:	f240 4249 	movw	r2, #1097	; 0x449
 800e152:	4293      	cmp	r3, r2
 800e154:	f000 80d1 	beq.w	800e2fa <ai_platform_outputs_get+0x1de>
 800e158:	4a9e      	ldr	r2, [pc, #632]	; (800e3d4 <ai_platform_outputs_get+0x2b8>)
 800e15a:	6813      	ldr	r3, [r2, #0]
 800e15c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e160:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e164:	f000 80d8 	beq.w	800e318 <ai_platform_outputs_get+0x1fc>
 800e168:	6813      	ldr	r3, [r2, #0]
 800e16a:	f240 4183 	movw	r1, #1155	; 0x483
 800e16e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e172:	428b      	cmp	r3, r1
 800e174:	f000 8109 	beq.w	800e38a <ai_platform_outputs_get+0x26e>
 800e178:	6813      	ldr	r3, [r2, #0]
 800e17a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e17e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e182:	f000 813f 	beq.w	800e404 <ai_platform_outputs_get+0x2e8>
 800e186:	6813      	ldr	r3, [r2, #0]
 800e188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 810e 	beq.w	800e3ae <ai_platform_outputs_get+0x292>
 800e192:	f7ff fc59 	bl	800da48 <_ai_platform_release_crc>
 800e196:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	f240 80db 	bls.w	800e356 <ai_platform_outputs_get+0x23a>
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800e1a6:	f8cd 900c 	str.w	r9, [sp, #12]
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	4689      	mov	r9, r1
 800e1ae:	e016      	b.n	800e1de <ai_platform_outputs_get+0xc2>
 800e1b0:	9a01      	ldr	r2, [sp, #4]
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	f848 3002 	str.w	r3, [r8, r2]
 800e1b8:	69b2      	ldr	r2, [r6, #24]
 800e1ba:	f04f 0301 	mov.w	r3, #1
 800e1be:	6856      	ldr	r6, [r2, #4]
 800e1c0:	3501      	adds	r5, #1
 800e1c2:	f109 091c 	add.w	r9, r9, #28
 800e1c6:	7523      	strb	r3, [r4, #20]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	6962      	ldr	r2, [r4, #20]
 800e1cc:	60a7      	str	r7, [r4, #8]
 800e1ce:	f36b 221f 	bfi	r2, fp, #8, #24
 800e1d2:	6126      	str	r6, [r4, #16]
 800e1d4:	61a1      	str	r1, [r4, #24]
 800e1d6:	60e3      	str	r3, [r4, #12]
 800e1d8:	6162      	str	r2, [r4, #20]
 800e1da:	e9c4 0c00 	strd	r0, ip, [r4]
 800e1de:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e1e2:	b2ac      	uxth	r4, r5
 800e1e4:	42ab      	cmp	r3, r5
 800e1e6:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	f240 80a6 	bls.w	800e33c <ai_platform_outputs_get+0x220>
 800e1f0:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 80a1 	beq.w	800e33c <ai_platform_outputs_get+0x220>
 800e1fa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e1fe:	2e00      	cmp	r6, #0
 800e200:	f000 809c 	beq.w	800e33c <ai_platform_outputs_get+0x220>
 800e204:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e208:	69b2      	ldr	r2, [r6, #24]
 800e20a:	68f1      	ldr	r1, [r6, #12]
 800e20c:	6810      	ldr	r0, [r2, #0]
 800e20e:	9100      	str	r1, [sp, #0]
 800e210:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e214:	68b3      	ldr	r3, [r6, #8]
 800e216:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e21a:	444c      	add	r4, r9
 800e21c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e220:	f007 ff60 	bl	80160e4 <ai_array_to_buffer_fmt>
 800e224:	69b2      	ldr	r2, [r6, #24]
 800e226:	9900      	ldr	r1, [sp, #0]
 800e228:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e22c:	2f00      	cmp	r7, #0
 800e22e:	d0c4      	beq.n	800e1ba <ai_platform_outputs_get+0x9e>
 800e230:	2200      	movs	r2, #0
 800e232:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e236:	6832      	ldr	r2, [r6, #0]
 800e238:	607a      	str	r2, [r7, #4]
 800e23a:	b112      	cbz	r2, 800e242 <ai_platform_outputs_get+0x126>
 800e23c:	8852      	ldrh	r2, [r2, #2]
 800e23e:	2a00      	cmp	r2, #0
 800e240:	d1b6      	bne.n	800e1b0 <ai_platform_outputs_get+0x94>
 800e242:	69b2      	ldr	r2, [r6, #24]
 800e244:	2700      	movs	r7, #0
 800e246:	e7b8      	b.n	800e1ba <ai_platform_outputs_get+0x9e>
 800e248:	f7ff fbfc 	bl	800da44 <_ai_platform_acquire_crc>
 800e24c:	4b60      	ldr	r3, [pc, #384]	; (800e3d0 <ai_platform_outputs_get+0x2b4>)
 800e24e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e258:	185a      	adds	r2, r3, r1
 800e25a:	2a01      	cmp	r2, #1
 800e25c:	d92a      	bls.n	800e2b4 <ai_platform_outputs_get+0x198>
 800e25e:	f240 4249 	movw	r2, #1097	; 0x449
 800e262:	4293      	cmp	r3, r2
 800e264:	d026      	beq.n	800e2b4 <ai_platform_outputs_get+0x198>
 800e266:	4a5b      	ldr	r2, [pc, #364]	; (800e3d4 <ai_platform_outputs_get+0x2b8>)
 800e268:	6813      	ldr	r3, [r2, #0]
 800e26a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e26e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e272:	d02c      	beq.n	800e2ce <ai_platform_outputs_get+0x1b2>
 800e274:	6813      	ldr	r3, [r2, #0]
 800e276:	f240 4183 	movw	r1, #1155	; 0x483
 800e27a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e27e:	428b      	cmp	r3, r1
 800e280:	d072      	beq.n	800e368 <ai_platform_outputs_get+0x24c>
 800e282:	6813      	ldr	r3, [r2, #0]
 800e284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e288:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e28c:	f000 80ac 	beq.w	800e3e8 <ai_platform_outputs_get+0x2cc>
 800e290:	6813      	ldr	r3, [r2, #0]
 800e292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e296:	2b00      	cmp	r3, #0
 800e298:	d129      	bne.n	800e2ee <ai_platform_outputs_get+0x1d2>
 800e29a:	4a4f      	ldr	r2, [pc, #316]	; (800e3d8 <ai_platform_outputs_get+0x2bc>)
 800e29c:	2301      	movs	r3, #1
 800e29e:	6093      	str	r3, [r2, #8]
 800e2a0:	6893      	ldr	r3, [r2, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1fc      	bne.n	800e2a0 <ai_platform_outputs_get+0x184>
 800e2a6:	494d      	ldr	r1, [pc, #308]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e2a8:	4b4d      	ldr	r3, [pc, #308]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e2aa:	6011      	str	r1, [r2, #0]
 800e2ac:	6812      	ldr	r2, [r2, #0]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d01d      	beq.n	800e2ee <ai_platform_outputs_get+0x1d2>
 800e2b2:	e7fe      	b.n	800e2b2 <ai_platform_outputs_get+0x196>
 800e2b4:	4a48      	ldr	r2, [pc, #288]	; (800e3d8 <ai_platform_outputs_get+0x2bc>)
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	6093      	str	r3, [r2, #8]
 800e2ba:	6893      	ldr	r3, [r2, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1fc      	bne.n	800e2ba <ai_platform_outputs_get+0x19e>
 800e2c0:	4946      	ldr	r1, [pc, #280]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e2c2:	4b47      	ldr	r3, [pc, #284]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e2c4:	6011      	str	r1, [r2, #0]
 800e2c6:	6812      	ldr	r2, [r2, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d010      	beq.n	800e2ee <ai_platform_outputs_get+0x1d2>
 800e2cc:	e7fe      	b.n	800e2cc <ai_platform_outputs_get+0x1b0>
 800e2ce:	4a45      	ldr	r2, [pc, #276]	; (800e3e4 <ai_platform_outputs_get+0x2c8>)
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e2d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1fb      	bne.n	800e2d6 <ai_platform_outputs_get+0x1ba>
 800e2de:	493f      	ldr	r1, [pc, #252]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e2e0:	4b3f      	ldr	r3, [pc, #252]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e2e2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e2e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d113      	bne.n	800e316 <ai_platform_outputs_get+0x1fa>
 800e2ee:	f7ff fbab 	bl	800da48 <_ai_platform_release_crc>
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	b005      	add	sp, #20
 800e2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fa:	4a37      	ldr	r2, [pc, #220]	; (800e3d8 <ai_platform_outputs_get+0x2bc>)
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	6093      	str	r3, [r2, #8]
 800e300:	6893      	ldr	r3, [r2, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1fc      	bne.n	800e300 <ai_platform_outputs_get+0x1e4>
 800e306:	4b35      	ldr	r3, [pc, #212]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	4b35      	ldr	r3, [pc, #212]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e30c:	6812      	ldr	r2, [r2, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	f43f af3f 	beq.w	800e192 <ai_platform_outputs_get+0x76>
 800e314:	e7fe      	b.n	800e314 <ai_platform_outputs_get+0x1f8>
 800e316:	e7fe      	b.n	800e316 <ai_platform_outputs_get+0x1fa>
 800e318:	4a32      	ldr	r2, [pc, #200]	; (800e3e4 <ai_platform_outputs_get+0x2c8>)
 800e31a:	2301      	movs	r3, #1
 800e31c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e320:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1fb      	bne.n	800e320 <ai_platform_outputs_get+0x204>
 800e328:	4b2c      	ldr	r3, [pc, #176]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e32a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e32e:	4b2c      	ldr	r3, [pc, #176]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e330:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e334:	429a      	cmp	r2, r3
 800e336:	f43f af2c 	beq.w	800e192 <ai_platform_outputs_get+0x76>
 800e33a:	e7fe      	b.n	800e33a <ai_platform_outputs_get+0x21e>
 800e33c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e340:	b14c      	cbz	r4, 800e356 <ai_platform_outputs_get+0x23a>
 800e342:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e346:	6858      	ldr	r0, [r3, #4]
 800e348:	9b02      	ldr	r3, [sp, #8]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0d2      	beq.n	800e2f4 <ai_platform_outputs_get+0x1d8>
 800e34e:	801c      	strh	r4, [r3, #0]
 800e350:	b005      	add	sp, #20
 800e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e356:	2400      	movs	r4, #0
 800e358:	2218      	movs	r2, #24
 800e35a:	2111      	movs	r1, #17
 800e35c:	f109 0010 	add.w	r0, r9, #16
 800e360:	f000 ffe8 	bl	800f334 <core_set_error>
 800e364:	4620      	mov	r0, r4
 800e366:	e7ef      	b.n	800e348 <ai_platform_outputs_get+0x22c>
 800e368:	4a1e      	ldr	r2, [pc, #120]	; (800e3e4 <ai_platform_outputs_get+0x2c8>)
 800e36a:	2301      	movs	r3, #1
 800e36c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e370:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1fb      	bne.n	800e370 <ai_platform_outputs_get+0x254>
 800e378:	4918      	ldr	r1, [pc, #96]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e37a:	4b19      	ldr	r3, [pc, #100]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e37c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e380:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e384:	429a      	cmp	r2, r3
 800e386:	d0b2      	beq.n	800e2ee <ai_platform_outputs_get+0x1d2>
 800e388:	e7fe      	b.n	800e388 <ai_platform_outputs_get+0x26c>
 800e38a:	4a16      	ldr	r2, [pc, #88]	; (800e3e4 <ai_platform_outputs_get+0x2c8>)
 800e38c:	2301      	movs	r3, #1
 800e38e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e392:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1fb      	bne.n	800e392 <ai_platform_outputs_get+0x276>
 800e39a:	4b10      	ldr	r3, [pc, #64]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e39c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e3a0:	4b0f      	ldr	r3, [pc, #60]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e3a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	f43f aef3 	beq.w	800e192 <ai_platform_outputs_get+0x76>
 800e3ac:	e7fe      	b.n	800e3ac <ai_platform_outputs_get+0x290>
 800e3ae:	4a0a      	ldr	r2, [pc, #40]	; (800e3d8 <ai_platform_outputs_get+0x2bc>)
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	6093      	str	r3, [r2, #8]
 800e3b4:	6893      	ldr	r3, [r2, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1fc      	bne.n	800e3b4 <ai_platform_outputs_get+0x298>
 800e3ba:	4b08      	ldr	r3, [pc, #32]	; (800e3dc <ai_platform_outputs_get+0x2c0>)
 800e3bc:	6013      	str	r3, [r2, #0]
 800e3be:	4b08      	ldr	r3, [pc, #32]	; (800e3e0 <ai_platform_outputs_get+0x2c4>)
 800e3c0:	6812      	ldr	r2, [r2, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	f43f aee5 	beq.w	800e192 <ai_platform_outputs_get+0x76>
 800e3c8:	e7fe      	b.n	800e3c8 <ai_platform_outputs_get+0x2ac>
 800e3ca:	bf00      	nop
 800e3cc:	a1c00100 	.word	0xa1c00100
 800e3d0:	e0042000 	.word	0xe0042000
 800e3d4:	5c001000 	.word	0x5c001000
 800e3d8:	40023000 	.word	0x40023000
 800e3dc:	f407a5c2 	.word	0xf407a5c2
 800e3e0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e3e4:	58024000 	.word	0x58024000
 800e3e8:	4a0d      	ldr	r2, [pc, #52]	; (800e420 <ai_platform_outputs_get+0x304>)
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	6093      	str	r3, [r2, #8]
 800e3ee:	6893      	ldr	r3, [r2, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1fc      	bne.n	800e3ee <ai_platform_outputs_get+0x2d2>
 800e3f4:	490b      	ldr	r1, [pc, #44]	; (800e424 <ai_platform_outputs_get+0x308>)
 800e3f6:	4b0c      	ldr	r3, [pc, #48]	; (800e428 <ai_platform_outputs_get+0x30c>)
 800e3f8:	6011      	str	r1, [r2, #0]
 800e3fa:	6812      	ldr	r2, [r2, #0]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	f43f af76 	beq.w	800e2ee <ai_platform_outputs_get+0x1d2>
 800e402:	e7fe      	b.n	800e402 <ai_platform_outputs_get+0x2e6>
 800e404:	4a06      	ldr	r2, [pc, #24]	; (800e420 <ai_platform_outputs_get+0x304>)
 800e406:	2301      	movs	r3, #1
 800e408:	6093      	str	r3, [r2, #8]
 800e40a:	6893      	ldr	r3, [r2, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1fc      	bne.n	800e40a <ai_platform_outputs_get+0x2ee>
 800e410:	4b04      	ldr	r3, [pc, #16]	; (800e424 <ai_platform_outputs_get+0x308>)
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	4b04      	ldr	r3, [pc, #16]	; (800e428 <ai_platform_outputs_get+0x30c>)
 800e416:	6812      	ldr	r2, [r2, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	f43f aeba 	beq.w	800e192 <ai_platform_outputs_get+0x76>
 800e41e:	e7fe      	b.n	800e41e <ai_platform_outputs_get+0x302>
 800e420:	40023000 	.word	0x40023000
 800e424:	f407a5c2 	.word	0xf407a5c2
 800e428:	b5e8b5cd 	.word	0xb5e8b5cd

0800e42c <ai_platform_network_create>:
 800e42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e430:	b083      	sub	sp, #12
 800e432:	4604      	mov	r4, r0
 800e434:	4615      	mov	r5, r2
 800e436:	461e      	mov	r6, r3
 800e438:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e43c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e440:	f7ff fb00 	bl	800da44 <_ai_platform_acquire_crc>
 800e444:	2800      	cmp	r0, #0
 800e446:	f000 80bd 	beq.w	800e5c4 <ai_platform_network_create+0x198>
 800e44a:	4ba5      	ldr	r3, [pc, #660]	; (800e6e0 <ai_platform_network_create+0x2b4>)
 800e44c:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800e450:	4601      	mov	r1, r0
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e458:	eb03 020c 	add.w	r2, r3, ip
 800e45c:	2a01      	cmp	r2, #1
 800e45e:	f240 80a8 	bls.w	800e5b2 <ai_platform_network_create+0x186>
 800e462:	f240 4249 	movw	r2, #1097	; 0x449
 800e466:	4293      	cmp	r3, r2
 800e468:	f000 80a3 	beq.w	800e5b2 <ai_platform_network_create+0x186>
 800e46c:	4a9d      	ldr	r2, [pc, #628]	; (800e6e4 <ai_platform_network_create+0x2b8>)
 800e46e:	6813      	ldr	r3, [r2, #0]
 800e470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e474:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e478:	f000 80b9 	beq.w	800e5ee <ai_platform_network_create+0x1c2>
 800e47c:	6813      	ldr	r3, [r2, #0]
 800e47e:	f240 4c83 	movw	ip, #1155	; 0x483
 800e482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e486:	4563      	cmp	r3, ip
 800e488:	f000 80a1 	beq.w	800e5ce <ai_platform_network_create+0x1a2>
 800e48c:	6813      	ldr	r3, [r2, #0]
 800e48e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e492:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e496:	f000 8153 	beq.w	800e740 <ai_platform_network_create+0x314>
 800e49a:	6813      	ldr	r3, [r2, #0]
 800e49c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f040 808d 	bne.w	800e5c0 <ai_platform_network_create+0x194>
 800e4a6:	4a90      	ldr	r2, [pc, #576]	; (800e6e8 <ai_platform_network_create+0x2bc>)
 800e4a8:	2318      	movs	r3, #24
 800e4aa:	6093      	str	r3, [r2, #8]
 800e4ac:	6893      	ldr	r3, [r2, #8]
 800e4ae:	2b18      	cmp	r3, #24
 800e4b0:	f040 8086 	bne.w	800e5c0 <ai_platform_network_create+0x194>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	6093      	str	r3, [r2, #8]
 800e4b8:	6893      	ldr	r3, [r2, #8]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1fc      	bne.n	800e4b8 <ai_platform_network_create+0x8c>
 800e4be:	4608      	mov	r0, r1
 800e4c0:	f7ff fac2 	bl	800da48 <_ai_platform_release_crc>
 800e4c4:	f7ff fabe 	bl	800da44 <_ai_platform_acquire_crc>
 800e4c8:	4b85      	ldr	r3, [pc, #532]	; (800e6e0 <ai_platform_network_create+0x2b4>)
 800e4ca:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4d4:	189a      	adds	r2, r3, r2
 800e4d6:	2a01      	cmp	r2, #1
 800e4d8:	f240 809f 	bls.w	800e61a <ai_platform_network_create+0x1ee>
 800e4dc:	f240 4249 	movw	r2, #1097	; 0x449
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	f000 809a 	beq.w	800e61a <ai_platform_network_create+0x1ee>
 800e4e6:	4a7f      	ldr	r2, [pc, #508]	; (800e6e4 <ai_platform_network_create+0x2b8>)
 800e4e8:	6813      	ldr	r3, [r2, #0]
 800e4ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4ee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e4f2:	f000 80a0 	beq.w	800e636 <ai_platform_network_create+0x20a>
 800e4f6:	6813      	ldr	r3, [r2, #0]
 800e4f8:	f240 4183 	movw	r1, #1155	; 0x483
 800e4fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e500:	428b      	cmp	r3, r1
 800e502:	f000 80bf 	beq.w	800e684 <ai_platform_network_create+0x258>
 800e506:	6813      	ldr	r3, [r2, #0]
 800e508:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e50c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e510:	f000 8123 	beq.w	800e75a <ai_platform_network_create+0x32e>
 800e514:	6813      	ldr	r3, [r2, #0]
 800e516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f000 80c4 	beq.w	800e6a8 <ai_platform_network_create+0x27c>
 800e520:	f7ff fa92 	bl	800da48 <_ai_platform_release_crc>
 800e524:	2c00      	cmp	r4, #0
 800e526:	f000 80aa 	beq.w	800e67e <ai_platform_network_create+0x252>
 800e52a:	4b70      	ldr	r3, [pc, #448]	; (800e6ec <ai_platform_network_create+0x2c0>)
 800e52c:	602b      	str	r3, [r5, #0]
 800e52e:	6025      	str	r5, [r4, #0]
 800e530:	f000 fef8 	bl	800f324 <core_init>
 800e534:	2800      	cmp	r0, #0
 800e536:	f000 8090 	beq.w	800e65a <ai_platform_network_create+0x22e>
 800e53a:	f7ff fa83 	bl	800da44 <_ai_platform_acquire_crc>
 800e53e:	4b68      	ldr	r3, [pc, #416]	; (800e6e0 <ai_platform_network_create+0x2b4>)
 800e540:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e54a:	185a      	adds	r2, r3, r1
 800e54c:	2a01      	cmp	r2, #1
 800e54e:	f240 80b9 	bls.w	800e6c4 <ai_platform_network_create+0x298>
 800e552:	f240 4249 	movw	r2, #1097	; 0x449
 800e556:	4293      	cmp	r3, r2
 800e558:	f000 80b4 	beq.w	800e6c4 <ai_platform_network_create+0x298>
 800e55c:	4a61      	ldr	r2, [pc, #388]	; (800e6e4 <ai_platform_network_create+0x2b8>)
 800e55e:	6813      	ldr	r3, [r2, #0]
 800e560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e564:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e568:	f000 80c8 	beq.w	800e6fc <ai_platform_network_create+0x2d0>
 800e56c:	6813      	ldr	r3, [r2, #0]
 800e56e:	f240 4183 	movw	r1, #1155	; 0x483
 800e572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e576:	428b      	cmp	r3, r1
 800e578:	f000 8107 	beq.w	800e78a <ai_platform_network_create+0x35e>
 800e57c:	6813      	ldr	r3, [r2, #0]
 800e57e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e582:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e586:	f000 8111 	beq.w	800e7ac <ai_platform_network_create+0x380>
 800e58a:	6813      	ldr	r3, [r2, #0]
 800e58c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e590:	2b00      	cmp	r3, #0
 800e592:	f040 80c3 	bne.w	800e71c <ai_platform_network_create+0x2f0>
 800e596:	4b54      	ldr	r3, [pc, #336]	; (800e6e8 <ai_platform_network_create+0x2bc>)
 800e598:	2201      	movs	r2, #1
 800e59a:	609a      	str	r2, [r3, #8]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	d1fc      	bne.n	800e59c <ai_platform_network_create+0x170>
 800e5a2:	4a53      	ldr	r2, [pc, #332]	; (800e6f0 <ai_platform_network_create+0x2c4>)
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	4b52      	ldr	r3, [pc, #328]	; (800e6f4 <ai_platform_network_create+0x2c8>)
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	f000 80b6 	beq.w	800e71c <ai_platform_network_create+0x2f0>
 800e5b0:	e7fe      	b.n	800e5b0 <ai_platform_network_create+0x184>
 800e5b2:	4b4d      	ldr	r3, [pc, #308]	; (800e6e8 <ai_platform_network_create+0x2bc>)
 800e5b4:	2218      	movs	r2, #24
 800e5b6:	609a      	str	r2, [r3, #8]
 800e5b8:	689a      	ldr	r2, [r3, #8]
 800e5ba:	2a18      	cmp	r2, #24
 800e5bc:	d027      	beq.n	800e60e <ai_platform_network_create+0x1e2>
 800e5be:	4608      	mov	r0, r1
 800e5c0:	f7ff fa42 	bl	800da48 <_ai_platform_release_crc>
 800e5c4:	f244 1033 	movw	r0, #16691	; 0x4133
 800e5c8:	b003      	add	sp, #12
 800e5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5ce:	4a4a      	ldr	r2, [pc, #296]	; (800e6f8 <ai_platform_network_create+0x2cc>)
 800e5d0:	2318      	movs	r3, #24
 800e5d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e5d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e5da:	2b18      	cmp	r3, #24
 800e5dc:	d1f0      	bne.n	800e5c0 <ai_platform_network_create+0x194>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e5e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1fb      	bne.n	800e5e4 <ai_platform_network_create+0x1b8>
 800e5ec:	e767      	b.n	800e4be <ai_platform_network_create+0x92>
 800e5ee:	4a42      	ldr	r2, [pc, #264]	; (800e6f8 <ai_platform_network_create+0x2cc>)
 800e5f0:	2318      	movs	r3, #24
 800e5f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e5f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e5fa:	2b18      	cmp	r3, #24
 800e5fc:	d1e0      	bne.n	800e5c0 <ai_platform_network_create+0x194>
 800e5fe:	2301      	movs	r3, #1
 800e600:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e604:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1fb      	bne.n	800e604 <ai_platform_network_create+0x1d8>
 800e60c:	e757      	b.n	800e4be <ai_platform_network_create+0x92>
 800e60e:	2201      	movs	r2, #1
 800e610:	609a      	str	r2, [r3, #8]
 800e612:	689a      	ldr	r2, [r3, #8]
 800e614:	2a00      	cmp	r2, #0
 800e616:	d1fc      	bne.n	800e612 <ai_platform_network_create+0x1e6>
 800e618:	e751      	b.n	800e4be <ai_platform_network_create+0x92>
 800e61a:	4a33      	ldr	r2, [pc, #204]	; (800e6e8 <ai_platform_network_create+0x2bc>)
 800e61c:	2301      	movs	r3, #1
 800e61e:	6093      	str	r3, [r2, #8]
 800e620:	6891      	ldr	r1, [r2, #8]
 800e622:	2900      	cmp	r1, #0
 800e624:	d1fc      	bne.n	800e620 <ai_platform_network_create+0x1f4>
 800e626:	4b32      	ldr	r3, [pc, #200]	; (800e6f0 <ai_platform_network_create+0x2c4>)
 800e628:	6013      	str	r3, [r2, #0]
 800e62a:	4b32      	ldr	r3, [pc, #200]	; (800e6f4 <ai_platform_network_create+0x2c8>)
 800e62c:	6812      	ldr	r2, [r2, #0]
 800e62e:	429a      	cmp	r2, r3
 800e630:	f43f af76 	beq.w	800e520 <ai_platform_network_create+0xf4>
 800e634:	e7fe      	b.n	800e634 <ai_platform_network_create+0x208>
 800e636:	4a30      	ldr	r2, [pc, #192]	; (800e6f8 <ai_platform_network_create+0x2cc>)
 800e638:	2301      	movs	r3, #1
 800e63a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e63e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1fb      	bne.n	800e63e <ai_platform_network_create+0x212>
 800e646:	4b2a      	ldr	r3, [pc, #168]	; (800e6f0 <ai_platform_network_create+0x2c4>)
 800e648:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e64c:	4b29      	ldr	r3, [pc, #164]	; (800e6f4 <ai_platform_network_create+0x2c8>)
 800e64e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e652:	429a      	cmp	r2, r3
 800e654:	f43f af64 	beq.w	800e520 <ai_platform_network_create+0xf4>
 800e658:	e7fe      	b.n	800e658 <ai_platform_network_create+0x22c>
 800e65a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800e65e:	2300      	movs	r3, #0
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	2410      	movs	r4, #16
 800e664:	4642      	mov	r2, r8
 800e666:	4639      	mov	r1, r7
 800e668:	4630      	mov	r0, r6
 800e66a:	f007 fddf 	bl	801622c <ai_version_get>
 800e66e:	4603      	mov	r3, r0
 800e670:	2000      	movs	r0, #0
 800e672:	64ab      	str	r3, [r5, #72]	; 0x48
 800e674:	f369 0007 	bfi	r0, r9, #0, #8
 800e678:	f364 201f 	bfi	r0, r4, #8, #24
 800e67c:	e7a4      	b.n	800e5c8 <ai_platform_network_create+0x19c>
 800e67e:	f241 0010 	movw	r0, #4112	; 0x1010
 800e682:	e7a1      	b.n	800e5c8 <ai_platform_network_create+0x19c>
 800e684:	4a1c      	ldr	r2, [pc, #112]	; (800e6f8 <ai_platform_network_create+0x2cc>)
 800e686:	2301      	movs	r3, #1
 800e688:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e68c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1fb      	bne.n	800e68c <ai_platform_network_create+0x260>
 800e694:	4b16      	ldr	r3, [pc, #88]	; (800e6f0 <ai_platform_network_create+0x2c4>)
 800e696:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e69a:	4b16      	ldr	r3, [pc, #88]	; (800e6f4 <ai_platform_network_create+0x2c8>)
 800e69c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	f43f af3d 	beq.w	800e520 <ai_platform_network_create+0xf4>
 800e6a6:	e7fe      	b.n	800e6a6 <ai_platform_network_create+0x27a>
 800e6a8:	4a0f      	ldr	r2, [pc, #60]	; (800e6e8 <ai_platform_network_create+0x2bc>)
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	6093      	str	r3, [r2, #8]
 800e6ae:	6893      	ldr	r3, [r2, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1fc      	bne.n	800e6ae <ai_platform_network_create+0x282>
 800e6b4:	4b0e      	ldr	r3, [pc, #56]	; (800e6f0 <ai_platform_network_create+0x2c4>)
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	4b0e      	ldr	r3, [pc, #56]	; (800e6f4 <ai_platform_network_create+0x2c8>)
 800e6ba:	6812      	ldr	r2, [r2, #0]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	f43f af2f 	beq.w	800e520 <ai_platform_network_create+0xf4>
 800e6c2:	e7fe      	b.n	800e6c2 <ai_platform_network_create+0x296>
 800e6c4:	4a08      	ldr	r2, [pc, #32]	; (800e6e8 <ai_platform_network_create+0x2bc>)
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	6093      	str	r3, [r2, #8]
 800e6ca:	6893      	ldr	r3, [r2, #8]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1fc      	bne.n	800e6ca <ai_platform_network_create+0x29e>
 800e6d0:	4b07      	ldr	r3, [pc, #28]	; (800e6f0 <ai_platform_network_create+0x2c4>)
 800e6d2:	6013      	str	r3, [r2, #0]
 800e6d4:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <ai_platform_network_create+0x2c8>)
 800e6d6:	6812      	ldr	r2, [r2, #0]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d01f      	beq.n	800e71c <ai_platform_network_create+0x2f0>
 800e6dc:	e7fe      	b.n	800e6dc <ai_platform_network_create+0x2b0>
 800e6de:	bf00      	nop
 800e6e0:	e0042000 	.word	0xe0042000
 800e6e4:	5c001000 	.word	0x5c001000
 800e6e8:	40023000 	.word	0x40023000
 800e6ec:	a1c00100 	.word	0xa1c00100
 800e6f0:	f407a5c2 	.word	0xf407a5c2
 800e6f4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e6f8:	58024000 	.word	0x58024000
 800e6fc:	4a33      	ldr	r2, [pc, #204]	; (800e7cc <ai_platform_network_create+0x3a0>)
 800e6fe:	2301      	movs	r3, #1
 800e700:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e704:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1fb      	bne.n	800e704 <ai_platform_network_create+0x2d8>
 800e70c:	4b30      	ldr	r3, [pc, #192]	; (800e7d0 <ai_platform_network_create+0x3a4>)
 800e70e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e712:	4b30      	ldr	r3, [pc, #192]	; (800e7d4 <ai_platform_network_create+0x3a8>)
 800e714:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e718:	429a      	cmp	r2, r3
 800e71a:	d12c      	bne.n	800e776 <ai_platform_network_create+0x34a>
 800e71c:	f7ff f994 	bl	800da48 <_ai_platform_release_crc>
 800e720:	2200      	movs	r2, #0
 800e722:	4639      	mov	r1, r7
 800e724:	4630      	mov	r0, r6
 800e726:	f007 fd81 	bl	801622c <ai_version_get>
 800e72a:	4681      	mov	r9, r0
 800e72c:	2200      	movs	r2, #0
 800e72e:	2105      	movs	r1, #5
 800e730:	2001      	movs	r0, #1
 800e732:	f007 fd7b 	bl	801622c <ai_version_get>
 800e736:	4581      	cmp	r9, r0
 800e738:	d01e      	beq.n	800e778 <ai_platform_network_create+0x34c>
 800e73a:	f04f 0901 	mov.w	r9, #1
 800e73e:	e78e      	b.n	800e65e <ai_platform_network_create+0x232>
 800e740:	4b25      	ldr	r3, [pc, #148]	; (800e7d8 <ai_platform_network_create+0x3ac>)
 800e742:	2218      	movs	r2, #24
 800e744:	609a      	str	r2, [r3, #8]
 800e746:	689a      	ldr	r2, [r3, #8]
 800e748:	2a18      	cmp	r2, #24
 800e74a:	f47f af39 	bne.w	800e5c0 <ai_platform_network_create+0x194>
 800e74e:	2201      	movs	r2, #1
 800e750:	609a      	str	r2, [r3, #8]
 800e752:	689a      	ldr	r2, [r3, #8]
 800e754:	2a00      	cmp	r2, #0
 800e756:	d1fc      	bne.n	800e752 <ai_platform_network_create+0x326>
 800e758:	e6b1      	b.n	800e4be <ai_platform_network_create+0x92>
 800e75a:	4a1f      	ldr	r2, [pc, #124]	; (800e7d8 <ai_platform_network_create+0x3ac>)
 800e75c:	2301      	movs	r3, #1
 800e75e:	6093      	str	r3, [r2, #8]
 800e760:	6893      	ldr	r3, [r2, #8]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1fc      	bne.n	800e760 <ai_platform_network_create+0x334>
 800e766:	4b1a      	ldr	r3, [pc, #104]	; (800e7d0 <ai_platform_network_create+0x3a4>)
 800e768:	6013      	str	r3, [r2, #0]
 800e76a:	4b1a      	ldr	r3, [pc, #104]	; (800e7d4 <ai_platform_network_create+0x3a8>)
 800e76c:	6812      	ldr	r2, [r2, #0]
 800e76e:	429a      	cmp	r2, r3
 800e770:	f43f aed6 	beq.w	800e520 <ai_platform_network_create+0xf4>
 800e774:	e7fe      	b.n	800e774 <ai_platform_network_create+0x348>
 800e776:	e7fe      	b.n	800e776 <ai_platform_network_create+0x34a>
 800e778:	4b18      	ldr	r3, [pc, #96]	; (800e7dc <ai_platform_network_create+0x3b0>)
 800e77a:	a801      	add	r0, sp, #4
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	f000 fef9 	bl	800f574 <ai_check_custom_types>
 800e782:	b300      	cbz	r0, 800e7c6 <ai_platform_network_create+0x39a>
 800e784:	2400      	movs	r4, #0
 800e786:	46a1      	mov	r9, r4
 800e788:	e76c      	b.n	800e664 <ai_platform_network_create+0x238>
 800e78a:	4b10      	ldr	r3, [pc, #64]	; (800e7cc <ai_platform_network_create+0x3a0>)
 800e78c:	2201      	movs	r2, #1
 800e78e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800e792:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800e796:	2a00      	cmp	r2, #0
 800e798:	d1fb      	bne.n	800e792 <ai_platform_network_create+0x366>
 800e79a:	4a0d      	ldr	r2, [pc, #52]	; (800e7d0 <ai_platform_network_create+0x3a4>)
 800e79c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800e7a0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800e7a4:	4b0b      	ldr	r3, [pc, #44]	; (800e7d4 <ai_platform_network_create+0x3a8>)
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d0b8      	beq.n	800e71c <ai_platform_network_create+0x2f0>
 800e7aa:	e7fe      	b.n	800e7aa <ai_platform_network_create+0x37e>
 800e7ac:	4b0a      	ldr	r3, [pc, #40]	; (800e7d8 <ai_platform_network_create+0x3ac>)
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	609a      	str	r2, [r3, #8]
 800e7b2:	689a      	ldr	r2, [r3, #8]
 800e7b4:	2a00      	cmp	r2, #0
 800e7b6:	d1fc      	bne.n	800e7b2 <ai_platform_network_create+0x386>
 800e7b8:	4a05      	ldr	r2, [pc, #20]	; (800e7d0 <ai_platform_network_create+0x3a4>)
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	4b05      	ldr	r3, [pc, #20]	; (800e7d4 <ai_platform_network_create+0x3a8>)
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d0ab      	beq.n	800e71c <ai_platform_network_create+0x2f0>
 800e7c4:	e7fe      	b.n	800e7c4 <ai_platform_network_create+0x398>
 800e7c6:	f04f 0902 	mov.w	r9, #2
 800e7ca:	e748      	b.n	800e65e <ai_platform_network_create+0x232>
 800e7cc:	58024000 	.word	0x58024000
 800e7d0:	f407a5c2 	.word	0xf407a5c2
 800e7d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e7d8:	40023000 	.word	0x40023000
 800e7dc:	84048403 	.word	0x84048403

0800e7e0 <ai_platform_network_init>:
 800e7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d052      	beq.n	800e88e <ai_platform_network_init+0xae>
 800e7e8:	4bab      	ldr	r3, [pc, #684]	; (800ea98 <ai_platform_network_init+0x2b8>)
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	6802      	ldr	r2, [r0, #0]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d14d      	bne.n	800e88e <ai_platform_network_init+0xae>
 800e7f2:	460d      	mov	r5, r1
 800e7f4:	f7ff f926 	bl	800da44 <_ai_platform_acquire_crc>
 800e7f8:	4ba8      	ldr	r3, [pc, #672]	; (800ea9c <ai_platform_network_init+0x2bc>)
 800e7fa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e804:	189a      	adds	r2, r3, r2
 800e806:	2a01      	cmp	r2, #1
 800e808:	f240 809b 	bls.w	800e942 <ai_platform_network_init+0x162>
 800e80c:	f240 4249 	movw	r2, #1097	; 0x449
 800e810:	4293      	cmp	r3, r2
 800e812:	f000 8096 	beq.w	800e942 <ai_platform_network_init+0x162>
 800e816:	4aa2      	ldr	r2, [pc, #648]	; (800eaa0 <ai_platform_network_init+0x2c0>)
 800e818:	6813      	ldr	r3, [r2, #0]
 800e81a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e81e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e822:	f000 809d 	beq.w	800e960 <ai_platform_network_init+0x180>
 800e826:	6813      	ldr	r3, [r2, #0]
 800e828:	f240 4183 	movw	r1, #1155	; 0x483
 800e82c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e830:	428b      	cmp	r3, r1
 800e832:	f000 80e4 	beq.w	800e9fe <ai_platform_network_init+0x21e>
 800e836:	6813      	ldr	r3, [r2, #0]
 800e838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e83c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e840:	f000 811b 	beq.w	800ea7a <ai_platform_network_init+0x29a>
 800e844:	6813      	ldr	r3, [r2, #0]
 800e846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 80f9 	beq.w	800ea42 <ai_platform_network_init+0x262>
 800e850:	f7ff f8fa 	bl	800da48 <_ai_platform_release_crc>
 800e854:	2d00      	cmp	r5, #0
 800e856:	f000 8147 	beq.w	800eae8 <ai_platform_network_init+0x308>
 800e85a:	4b92      	ldr	r3, [pc, #584]	; (800eaa4 <ai_platform_network_init+0x2c4>)
 800e85c:	682a      	ldr	r2, [r5, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	f040 8090 	bne.w	800e984 <ai_platform_network_init+0x1a4>
 800e864:	692b      	ldr	r3, [r5, #16]
 800e866:	89ae      	ldrh	r6, [r5, #12]
 800e868:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800e86c:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800e870:	62a3      	str	r3, [r4, #40]	; 0x28
 800e872:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800e876:	2303      	movs	r3, #3
 800e878:	84a6      	strh	r6, [r4, #36]	; 0x24
 800e87a:	4626      	mov	r6, r4
 800e87c:	4620      	mov	r0, r4
 800e87e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800e882:	60e3      	str	r3, [r4, #12]
 800e884:	f000 fe9e 	bl	800f5c4 <ai_layers_init_all>
 800e888:	4630      	mov	r0, r6
 800e88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e88e:	f7ff f8d9 	bl	800da44 <_ai_platform_acquire_crc>
 800e892:	4b82      	ldr	r3, [pc, #520]	; (800ea9c <ai_platform_network_init+0x2bc>)
 800e894:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e89e:	185a      	adds	r2, r3, r1
 800e8a0:	2a01      	cmp	r2, #1
 800e8a2:	d92b      	bls.n	800e8fc <ai_platform_network_init+0x11c>
 800e8a4:	f240 4249 	movw	r2, #1097	; 0x449
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d027      	beq.n	800e8fc <ai_platform_network_init+0x11c>
 800e8ac:	4a7c      	ldr	r2, [pc, #496]	; (800eaa0 <ai_platform_network_init+0x2c0>)
 800e8ae:	6813      	ldr	r3, [r2, #0]
 800e8b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e8b4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e8b8:	d02d      	beq.n	800e916 <ai_platform_network_init+0x136>
 800e8ba:	6813      	ldr	r3, [r2, #0]
 800e8bc:	f240 4183 	movw	r1, #1155	; 0x483
 800e8c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e8c4:	428b      	cmp	r3, r1
 800e8c6:	f000 8089 	beq.w	800e9dc <ai_platform_network_init+0x1fc>
 800e8ca:	6813      	ldr	r3, [r2, #0]
 800e8cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e8d0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e8d4:	f000 80c3 	beq.w	800ea5e <ai_platform_network_init+0x27e>
 800e8d8:	6813      	ldr	r3, [r2, #0]
 800e8da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d129      	bne.n	800e936 <ai_platform_network_init+0x156>
 800e8e2:	4a71      	ldr	r2, [pc, #452]	; (800eaa8 <ai_platform_network_init+0x2c8>)
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	6093      	str	r3, [r2, #8]
 800e8e8:	6893      	ldr	r3, [r2, #8]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1fc      	bne.n	800e8e8 <ai_platform_network_init+0x108>
 800e8ee:	496f      	ldr	r1, [pc, #444]	; (800eaac <ai_platform_network_init+0x2cc>)
 800e8f0:	4b6f      	ldr	r3, [pc, #444]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800e8f2:	6011      	str	r1, [r2, #0]
 800e8f4:	6812      	ldr	r2, [r2, #0]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d01d      	beq.n	800e936 <ai_platform_network_init+0x156>
 800e8fa:	e7fe      	b.n	800e8fa <ai_platform_network_init+0x11a>
 800e8fc:	4a6a      	ldr	r2, [pc, #424]	; (800eaa8 <ai_platform_network_init+0x2c8>)
 800e8fe:	2301      	movs	r3, #1
 800e900:	6093      	str	r3, [r2, #8]
 800e902:	6893      	ldr	r3, [r2, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1fc      	bne.n	800e902 <ai_platform_network_init+0x122>
 800e908:	4968      	ldr	r1, [pc, #416]	; (800eaac <ai_platform_network_init+0x2cc>)
 800e90a:	4b69      	ldr	r3, [pc, #420]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800e90c:	6011      	str	r1, [r2, #0]
 800e90e:	6812      	ldr	r2, [r2, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	d010      	beq.n	800e936 <ai_platform_network_init+0x156>
 800e914:	e7fe      	b.n	800e914 <ai_platform_network_init+0x134>
 800e916:	4a67      	ldr	r2, [pc, #412]	; (800eab4 <ai_platform_network_init+0x2d4>)
 800e918:	2301      	movs	r3, #1
 800e91a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e91e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1fb      	bne.n	800e91e <ai_platform_network_init+0x13e>
 800e926:	4961      	ldr	r1, [pc, #388]	; (800eaac <ai_platform_network_init+0x2cc>)
 800e928:	4b61      	ldr	r3, [pc, #388]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800e92a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e92e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e932:	429a      	cmp	r2, r3
 800e934:	d113      	bne.n	800e95e <ai_platform_network_init+0x17e>
 800e936:	2600      	movs	r6, #0
 800e938:	f7ff f886 	bl	800da48 <_ai_platform_release_crc>
 800e93c:	4630      	mov	r0, r6
 800e93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e942:	4a59      	ldr	r2, [pc, #356]	; (800eaa8 <ai_platform_network_init+0x2c8>)
 800e944:	2301      	movs	r3, #1
 800e946:	6093      	str	r3, [r2, #8]
 800e948:	6893      	ldr	r3, [r2, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1fc      	bne.n	800e948 <ai_platform_network_init+0x168>
 800e94e:	4b57      	ldr	r3, [pc, #348]	; (800eaac <ai_platform_network_init+0x2cc>)
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	4b57      	ldr	r3, [pc, #348]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800e954:	6812      	ldr	r2, [r2, #0]
 800e956:	429a      	cmp	r2, r3
 800e958:	f43f af7a 	beq.w	800e850 <ai_platform_network_init+0x70>
 800e95c:	e7fe      	b.n	800e95c <ai_platform_network_init+0x17c>
 800e95e:	e7fe      	b.n	800e95e <ai_platform_network_init+0x17e>
 800e960:	4a54      	ldr	r2, [pc, #336]	; (800eab4 <ai_platform_network_init+0x2d4>)
 800e962:	2301      	movs	r3, #1
 800e964:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e968:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1fb      	bne.n	800e968 <ai_platform_network_init+0x188>
 800e970:	4b4e      	ldr	r3, [pc, #312]	; (800eaac <ai_platform_network_init+0x2cc>)
 800e972:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e976:	4b4e      	ldr	r3, [pc, #312]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800e978:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e97c:	429a      	cmp	r2, r3
 800e97e:	f43f af67 	beq.w	800e850 <ai_platform_network_init+0x70>
 800e982:	e7fe      	b.n	800e982 <ai_platform_network_init+0x1a2>
 800e984:	2101      	movs	r1, #1
 800e986:	4628      	mov	r0, r5
 800e988:	f105 081c 	add.w	r8, r5, #28
 800e98c:	686e      	ldr	r6, [r5, #4]
 800e98e:	f7ff f80b 	bl	800d9a8 <ai_buffer_get_size>
 800e992:	4607      	mov	r7, r0
 800e994:	2101      	movs	r1, #1
 800e996:	4640      	mov	r0, r8
 800e998:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800e99c:	f7ff f804 	bl	800d9a8 <ai_buffer_get_size>
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	d13e      	bne.n	800ea22 <ai_platform_network_init+0x242>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	f000 808e 	beq.w	800eac6 <ai_platform_network_init+0x2e6>
 800e9aa:	f1b9 0f00 	cmp.w	r9, #0
 800e9ae:	f000 8094 	beq.w	800eada <ai_platform_network_init+0x2fa>
 800e9b2:	f04f 0c01 	mov.w	ip, #1
 800e9b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800e9b8:	2600      	movs	r6, #0
 800e9ba:	83e7      	strh	r7, [r4, #30]
 800e9bc:	4563      	cmp	r3, ip
 800e9be:	83a6      	strh	r6, [r4, #28]
 800e9c0:	d37a      	bcc.n	800eab8 <ai_platform_network_init+0x2d8>
 800e9c2:	f1bc 0f00 	cmp.w	ip, #0
 800e9c6:	f000 809c 	beq.w	800eb02 <ai_platform_network_init+0x322>
 800e9ca:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e9cc:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e9d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9d2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800e9d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e9da:	e74c      	b.n	800e876 <ai_platform_network_init+0x96>
 800e9dc:	4a35      	ldr	r2, [pc, #212]	; (800eab4 <ai_platform_network_init+0x2d4>)
 800e9de:	2301      	movs	r3, #1
 800e9e0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e9e4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1fb      	bne.n	800e9e4 <ai_platform_network_init+0x204>
 800e9ec:	492f      	ldr	r1, [pc, #188]	; (800eaac <ai_platform_network_init+0x2cc>)
 800e9ee:	4b30      	ldr	r3, [pc, #192]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800e9f0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e9f4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d09c      	beq.n	800e936 <ai_platform_network_init+0x156>
 800e9fc:	e7fe      	b.n	800e9fc <ai_platform_network_init+0x21c>
 800e9fe:	4a2d      	ldr	r2, [pc, #180]	; (800eab4 <ai_platform_network_init+0x2d4>)
 800ea00:	2301      	movs	r3, #1
 800ea02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ea06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1fb      	bne.n	800ea06 <ai_platform_network_init+0x226>
 800ea0e:	4b27      	ldr	r3, [pc, #156]	; (800eaac <ai_platform_network_init+0x2cc>)
 800ea10:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ea14:	4b26      	ldr	r3, [pc, #152]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800ea16:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	f43f af18 	beq.w	800e850 <ai_platform_network_init+0x70>
 800ea20:	e7fe      	b.n	800ea20 <ai_platform_network_init+0x240>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d153      	bne.n	800eace <ai_platform_network_init+0x2ee>
 800ea26:	4680      	mov	r8, r0
 800ea28:	4684      	mov	ip, r0
 800ea2a:	2e00      	cmp	r6, #0
 800ea2c:	d063      	beq.n	800eaf6 <ai_platform_network_init+0x316>
 800ea2e:	8be6      	ldrh	r6, [r4, #30]
 800ea30:	2e00      	cmp	r6, #0
 800ea32:	d168      	bne.n	800eb06 <ai_platform_network_init+0x326>
 800ea34:	2212      	movs	r2, #18
 800ea36:	2116      	movs	r1, #22
 800ea38:	f104 0010 	add.w	r0, r4, #16
 800ea3c:	f000 fc7a 	bl	800f334 <core_set_error>
 800ea40:	e77c      	b.n	800e93c <ai_platform_network_init+0x15c>
 800ea42:	4a19      	ldr	r2, [pc, #100]	; (800eaa8 <ai_platform_network_init+0x2c8>)
 800ea44:	2301      	movs	r3, #1
 800ea46:	6093      	str	r3, [r2, #8]
 800ea48:	6893      	ldr	r3, [r2, #8]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1fc      	bne.n	800ea48 <ai_platform_network_init+0x268>
 800ea4e:	4b17      	ldr	r3, [pc, #92]	; (800eaac <ai_platform_network_init+0x2cc>)
 800ea50:	6013      	str	r3, [r2, #0]
 800ea52:	4b17      	ldr	r3, [pc, #92]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800ea54:	6812      	ldr	r2, [r2, #0]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	f43f aefa 	beq.w	800e850 <ai_platform_network_init+0x70>
 800ea5c:	e7fe      	b.n	800ea5c <ai_platform_network_init+0x27c>
 800ea5e:	4a12      	ldr	r2, [pc, #72]	; (800eaa8 <ai_platform_network_init+0x2c8>)
 800ea60:	2301      	movs	r3, #1
 800ea62:	6093      	str	r3, [r2, #8]
 800ea64:	6893      	ldr	r3, [r2, #8]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1fc      	bne.n	800ea64 <ai_platform_network_init+0x284>
 800ea6a:	4910      	ldr	r1, [pc, #64]	; (800eaac <ai_platform_network_init+0x2cc>)
 800ea6c:	4b10      	ldr	r3, [pc, #64]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800ea6e:	6011      	str	r1, [r2, #0]
 800ea70:	6812      	ldr	r2, [r2, #0]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	f43f af5f 	beq.w	800e936 <ai_platform_network_init+0x156>
 800ea78:	e7fe      	b.n	800ea78 <ai_platform_network_init+0x298>
 800ea7a:	4a0b      	ldr	r2, [pc, #44]	; (800eaa8 <ai_platform_network_init+0x2c8>)
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	6093      	str	r3, [r2, #8]
 800ea80:	6893      	ldr	r3, [r2, #8]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1fc      	bne.n	800ea80 <ai_platform_network_init+0x2a0>
 800ea86:	4b09      	ldr	r3, [pc, #36]	; (800eaac <ai_platform_network_init+0x2cc>)
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	4b09      	ldr	r3, [pc, #36]	; (800eab0 <ai_platform_network_init+0x2d0>)
 800ea8c:	6812      	ldr	r2, [r2, #0]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	f43f aede 	beq.w	800e850 <ai_platform_network_init+0x70>
 800ea94:	e7fe      	b.n	800ea94 <ai_platform_network_init+0x2b4>
 800ea96:	bf00      	nop
 800ea98:	a1c00100 	.word	0xa1c00100
 800ea9c:	e0042000 	.word	0xe0042000
 800eaa0:	5c001000 	.word	0x5c001000
 800eaa4:	a1facade 	.word	0xa1facade
 800eaa8:	40023000 	.word	0x40023000
 800eaac:	f407a5c2 	.word	0xf407a5c2
 800eab0:	b5e8b5cd 	.word	0xb5e8b5cd
 800eab4:	58024000 	.word	0x58024000
 800eab8:	2213      	movs	r2, #19
 800eaba:	2116      	movs	r1, #22
 800eabc:	f104 0010 	add.w	r0, r4, #16
 800eac0:	f000 fc38 	bl	800f334 <core_set_error>
 800eac4:	e73a      	b.n	800e93c <ai_platform_network_init+0x15c>
 800eac6:	4607      	mov	r7, r0
 800eac8:	4680      	mov	r8, r0
 800eaca:	4684      	mov	ip, r0
 800eacc:	e773      	b.n	800e9b6 <ai_platform_network_init+0x1d6>
 800eace:	f1b9 0f00 	cmp.w	r9, #0
 800ead2:	d002      	beq.n	800eada <ai_platform_network_init+0x2fa>
 800ead4:	f04f 0c01 	mov.w	ip, #1
 800ead8:	e7a7      	b.n	800ea2a <ai_platform_network_init+0x24a>
 800eada:	2110      	movs	r1, #16
 800eadc:	2213      	movs	r2, #19
 800eade:	2600      	movs	r6, #0
 800eae0:	1860      	adds	r0, r4, r1
 800eae2:	f000 fc27 	bl	800f334 <core_set_error>
 800eae6:	e729      	b.n	800e93c <ai_platform_network_init+0x15c>
 800eae8:	2110      	movs	r1, #16
 800eaea:	2211      	movs	r2, #17
 800eaec:	462e      	mov	r6, r5
 800eaee:	1860      	adds	r0, r4, r1
 800eaf0:	f000 fc20 	bl	800f334 <core_set_error>
 800eaf4:	e722      	b.n	800e93c <ai_platform_network_init+0x15c>
 800eaf6:	2110      	movs	r1, #16
 800eaf8:	2212      	movs	r2, #18
 800eafa:	1860      	adds	r0, r4, r1
 800eafc:	f000 fc1a 	bl	800f334 <core_set_error>
 800eb00:	e71c      	b.n	800e93c <ai_platform_network_init+0x15c>
 800eb02:	4666      	mov	r6, ip
 800eb04:	e6b7      	b.n	800e876 <ai_platform_network_init+0x96>
 800eb06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb08:	6a26      	ldr	r6, [r4, #32]
 800eb0a:	2701      	movs	r7, #1
 800eb0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb12:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800eb16:	e74e      	b.n	800e9b6 <ai_platform_network_init+0x1d6>

0800eb18 <ai_platform_network_post_init>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d04e      	beq.n	800ebbc <ai_platform_network_post_init+0xa4>
 800eb1e:	4b8c      	ldr	r3, [pc, #560]	; (800ed50 <ai_platform_network_post_init+0x238>)
 800eb20:	4604      	mov	r4, r0
 800eb22:	6802      	ldr	r2, [r0, #0]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d149      	bne.n	800ebbc <ai_platform_network_post_init+0xa4>
 800eb28:	f7fe ff8c 	bl	800da44 <_ai_platform_acquire_crc>
 800eb2c:	4b89      	ldr	r3, [pc, #548]	; (800ed54 <ai_platform_network_post_init+0x23c>)
 800eb2e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb38:	189a      	adds	r2, r3, r2
 800eb3a:	2a01      	cmp	r2, #1
 800eb3c:	f240 8095 	bls.w	800ec6a <ai_platform_network_post_init+0x152>
 800eb40:	f240 4249 	movw	r2, #1097	; 0x449
 800eb44:	4293      	cmp	r3, r2
 800eb46:	f000 8090 	beq.w	800ec6a <ai_platform_network_post_init+0x152>
 800eb4a:	4a83      	ldr	r2, [pc, #524]	; (800ed58 <ai_platform_network_post_init+0x240>)
 800eb4c:	6813      	ldr	r3, [r2, #0]
 800eb4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eb56:	f000 8096 	beq.w	800ec86 <ai_platform_network_post_init+0x16e>
 800eb5a:	6813      	ldr	r3, [r2, #0]
 800eb5c:	f240 4183 	movw	r1, #1155	; 0x483
 800eb60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb64:	428b      	cmp	r3, r1
 800eb66:	f000 80b8 	beq.w	800ecda <ai_platform_network_post_init+0x1c2>
 800eb6a:	6813      	ldr	r3, [r2, #0]
 800eb6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb70:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800eb74:	f000 80de 	beq.w	800ed34 <ai_platform_network_post_init+0x21c>
 800eb78:	6813      	ldr	r3, [r2, #0]
 800eb7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f000 80bd 	beq.w	800ecfe <ai_platform_network_post_init+0x1e6>
 800eb84:	f7fe ff60 	bl	800da48 <_ai_platform_release_crc>
 800eb88:	68e3      	ldr	r3, [r4, #12]
 800eb8a:	f013 0502 	ands.w	r5, r3, #2
 800eb8e:	f000 808c 	beq.w	800ecaa <ai_platform_network_post_init+0x192>
 800eb92:	4620      	mov	r0, r4
 800eb94:	f000 fd24 	bl	800f5e0 <ai_layers_post_init_all>
 800eb98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb9a:	b16b      	cbz	r3, 800ebb8 <ai_platform_network_post_init+0xa0>
 800eb9c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800eb9e:	e007      	b.n	800ebb0 <ai_platform_network_post_init+0x98>
 800eba0:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800eba4:	4798      	blx	r3
 800eba6:	692b      	ldr	r3, [r5, #16]
 800eba8:	b133      	cbz	r3, 800ebb8 <ai_platform_network_post_init+0xa0>
 800ebaa:	42ab      	cmp	r3, r5
 800ebac:	461d      	mov	r5, r3
 800ebae:	d003      	beq.n	800ebb8 <ai_platform_network_post_init+0xa0>
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	d1f3      	bne.n	800eba0 <ai_platform_network_post_init+0x88>
 800ebb8:	2001      	movs	r0, #1
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	f7fe ff42 	bl	800da44 <_ai_platform_acquire_crc>
 800ebc0:	4b64      	ldr	r3, [pc, #400]	; (800ed54 <ai_platform_network_post_init+0x23c>)
 800ebc2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebcc:	185a      	adds	r2, r3, r1
 800ebce:	2a01      	cmp	r2, #1
 800ebd0:	d92a      	bls.n	800ec28 <ai_platform_network_post_init+0x110>
 800ebd2:	f240 4249 	movw	r2, #1097	; 0x449
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d026      	beq.n	800ec28 <ai_platform_network_post_init+0x110>
 800ebda:	4a5f      	ldr	r2, [pc, #380]	; (800ed58 <ai_platform_network_post_init+0x240>)
 800ebdc:	6813      	ldr	r3, [r2, #0]
 800ebde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebe2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ebe6:	d02c      	beq.n	800ec42 <ai_platform_network_post_init+0x12a>
 800ebe8:	6813      	ldr	r3, [r2, #0]
 800ebea:	f240 4183 	movw	r1, #1155	; 0x483
 800ebee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebf2:	428b      	cmp	r3, r1
 800ebf4:	d060      	beq.n	800ecb8 <ai_platform_network_post_init+0x1a0>
 800ebf6:	6813      	ldr	r3, [r2, #0]
 800ebf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebfc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ec00:	f000 808b 	beq.w	800ed1a <ai_platform_network_post_init+0x202>
 800ec04:	6813      	ldr	r3, [r2, #0]
 800ec06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d129      	bne.n	800ec62 <ai_platform_network_post_init+0x14a>
 800ec0e:	4a53      	ldr	r2, [pc, #332]	; (800ed5c <ai_platform_network_post_init+0x244>)
 800ec10:	2301      	movs	r3, #1
 800ec12:	6093      	str	r3, [r2, #8]
 800ec14:	6893      	ldr	r3, [r2, #8]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1fc      	bne.n	800ec14 <ai_platform_network_post_init+0xfc>
 800ec1a:	4951      	ldr	r1, [pc, #324]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ec1c:	4b51      	ldr	r3, [pc, #324]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ec1e:	6011      	str	r1, [r2, #0]
 800ec20:	6812      	ldr	r2, [r2, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d01d      	beq.n	800ec62 <ai_platform_network_post_init+0x14a>
 800ec26:	e7fe      	b.n	800ec26 <ai_platform_network_post_init+0x10e>
 800ec28:	4a4c      	ldr	r2, [pc, #304]	; (800ed5c <ai_platform_network_post_init+0x244>)
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	6093      	str	r3, [r2, #8]
 800ec2e:	6893      	ldr	r3, [r2, #8]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1fc      	bne.n	800ec2e <ai_platform_network_post_init+0x116>
 800ec34:	494a      	ldr	r1, [pc, #296]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ec36:	4b4b      	ldr	r3, [pc, #300]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ec38:	6011      	str	r1, [r2, #0]
 800ec3a:	6812      	ldr	r2, [r2, #0]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d010      	beq.n	800ec62 <ai_platform_network_post_init+0x14a>
 800ec40:	e7fe      	b.n	800ec40 <ai_platform_network_post_init+0x128>
 800ec42:	4a49      	ldr	r2, [pc, #292]	; (800ed68 <ai_platform_network_post_init+0x250>)
 800ec44:	2301      	movs	r3, #1
 800ec46:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec4a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1fb      	bne.n	800ec4a <ai_platform_network_post_init+0x132>
 800ec52:	4943      	ldr	r1, [pc, #268]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ec54:	4b43      	ldr	r3, [pc, #268]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ec56:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ec5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d110      	bne.n	800ec84 <ai_platform_network_post_init+0x16c>
 800ec62:	f7fe fef1 	bl	800da48 <_ai_platform_release_crc>
 800ec66:	2000      	movs	r0, #0
 800ec68:	bd38      	pop	{r3, r4, r5, pc}
 800ec6a:	4a3c      	ldr	r2, [pc, #240]	; (800ed5c <ai_platform_network_post_init+0x244>)
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	6093      	str	r3, [r2, #8]
 800ec70:	6893      	ldr	r3, [r2, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1fc      	bne.n	800ec70 <ai_platform_network_post_init+0x158>
 800ec76:	493a      	ldr	r1, [pc, #232]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ec78:	4b3a      	ldr	r3, [pc, #232]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ec7a:	6011      	str	r1, [r2, #0]
 800ec7c:	6812      	ldr	r2, [r2, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d080      	beq.n	800eb84 <ai_platform_network_post_init+0x6c>
 800ec82:	e7fe      	b.n	800ec82 <ai_platform_network_post_init+0x16a>
 800ec84:	e7fe      	b.n	800ec84 <ai_platform_network_post_init+0x16c>
 800ec86:	4a38      	ldr	r2, [pc, #224]	; (800ed68 <ai_platform_network_post_init+0x250>)
 800ec88:	2301      	movs	r3, #1
 800ec8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1fb      	bne.n	800ec8e <ai_platform_network_post_init+0x176>
 800ec96:	4932      	ldr	r1, [pc, #200]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ec98:	4b32      	ldr	r3, [pc, #200]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ec9a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ec9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eca2:	429a      	cmp	r2, r3
 800eca4:	f43f af6e 	beq.w	800eb84 <ai_platform_network_post_init+0x6c>
 800eca8:	e7fe      	b.n	800eca8 <ai_platform_network_post_init+0x190>
 800ecaa:	2210      	movs	r2, #16
 800ecac:	2111      	movs	r1, #17
 800ecae:	18a0      	adds	r0, r4, r2
 800ecb0:	f000 fb40 	bl	800f334 <core_set_error>
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	4a2b      	ldr	r2, [pc, #172]	; (800ed68 <ai_platform_network_post_init+0x250>)
 800ecba:	2301      	movs	r3, #1
 800ecbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ecc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1fb      	bne.n	800ecc0 <ai_platform_network_post_init+0x1a8>
 800ecc8:	4925      	ldr	r1, [pc, #148]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ecca:	4b26      	ldr	r3, [pc, #152]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800eccc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ecd0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d0c4      	beq.n	800ec62 <ai_platform_network_post_init+0x14a>
 800ecd8:	e7fe      	b.n	800ecd8 <ai_platform_network_post_init+0x1c0>
 800ecda:	4a23      	ldr	r2, [pc, #140]	; (800ed68 <ai_platform_network_post_init+0x250>)
 800ecdc:	2301      	movs	r3, #1
 800ecde:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ece2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1fb      	bne.n	800ece2 <ai_platform_network_post_init+0x1ca>
 800ecea:	491d      	ldr	r1, [pc, #116]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ecec:	4b1d      	ldr	r3, [pc, #116]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ecee:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ecf2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	f43f af44 	beq.w	800eb84 <ai_platform_network_post_init+0x6c>
 800ecfc:	e7fe      	b.n	800ecfc <ai_platform_network_post_init+0x1e4>
 800ecfe:	4a17      	ldr	r2, [pc, #92]	; (800ed5c <ai_platform_network_post_init+0x244>)
 800ed00:	2301      	movs	r3, #1
 800ed02:	6093      	str	r3, [r2, #8]
 800ed04:	6893      	ldr	r3, [r2, #8]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1fc      	bne.n	800ed04 <ai_platform_network_post_init+0x1ec>
 800ed0a:	4915      	ldr	r1, [pc, #84]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ed0c:	4b15      	ldr	r3, [pc, #84]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ed0e:	6011      	str	r1, [r2, #0]
 800ed10:	6812      	ldr	r2, [r2, #0]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	f43f af36 	beq.w	800eb84 <ai_platform_network_post_init+0x6c>
 800ed18:	e7fe      	b.n	800ed18 <ai_platform_network_post_init+0x200>
 800ed1a:	4a10      	ldr	r2, [pc, #64]	; (800ed5c <ai_platform_network_post_init+0x244>)
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	6093      	str	r3, [r2, #8]
 800ed20:	6893      	ldr	r3, [r2, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1fc      	bne.n	800ed20 <ai_platform_network_post_init+0x208>
 800ed26:	490e      	ldr	r1, [pc, #56]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ed28:	4b0e      	ldr	r3, [pc, #56]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ed2a:	6011      	str	r1, [r2, #0]
 800ed2c:	6812      	ldr	r2, [r2, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d097      	beq.n	800ec62 <ai_platform_network_post_init+0x14a>
 800ed32:	e7fe      	b.n	800ed32 <ai_platform_network_post_init+0x21a>
 800ed34:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <ai_platform_network_post_init+0x244>)
 800ed36:	2301      	movs	r3, #1
 800ed38:	6093      	str	r3, [r2, #8]
 800ed3a:	6893      	ldr	r3, [r2, #8]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1fc      	bne.n	800ed3a <ai_platform_network_post_init+0x222>
 800ed40:	4907      	ldr	r1, [pc, #28]	; (800ed60 <ai_platform_network_post_init+0x248>)
 800ed42:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <ai_platform_network_post_init+0x24c>)
 800ed44:	6011      	str	r1, [r2, #0]
 800ed46:	6812      	ldr	r2, [r2, #0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	f43f af1b 	beq.w	800eb84 <ai_platform_network_post_init+0x6c>
 800ed4e:	e7fe      	b.n	800ed4e <ai_platform_network_post_init+0x236>
 800ed50:	a1c00100 	.word	0xa1c00100
 800ed54:	e0042000 	.word	0xe0042000
 800ed58:	5c001000 	.word	0x5c001000
 800ed5c:	40023000 	.word	0x40023000
 800ed60:	f407a5c2 	.word	0xf407a5c2
 800ed64:	b5e8b5cd 	.word	0xb5e8b5cd
 800ed68:	58024000 	.word	0x58024000

0800ed6c <ai_platform_network_process>:
 800ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed70:	b085      	sub	sp, #20
 800ed72:	460e      	mov	r6, r1
 800ed74:	4605      	mov	r5, r0
 800ed76:	9201      	str	r2, [sp, #4]
 800ed78:	b120      	cbz	r0, 800ed84 <ai_platform_network_process+0x18>
 800ed7a:	4b24      	ldr	r3, [pc, #144]	; (800ee0c <ai_platform_network_process+0xa0>)
 800ed7c:	6802      	ldr	r2, [r0, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	bf18      	it	ne
 800ed82:	2500      	movne	r5, #0
 800ed84:	f7fe fe5e 	bl	800da44 <_ai_platform_acquire_crc>
 800ed88:	4b21      	ldr	r3, [pc, #132]	; (800ee10 <ai_platform_network_process+0xa4>)
 800ed8a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed94:	185a      	adds	r2, r3, r1
 800ed96:	2a01      	cmp	r2, #1
 800ed98:	d92b      	bls.n	800edf2 <ai_platform_network_process+0x86>
 800ed9a:	f240 4249 	movw	r2, #1097	; 0x449
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d027      	beq.n	800edf2 <ai_platform_network_process+0x86>
 800eda2:	4a1c      	ldr	r2, [pc, #112]	; (800ee14 <ai_platform_network_process+0xa8>)
 800eda4:	6813      	ldr	r3, [r2, #0]
 800eda6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edaa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800edae:	d039      	beq.n	800ee24 <ai_platform_network_process+0xb8>
 800edb0:	6813      	ldr	r3, [r2, #0]
 800edb2:	f240 4183 	movw	r1, #1155	; 0x483
 800edb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edba:	428b      	cmp	r3, r1
 800edbc:	f000 819c 	beq.w	800f0f8 <ai_platform_network_process+0x38c>
 800edc0:	6813      	ldr	r3, [r2, #0]
 800edc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edc6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800edca:	f000 8179 	beq.w	800f0c0 <ai_platform_network_process+0x354>
 800edce:	6813      	ldr	r3, [r2, #0]
 800edd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d136      	bne.n	800ee46 <ai_platform_network_process+0xda>
 800edd8:	4a0f      	ldr	r2, [pc, #60]	; (800ee18 <ai_platform_network_process+0xac>)
 800edda:	2301      	movs	r3, #1
 800eddc:	6093      	str	r3, [r2, #8]
 800edde:	6893      	ldr	r3, [r2, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1fc      	bne.n	800edde <ai_platform_network_process+0x72>
 800ede4:	4b0d      	ldr	r3, [pc, #52]	; (800ee1c <ai_platform_network_process+0xb0>)
 800ede6:	6013      	str	r3, [r2, #0]
 800ede8:	4b0d      	ldr	r3, [pc, #52]	; (800ee20 <ai_platform_network_process+0xb4>)
 800edea:	6812      	ldr	r2, [r2, #0]
 800edec:	429a      	cmp	r2, r3
 800edee:	d02a      	beq.n	800ee46 <ai_platform_network_process+0xda>
 800edf0:	e7fe      	b.n	800edf0 <ai_platform_network_process+0x84>
 800edf2:	4a09      	ldr	r2, [pc, #36]	; (800ee18 <ai_platform_network_process+0xac>)
 800edf4:	2301      	movs	r3, #1
 800edf6:	6093      	str	r3, [r2, #8]
 800edf8:	6893      	ldr	r3, [r2, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1fc      	bne.n	800edf8 <ai_platform_network_process+0x8c>
 800edfe:	4b07      	ldr	r3, [pc, #28]	; (800ee1c <ai_platform_network_process+0xb0>)
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	4b07      	ldr	r3, [pc, #28]	; (800ee20 <ai_platform_network_process+0xb4>)
 800ee04:	6812      	ldr	r2, [r2, #0]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d01d      	beq.n	800ee46 <ai_platform_network_process+0xda>
 800ee0a:	e7fe      	b.n	800ee0a <ai_platform_network_process+0x9e>
 800ee0c:	a1c00100 	.word	0xa1c00100
 800ee10:	e0042000 	.word	0xe0042000
 800ee14:	5c001000 	.word	0x5c001000
 800ee18:	40023000 	.word	0x40023000
 800ee1c:	f407a5c2 	.word	0xf407a5c2
 800ee20:	b5e8b5cd 	.word	0xb5e8b5cd
 800ee24:	4ab0      	ldr	r2, [pc, #704]	; (800f0e8 <ai_platform_network_process+0x37c>)
 800ee26:	2301      	movs	r3, #1
 800ee28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ee2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d1fb      	bne.n	800ee2c <ai_platform_network_process+0xc0>
 800ee34:	4bad      	ldr	r3, [pc, #692]	; (800f0ec <ai_platform_network_process+0x380>)
 800ee36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ee3a:	4bad      	ldr	r3, [pc, #692]	; (800f0f0 <ai_platform_network_process+0x384>)
 800ee3c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ee40:	429a      	cmp	r2, r3
 800ee42:	f040 812b 	bne.w	800f09c <ai_platform_network_process+0x330>
 800ee46:	f7fe fdff 	bl	800da48 <_ai_platform_release_crc>
 800ee4a:	2d00      	cmp	r5, #0
 800ee4c:	f000 8172 	beq.w	800f134 <ai_platform_network_process+0x3c8>
 800ee50:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f000 8123 	beq.w	800f09e <ai_platform_network_process+0x332>
 800ee58:	68eb      	ldr	r3, [r5, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800ee60:	f003 0303 	and.w	r3, r3, #3
 800ee64:	616a      	str	r2, [r5, #20]
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	f040 811f 	bne.w	800f0aa <ai_platform_network_process+0x33e>
 800ee6c:	2e00      	cmp	r6, #0
 800ee6e:	f000 8156 	beq.w	800f11e <ai_platform_network_process+0x3b2>
 800ee72:	fab8 f788 	clz	r7, r8
 800ee76:	097f      	lsrs	r7, r7, #5
 800ee78:	f1b8 0f00 	cmp.w	r8, #0
 800ee7c:	f000 814f 	beq.w	800f11e <ai_platform_network_process+0x3b2>
 800ee80:	f8b8 3000 	ldrh.w	r3, [r8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f000 814a 	beq.w	800f11e <ai_platform_network_process+0x3b2>
 800ee8a:	69b3      	ldr	r3, [r6, #24]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800ee92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d072      	beq.n	800ef80 <ai_platform_network_process+0x214>
 800ee9a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800ee9e:	2c00      	cmp	r4, #0
 800eea0:	d06e      	beq.n	800ef80 <ai_platform_network_process+0x214>
 800eea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eea6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800eeaa:	f8d3 a000 	ldr.w	sl, [r3]
 800eeae:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800eeb2:	f000 8133 	beq.w	800f11c <ai_platform_network_process+0x3b0>
 800eeb6:	69a3      	ldr	r3, [r4, #24]
 800eeb8:	2101      	movs	r1, #1
 800eeba:	4630      	mov	r0, r6
 800eebc:	685d      	ldr	r5, [r3, #4]
 800eebe:	f7fe fd73 	bl	800d9a8 <ai_buffer_get_size>
 800eec2:	4285      	cmp	r5, r0
 800eec4:	f0c0 8138 	bcc.w	800f138 <ai_platform_network_process+0x3cc>
 800eec8:	68e0      	ldr	r0, [r4, #12]
 800eeca:	69b1      	ldr	r1, [r6, #24]
 800eecc:	68c2      	ldr	r2, [r0, #12]
 800eece:	68cb      	ldr	r3, [r1, #12]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	f040 8131 	bne.w	800f138 <ai_platform_network_process+0x3cc>
 800eed6:	6882      	ldr	r2, [r0, #8]
 800eed8:	688b      	ldr	r3, [r1, #8]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	f040 812c 	bne.w	800f138 <ai_platform_network_process+0x3cc>
 800eee0:	6842      	ldr	r2, [r0, #4]
 800eee2:	684b      	ldr	r3, [r1, #4]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	f040 8127 	bne.w	800f138 <ai_platform_network_process+0x3cc>
 800eeea:	69a3      	ldr	r3, [r4, #24]
 800eeec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eef0:	f007 f98c 	bl	801620c <ai_array_get_data_byte_size>
 800eef4:	4605      	mov	r5, r0
 800eef6:	4620      	mov	r0, r4
 800eef8:	f007 f99e 	bl	8016238 <get_tensor_byte_size>
 800eefc:	4285      	cmp	r5, r0
 800eefe:	f0c0 811b 	bcc.w	800f138 <ai_platform_network_process+0x3cc>
 800ef02:	69a3      	ldr	r3, [r4, #24]
 800ef04:	6818      	ldr	r0, [r3, #0]
 800ef06:	f007 f8ed 	bl	80160e4 <ai_array_to_buffer_fmt>
 800ef0a:	6833      	ldr	r3, [r6, #0]
 800ef0c:	4058      	eors	r0, r3
 800ef0e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800ef12:	f040 81c8 	bne.w	800f2a6 <ai_platform_network_process+0x53a>
 800ef16:	6873      	ldr	r3, [r6, #4]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 81bb 	beq.w	800f294 <ai_platform_network_process+0x528>
 800ef1e:	69b3      	ldr	r3, [r6, #24]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f000 81c8 	beq.w	800f2b8 <ai_platform_network_process+0x54c>
 800ef28:	9a02      	ldr	r2, [sp, #8]
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	3701      	adds	r7, #1
 800ef2e:	361c      	adds	r6, #28
 800ef30:	429a      	cmp	r2, r3
 800ef32:	bf38      	it	cc
 800ef34:	461a      	movcc	r2, r3
 800ef36:	9202      	str	r2, [sp, #8]
 800ef38:	f007 f97e 	bl	8016238 <get_tensor_byte_size>
 800ef3c:	f8c9 0008 	str.w	r0, [r9, #8]
 800ef40:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	fb00 f303 	mul.w	r3, r0, r3
 800ef4a:	f8c9 300c 	str.w	r3, [r9, #12]
 800ef4e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800ef52:	440b      	add	r3, r1
 800ef54:	f8c9 1004 	str.w	r1, [r9, #4]
 800ef58:	f84a 300b 	str.w	r3, [sl, fp]
 800ef5c:	69a0      	ldr	r0, [r4, #24]
 800ef5e:	6803      	ldr	r3, [r0, #0]
 800ef60:	009a      	lsls	r2, r3, #2
 800ef62:	f100 80bb 	bmi.w	800f0dc <ai_platform_network_process+0x370>
 800ef66:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ef6a:	1a9b      	subs	r3, r3, r2
 800ef6c:	4419      	add	r1, r3
 800ef6e:	6081      	str	r1, [r0, #8]
 800ef70:	69a3      	ldr	r3, [r4, #24]
 800ef72:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ef76:	60da      	str	r2, [r3, #12]
 800ef78:	f8b8 3000 	ldrh.w	r3, [r8]
 800ef7c:	42bb      	cmp	r3, r7
 800ef7e:	d888      	bhi.n	800ee92 <ai_platform_network_process+0x126>
 800ef80:	9d03      	ldr	r5, [sp, #12]
 800ef82:	9b01      	ldr	r3, [sp, #4]
 800ef84:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f000 819f 	beq.w	800f2ca <ai_platform_network_process+0x55e>
 800ef8c:	2a01      	cmp	r2, #1
 800ef8e:	f240 8179 	bls.w	800f284 <ai_platform_network_process+0x518>
 800ef92:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800ef96:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 8172 	beq.w	800f284 <ai_platform_network_process+0x518>
 800efa0:	9e01      	ldr	r6, [sp, #4]
 800efa2:	2700      	movs	r7, #0
 800efa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 80d3 	beq.w	800f154 <ai_platform_network_process+0x3e8>
 800efae:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800efb2:	2c00      	cmp	r4, #0
 800efb4:	f000 80ce 	beq.w	800f154 <ai_platform_network_process+0x3e8>
 800efb8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800efbc:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800efc0:	f8d3 8000 	ldr.w	r8, [r3]
 800efc4:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800efc8:	f000 819d 	beq.w	800f306 <ai_platform_network_process+0x59a>
 800efcc:	69a3      	ldr	r3, [r4, #24]
 800efce:	2101      	movs	r1, #1
 800efd0:	4630      	mov	r0, r6
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	9301      	str	r3, [sp, #4]
 800efd6:	f7fe fce7 	bl	800d9a8 <ai_buffer_get_size>
 800efda:	9b01      	ldr	r3, [sp, #4]
 800efdc:	4283      	cmp	r3, r0
 800efde:	f0c0 8151 	bcc.w	800f284 <ai_platform_network_process+0x518>
 800efe2:	68e0      	ldr	r0, [r4, #12]
 800efe4:	69b1      	ldr	r1, [r6, #24]
 800efe6:	68c2      	ldr	r2, [r0, #12]
 800efe8:	68cb      	ldr	r3, [r1, #12]
 800efea:	429a      	cmp	r2, r3
 800efec:	f040 814a 	bne.w	800f284 <ai_platform_network_process+0x518>
 800eff0:	6882      	ldr	r2, [r0, #8]
 800eff2:	688b      	ldr	r3, [r1, #8]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	f040 8145 	bne.w	800f284 <ai_platform_network_process+0x518>
 800effa:	6842      	ldr	r2, [r0, #4]
 800effc:	684b      	ldr	r3, [r1, #4]
 800effe:	429a      	cmp	r2, r3
 800f000:	f040 8140 	bne.w	800f284 <ai_platform_network_process+0x518>
 800f004:	69a3      	ldr	r3, [r4, #24]
 800f006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f00a:	f007 f8ff 	bl	801620c <ai_array_get_data_byte_size>
 800f00e:	9001      	str	r0, [sp, #4]
 800f010:	4620      	mov	r0, r4
 800f012:	f007 f911 	bl	8016238 <get_tensor_byte_size>
 800f016:	9b01      	ldr	r3, [sp, #4]
 800f018:	4283      	cmp	r3, r0
 800f01a:	f0c0 8133 	bcc.w	800f284 <ai_platform_network_process+0x518>
 800f01e:	69a3      	ldr	r3, [r4, #24]
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f007 f85f 	bl	80160e4 <ai_array_to_buffer_fmt>
 800f026:	6833      	ldr	r3, [r6, #0]
 800f028:	4058      	eors	r0, r3
 800f02a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f02e:	f040 815a 	bne.w	800f2e6 <ai_platform_network_process+0x57a>
 800f032:	6873      	ldr	r3, [r6, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 814e 	beq.w	800f2d6 <ai_platform_network_process+0x56a>
 800f03a:	69b3      	ldr	r3, [r6, #24]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f000 8159 	beq.w	800f2f6 <ai_platform_network_process+0x58a>
 800f044:	9a02      	ldr	r2, [sp, #8]
 800f046:	4620      	mov	r0, r4
 800f048:	3701      	adds	r7, #1
 800f04a:	361c      	adds	r6, #28
 800f04c:	429a      	cmp	r2, r3
 800f04e:	bf38      	it	cc
 800f050:	461a      	movcc	r2, r3
 800f052:	9202      	str	r2, [sp, #8]
 800f054:	f007 f8f0 	bl	8016238 <get_tensor_byte_size>
 800f058:	f8ca 0008 	str.w	r0, [sl, #8]
 800f05c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	fb00 f303 	mul.w	r3, r0, r3
 800f066:	f8ca 300c 	str.w	r3, [sl, #12]
 800f06a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f06e:	440b      	add	r3, r1
 800f070:	f8ca 1004 	str.w	r1, [sl, #4]
 800f074:	f848 300b 	str.w	r3, [r8, fp]
 800f078:	69a0      	ldr	r0, [r4, #24]
 800f07a:	6803      	ldr	r3, [r0, #0]
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	d464      	bmi.n	800f14a <ai_platform_network_process+0x3de>
 800f080:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	4419      	add	r1, r3
 800f088:	6081      	str	r1, [r0, #8]
 800f08a:	69a3      	ldr	r3, [r4, #24]
 800f08c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f090:	60da      	str	r2, [r3, #12]
 800f092:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f096:	429f      	cmp	r7, r3
 800f098:	d384      	bcc.n	800efa4 <ai_platform_network_process+0x238>
 800f09a:	e05b      	b.n	800f154 <ai_platform_network_process+0x3e8>
 800f09c:	e7fe      	b.n	800f09c <ai_platform_network_process+0x330>
 800f09e:	68ea      	ldr	r2, [r5, #12]
 800f0a0:	616b      	str	r3, [r5, #20]
 800f0a2:	f002 0203 	and.w	r2, r2, #3
 800f0a6:	2a03      	cmp	r2, #3
 800f0a8:	d039      	beq.n	800f11e <ai_platform_network_process+0x3b2>
 800f0aa:	2230      	movs	r2, #48	; 0x30
 800f0ac:	2111      	movs	r1, #17
 800f0ae:	f105 0010 	add.w	r0, r5, #16
 800f0b2:	2400      	movs	r4, #0
 800f0b4:	f000 f93e 	bl	800f334 <core_set_error>
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	b005      	add	sp, #20
 800f0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c0:	4a0c      	ldr	r2, [pc, #48]	; (800f0f4 <ai_platform_network_process+0x388>)
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	6093      	str	r3, [r2, #8]
 800f0c6:	6893      	ldr	r3, [r2, #8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1fc      	bne.n	800f0c6 <ai_platform_network_process+0x35a>
 800f0cc:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <ai_platform_network_process+0x380>)
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <ai_platform_network_process+0x384>)
 800f0d2:	6812      	ldr	r2, [r2, #0]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	f43f aeb6 	beq.w	800ee46 <ai_platform_network_process+0xda>
 800f0da:	e7fe      	b.n	800f0da <ai_platform_network_process+0x36e>
 800f0dc:	f8b8 3000 	ldrh.w	r3, [r8]
 800f0e0:	429f      	cmp	r7, r3
 800f0e2:	f4ff aed6 	bcc.w	800ee92 <ai_platform_network_process+0x126>
 800f0e6:	e74b      	b.n	800ef80 <ai_platform_network_process+0x214>
 800f0e8:	58024000 	.word	0x58024000
 800f0ec:	f407a5c2 	.word	0xf407a5c2
 800f0f0:	b5e8b5cd 	.word	0xb5e8b5cd
 800f0f4:	40023000 	.word	0x40023000
 800f0f8:	4a87      	ldr	r2, [pc, #540]	; (800f318 <ai_platform_network_process+0x5ac>)
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800f100:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1fb      	bne.n	800f100 <ai_platform_network_process+0x394>
 800f108:	4b84      	ldr	r3, [pc, #528]	; (800f31c <ai_platform_network_process+0x5b0>)
 800f10a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800f10e:	4b84      	ldr	r3, [pc, #528]	; (800f320 <ai_platform_network_process+0x5b4>)
 800f110:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800f114:	429a      	cmp	r2, r3
 800f116:	f43f ae96 	beq.w	800ee46 <ai_platform_network_process+0xda>
 800f11a:	e7fe      	b.n	800f11a <ai_platform_network_process+0x3ae>
 800f11c:	9d03      	ldr	r5, [sp, #12]
 800f11e:	2400      	movs	r4, #0
 800f120:	2217      	movs	r2, #23
 800f122:	2112      	movs	r1, #18
 800f124:	f105 0010 	add.w	r0, r5, #16
 800f128:	f000 f904 	bl	800f334 <core_set_error>
 800f12c:	4620      	mov	r0, r4
 800f12e:	b005      	add	sp, #20
 800f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f134:	462c      	mov	r4, r5
 800f136:	e7bf      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f138:	9d03      	ldr	r5, [sp, #12]
 800f13a:	2218      	movs	r2, #24
 800f13c:	2112      	movs	r1, #18
 800f13e:	2400      	movs	r4, #0
 800f140:	f105 0010 	add.w	r0, r5, #16
 800f144:	f000 f8f6 	bl	800f334 <core_set_error>
 800f148:	e7b6      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f14a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f14e:	429f      	cmp	r7, r3
 800f150:	f4ff af28 	bcc.w	800efa4 <ai_platform_network_process+0x238>
 800f154:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f158:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800f15a:	82ab      	strh	r3, [r5, #20]
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	f040 808b 	bne.w	800f278 <ai_platform_network_process+0x50c>
 800f162:	4616      	mov	r6, r2
 800f164:	4617      	mov	r7, r2
 800f166:	8aec      	ldrh	r4, [r5, #22]
 800f168:	429c      	cmp	r4, r3
 800f16a:	d2a5      	bcs.n	800f0b8 <ai_platform_network_process+0x34c>
 800f16c:	46ab      	mov	fp, r5
 800f16e:	2e00      	cmp	r6, #0
 800f170:	d030      	beq.n	800f1d4 <ai_platform_network_process+0x468>
 800f172:	f04f 0800 	mov.w	r8, #0
 800f176:	e014      	b.n	800f1a2 <ai_platform_network_process+0x436>
 800f178:	6882      	ldr	r2, [r0, #8]
 800f17a:	68c5      	ldr	r5, [r0, #12]
 800f17c:	6863      	ldr	r3, [r4, #4]
 800f17e:	1b52      	subs	r2, r2, r5
 800f180:	4413      	add	r3, r2
 800f182:	6083      	str	r3, [r0, #8]
 800f184:	698b      	ldr	r3, [r1, #24]
 800f186:	6862      	ldr	r2, [r4, #4]
 800f188:	60da      	str	r2, [r3, #12]
 800f18a:	f859 200a 	ldr.w	r2, [r9, sl]
 800f18e:	f108 0801 	add.w	r8, r8, #1
 800f192:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800f196:	440b      	add	r3, r1
 800f198:	4293      	cmp	r3, r2
 800f19a:	d301      	bcc.n	800f1a0 <ai_platform_network_process+0x434>
 800f19c:	68e3      	ldr	r3, [r4, #12]
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	6063      	str	r3, [r4, #4]
 800f1a2:	8833      	ldrh	r3, [r6, #0]
 800f1a4:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800f1a8:	4543      	cmp	r3, r8
 800f1aa:	d913      	bls.n	800f1d4 <ai_platform_network_process+0x468>
 800f1ac:	6873      	ldr	r3, [r6, #4]
 800f1ae:	b18b      	cbz	r3, 800f1d4 <ai_platform_network_process+0x468>
 800f1b0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800f1b4:	b171      	cbz	r1, 800f1d4 <ai_platform_network_process+0x468>
 800f1b6:	6988      	ldr	r0, [r1, #24]
 800f1b8:	68b2      	ldr	r2, [r6, #8]
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	f8d2 9000 	ldr.w	r9, [r2]
 800f1c0:	009d      	lsls	r5, r3, #2
 800f1c2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800f1c6:	d5d7      	bpl.n	800f178 <ai_platform_network_process+0x40c>
 800f1c8:	6881      	ldr	r1, [r0, #8]
 800f1ca:	68a2      	ldr	r2, [r4, #8]
 800f1cc:	6860      	ldr	r0, [r4, #4]
 800f1ce:	f004 fb31 	bl	8013834 <st_int8_copy>
 800f1d2:	e7da      	b.n	800f18a <ai_platform_network_process+0x41e>
 800f1d4:	4658      	mov	r0, fp
 800f1d6:	f000 fa17 	bl	800f608 <ai_layers_forward_all>
 800f1da:	2f00      	cmp	r7, #0
 800f1dc:	d03d      	beq.n	800f25a <ai_platform_network_process+0x4ee>
 800f1de:	2400      	movs	r4, #0
 800f1e0:	e016      	b.n	800f210 <ai_platform_network_process+0x4a4>
 800f1e2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800f1e6:	f859 100a 	ldr.w	r1, [r9, sl]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	428b      	cmp	r3, r1
 800f1ee:	d302      	bcc.n	800f1f6 <ai_platform_network_process+0x48a>
 800f1f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1f4:	1acb      	subs	r3, r1, r3
 800f1f6:	f8c8 3004 	str.w	r3, [r8, #4]
 800f1fa:	6981      	ldr	r1, [r0, #24]
 800f1fc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800f200:	1b52      	subs	r2, r2, r5
 800f202:	4413      	add	r3, r2
 800f204:	608b      	str	r3, [r1, #8]
 800f206:	6983      	ldr	r3, [r0, #24]
 800f208:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f20c:	60da      	str	r2, [r3, #12]
 800f20e:	3401      	adds	r4, #1
 800f210:	883b      	ldrh	r3, [r7, #0]
 800f212:	42a3      	cmp	r3, r4
 800f214:	d921      	bls.n	800f25a <ai_platform_network_process+0x4ee>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	b1fb      	cbz	r3, 800f25a <ai_platform_network_process+0x4ee>
 800f21a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f21e:	b1e0      	cbz	r0, 800f25a <ai_platform_network_process+0x4ee>
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f226:	6983      	ldr	r3, [r0, #24]
 800f228:	f8d2 9000 	ldr.w	r9, [r2]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f232:	0092      	lsls	r2, r2, #2
 800f234:	d5d5      	bpl.n	800f1e2 <ai_platform_network_process+0x476>
 800f236:	6898      	ldr	r0, [r3, #8]
 800f238:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800f23c:	f004 fafa 	bl	8013834 <st_int8_copy>
 800f240:	f859 200a 	ldr.w	r2, [r9, sl]
 800f244:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f248:	440b      	add	r3, r1
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d302      	bcc.n	800f254 <ai_platform_network_process+0x4e8>
 800f24e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f252:	1ad3      	subs	r3, r2, r3
 800f254:	f8c8 3004 	str.w	r3, [r8, #4]
 800f258:	e7d9      	b.n	800f20e <ai_platform_network_process+0x4a2>
 800f25a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800f25e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f262:	3401      	adds	r4, #1
 800f264:	b2a4      	uxth	r4, r4
 800f266:	42a3      	cmp	r3, r4
 800f268:	f8ab 4016 	strh.w	r4, [fp, #22]
 800f26c:	f63f af7f 	bhi.w	800f16e <ai_platform_network_process+0x402>
 800f270:	4620      	mov	r0, r4
 800f272:	b005      	add	sp, #20
 800f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f278:	2a01      	cmp	r2, #1
 800f27a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800f27c:	d029      	beq.n	800f2d2 <ai_platform_network_process+0x566>
 800f27e:	f106 070c 	add.w	r7, r6, #12
 800f282:	e770      	b.n	800f166 <ai_platform_network_process+0x3fa>
 800f284:	2218      	movs	r2, #24
 800f286:	2113      	movs	r1, #19
 800f288:	f105 0010 	add.w	r0, r5, #16
 800f28c:	2400      	movs	r4, #0
 800f28e:	f000 f851 	bl	800f334 <core_set_error>
 800f292:	e711      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f294:	9d03      	ldr	r5, [sp, #12]
 800f296:	4604      	mov	r4, r0
 800f298:	2217      	movs	r2, #23
 800f29a:	2112      	movs	r1, #18
 800f29c:	f105 0010 	add.w	r0, r5, #16
 800f2a0:	f000 f848 	bl	800f334 <core_set_error>
 800f2a4:	e708      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f2a6:	9d03      	ldr	r5, [sp, #12]
 800f2a8:	2219      	movs	r2, #25
 800f2aa:	2112      	movs	r1, #18
 800f2ac:	2400      	movs	r4, #0
 800f2ae:	f105 0010 	add.w	r0, r5, #16
 800f2b2:	f000 f83f 	bl	800f334 <core_set_error>
 800f2b6:	e6ff      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f2b8:	9d03      	ldr	r5, [sp, #12]
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	2221      	movs	r2, #33	; 0x21
 800f2be:	2112      	movs	r1, #18
 800f2c0:	f105 0010 	add.w	r0, r5, #16
 800f2c4:	f000 f836 	bl	800f334 <core_set_error>
 800f2c8:	e6f6      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f2ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f2ce:	82ab      	strh	r3, [r5, #20]
 800f2d0:	e744      	b.n	800f15c <ai_platform_network_process+0x3f0>
 800f2d2:	2700      	movs	r7, #0
 800f2d4:	e747      	b.n	800f166 <ai_platform_network_process+0x3fa>
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	2217      	movs	r2, #23
 800f2da:	2113      	movs	r1, #19
 800f2dc:	f105 0010 	add.w	r0, r5, #16
 800f2e0:	f000 f828 	bl	800f334 <core_set_error>
 800f2e4:	e6e8      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f2e6:	2219      	movs	r2, #25
 800f2e8:	2113      	movs	r1, #19
 800f2ea:	f105 0010 	add.w	r0, r5, #16
 800f2ee:	2400      	movs	r4, #0
 800f2f0:	f000 f820 	bl	800f334 <core_set_error>
 800f2f4:	e6e0      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	2221      	movs	r2, #33	; 0x21
 800f2fa:	2113      	movs	r1, #19
 800f2fc:	f105 0010 	add.w	r0, r5, #16
 800f300:	f000 f818 	bl	800f334 <core_set_error>
 800f304:	e6d8      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f306:	2217      	movs	r2, #23
 800f308:	2113      	movs	r1, #19
 800f30a:	f105 0010 	add.w	r0, r5, #16
 800f30e:	4654      	mov	r4, sl
 800f310:	f000 f810 	bl	800f334 <core_set_error>
 800f314:	e6d0      	b.n	800f0b8 <ai_platform_network_process+0x34c>
 800f316:	bf00      	nop
 800f318:	58024000 	.word	0x58024000
 800f31c:	f407a5c2 	.word	0xf407a5c2
 800f320:	b5e8b5cd 	.word	0xb5e8b5cd

0800f324 <core_init>:
 800f324:	2001      	movs	r0, #1
 800f326:	4770      	bx	lr

0800f328 <core_get_error>:
 800f328:	4603      	mov	r3, r0
 800f32a:	2200      	movs	r2, #0
 800f32c:	6800      	ldr	r0, [r0, #0]
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop

0800f334 <core_set_error>:
 800f334:	4603      	mov	r3, r0
 800f336:	7800      	ldrb	r0, [r0, #0]
 800f338:	b108      	cbz	r0, 800f33e <core_set_error+0xa>
 800f33a:	2000      	movs	r0, #0
 800f33c:	4770      	bx	lr
 800f33e:	7019      	strb	r1, [r3, #0]
 800f340:	2001      	movs	r0, #1
 800f342:	6819      	ldr	r1, [r3, #0]
 800f344:	f362 211f 	bfi	r1, r2, #8, #24
 800f348:	6019      	str	r1, [r3, #0]
 800f34a:	4770      	bx	lr

0800f34c <node_convert_integer>:
 800f34c:	6982      	ldr	r2, [r0, #24]
 800f34e:	8813      	ldrh	r3, [r2, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d058      	beq.n	800f406 <node_convert_integer+0xba>
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	6852      	ldr	r2, [r2, #4]
 800f358:	b082      	sub	sp, #8
 800f35a:	6856      	ldr	r6, [r2, #4]
 800f35c:	b106      	cbz	r6, 800f360 <node_convert_integer+0x14>
 800f35e:	6836      	ldr	r6, [r6, #0]
 800f360:	2b01      	cmp	r3, #1
 800f362:	f000 8100 	beq.w	800f566 <node_convert_integer+0x21a>
 800f366:	6915      	ldr	r5, [r2, #16]
 800f368:	b105      	cbz	r5, 800f36c <node_convert_integer+0x20>
 800f36a:	682d      	ldr	r5, [r5, #0]
 800f36c:	68b3      	ldr	r3, [r6, #8]
 800f36e:	0a1b      	lsrs	r3, r3, #8
 800f370:	f000 80d3 	beq.w	800f51a <node_convert_integer+0x1ce>
 800f374:	68f0      	ldr	r0, [r6, #12]
 800f376:	2201      	movs	r2, #1
 800f378:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f37c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f380:	4298      	cmp	r0, r3
 800f382:	fb01 f202 	mul.w	r2, r1, r2
 800f386:	d1f9      	bne.n	800f37c <node_convert_integer+0x30>
 800f388:	6833      	ldr	r3, [r6, #0]
 800f38a:	682c      	ldr	r4, [r5, #0]
 800f38c:	b17b      	cbz	r3, 800f3ae <node_convert_integer+0x62>
 800f38e:	6859      	ldr	r1, [r3, #4]
 800f390:	b169      	cbz	r1, 800f3ae <node_convert_integer+0x62>
 800f392:	8858      	ldrh	r0, [r3, #2]
 800f394:	b158      	cbz	r0, 800f3ae <node_convert_integer+0x62>
 800f396:	6809      	ldr	r1, [r1, #0]
 800f398:	ed91 7a00 	vldr	s14, [r1]
 800f39c:	b15c      	cbz	r4, 800f3b6 <node_convert_integer+0x6a>
 800f39e:	6861      	ldr	r1, [r4, #4]
 800f3a0:	b149      	cbz	r1, 800f3b6 <node_convert_integer+0x6a>
 800f3a2:	8860      	ldrh	r0, [r4, #2]
 800f3a4:	b138      	cbz	r0, 800f3b6 <node_convert_integer+0x6a>
 800f3a6:	6809      	ldr	r1, [r1, #0]
 800f3a8:	edd1 7a00 	vldr	s15, [r1]
 800f3ac:	e005      	b.n	800f3ba <node_convert_integer+0x6e>
 800f3ae:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800f56c <node_convert_integer+0x220>
 800f3b2:	2c00      	cmp	r4, #0
 800f3b4:	d1f3      	bne.n	800f39e <node_convert_integer+0x52>
 800f3b6:	eddf 7a6d 	vldr	s15, [pc, #436]	; 800f56c <node_convert_integer+0x220>
 800f3ba:	69b0      	ldr	r0, [r6, #24]
 800f3bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f3c0:	69ad      	ldr	r5, [r5, #24]
 800f3c2:	6806      	ldr	r6, [r0, #0]
 800f3c4:	6829      	ldr	r1, [r5, #0]
 800f3c6:	0236      	lsls	r6, r6, #8
 800f3c8:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 800f3cc:	d41d      	bmi.n	800f40a <node_convert_integer+0xbe>
 800f3ce:	2900      	cmp	r1, #0
 800f3d0:	f040 8081 	bne.w	800f4d6 <node_convert_integer+0x18a>
 800f3d4:	6880      	ldr	r0, [r0, #8]
 800f3d6:	68a9      	ldr	r1, [r5, #8]
 800f3d8:	b13b      	cbz	r3, 800f3ea <node_convert_integer+0x9e>
 800f3da:	685d      	ldr	r5, [r3, #4]
 800f3dc:	2d00      	cmp	r5, #0
 800f3de:	f000 80a7 	beq.w	800f530 <node_convert_integer+0x1e4>
 800f3e2:	885b      	ldrh	r3, [r3, #2]
 800f3e4:	b10b      	cbz	r3, 800f3ea <node_convert_integer+0x9e>
 800f3e6:	686b      	ldr	r3, [r5, #4]
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	b13c      	cbz	r4, 800f3fc <node_convert_integer+0xb0>
 800f3ec:	6865      	ldr	r5, [r4, #4]
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	f000 80ad 	beq.w	800f54e <node_convert_integer+0x202>
 800f3f4:	8864      	ldrh	r4, [r4, #2]
 800f3f6:	b10c      	cbz	r4, 800f3fc <node_convert_integer+0xb0>
 800f3f8:	686c      	ldr	r4, [r5, #4]
 800f3fa:	7824      	ldrb	r4, [r4, #0]
 800f3fc:	9400      	str	r4, [sp, #0]
 800f3fe:	f001 fd27 	bl	8010e50 <forward_lite_node_convert_integer_iu8ou8>
 800f402:	b002      	add	sp, #8
 800f404:	bd70      	pop	{r4, r5, r6, pc}
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	deff      	udf	#255	; 0xff
 800f40a:	2900      	cmp	r1, #0
 800f40c:	d042      	beq.n	800f494 <node_convert_integer+0x148>
 800f40e:	6886      	ldr	r6, [r0, #8]
 800f410:	68a9      	ldr	r1, [r5, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d07f      	beq.n	800f516 <node_convert_integer+0x1ca>
 800f416:	6858      	ldr	r0, [r3, #4]
 800f418:	2800      	cmp	r0, #0
 800f41a:	f000 8092 	beq.w	800f542 <node_convert_integer+0x1f6>
 800f41e:	885d      	ldrh	r5, [r3, #2]
 800f420:	b115      	cbz	r5, 800f428 <node_convert_integer+0xdc>
 800f422:	6843      	ldr	r3, [r0, #4]
 800f424:	f993 5000 	ldrsb.w	r5, [r3]
 800f428:	2c00      	cmp	r4, #0
 800f42a:	d078      	beq.n	800f51e <node_convert_integer+0x1d2>
 800f42c:	6863      	ldr	r3, [r4, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d07b      	beq.n	800f52a <node_convert_integer+0x1de>
 800f432:	8860      	ldrh	r0, [r4, #2]
 800f434:	2800      	cmp	r0, #0
 800f436:	d075      	beq.n	800f524 <node_convert_integer+0x1d8>
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	f993 3000 	ldrsb.w	r3, [r3]
 800f43e:	ee06 3a90 	vmov	s13, r3
 800f442:	2a00      	cmp	r2, #0
 800f444:	d0dd      	beq.n	800f402 <node_convert_integer+0xb6>
 800f446:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f44a:	4432      	add	r2, r6
 800f44c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f450:	eddf 5a47 	vldr	s11, [pc, #284]	; 800f570 <node_convert_integer+0x224>
 800f454:	f916 3b01 	ldrsb.w	r3, [r6], #1
 800f458:	1b5b      	subs	r3, r3, r5
 800f45a:	ee07 3a90 	vmov	s15, r3
 800f45e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f462:	eef0 7a66 	vmov.f32	s15, s13
 800f466:	eee7 7a00 	vfma.f32	s15, s14, s0
 800f46a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f472:	bfcc      	ite	gt
 800f474:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 800f478:	ee77 7ae5 	vsuble.f32	s15, s15, s11
 800f47c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f480:	ee17 3a90 	vmov	r3, s15
 800f484:	f303 0307 	ssat	r3, #8, r3
 800f488:	4296      	cmp	r6, r2
 800f48a:	f801 3b01 	strb.w	r3, [r1], #1
 800f48e:	d1e1      	bne.n	800f454 <node_convert_integer+0x108>
 800f490:	b002      	add	sp, #8
 800f492:	bd70      	pop	{r4, r5, r6, pc}
 800f494:	6880      	ldr	r0, [r0, #8]
 800f496:	68a9      	ldr	r1, [r5, #8]
 800f498:	b13b      	cbz	r3, 800f4aa <node_convert_integer+0x15e>
 800f49a:	685d      	ldr	r5, [r3, #4]
 800f49c:	2d00      	cmp	r5, #0
 800f49e:	d04c      	beq.n	800f53a <node_convert_integer+0x1ee>
 800f4a0:	885b      	ldrh	r3, [r3, #2]
 800f4a2:	b113      	cbz	r3, 800f4aa <node_convert_integer+0x15e>
 800f4a4:	686b      	ldr	r3, [r5, #4]
 800f4a6:	f993 3000 	ldrsb.w	r3, [r3]
 800f4aa:	b134      	cbz	r4, 800f4ba <node_convert_integer+0x16e>
 800f4ac:	6865      	ldr	r5, [r4, #4]
 800f4ae:	2d00      	cmp	r5, #0
 800f4b0:	d04b      	beq.n	800f54a <node_convert_integer+0x1fe>
 800f4b2:	8864      	ldrh	r4, [r4, #2]
 800f4b4:	b10c      	cbz	r4, 800f4ba <node_convert_integer+0x16e>
 800f4b6:	686c      	ldr	r4, [r5, #4]
 800f4b8:	7824      	ldrb	r4, [r4, #0]
 800f4ba:	eeb4 7a67 	vcmp.f32	s14, s15
 800f4be:	9400      	str	r4, [sp, #0]
 800f4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c4:	d103      	bne.n	800f4ce <node_convert_integer+0x182>
 800f4c6:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800f4ca:	42a5      	cmp	r5, r4
 800f4cc:	d048      	beq.n	800f560 <node_convert_integer+0x214>
 800f4ce:	f001 fd61 	bl	8010f94 <forward_lite_node_convert_integer_is8ou8>
 800f4d2:	b002      	add	sp, #8
 800f4d4:	bd70      	pop	{r4, r5, r6, pc}
 800f4d6:	b133      	cbz	r3, 800f4e6 <node_convert_integer+0x19a>
 800f4d8:	6859      	ldr	r1, [r3, #4]
 800f4da:	2900      	cmp	r1, #0
 800f4dc:	d039      	beq.n	800f552 <node_convert_integer+0x206>
 800f4de:	885b      	ldrh	r3, [r3, #2]
 800f4e0:	b10b      	cbz	r3, 800f4e6 <node_convert_integer+0x19a>
 800f4e2:	684b      	ldr	r3, [r1, #4]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	b134      	cbz	r4, 800f4f6 <node_convert_integer+0x1aa>
 800f4e8:	6861      	ldr	r1, [r4, #4]
 800f4ea:	b361      	cbz	r1, 800f546 <node_convert_integer+0x1fa>
 800f4ec:	8864      	ldrh	r4, [r4, #2]
 800f4ee:	b114      	cbz	r4, 800f4f6 <node_convert_integer+0x1aa>
 800f4f0:	6849      	ldr	r1, [r1, #4]
 800f4f2:	f991 4000 	ldrsb.w	r4, [r1]
 800f4f6:	eeb4 7a67 	vcmp.f32	s14, s15
 800f4fa:	6880      	ldr	r0, [r0, #8]
 800f4fc:	68a9      	ldr	r1, [r5, #8]
 800f4fe:	9400      	str	r4, [sp, #0]
 800f500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f504:	d103      	bne.n	800f50e <node_convert_integer+0x1c2>
 800f506:	f104 0580 	add.w	r5, r4, #128	; 0x80
 800f50a:	42ab      	cmp	r3, r5
 800f50c:	d025      	beq.n	800f55a <node_convert_integer+0x20e>
 800f50e:	f001 fcc9 	bl	8010ea4 <forward_lite_node_convert_integer_iu8os8>
 800f512:	b002      	add	sp, #8
 800f514:	bd70      	pop	{r4, r5, r6, pc}
 800f516:	461d      	mov	r5, r3
 800f518:	e786      	b.n	800f428 <node_convert_integer+0xdc>
 800f51a:	2201      	movs	r2, #1
 800f51c:	e734      	b.n	800f388 <node_convert_integer+0x3c>
 800f51e:	ee06 4a90 	vmov	s13, r4
 800f522:	e78e      	b.n	800f442 <node_convert_integer+0xf6>
 800f524:	ee06 0a90 	vmov	s13, r0
 800f528:	e78b      	b.n	800f442 <node_convert_integer+0xf6>
 800f52a:	ee06 3a90 	vmov	s13, r3
 800f52e:	e788      	b.n	800f442 <node_convert_integer+0xf6>
 800f530:	462b      	mov	r3, r5
 800f532:	2c00      	cmp	r4, #0
 800f534:	f47f af5a 	bne.w	800f3ec <node_convert_integer+0xa0>
 800f538:	e760      	b.n	800f3fc <node_convert_integer+0xb0>
 800f53a:	462b      	mov	r3, r5
 800f53c:	2c00      	cmp	r4, #0
 800f53e:	d1b5      	bne.n	800f4ac <node_convert_integer+0x160>
 800f540:	e7bb      	b.n	800f4ba <node_convert_integer+0x16e>
 800f542:	4605      	mov	r5, r0
 800f544:	e770      	b.n	800f428 <node_convert_integer+0xdc>
 800f546:	460c      	mov	r4, r1
 800f548:	e7d5      	b.n	800f4f6 <node_convert_integer+0x1aa>
 800f54a:	462c      	mov	r4, r5
 800f54c:	e7b5      	b.n	800f4ba <node_convert_integer+0x16e>
 800f54e:	462c      	mov	r4, r5
 800f550:	e754      	b.n	800f3fc <node_convert_integer+0xb0>
 800f552:	460b      	mov	r3, r1
 800f554:	2c00      	cmp	r4, #0
 800f556:	d1c7      	bne.n	800f4e8 <node_convert_integer+0x19c>
 800f558:	e7cd      	b.n	800f4f6 <node_convert_integer+0x1aa>
 800f55a:	f001 fce3 	bl	8010f24 <forward_lite_node_convert_integer_iu8os8_fast>
 800f55e:	e750      	b.n	800f402 <node_convert_integer+0xb6>
 800f560:	f001 fd42 	bl	8010fe8 <forward_lite_node_convert_integer_is8ou8_fast>
 800f564:	e74d      	b.n	800f402 <node_convert_integer+0xb6>
 800f566:	2300      	movs	r3, #0
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	deff      	udf	#255	; 0xff
 800f56c:	00000000 	.word	0x00000000
 800f570:	3efffffc 	.word	0x3efffffc

0800f574 <ai_check_custom_types>:
 800f574:	b082      	sub	sp, #8
 800f576:	4b12      	ldr	r3, [pc, #72]	; (800f5c0 <ai_check_custom_types+0x4c>)
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	b118      	cbz	r0, 800f584 <ai_check_custom_types+0x10>
 800f57c:	7803      	ldrb	r3, [r0, #0]
 800f57e:	2b03      	cmp	r3, #3
 800f580:	d002      	beq.n	800f588 <ai_check_custom_types+0x14>
 800f582:	2000      	movs	r0, #0
 800f584:	b002      	add	sp, #8
 800f586:	4770      	bx	lr
 800f588:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d004      	beq.n	800f59a <ai_check_custom_types+0x26>
 800f590:	2001      	movs	r0, #1
 800f592:	f080 0001 	eor.w	r0, r0, #1
 800f596:	b002      	add	sp, #8
 800f598:	4770      	bx	lr
 800f59a:	7842      	ldrb	r2, [r0, #1]
 800f59c:	3001      	adds	r0, #1
 800f59e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d1f4      	bne.n	800f590 <ai_check_custom_types+0x1c>
 800f5a6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800f5aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d1ee      	bne.n	800f590 <ai_check_custom_types+0x1c>
 800f5b2:	7842      	ldrb	r2, [r0, #1]
 800f5b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d1e9      	bne.n	800f590 <ai_check_custom_types+0x1c>
 800f5bc:	2000      	movs	r0, #0
 800f5be:	e7e8      	b.n	800f592 <ai_check_custom_types+0x1e>
 800f5c0:	84048403 	.word	0x84048403

0800f5c4 <ai_layers_init_all>:
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f5c8:	b13b      	cbz	r3, 800f5da <ai_layers_init_all+0x16>
 800f5ca:	691a      	ldr	r2, [r3, #16]
 800f5cc:	3101      	adds	r1, #1
 800f5ce:	60d8      	str	r0, [r3, #12]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	d001      	beq.n	800f5da <ai_layers_init_all+0x16>
 800f5d6:	2a00      	cmp	r2, #0
 800f5d8:	d1f6      	bne.n	800f5c8 <ai_layers_init_all+0x4>
 800f5da:	4608      	mov	r0, r1
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop

0800f5e0 <ai_layers_post_init_all>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	2500      	movs	r5, #0
 800f5e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800f5e6:	b16c      	cbz	r4, 800f604 <ai_layers_post_init_all+0x24>
 800f5e8:	6863      	ldr	r3, [r4, #4]
 800f5ea:	07db      	lsls	r3, r3, #31
 800f5ec:	d504      	bpl.n	800f5f8 <ai_layers_post_init_all+0x18>
 800f5ee:	6a23      	ldr	r3, [r4, #32]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	b10b      	cbz	r3, 800f5f8 <ai_layers_post_init_all+0x18>
 800f5f4:	3501      	adds	r5, #1
 800f5f6:	4798      	blx	r3
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	42a3      	cmp	r3, r4
 800f5fc:	461c      	mov	r4, r3
 800f5fe:	d001      	beq.n	800f604 <ai_layers_post_init_all+0x24>
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1f0      	bne.n	800f5e6 <ai_layers_post_init_all+0x6>
 800f604:	4628      	mov	r0, r5
 800f606:	bd38      	pop	{r3, r4, r5, pc}

0800f608 <ai_layers_forward_all>:
 800f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800f610:	4604      	mov	r4, r0
 800f612:	f1b8 0f00 	cmp.w	r8, #0
 800f616:	d02a      	beq.n	800f66e <ai_layers_forward_all+0x66>
 800f618:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800f61a:	6381      	str	r1, [r0, #56]	; 0x38
 800f61c:	b319      	cbz	r1, 800f666 <ai_layers_forward_all+0x5e>
 800f61e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f620:	2001      	movs	r0, #1
 800f622:	47c0      	blx	r8
 800f624:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f626:	b1f6      	cbz	r6, 800f666 <ai_layers_forward_all+0x5e>
 800f628:	2700      	movs	r7, #0
 800f62a:	4631      	mov	r1, r6
 800f62c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f62e:	2002      	movs	r0, #2
 800f630:	47c0      	blx	r8
 800f632:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f634:	4628      	mov	r0, r5
 800f636:	696b      	ldr	r3, [r5, #20]
 800f638:	4798      	blx	r3
 800f63a:	692e      	ldr	r6, [r5, #16]
 800f63c:	2003      	movs	r0, #3
 800f63e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f640:	42b5      	cmp	r5, r6
 800f642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f644:	d007      	beq.n	800f656 <ai_layers_forward_all+0x4e>
 800f646:	47c0      	blx	r8
 800f648:	3701      	adds	r7, #1
 800f64a:	63a6      	str	r6, [r4, #56]	; 0x38
 800f64c:	2e00      	cmp	r6, #0
 800f64e:	d1ec      	bne.n	800f62a <ai_layers_forward_all+0x22>
 800f650:	4638      	mov	r0, r7
 800f652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f656:	2003      	movs	r0, #3
 800f658:	3701      	adds	r7, #1
 800f65a:	47c0      	blx	r8
 800f65c:	2300      	movs	r3, #0
 800f65e:	4638      	mov	r0, r7
 800f660:	63a3      	str	r3, [r4, #56]	; 0x38
 800f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f666:	2700      	movs	r7, #0
 800f668:	4638      	mov	r0, r7
 800f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f66e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800f670:	6385      	str	r5, [r0, #56]	; 0x38
 800f672:	2d00      	cmp	r5, #0
 800f674:	d0f7      	beq.n	800f666 <ai_layers_forward_all+0x5e>
 800f676:	4647      	mov	r7, r8
 800f678:	696b      	ldr	r3, [r5, #20]
 800f67a:	4628      	mov	r0, r5
 800f67c:	4798      	blx	r3
 800f67e:	462b      	mov	r3, r5
 800f680:	692d      	ldr	r5, [r5, #16]
 800f682:	429d      	cmp	r5, r3
 800f684:	d004      	beq.n	800f690 <ai_layers_forward_all+0x88>
 800f686:	3701      	adds	r7, #1
 800f688:	63a5      	str	r5, [r4, #56]	; 0x38
 800f68a:	2d00      	cmp	r5, #0
 800f68c:	d1f4      	bne.n	800f678 <ai_layers_forward_all+0x70>
 800f68e:	e7df      	b.n	800f650 <ai_layers_forward_all+0x48>
 800f690:	2300      	movs	r3, #0
 800f692:	3701      	adds	r7, #1
 800f694:	63a3      	str	r3, [r4, #56]	; 0x38
 800f696:	e7db      	b.n	800f650 <ai_layers_forward_all+0x48>

0800f698 <func_dummy>:
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop

0800f69c <forward_conv2d_rgb_sssa8_ch>:
 800f69c:	6982      	ldr	r2, [r0, #24]
 800f69e:	8813      	ldrh	r3, [r2, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	f000 80f9 	beq.w	800f898 <forward_conv2d_rgb_sssa8_ch+0x1fc>
 800f6a6:	6852      	ldr	r2, [r2, #4]
 800f6a8:	6851      	ldr	r1, [r2, #4]
 800f6aa:	b101      	cbz	r1, 800f6ae <forward_conv2d_rgb_sssa8_ch+0x12>
 800f6ac:	6809      	ldr	r1, [r1, #0]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	f000 8112 	beq.w	800f8d8 <forward_conv2d_rgb_sssa8_ch+0x23c>
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800f6bc:	b09d      	sub	sp, #116	; 0x74
 800f6be:	f1b8 0f00 	cmp.w	r8, #0
 800f6c2:	d001      	beq.n	800f6c8 <forward_conv2d_rgb_sssa8_ch+0x2c>
 800f6c4:	f8d8 8000 	ldr.w	r8, [r8]
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	f000 80e2 	beq.w	800f892 <forward_conv2d_rgb_sssa8_ch+0x1f6>
 800f6ce:	69d4      	ldr	r4, [r2, #28]
 800f6d0:	2c00      	cmp	r4, #0
 800f6d2:	f000 80f9 	beq.w	800f8c8 <forward_conv2d_rgb_sssa8_ch+0x22c>
 800f6d6:	8b15      	ldrh	r5, [r2, #24]
 800f6d8:	f8d4 e000 	ldr.w	lr, [r4]
 800f6dc:	2d01      	cmp	r5, #1
 800f6de:	f200 80dd 	bhi.w	800f89c <forward_conv2d_rgb_sssa8_ch+0x200>
 800f6e2:	2500      	movs	r5, #0
 800f6e4:	2b03      	cmp	r3, #3
 800f6e6:	f000 80fa 	beq.w	800f8de <forward_conv2d_rgb_sssa8_ch+0x242>
 800f6ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f6ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f000 80ef 	beq.w	800f8d2 <forward_conv2d_rgb_sssa8_ch+0x236>
 800f6f4:	681e      	ldr	r6, [r3, #0]
 800f6f6:	9214      	str	r2, [sp, #80]	; 0x50
 800f6f8:	960d      	str	r6, [sp, #52]	; 0x34
 800f6fa:	2a00      	cmp	r2, #0
 800f6fc:	f000 80dc 	beq.w	800f8b8 <forward_conv2d_rgb_sssa8_ch+0x21c>
 800f700:	685e      	ldr	r6, [r3, #4]
 800f702:	69ab      	ldr	r3, [r5, #24]
 800f704:	68f2      	ldr	r2, [r6, #12]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	6855      	ldr	r5, [r2, #4]
 800f70a:	931b      	str	r3, [sp, #108]	; 0x6c
 800f70c:	68cb      	ldr	r3, [r1, #12]
 800f70e:	fa1f f985 	uxth.w	r9, r5
 800f712:	9515      	str	r5, [sp, #84]	; 0x54
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	9317      	str	r3, [sp, #92]	; 0x5c
 800f718:	6893      	ldr	r3, [r2, #8]
 800f71a:	9316      	str	r3, [sp, #88]	; 0x58
 800f71c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f71e:	889b      	ldrh	r3, [r3, #4]
 800f720:	9319      	str	r3, [sp, #100]	; 0x64
 800f722:	f8de 300c 	ldr.w	r3, [lr, #12]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	931a      	str	r3, [sp, #104]	; 0x68
 800f72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f72c:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800f730:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800f732:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800f736:	9318      	str	r3, [sp, #96]	; 0x60
 800f738:	2c00      	cmp	r4, #0
 800f73a:	f000 80b7 	beq.w	800f8ac <forward_conv2d_rgb_sssa8_ch+0x210>
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	f000 80b3 	beq.w	800f8ac <forward_conv2d_rgb_sssa8_ch+0x210>
 800f746:	699f      	ldr	r7, [r3, #24]
 800f748:	2f00      	cmp	r7, #0
 800f74a:	bf18      	it	ne
 800f74c:	461f      	movne	r7, r3
 800f74e:	680c      	ldr	r4, [r1, #0]
 800f750:	6835      	ldr	r5, [r6, #0]
 800f752:	f8de 3000 	ldr.w	r3, [lr]
 800f756:	2c00      	cmp	r4, #0
 800f758:	f000 80a5 	beq.w	800f8a6 <forward_conv2d_rgb_sssa8_ch+0x20a>
 800f75c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f760:	f1ba 0f00 	cmp.w	sl, #0
 800f764:	f000 809f 	beq.w	800f8a6 <forward_conv2d_rgb_sssa8_ch+0x20a>
 800f768:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800f76c:	f1bb 0f00 	cmp.w	fp, #0
 800f770:	f000 8099 	beq.w	800f8a6 <forward_conv2d_rgb_sssa8_ch+0x20a>
 800f774:	f8da a000 	ldr.w	sl, [sl]
 800f778:	ed9a 0a00 	vldr	s0, [sl]
 800f77c:	2d00      	cmp	r5, #0
 800f77e:	f000 808f 	beq.w	800f8a0 <forward_conv2d_rgb_sssa8_ch+0x204>
 800f782:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f786:	f1ba 0f00 	cmp.w	sl, #0
 800f78a:	f000 8089 	beq.w	800f8a0 <forward_conv2d_rgb_sssa8_ch+0x204>
 800f78e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800f792:	f1bb 0f00 	cmp.w	fp, #0
 800f796:	f000 8083 	beq.w	800f8a0 <forward_conv2d_rgb_sssa8_ch+0x204>
 800f79a:	f8da a000 	ldr.w	sl, [sl]
 800f79e:	edda 0a00 	vldr	s1, [sl]
 800f7a2:	f8d1 a018 	ldr.w	sl, [r1, #24]
 800f7a6:	f8de 1018 	ldr.w	r1, [lr, #24]
 800f7aa:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800f7ae:	f8d1 b008 	ldr.w	fp, [r1, #8]
 800f7b2:	69b1      	ldr	r1, [r6, #24]
 800f7b4:	f8da a008 	ldr.w	sl, [sl, #8]
 800f7b8:	6889      	ldr	r1, [r1, #8]
 800f7ba:	900e      	str	r0, [sp, #56]	; 0x38
 800f7bc:	910f      	str	r1, [sp, #60]	; 0x3c
 800f7be:	b113      	cbz	r3, 800f7c6 <forward_conv2d_rgb_sssa8_ch+0x12a>
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	b103      	cbz	r3, 800f7c6 <forward_conv2d_rgb_sssa8_ch+0x12a>
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	b13c      	cbz	r4, 800f7d8 <forward_conv2d_rgb_sssa8_ch+0x13c>
 800f7c8:	6861      	ldr	r1, [r4, #4]
 800f7ca:	2900      	cmp	r1, #0
 800f7cc:	d078      	beq.n	800f8c0 <forward_conv2d_rgb_sssa8_ch+0x224>
 800f7ce:	8864      	ldrh	r4, [r4, #2]
 800f7d0:	b114      	cbz	r4, 800f7d8 <forward_conv2d_rgb_sssa8_ch+0x13c>
 800f7d2:	6849      	ldr	r1, [r1, #4]
 800f7d4:	f991 4000 	ldrsb.w	r4, [r1]
 800f7d8:	b13d      	cbz	r5, 800f7ea <forward_conv2d_rgb_sssa8_ch+0x14e>
 800f7da:	6869      	ldr	r1, [r5, #4]
 800f7dc:	2900      	cmp	r1, #0
 800f7de:	d071      	beq.n	800f8c4 <forward_conv2d_rgb_sssa8_ch+0x228>
 800f7e0:	886d      	ldrh	r5, [r5, #2]
 800f7e2:	b115      	cbz	r5, 800f7ea <forward_conv2d_rgb_sssa8_ch+0x14e>
 800f7e4:	6849      	ldr	r1, [r1, #4]
 800f7e6:	f991 5000 	ldrsb.w	r5, [r1]
 800f7ea:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
 800f7ee:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 800f7f2:	e9dc 0100 	ldrd	r0, r1, [ip]
 800f7f6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800f7fa:	f006 fcdf 	bl	80161bc <ai_array_get_byte_size>
 800f7fe:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 800f802:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f804:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 800f808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f80a:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 800f80e:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 800f812:	4618      	mov	r0, r3
 800f814:	1853      	adds	r3, r2, r1
 800f816:	4649      	mov	r1, r9
 800f818:	9210      	str	r2, [sp, #64]	; 0x40
 800f81a:	f003 fbf9 	bl	8013010 <align_factor_ch>
 800f81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f826:	f006 fcc9 	bl	80161bc <ai_array_get_byte_size>
 800f82a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f82c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f82e:	9307      	str	r3, [sp, #28]
 800f830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f832:	920a      	str	r2, [sp, #40]	; 0x28
 800f834:	465a      	mov	r2, fp
 800f836:	9009      	str	r0, [sp, #36]	; 0x24
 800f838:	4650      	mov	r0, sl
 800f83a:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 800f83e:	9404      	str	r4, [sp, #16]
 800f840:	e9cd 5305 	strd	r5, r3, [sp, #20]
 800f844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f846:	9303      	str	r3, [sp, #12]
 800f848:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f84a:	9302      	str	r3, [sp, #8]
 800f84c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f84e:	9301      	str	r3, [sp, #4]
 800f850:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800f854:	9308      	str	r3, [sp, #32]
 800f856:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	464b      	mov	r3, r9
 800f85e:	f001 f87b 	bl	8010958 <forward_lite_conv2d_rgb_sssa8_ch>
 800f862:	68b3      	ldr	r3, [r6, #8]
 800f864:	0a1b      	lsrs	r3, r3, #8
 800f866:	d032      	beq.n	800f8ce <forward_conv2d_rgb_sssa8_ch+0x232>
 800f868:	68f0      	ldr	r0, [r6, #12]
 800f86a:	2201      	movs	r2, #1
 800f86c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f870:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f874:	4298      	cmp	r0, r3
 800f876:	fb01 f202 	mul.w	r2, r1, r2
 800f87a:	d1f9      	bne.n	800f870 <forward_conv2d_rgb_sssa8_ch+0x1d4>
 800f87c:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 800f880:	463b      	mov	r3, r7
 800f882:	4631      	mov	r1, r6
 800f884:	4640      	mov	r0, r8
 800f886:	ee17 ca90 	vmov	ip, s15
 800f88a:	b01d      	add	sp, #116	; 0x74
 800f88c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f890:	4760      	bx	ip
 800f892:	2300      	movs	r3, #0
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	deff      	udf	#255	; 0xff
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	deff      	udf	#255	; 0xff
 800f89c:	6865      	ldr	r5, [r4, #4]
 800f89e:	e721      	b.n	800f6e4 <forward_conv2d_rgb_sssa8_ch+0x48>
 800f8a0:	eddf 0a11 	vldr	s1, [pc, #68]	; 800f8e8 <forward_conv2d_rgb_sssa8_ch+0x24c>
 800f8a4:	e77d      	b.n	800f7a2 <forward_conv2d_rgb_sssa8_ch+0x106>
 800f8a6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f8e8 <forward_conv2d_rgb_sssa8_ch+0x24c>
 800f8aa:	e767      	b.n	800f77c <forward_conv2d_rgb_sssa8_ch+0xe0>
 800f8ac:	6a07      	ldr	r7, [r0, #32]
 800f8ae:	2f00      	cmp	r7, #0
 800f8b0:	f43f af4d 	beq.w	800f74e <forward_conv2d_rgb_sssa8_ch+0xb2>
 800f8b4:	68bf      	ldr	r7, [r7, #8]
 800f8b6:	e74a      	b.n	800f74e <forward_conv2d_rgb_sssa8_ch+0xb2>
 800f8b8:	4b0c      	ldr	r3, [pc, #48]	; (800f8ec <forward_conv2d_rgb_sssa8_ch+0x250>)
 800f8ba:	4646      	mov	r6, r8
 800f8bc:	9314      	str	r3, [sp, #80]	; 0x50
 800f8be:	e720      	b.n	800f702 <forward_conv2d_rgb_sssa8_ch+0x66>
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	e789      	b.n	800f7d8 <forward_conv2d_rgb_sssa8_ch+0x13c>
 800f8c4:	460d      	mov	r5, r1
 800f8c6:	e790      	b.n	800f7ea <forward_conv2d_rgb_sssa8_ch+0x14e>
 800f8c8:	46a6      	mov	lr, r4
 800f8ca:	4625      	mov	r5, r4
 800f8cc:	e70a      	b.n	800f6e4 <forward_conv2d_rgb_sssa8_ch+0x48>
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	e7d4      	b.n	800f87c <forward_conv2d_rgb_sssa8_ch+0x1e0>
 800f8d2:	b93a      	cbnz	r2, 800f8e4 <forward_conv2d_rgb_sssa8_ch+0x248>
 800f8d4:	6993      	ldr	r3, [r2, #24]
 800f8d6:	deff      	udf	#255	; 0xff
 800f8d8:	2300      	movs	r3, #0
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	deff      	udf	#255	; 0xff
 800f8de:	2300      	movs	r3, #0
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	deff      	udf	#255	; 0xff
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	deff      	udf	#255	; 0xff
 800f8e8:	00000000 	.word	0x00000000
 800f8ec:	0800f699 	.word	0x0800f699

0800f8f0 <forward_dense_integer_SSSA>:
 800f8f0:	6982      	ldr	r2, [r0, #24]
 800f8f2:	8813      	ldrh	r3, [r2, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 80c8 	beq.w	800fa8a <forward_dense_integer_SSSA+0x19a>
 800f8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fe:	6852      	ldr	r2, [r2, #4]
 800f900:	b093      	sub	sp, #76	; 0x4c
 800f902:	6854      	ldr	r4, [r2, #4]
 800f904:	b104      	cbz	r4, 800f908 <forward_dense_integer_SSSA+0x18>
 800f906:	6824      	ldr	r4, [r4, #0]
 800f908:	2b01      	cmp	r3, #1
 800f90a:	f000 8161 	beq.w	800fbd0 <forward_dense_integer_SSSA+0x2e0>
 800f90e:	6911      	ldr	r1, [r2, #16]
 800f910:	b101      	cbz	r1, 800f914 <forward_dense_integer_SSSA+0x24>
 800f912:	6809      	ldr	r1, [r1, #0]
 800f914:	2b02      	cmp	r3, #2
 800f916:	f000 815e 	beq.w	800fbd6 <forward_dense_integer_SSSA+0x2e6>
 800f91a:	69d5      	ldr	r5, [r2, #28]
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	f000 8108 	beq.w	800fb32 <forward_dense_integer_SSSA+0x242>
 800f922:	8b16      	ldrh	r6, [r2, #24]
 800f924:	6828      	ldr	r0, [r5, #0]
 800f926:	2e01      	cmp	r6, #1
 800f928:	f240 812d 	bls.w	800fb86 <forward_dense_integer_SSSA+0x296>
 800f92c:	686d      	ldr	r5, [r5, #4]
 800f92e:	2b03      	cmp	r3, #3
 800f930:	f000 8154 	beq.w	800fbdc <forward_dense_integer_SSSA+0x2ec>
 800f934:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
 800f938:	69ab      	ldr	r3, [r5, #24]
 800f93a:	f1b9 0f00 	cmp.w	r9, #0
 800f93e:	f000 810f 	beq.w	800fb60 <forward_dense_integer_SSSA+0x270>
 800f942:	689b      	ldr	r3, [r3, #8]
 800f944:	68e2      	ldr	r2, [r4, #12]
 800f946:	930b      	str	r3, [sp, #44]	; 0x2c
 800f948:	68cb      	ldr	r3, [r1, #12]
 800f94a:	6856      	ldr	r6, [r2, #4]
 800f94c:	f8d9 9000 	ldr.w	r9, [r9]
 800f950:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800f954:	698d      	ldr	r5, [r1, #24]
 800f956:	960f      	str	r6, [sp, #60]	; 0x3c
 800f958:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	fb03 f302 	mul.w	r3, r3, r2
 800f962:	b2b2      	uxth	r2, r6
 800f964:	930c      	str	r3, [sp, #48]	; 0x30
 800f966:	fa1f f38a 	uxth.w	r3, sl
 800f96a:	f1b9 0f00 	cmp.w	r9, #0
 800f96e:	d003      	beq.n	800f978 <forward_dense_integer_SSSA+0x88>
 800f970:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800f974:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800f978:	6827      	ldr	r7, [r4, #0]
 800f97a:	f8d0 b000 	ldr.w	fp, [r0]
 800f97e:	680c      	ldr	r4, [r1, #0]
 800f980:	6981      	ldr	r1, [r0, #24]
 800f982:	2f00      	cmp	r7, #0
 800f984:	f000 8083 	beq.w	800fa8e <forward_dense_integer_SSSA+0x19e>
 800f988:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800f98c:	f1bc 0f00 	cmp.w	ip, #0
 800f990:	f000 80b1 	beq.w	800faf6 <forward_dense_integer_SSSA+0x206>
 800f994:	8878      	ldrh	r0, [r7, #2]
 800f996:	2800      	cmp	r0, #0
 800f998:	f000 809c 	beq.w	800fad4 <forward_dense_integer_SSSA+0x1e4>
 800f99c:	f8dc 6000 	ldr.w	r6, [ip]
 800f9a0:	edd6 7a00 	vldr	s15, [r6]
 800f9a4:	2c00      	cmp	r4, #0
 800f9a6:	f000 809a 	beq.w	800fade <forward_dense_integer_SSSA+0x1ee>
 800f9aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f9ae:	f1b8 0f00 	cmp.w	r8, #0
 800f9b2:	f000 80a9 	beq.w	800fb08 <forward_dense_integer_SSSA+0x218>
 800f9b6:	8860      	ldrh	r0, [r4, #2]
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d074      	beq.n	800faa6 <forward_dense_integer_SSSA+0x1b6>
 800f9bc:	68ae      	ldr	r6, [r5, #8]
 800f9be:	f8de 5008 	ldr.w	r5, [lr, #8]
 800f9c2:	6889      	ldr	r1, [r1, #8]
 800f9c4:	950d      	str	r5, [sp, #52]	; 0x34
 800f9c6:	f8d8 5000 	ldr.w	r5, [r8]
 800f9ca:	ed95 0a00 	vldr	s0, [r5]
 800f9ce:	f1bc 0f00 	cmp.w	ip, #0
 800f9d2:	d076      	beq.n	800fac2 <forward_dense_integer_SSSA+0x1d2>
 800f9d4:	8878      	ldrh	r0, [r7, #2]
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	f000 80a3 	beq.w	800fb22 <forward_dense_integer_SSSA+0x232>
 800f9dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800f9e0:	f990 7000 	ldrsb.w	r7, [r0]
 800f9e4:	2c00      	cmp	r4, #0
 800f9e6:	f000 80eb 	beq.w	800fbc0 <forward_dense_integer_SSSA+0x2d0>
 800f9ea:	f1b8 0f00 	cmp.w	r8, #0
 800f9ee:	f000 809d 	beq.w	800fb2c <forward_dense_integer_SSSA+0x23c>
 800f9f2:	8860      	ldrh	r0, [r4, #2]
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d167      	bne.n	800fac8 <forward_dense_integer_SSSA+0x1d8>
 800f9f8:	900a      	str	r0, [sp, #40]	; 0x28
 800f9fa:	910e      	str	r1, [sp, #56]	; 0x38
 800f9fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fa00:	f1bb 0f00 	cmp.w	fp, #0
 800fa04:	f000 80de 	beq.w	800fbc4 <forward_dense_integer_SSSA+0x2d4>
 800fa08:	f8db 0004 	ldr.w	r0, [fp, #4]
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	f000 80d9 	beq.w	800fbc4 <forward_dense_integer_SSSA+0x2d4>
 800fa12:	6800      	ldr	r0, [r0, #0]
 800fa14:	2400      	movs	r4, #0
 800fa16:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800fa1a:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800fa1e:	9411      	str	r4, [sp, #68]	; 0x44
 800fa20:	ed90 7a00 	vldr	s14, [r0]
 800fa24:	4640      	mov	r0, r8
 800fa26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa2a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800fa2e:	f003 fa9d 	bl	8012f6c <align_factor>
 800fa32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa34:	9011      	str	r0, [sp, #68]	; 0x44
 800fa36:	b32b      	cbz	r3, 800fa84 <forward_dense_integer_SSSA+0x194>
 800fa38:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fa3c:	4699      	mov	r9, r3
 800fa3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa40:	fa1f fa8a 	uxth.w	sl, sl
 800fa44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fa46:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800fa4a:	970d      	str	r7, [sp, #52]	; 0x34
 800fa4c:	461f      	mov	r7, r3
 800fa4e:	9a08      	ldr	r2, [sp, #32]
 800fa50:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fa52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa54:	3401      	adds	r4, #1
 800fa56:	4628      	mov	r0, r5
 800fa58:	9605      	str	r6, [sp, #20]
 800fa5a:	9306      	str	r3, [sp, #24]
 800fa5c:	4456      	add	r6, sl
 800fa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa60:	445d      	add	r5, fp
 800fa62:	9304      	str	r3, [sp, #16]
 800fa64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa66:	9303      	str	r3, [sp, #12]
 800fa68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa6a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800fa6e:	ab11      	add	r3, sp, #68	; 0x44
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	463b      	mov	r3, r7
 800fa74:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800fa78:	f003 fb84 	bl	8013184 <st_sssa8_fully_connected>
 800fa7c:	454c      	cmp	r4, r9
 800fa7e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800fa82:	d1e6      	bne.n	800fa52 <forward_dense_integer_SSSA+0x162>
 800fa84:	b013      	add	sp, #76	; 0x4c
 800fa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	deff      	udf	#255	; 0xff
 800fa8e:	2c00      	cmp	r4, #0
 800fa90:	d056      	beq.n	800fb40 <forward_dense_integer_SSSA+0x250>
 800fa92:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fa96:	f1b8 0f00 	cmp.w	r8, #0
 800fa9a:	d05d      	beq.n	800fb58 <forward_dense_integer_SSSA+0x268>
 800fa9c:	8860      	ldrh	r0, [r4, #2]
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	d173      	bne.n	800fb8a <forward_dense_integer_SSSA+0x29a>
 800faa2:	eddf 7a50 	vldr	s15, [pc, #320]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800faa6:	68ae      	ldr	r6, [r5, #8]
 800faa8:	f8de 5008 	ldr.w	r5, [lr, #8]
 800faac:	6889      	ldr	r1, [r1, #8]
 800faae:	950d      	str	r5, [sp, #52]	; 0x34
 800fab0:	2f00      	cmp	r7, #0
 800fab2:	d041      	beq.n	800fb38 <forward_dense_integer_SSSA+0x248>
 800fab4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800fab8:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fabc:	f1bc 0f00 	cmp.w	ip, #0
 800fac0:	d188      	bne.n	800f9d4 <forward_dense_integer_SSSA+0xe4>
 800fac2:	4667      	mov	r7, ip
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d097      	beq.n	800f9f8 <forward_dense_integer_SSSA+0x108>
 800fac8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800facc:	f990 0000 	ldrsb.w	r0, [r0]
 800fad0:	900a      	str	r0, [sp, #40]	; 0x28
 800fad2:	e792      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800fad4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fad8:	2c00      	cmp	r4, #0
 800fada:	f47f af66 	bne.w	800f9aa <forward_dense_integer_SSSA+0xba>
 800fade:	68ae      	ldr	r6, [r5, #8]
 800fae0:	f8de 5008 	ldr.w	r5, [lr, #8]
 800fae4:	6889      	ldr	r1, [r1, #8]
 800fae6:	950d      	str	r5, [sp, #52]	; 0x34
 800fae8:	2800      	cmp	r0, #0
 800faea:	d15a      	bne.n	800fba2 <forward_dense_integer_SSSA+0x2b2>
 800faec:	4607      	mov	r7, r0
 800faee:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800faf2:	900a      	str	r0, [sp, #40]	; 0x28
 800faf4:	e781      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800faf6:	b31c      	cbz	r4, 800fb40 <forward_dense_integer_SSSA+0x250>
 800faf8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fafc:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fb00:	f1b8 0f00 	cmp.w	r8, #0
 800fb04:	f47f af57 	bne.w	800f9b6 <forward_dense_integer_SSSA+0xc6>
 800fb08:	f8de 0008 	ldr.w	r0, [lr, #8]
 800fb0c:	68ae      	ldr	r6, [r5, #8]
 800fb0e:	6889      	ldr	r1, [r1, #8]
 800fb10:	900d      	str	r0, [sp, #52]	; 0x34
 800fb12:	f1bc 0f00 	cmp.w	ip, #0
 800fb16:	d00e      	beq.n	800fb36 <forward_dense_integer_SSSA+0x246>
 800fb18:	8878      	ldrh	r0, [r7, #2]
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d149      	bne.n	800fbb2 <forward_dense_integer_SSSA+0x2c2>
 800fb1e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fb22:	2700      	movs	r7, #0
 800fb24:	f1b8 0f00 	cmp.w	r8, #0
 800fb28:	f47f af63 	bne.w	800f9f2 <forward_dense_integer_SSSA+0x102>
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	900a      	str	r0, [sp, #40]	; 0x28
 800fb30:	e763      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800fb32:	4628      	mov	r0, r5
 800fb34:	e6fb      	b.n	800f92e <forward_dense_integer_SSSA+0x3e>
 800fb36:	4667      	mov	r7, ip
 800fb38:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fb3c:	970a      	str	r7, [sp, #40]	; 0x28
 800fb3e:	e75c      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800fb40:	eddf 7a28 	vldr	s15, [pc, #160]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fb44:	4627      	mov	r7, r4
 800fb46:	f8de 0008 	ldr.w	r0, [lr, #8]
 800fb4a:	eeb0 0a67 	vmov.f32	s0, s15
 800fb4e:	68ae      	ldr	r6, [r5, #8]
 800fb50:	6889      	ldr	r1, [r1, #8]
 800fb52:	900d      	str	r0, [sp, #52]	; 0x34
 800fb54:	970a      	str	r7, [sp, #40]	; 0x28
 800fb56:	e750      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800fb58:	eddf 7a22 	vldr	s15, [pc, #136]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fb5c:	4647      	mov	r7, r8
 800fb5e:	e7f2      	b.n	800fb46 <forward_dense_integer_SSSA+0x256>
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	68e2      	ldr	r2, [r4, #12]
 800fb64:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb66:	68cb      	ldr	r3, [r1, #12]
 800fb68:	6856      	ldr	r6, [r2, #4]
 800fb6a:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800fb6e:	698d      	ldr	r5, [r1, #24]
 800fb70:	960f      	str	r6, [sp, #60]	; 0x3c
 800fb72:	e9d3 a201 	ldrd	sl, r2, [r3, #4]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	fb03 f302 	mul.w	r3, r3, r2
 800fb7c:	b2b2      	uxth	r2, r6
 800fb7e:	930c      	str	r3, [sp, #48]	; 0x30
 800fb80:	fa1f f38a 	uxth.w	r3, sl
 800fb84:	e6f8      	b.n	800f978 <forward_dense_integer_SSSA+0x88>
 800fb86:	2500      	movs	r5, #0
 800fb88:	e6d1      	b.n	800f92e <forward_dense_integer_SSSA+0x3e>
 800fb8a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800fb8e:	68ae      	ldr	r6, [r5, #8]
 800fb90:	900d      	str	r0, [sp, #52]	; 0x34
 800fb92:	f8d8 0000 	ldr.w	r0, [r8]
 800fb96:	6889      	ldr	r1, [r1, #8]
 800fb98:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fb9c:	ed90 0a00 	vldr	s0, [r0]
 800fba0:	e792      	b.n	800fac8 <forward_dense_integer_SSSA+0x1d8>
 800fba2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800fba6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fbaa:	f990 7000 	ldrsb.w	r7, [r0]
 800fbae:	940a      	str	r4, [sp, #40]	; 0x28
 800fbb0:	e723      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800fbb2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800fbb6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800fbe4 <forward_dense_integer_SSSA+0x2f4>
 800fbba:	f990 7000 	ldrsb.w	r7, [r0]
 800fbbe:	e7b5      	b.n	800fb2c <forward_dense_integer_SSSA+0x23c>
 800fbc0:	940a      	str	r4, [sp, #40]	; 0x28
 800fbc2:	e71a      	b.n	800f9fa <forward_dense_integer_SSSA+0x10a>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800fbca:	9311      	str	r3, [sp, #68]	; 0x44
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	deff      	udf	#255	; 0xff
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	deff      	udf	#255	; 0xff
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	deff      	udf	#255	; 0xff
 800fbdc:	2300      	movs	r3, #0
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	deff      	udf	#255	; 0xff
 800fbe2:	bf00      	nop
 800fbe4:	00000000 	.word	0x00000000

0800fbe8 <func_dummy>:
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop

0800fbec <forward_dw_3x3_sssa8_ch>:
 800fbec:	6983      	ldr	r3, [r0, #24]
 800fbee:	881a      	ldrh	r2, [r3, #0]
 800fbf0:	2a00      	cmp	r2, #0
 800fbf2:	f000 80d8 	beq.w	800fda6 <forward_dw_3x3_sssa8_ch+0x1ba>
 800fbf6:	6859      	ldr	r1, [r3, #4]
 800fbf8:	684b      	ldr	r3, [r1, #4]
 800fbfa:	b103      	cbz	r3, 800fbfe <forward_dw_3x3_sssa8_ch+0x12>
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2a01      	cmp	r2, #1
 800fc00:	f000 80f2 	beq.w	800fde8 <forward_dw_3x3_sssa8_ch+0x1fc>
 800fc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc08:	f8d1 8010 	ldr.w	r8, [r1, #16]
 800fc0c:	b097      	sub	sp, #92	; 0x5c
 800fc0e:	f1b8 0f00 	cmp.w	r8, #0
 800fc12:	d001      	beq.n	800fc18 <forward_dw_3x3_sssa8_ch+0x2c>
 800fc14:	f8d8 8000 	ldr.w	r8, [r8]
 800fc18:	2a02      	cmp	r2, #2
 800fc1a:	f000 80c1 	beq.w	800fda0 <forward_dw_3x3_sssa8_ch+0x1b4>
 800fc1e:	69cc      	ldr	r4, [r1, #28]
 800fc20:	2c00      	cmp	r4, #0
 800fc22:	f000 80d8 	beq.w	800fdd6 <forward_dw_3x3_sssa8_ch+0x1ea>
 800fc26:	8b0d      	ldrh	r5, [r1, #24]
 800fc28:	f8d4 e000 	ldr.w	lr, [r4]
 800fc2c:	2d01      	cmp	r5, #1
 800fc2e:	f200 80bc 	bhi.w	800fdaa <forward_dw_3x3_sssa8_ch+0x1be>
 800fc32:	2500      	movs	r5, #0
 800fc34:	2a03      	cmp	r2, #3
 800fc36:	f000 80da 	beq.w	800fdee <forward_dw_3x3_sssa8_ch+0x202>
 800fc3a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800fc3c:	2a00      	cmp	r2, #0
 800fc3e:	f000 80cf 	beq.w	800fde0 <forward_dw_3x3_sssa8_ch+0x1f4>
 800fc42:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800fc44:	6817      	ldr	r7, [r2, #0]
 800fc46:	910e      	str	r1, [sp, #56]	; 0x38
 800fc48:	2900      	cmp	r1, #0
 800fc4a:	f000 80bc 	beq.w	800fdc6 <forward_dw_3x3_sssa8_ch+0x1da>
 800fc4e:	6856      	ldr	r6, [r2, #4]
 800fc50:	69a9      	ldr	r1, [r5, #24]
 800fc52:	69ba      	ldr	r2, [r7, #24]
 800fc54:	6889      	ldr	r1, [r1, #8]
 800fc56:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 800fc58:	9115      	str	r1, [sp, #84]	; 0x54
 800fc5a:	9713      	str	r7, [sp, #76]	; 0x4c
 800fc5c:	68f1      	ldr	r1, [r6, #12]
 800fc5e:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800fc60:	68dd      	ldr	r5, [r3, #12]
 800fc62:	9714      	str	r7, [sp, #80]	; 0x50
 800fc64:	68cf      	ldr	r7, [r1, #12]
 800fc66:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800fc6a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800fc6e:	6889      	ldr	r1, [r1, #8]
 800fc70:	970f      	str	r7, [sp, #60]	; 0x3c
 800fc72:	68ef      	ldr	r7, [r5, #12]
 800fc74:	68ad      	ldr	r5, [r5, #8]
 800fc76:	9110      	str	r1, [sp, #64]	; 0x40
 800fc78:	fa1f f18c 	uxth.w	r1, ip
 800fc7c:	6892      	ldr	r2, [r2, #8]
 800fc7e:	9711      	str	r7, [sp, #68]	; 0x44
 800fc80:	9512      	str	r5, [sp, #72]	; 0x48
 800fc82:	2c00      	cmp	r4, #0
 800fc84:	f000 8099 	beq.w	800fdba <forward_dw_3x3_sssa8_ch+0x1ce>
 800fc88:	68a4      	ldr	r4, [r4, #8]
 800fc8a:	2c00      	cmp	r4, #0
 800fc8c:	f000 8095 	beq.w	800fdba <forward_dw_3x3_sssa8_ch+0x1ce>
 800fc90:	69a7      	ldr	r7, [r4, #24]
 800fc92:	2f00      	cmp	r7, #0
 800fc94:	bf18      	it	ne
 800fc96:	4627      	movne	r7, r4
 800fc98:	681c      	ldr	r4, [r3, #0]
 800fc9a:	6835      	ldr	r5, [r6, #0]
 800fc9c:	f8de 0000 	ldr.w	r0, [lr]
 800fca0:	2c00      	cmp	r4, #0
 800fca2:	f000 8087 	beq.w	800fdb4 <forward_dw_3x3_sssa8_ch+0x1c8>
 800fca6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fcaa:	f1b9 0f00 	cmp.w	r9, #0
 800fcae:	f000 8081 	beq.w	800fdb4 <forward_dw_3x3_sssa8_ch+0x1c8>
 800fcb2:	f8b4 a002 	ldrh.w	sl, [r4, #2]
 800fcb6:	f1ba 0f00 	cmp.w	sl, #0
 800fcba:	d07b      	beq.n	800fdb4 <forward_dw_3x3_sssa8_ch+0x1c8>
 800fcbc:	f8d9 9000 	ldr.w	r9, [r9]
 800fcc0:	ed99 0a00 	vldr	s0, [r9]
 800fcc4:	2d00      	cmp	r5, #0
 800fcc6:	d072      	beq.n	800fdae <forward_dw_3x3_sssa8_ch+0x1c2>
 800fcc8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800fccc:	f1b9 0f00 	cmp.w	r9, #0
 800fcd0:	d06d      	beq.n	800fdae <forward_dw_3x3_sssa8_ch+0x1c2>
 800fcd2:	f8b5 a002 	ldrh.w	sl, [r5, #2]
 800fcd6:	f1ba 0f00 	cmp.w	sl, #0
 800fcda:	d068      	beq.n	800fdae <forward_dw_3x3_sssa8_ch+0x1c2>
 800fcdc:	f8d9 9000 	ldr.w	r9, [r9]
 800fce0:	edd9 0a00 	vldr	s1, [r9]
 800fce4:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800fce8:	f8de 3018 	ldr.w	r3, [lr, #24]
 800fcec:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	930c      	str	r3, [sp, #48]	; 0x30
 800fcf4:	69b3      	ldr	r3, [r6, #24]
 800fcf6:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fcfa:	b110      	cbz	r0, 800fd02 <forward_dw_3x3_sssa8_ch+0x116>
 800fcfc:	6840      	ldr	r0, [r0, #4]
 800fcfe:	b100      	cbz	r0, 800fd02 <forward_dw_3x3_sssa8_ch+0x116>
 800fd00:	6800      	ldr	r0, [r0, #0]
 800fd02:	b13c      	cbz	r4, 800fd14 <forward_dw_3x3_sssa8_ch+0x128>
 800fd04:	6863      	ldr	r3, [r4, #4]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d061      	beq.n	800fdce <forward_dw_3x3_sssa8_ch+0x1e2>
 800fd0a:	8864      	ldrh	r4, [r4, #2]
 800fd0c:	b114      	cbz	r4, 800fd14 <forward_dw_3x3_sssa8_ch+0x128>
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	f993 4000 	ldrsb.w	r4, [r3]
 800fd14:	b13d      	cbz	r5, 800fd26 <forward_dw_3x3_sssa8_ch+0x13a>
 800fd16:	686b      	ldr	r3, [r5, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d05a      	beq.n	800fdd2 <forward_dw_3x3_sssa8_ch+0x1e6>
 800fd1c:	886d      	ldrh	r5, [r5, #2]
 800fd1e:	b115      	cbz	r5, 800fd26 <forward_dw_3x3_sssa8_ch+0x13a>
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	f993 5000 	ldrsb.w	r5, [r3]
 800fd26:	fa1f fc8c 	uxth.w	ip, ip
 800fd2a:	231a      	movs	r3, #26
 800fd2c:	920d      	str	r2, [sp, #52]	; 0x34
 800fd2e:	fb03 230c 	mla	r3, r3, ip, r2
 800fd32:	f003 f96d 	bl	8013010 <align_factor_ch>
 800fd36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd3a:	4648      	mov	r0, r9
 800fd3c:	9303      	str	r3, [sp, #12]
 800fd3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd40:	9404      	str	r4, [sp, #16]
 800fd42:	2400      	movs	r4, #0
 800fd44:	9302      	str	r3, [sp, #8]
 800fd46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd48:	920a      	str	r2, [sp, #40]	; 0x28
 800fd4a:	9301      	str	r3, [sp, #4]
 800fd4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd4e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fd58:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800fd5c:	9308      	str	r3, [sp, #32]
 800fd5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fd62:	9409      	str	r4, [sp, #36]	; 0x24
 800fd64:	9307      	str	r3, [sp, #28]
 800fd66:	465b      	mov	r3, fp
 800fd68:	e9cd 5a05 	strd	r5, sl, [sp, #20]
 800fd6c:	f001 f970 	bl	8011050 <forward_lite_dw_3x3_sssa8_ch>
 800fd70:	68b3      	ldr	r3, [r6, #8]
 800fd72:	0a1b      	lsrs	r3, r3, #8
 800fd74:	d032      	beq.n	800fddc <forward_dw_3x3_sssa8_ch+0x1f0>
 800fd76:	68f0      	ldr	r0, [r6, #12]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fd7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd82:	4298      	cmp	r0, r3
 800fd84:	fb01 f202 	mul.w	r2, r1, r2
 800fd88:	d1f9      	bne.n	800fd7e <forward_dw_3x3_sssa8_ch+0x192>
 800fd8a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800fd8e:	463b      	mov	r3, r7
 800fd90:	4631      	mov	r1, r6
 800fd92:	4640      	mov	r0, r8
 800fd94:	ee17 ca90 	vmov	ip, s15
 800fd98:	b017      	add	sp, #92	; 0x5c
 800fd9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9e:	4760      	bx	ip
 800fda0:	2300      	movs	r3, #0
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	deff      	udf	#255	; 0xff
 800fda6:	6853      	ldr	r3, [r2, #4]
 800fda8:	deff      	udf	#255	; 0xff
 800fdaa:	6865      	ldr	r5, [r4, #4]
 800fdac:	e742      	b.n	800fc34 <forward_dw_3x3_sssa8_ch+0x48>
 800fdae:	eddf 0a12 	vldr	s1, [pc, #72]	; 800fdf8 <forward_dw_3x3_sssa8_ch+0x20c>
 800fdb2:	e797      	b.n	800fce4 <forward_dw_3x3_sssa8_ch+0xf8>
 800fdb4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fdf8 <forward_dw_3x3_sssa8_ch+0x20c>
 800fdb8:	e784      	b.n	800fcc4 <forward_dw_3x3_sssa8_ch+0xd8>
 800fdba:	6a07      	ldr	r7, [r0, #32]
 800fdbc:	2f00      	cmp	r7, #0
 800fdbe:	f43f af6b 	beq.w	800fc98 <forward_dw_3x3_sssa8_ch+0xac>
 800fdc2:	68bf      	ldr	r7, [r7, #8]
 800fdc4:	e768      	b.n	800fc98 <forward_dw_3x3_sssa8_ch+0xac>
 800fdc6:	4a0d      	ldr	r2, [pc, #52]	; (800fdfc <forward_dw_3x3_sssa8_ch+0x210>)
 800fdc8:	4646      	mov	r6, r8
 800fdca:	920e      	str	r2, [sp, #56]	; 0x38
 800fdcc:	e740      	b.n	800fc50 <forward_dw_3x3_sssa8_ch+0x64>
 800fdce:	461c      	mov	r4, r3
 800fdd0:	e7a0      	b.n	800fd14 <forward_dw_3x3_sssa8_ch+0x128>
 800fdd2:	461d      	mov	r5, r3
 800fdd4:	e7a7      	b.n	800fd26 <forward_dw_3x3_sssa8_ch+0x13a>
 800fdd6:	46a6      	mov	lr, r4
 800fdd8:	4625      	mov	r5, r4
 800fdda:	e72b      	b.n	800fc34 <forward_dw_3x3_sssa8_ch+0x48>
 800fddc:	2201      	movs	r2, #1
 800fdde:	e7d4      	b.n	800fd8a <forward_dw_3x3_sssa8_ch+0x19e>
 800fde0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fde2:	b93b      	cbnz	r3, 800fdf4 <forward_dw_3x3_sssa8_ch+0x208>
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	deff      	udf	#255	; 0xff
 800fde8:	2300      	movs	r3, #0
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	deff      	udf	#255	; 0xff
 800fdee:	2300      	movs	r3, #0
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	deff      	udf	#255	; 0xff
 800fdf4:	68d3      	ldr	r3, [r2, #12]
 800fdf6:	deff      	udf	#255	; 0xff
 800fdf8:	00000000 	.word	0x00000000
 800fdfc:	0800fbe9 	.word	0x0800fbe9

0800fe00 <forward_pad>:
 800fe00:	7f03      	ldrb	r3, [r0, #28]
 800fe02:	2b03      	cmp	r3, #3
 800fe04:	d80b      	bhi.n	800fe1e <forward_pad+0x1e>
 800fe06:	e8df f003 	tbb	[pc, r3]
 800fe0a:	0608      	.short	0x0608
 800fe0c:	0204      	.short	0x0204
 800fe0e:	f000 b863 	b.w	800fed8 <forward_pad_8bit_ch1st_3x3_constant>
 800fe12:	f000 b8dd 	b.w	800ffd0 <forward_pad_edge>
 800fe16:	f000 b91d 	b.w	8010054 <forward_pad_reflect>
 800fe1a:	f000 b88f 	b.w	800ff3c <forward_pad_constant>
 800fe1e:	4770      	bx	lr

0800fe20 <forward_sm_integer>:
 800fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe24:	6983      	ldr	r3, [r0, #24]
 800fe26:	b086      	sub	sp, #24
 800fe28:	881f      	ldrh	r7, [r3, #0]
 800fe2a:	2f00      	cmp	r7, #0
 800fe2c:	d042      	beq.n	800feb4 <forward_sm_integer+0x94>
 800fe2e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800fe32:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800fe36:	b106      	cbz	r6, 800fe3a <forward_sm_integer+0x1a>
 800fe38:	6836      	ldr	r6, [r6, #0]
 800fe3a:	2f01      	cmp	r7, #1
 800fe3c:	d043      	beq.n	800fec6 <forward_sm_integer+0xa6>
 800fe3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d044      	beq.n	800fed0 <forward_sm_integer+0xb0>
 800fe46:	f8d3 e000 	ldr.w	lr, [r3]
 800fe4a:	e9d6 1502 	ldrd	r1, r5, [r6, #8]
 800fe4e:	f8de 300c 	ldr.w	r3, [lr, #12]
 800fe52:	0a09      	lsrs	r1, r1, #8
 800fe54:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fe58:	686b      	ldr	r3, [r5, #4]
 800fe5a:	d032      	beq.n	800fec2 <forward_sm_integer+0xa2>
 800fe5c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800fe60:	2201      	movs	r2, #1
 800fe62:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe66:	428d      	cmp	r5, r1
 800fe68:	fb04 f202 	mul.w	r2, r4, r2
 800fe6c:	d1f9      	bne.n	800fe62 <forward_sm_integer+0x42>
 800fe6e:	69c1      	ldr	r1, [r0, #28]
 800fe70:	2f03      	cmp	r7, #3
 800fe72:	688c      	ldr	r4, [r1, #8]
 800fe74:	d927      	bls.n	800fec6 <forward_sm_integer+0xa6>
 800fe76:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800fe7a:	b339      	cbz	r1, 800fecc <forward_sm_integer+0xac>
 800fe7c:	6809      	ldr	r1, [r1, #0]
 800fe7e:	69b0      	ldr	r0, [r6, #24]
 800fe80:	6989      	ldr	r1, [r1, #24]
 800fe82:	4e14      	ldr	r6, [pc, #80]	; (800fed4 <forward_sm_integer+0xb4>)
 800fe84:	688d      	ldr	r5, [r1, #8]
 800fe86:	6801      	ldr	r1, [r0, #0]
 800fe88:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800fe8c:	42b1      	cmp	r1, r6
 800fe8e:	f8de 6018 	ldr.w	r6, [lr, #24]
 800fe92:	6881      	ldr	r1, [r0, #8]
 800fe94:	68b0      	ldr	r0, [r6, #8]
 800fe96:	9505      	str	r5, [sp, #20]
 800fe98:	68a5      	ldr	r5, [r4, #8]
 800fe9a:	9504      	str	r5, [sp, #16]
 800fe9c:	6865      	ldr	r5, [r4, #4]
 800fe9e:	9503      	str	r5, [sp, #12]
 800fea0:	6824      	ldr	r4, [r4, #0]
 800fea2:	9300      	str	r3, [sp, #0]
 800fea4:	e9cd c401 	strd	ip, r4, [sp, #4]
 800fea8:	d006      	beq.n	800feb8 <forward_sm_integer+0x98>
 800feaa:	f002 f9b7 	bl	801221c <forward_lite_nl_softmax_iu8ou8>
 800feae:	b006      	add	sp, #24
 800feb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	deff      	udf	#255	; 0xff
 800feb8:	f001 fd96 	bl	80119e8 <forward_lite_nl_softmax_is8os8>
 800febc:	b006      	add	sp, #24
 800febe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec2:	2201      	movs	r2, #1
 800fec4:	e7d3      	b.n	800fe6e <forward_sm_integer+0x4e>
 800fec6:	2300      	movs	r3, #0
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	deff      	udf	#255	; 0xff
 800fecc:	698b      	ldr	r3, [r1, #24]
 800fece:	deff      	udf	#255	; 0xff
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	deff      	udf	#255	; 0xff
 800fed4:	00840440 	.word	0x00840440

0800fed8 <forward_pad_8bit_ch1st_3x3_constant>:
 800fed8:	6982      	ldr	r2, [r0, #24]
 800feda:	8811      	ldrh	r1, [r2, #0]
 800fedc:	b331      	cbz	r1, 800ff2c <forward_pad_8bit_ch1st_3x3_constant+0x54>
 800fede:	4603      	mov	r3, r0
 800fee0:	6850      	ldr	r0, [r2, #4]
 800fee2:	6842      	ldr	r2, [r0, #4]
 800fee4:	b102      	cbz	r2, 800fee8 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 800fee6:	6812      	ldr	r2, [r2, #0]
 800fee8:	2901      	cmp	r1, #1
 800feea:	d021      	beq.n	800ff30 <forward_pad_8bit_ch1st_3x3_constant+0x58>
 800feec:	6901      	ldr	r1, [r0, #16]
 800feee:	b311      	cbz	r1, 800ff36 <forward_pad_8bit_ch1st_3x3_constant+0x5e>
 800fef0:	b570      	push	{r4, r5, r6, lr}
 800fef2:	68d5      	ldr	r5, [r2, #12]
 800fef4:	b084      	sub	sp, #16
 800fef6:	6809      	ldr	r1, [r1, #0]
 800fef8:	e9d2 6205 	ldrd	r6, r2, [r2, #20]
 800fefc:	e9d3 4309 	ldrd	r4, r3, [r3, #36]	; 0x24
 800ff00:	6890      	ldr	r0, [r2, #8]
 800ff02:	f9b4 4000 	ldrsh.w	r4, [r4]
 800ff06:	e9d1 2105 	ldrd	r2, r1, [r1, #20]
 800ff0a:	68d2      	ldr	r2, [r2, #12]
 800ff0c:	6889      	ldr	r1, [r1, #8]
 800ff0e:	fb02 f404 	mul.w	r4, r2, r4
 800ff12:	689a      	ldr	r2, [r3, #8]
 800ff14:	68eb      	ldr	r3, [r5, #12]
 800ff16:	9403      	str	r4, [sp, #12]
 800ff18:	68f4      	ldr	r4, [r6, #12]
 800ff1a:	9402      	str	r4, [sp, #8]
 800ff1c:	6874      	ldr	r4, [r6, #4]
 800ff1e:	9401      	str	r4, [sp, #4]
 800ff20:	686c      	ldr	r4, [r5, #4]
 800ff22:	9400      	str	r4, [sp, #0]
 800ff24:	f002 fd9c 	bl	8012a60 <forward_lite_pad_8bit_ch1st_3x3_constant>
 800ff28:	b004      	add	sp, #16
 800ff2a:	bd70      	pop	{r4, r5, r6, pc}
 800ff2c:	684b      	ldr	r3, [r1, #4]
 800ff2e:	deff      	udf	#255	; 0xff
 800ff30:	2300      	movs	r3, #0
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	deff      	udf	#255	; 0xff
 800ff36:	698b      	ldr	r3, [r1, #24]
 800ff38:	deff      	udf	#255	; 0xff
 800ff3a:	bf00      	nop

0800ff3c <forward_pad_constant>:
 800ff3c:	6982      	ldr	r2, [r0, #24]
 800ff3e:	8813      	ldrh	r3, [r2, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d03d      	beq.n	800ffc0 <forward_pad_constant+0x84>
 800ff44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff48:	6852      	ldr	r2, [r2, #4]
 800ff4a:	b088      	sub	sp, #32
 800ff4c:	6854      	ldr	r4, [r2, #4]
 800ff4e:	b104      	cbz	r4, 800ff52 <forward_pad_constant+0x16>
 800ff50:	6824      	ldr	r4, [r4, #0]
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d036      	beq.n	800ffc4 <forward_pad_constant+0x88>
 800ff56:	6913      	ldr	r3, [r2, #16]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d036      	beq.n	800ffca <forward_pad_constant+0x8e>
 800ff5c:	6819      	ldr	r1, [r3, #0]
 800ff5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ff60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff62:	689a      	ldr	r2, [r3, #8]
 800ff64:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800ff68:	69a6      	ldr	r6, [r4, #24]
 800ff6a:	f8d4 c014 	ldr.w	ip, [r4, #20]
 800ff6e:	68b0      	ldr	r0, [r6, #8]
 800ff70:	e9d1 3105 	ldrd	r3, r1, [r1, #20]
 800ff74:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 800ff78:	6889      	ldr	r1, [r1, #8]
 800ff7a:	fb08 f707 	mul.w	r7, r8, r7
 800ff7e:	6833      	ldr	r3, [r6, #0]
 800ff80:	9706      	str	r7, [sp, #24]
 800ff82:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 800ff86:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 800ff8a:	fb08 f606 	mul.w	r6, r8, r6
 800ff8e:	9605      	str	r6, [sp, #20]
 800ff90:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 800ff94:	fb0e f606 	mul.w	r6, lr, r6
 800ff98:	9604      	str	r6, [sp, #16]
 800ff9a:	f9b5 5000 	ldrsh.w	r5, [r5]
 800ff9e:	fb0e f505 	mul.w	r5, lr, r5
 800ffa2:	9503      	str	r5, [sp, #12]
 800ffa4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800ffa8:	9502      	str	r5, [sp, #8]
 800ffaa:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800ffae:	9501      	str	r5, [sp, #4]
 800ffb0:	68e4      	ldr	r4, [r4, #12]
 800ffb2:	68e4      	ldr	r4, [r4, #12]
 800ffb4:	9400      	str	r4, [sp, #0]
 800ffb6:	f002 fe1f 	bl	8012bf8 <forward_lite_pad_constant>
 800ffba:	b008      	add	sp, #32
 800ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	deff      	udf	#255	; 0xff
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	deff      	udf	#255	; 0xff
 800ffca:	699b      	ldr	r3, [r3, #24]
 800ffcc:	deff      	udf	#255	; 0xff
 800ffce:	bf00      	nop

0800ffd0 <forward_pad_edge>:
 800ffd0:	6982      	ldr	r2, [r0, #24]
 800ffd2:	8813      	ldrh	r3, [r2, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d035      	beq.n	8010044 <forward_pad_edge+0x74>
 800ffd8:	6851      	ldr	r1, [r2, #4]
 800ffda:	684a      	ldr	r2, [r1, #4]
 800ffdc:	b102      	cbz	r2, 800ffe0 <forward_pad_edge+0x10>
 800ffde:	6812      	ldr	r2, [r2, #0]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d031      	beq.n	8010048 <forward_pad_edge+0x78>
 800ffe4:	690b      	ldr	r3, [r1, #16]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d031      	beq.n	801004e <forward_pad_edge+0x7e>
 800ffea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	b089      	sub	sp, #36	; 0x24
 800fff0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fff2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800fff6:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 800fffa:	6990      	ldr	r0, [r2, #24]
 800fffc:	6957      	ldr	r7, [r2, #20]
 800fffe:	6880      	ldr	r0, [r0, #8]
 8010000:	f8de 200c 	ldr.w	r2, [lr, #12]
 8010004:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8010008:	f9b5 3000 	ldrsh.w	r3, [r5]
 801000c:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8010010:	6889      	ldr	r1, [r1, #8]
 8010012:	fb04 f606 	mul.w	r6, r4, r6
 8010016:	9606      	str	r6, [sp, #24]
 8010018:	f8dc c008 	ldr.w	ip, [ip, #8]
 801001c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8010020:	9403      	str	r4, [sp, #12]
 8010022:	fb0c f606 	mul.w	r6, ip, r6
 8010026:	fb03 f404 	mul.w	r4, r3, r4
 801002a:	9605      	str	r6, [sp, #20]
 801002c:	9404      	str	r4, [sp, #16]
 801002e:	68bc      	ldr	r4, [r7, #8]
 8010030:	9402      	str	r4, [sp, #8]
 8010032:	68fc      	ldr	r4, [r7, #12]
 8010034:	9401      	str	r4, [sp, #4]
 8010036:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 801003a:	9400      	str	r4, [sp, #0]
 801003c:	f002 fe7c 	bl	8012d38 <forward_lite_pad_edge>
 8010040:	b009      	add	sp, #36	; 0x24
 8010042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	deff      	udf	#255	; 0xff
 8010048:	2300      	movs	r3, #0
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	deff      	udf	#255	; 0xff
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	deff      	udf	#255	; 0xff
 8010052:	bf00      	nop

08010054 <forward_pad_reflect>:
 8010054:	6982      	ldr	r2, [r0, #24]
 8010056:	8813      	ldrh	r3, [r2, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d044      	beq.n	80100e6 <forward_pad_reflect+0x92>
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	6852      	ldr	r2, [r2, #4]
 8010062:	b08f      	sub	sp, #60	; 0x3c
 8010064:	6857      	ldr	r7, [r2, #4]
 8010066:	b107      	cbz	r7, 801006a <forward_pad_reflect+0x16>
 8010068:	683f      	ldr	r7, [r7, #0]
 801006a:	2b01      	cmp	r3, #1
 801006c:	d03d      	beq.n	80100ea <forward_pad_reflect+0x96>
 801006e:	6913      	ldr	r3, [r2, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d03d      	beq.n	80100f0 <forward_pad_reflect+0x9c>
 8010074:	6819      	ldr	r1, [r3, #0]
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 801007c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8010080:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8010084:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010086:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 801008a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801008e:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8010092:	f9b4 b000 	ldrsh.w	fp, [r4]
 8010096:	6889      	ldr	r1, [r1, #8]
 8010098:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 801009c:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 80100a0:	fb05 f606 	mul.w	r6, r5, r6
 80100a4:	6880      	ldr	r0, [r0, #8]
 80100a6:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 80100aa:	bf2c      	ite	cs
 80100ac:	6912      	ldrcs	r2, [r2, #16]
 80100ae:	2201      	movcc	r2, #1
 80100b0:	960c      	str	r6, [sp, #48]	; 0x30
 80100b2:	fb05 f60e 	mul.w	r6, r5, lr
 80100b6:	960b      	str	r6, [sp, #44]	; 0x2c
 80100b8:	fb0c f60b 	mul.w	r6, ip, fp
 80100bc:	960a      	str	r6, [sp, #40]	; 0x28
 80100be:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 80100c2:	9409      	str	r4, [sp, #36]	; 0x24
 80100c4:	e9cd eb07 	strd	lr, fp, [sp, #28]
 80100c8:	e9cd c505 	strd	ip, r5, [sp, #20]
 80100cc:	68bc      	ldr	r4, [r7, #8]
 80100ce:	9404      	str	r4, [sp, #16]
 80100d0:	68fc      	ldr	r4, [r7, #12]
 80100d2:	f8cd 8000 	str.w	r8, [sp]
 80100d6:	9403      	str	r4, [sp, #12]
 80100d8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80100dc:	f002 fe9e 	bl	8012e1c <forward_lite_pad_reflect>
 80100e0:	b00f      	add	sp, #60	; 0x3c
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	deff      	udf	#255	; 0xff
 80100ea:	2300      	movs	r3, #0
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	deff      	udf	#255	; 0xff
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	deff      	udf	#255	; 0xff

080100f4 <forward_ap_integer_INT8>:
 80100f4:	6983      	ldr	r3, [r0, #24]
 80100f6:	881a      	ldrh	r2, [r3, #0]
 80100f8:	2a00      	cmp	r2, #0
 80100fa:	d074      	beq.n	80101e6 <forward_ap_integer_INT8+0xf2>
 80100fc:	6859      	ldr	r1, [r3, #4]
 80100fe:	684b      	ldr	r3, [r1, #4]
 8010100:	b103      	cbz	r3, 8010104 <forward_ap_integer_INT8+0x10>
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2a01      	cmp	r2, #1
 8010106:	f000 80e0 	beq.w	80102ca <forward_ap_integer_INT8+0x1d6>
 801010a:	690a      	ldr	r2, [r1, #16]
 801010c:	2a00      	cmp	r2, #0
 801010e:	f000 80df 	beq.w	80102d0 <forward_ap_integer_INT8+0x1dc>
 8010112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010116:	68de      	ldr	r6, [r3, #12]
 8010118:	b095      	sub	sp, #84	; 0x54
 801011a:	6811      	ldr	r1, [r2, #0]
 801011c:	681c      	ldr	r4, [r3, #0]
 801011e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8010122:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8010126:	8932      	ldrh	r2, [r6, #8]
 8010128:	89b3      	ldrh	r3, [r6, #12]
 801012a:	8b86      	ldrh	r6, [r0, #28]
 801012c:	6b07      	ldr	r7, [r0, #48]	; 0x30
 801012e:	960d      	str	r6, [sp, #52]	; 0x34
 8010130:	8c06      	ldrh	r6, [r0, #32]
 8010132:	68cd      	ldr	r5, [r1, #12]
 8010134:	960e      	str	r6, [sp, #56]	; 0x38
 8010136:	88be      	ldrh	r6, [r7, #4]
 8010138:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801013c:	960f      	str	r6, [sp, #60]	; 0x3c
 801013e:	883e      	ldrh	r6, [r7, #0]
 8010140:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8010144:	9610      	str	r6, [sp, #64]	; 0x40
 8010146:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8010148:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 801014a:	9611      	str	r6, [sp, #68]	; 0x44
 801014c:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8010150:	680e      	ldr	r6, [r1, #0]
 8010152:	9012      	str	r0, [sp, #72]	; 0x48
 8010154:	2c00      	cmp	r4, #0
 8010156:	d060      	beq.n	801021a <forward_ap_integer_INT8+0x126>
 8010158:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801015c:	f1b9 0f00 	cmp.w	r9, #0
 8010160:	d043      	beq.n	80101ea <forward_ap_integer_INT8+0xf6>
 8010162:	8865      	ldrh	r5, [r4, #2]
 8010164:	2d00      	cmp	r5, #0
 8010166:	d06e      	beq.n	8010246 <forward_ap_integer_INT8+0x152>
 8010168:	f8d9 1000 	ldr.w	r1, [r9]
 801016c:	ed91 0a00 	vldr	s0, [r1]
 8010170:	2e00      	cmp	r6, #0
 8010172:	d06c      	beq.n	801024e <forward_ap_integer_INT8+0x15a>
 8010174:	6877      	ldr	r7, [r6, #4]
 8010176:	2f00      	cmp	r7, #0
 8010178:	d03e      	beq.n	80101f8 <forward_ap_integer_INT8+0x104>
 801017a:	8871      	ldrh	r1, [r6, #2]
 801017c:	9113      	str	r1, [sp, #76]	; 0x4c
 801017e:	2900      	cmp	r1, #0
 8010180:	d053      	beq.n	801022a <forward_ap_integer_INT8+0x136>
 8010182:	683d      	ldr	r5, [r7, #0]
 8010184:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010188:	f8da 1008 	ldr.w	r1, [sl, #8]
 801018c:	edd5 0a00 	vldr	s1, [r5]
 8010190:	f1b9 0f00 	cmp.w	r9, #0
 8010194:	d055      	beq.n	8010242 <forward_ap_integer_INT8+0x14e>
 8010196:	8864      	ldrh	r4, [r4, #2]
 8010198:	2c00      	cmp	r4, #0
 801019a:	d039      	beq.n	8010210 <forward_ap_integer_INT8+0x11c>
 801019c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80101a0:	f994 4000 	ldrsb.w	r4, [r4]
 80101a4:	2e00      	cmp	r6, #0
 80101a6:	d036      	beq.n	8010216 <forward_ap_integer_INT8+0x122>
 80101a8:	2f00      	cmp	r7, #0
 80101aa:	d034      	beq.n	8010216 <forward_ap_integer_INT8+0x122>
 80101ac:	8875      	ldrh	r5, [r6, #2]
 80101ae:	9513      	str	r5, [sp, #76]	; 0x4c
 80101b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80101b2:	b115      	cbz	r5, 80101ba <forward_ap_integer_INT8+0xc6>
 80101b4:	687d      	ldr	r5, [r7, #4]
 80101b6:	f995 5000 	ldrsb.w	r5, [r5]
 80101ba:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80101be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80101c0:	9406      	str	r4, [sp, #24]
 80101c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80101c4:	9405      	str	r4, [sp, #20]
 80101c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80101c8:	9404      	str	r4, [sp, #16]
 80101ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80101cc:	9403      	str	r4, [sp, #12]
 80101ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80101d0:	9402      	str	r4, [sp, #8]
 80101d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80101d4:	e9cd e807 	strd	lr, r8, [sp, #28]
 80101d8:	e9cd c400 	strd	ip, r4, [sp]
 80101dc:	f005 fb6e 	bl	80158bc <st_int8_avepool>
 80101e0:	b015      	add	sp, #84	; 0x54
 80101e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e6:	6853      	ldr	r3, [r2, #4]
 80101e8:	deff      	udf	#255	; 0xff
 80101ea:	2e00      	cmp	r6, #0
 80101ec:	d039      	beq.n	8010262 <forward_ap_integer_INT8+0x16e>
 80101ee:	6877      	ldr	r7, [r6, #4]
 80101f0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 80101f4:	2f00      	cmp	r7, #0
 80101f6:	d1c0      	bne.n	801017a <forward_ap_integer_INT8+0x86>
 80101f8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80101fc:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010200:	f1b9 0f00 	cmp.w	r9, #0
 8010204:	d05c      	beq.n	80102c0 <forward_ap_integer_INT8+0x1cc>
 8010206:	8864      	ldrh	r4, [r4, #2]
 8010208:	2c00      	cmp	r4, #0
 801020a:	d152      	bne.n	80102b2 <forward_ap_integer_INT8+0x1be>
 801020c:	eddf 0a31 	vldr	s1, [pc, #196]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 8010210:	2400      	movs	r4, #0
 8010212:	2f00      	cmp	r7, #0
 8010214:	d1ca      	bne.n	80101ac <forward_ap_integer_INT8+0xb8>
 8010216:	2500      	movs	r5, #0
 8010218:	e7cf      	b.n	80101ba <forward_ap_integer_INT8+0xc6>
 801021a:	b316      	cbz	r6, 8010262 <forward_ap_integer_INT8+0x16e>
 801021c:	6877      	ldr	r7, [r6, #4]
 801021e:	b35f      	cbz	r7, 8010278 <forward_ap_integer_INT8+0x184>
 8010220:	8871      	ldrh	r1, [r6, #2]
 8010222:	9113      	str	r1, [sp, #76]	; 0x4c
 8010224:	bb99      	cbnz	r1, 801028e <forward_ap_integer_INT8+0x19a>
 8010226:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 801022a:	f8db 0008 	ldr.w	r0, [fp, #8]
 801022e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010232:	b194      	cbz	r4, 801025a <forward_ap_integer_INT8+0x166>
 8010234:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010238:	eddf 0a26 	vldr	s1, [pc, #152]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 801023c:	f1b9 0f00 	cmp.w	r9, #0
 8010240:	d1a9      	bne.n	8010196 <forward_ap_integer_INT8+0xa2>
 8010242:	464c      	mov	r4, r9
 8010244:	e7b4      	b.n	80101b0 <forward_ap_integer_INT8+0xbc>
 8010246:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 801024a:	2e00      	cmp	r6, #0
 801024c:	d192      	bne.n	8010174 <forward_ap_integer_INT8+0x80>
 801024e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010252:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010256:	bb25      	cbnz	r5, 80102a2 <forward_ap_integer_INT8+0x1ae>
 8010258:	462c      	mov	r4, r5
 801025a:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 801025e:	4625      	mov	r5, r4
 8010260:	e7ab      	b.n	80101ba <forward_ap_integer_INT8+0xc6>
 8010262:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 8010266:	4634      	mov	r4, r6
 8010268:	f8db 0008 	ldr.w	r0, [fp, #8]
 801026c:	4635      	mov	r5, r6
 801026e:	eef0 0a40 	vmov.f32	s1, s0
 8010272:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010276:	e7a0      	b.n	80101ba <forward_ap_integer_INT8+0xc6>
 8010278:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 801027c:	463c      	mov	r4, r7
 801027e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010282:	463d      	mov	r5, r7
 8010284:	eef0 0a40 	vmov.f32	s1, s0
 8010288:	f8da 1008 	ldr.w	r1, [sl, #8]
 801028c:	e795      	b.n	80101ba <forward_ap_integer_INT8+0xc6>
 801028e:	683d      	ldr	r5, [r7, #0]
 8010290:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010294:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010298:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 801029c:	edd5 0a00 	vldr	s1, [r5]
 80102a0:	e788      	b.n	80101b4 <forward_ap_integer_INT8+0xc0>
 80102a2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80102a6:	4635      	mov	r5, r6
 80102a8:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 80102ac:	f994 4000 	ldrsb.w	r4, [r4]
 80102b0:	e783      	b.n	80101ba <forward_ap_integer_INT8+0xc6>
 80102b2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80102b6:	eddf 0a07 	vldr	s1, [pc, #28]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 80102ba:	f994 4000 	ldrsb.w	r4, [r4]
 80102be:	e7aa      	b.n	8010216 <forward_ap_integer_INT8+0x122>
 80102c0:	464c      	mov	r4, r9
 80102c2:	eddf 0a04 	vldr	s1, [pc, #16]	; 80102d4 <forward_ap_integer_INT8+0x1e0>
 80102c6:	464d      	mov	r5, r9
 80102c8:	e777      	b.n	80101ba <forward_ap_integer_INT8+0xc6>
 80102ca:	2300      	movs	r3, #0
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	deff      	udf	#255	; 0xff
 80102d0:	68d3      	ldr	r3, [r2, #12]
 80102d2:	deff      	udf	#255	; 0xff
 80102d4:	00000000 	.word	0x00000000

080102d8 <func_dummy>:
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop

080102dc <forward_pw_sssa8_ch>:
 80102dc:	6982      	ldr	r2, [r0, #24]
 80102de:	8813      	ldrh	r3, [r2, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 811b 	beq.w	801051c <forward_pw_sssa8_ch+0x240>
 80102e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ea:	ed2d 8b02 	vpush	{d8}
 80102ee:	6855      	ldr	r5, [r2, #4]
 80102f0:	b09b      	sub	sp, #108	; 0x6c
 80102f2:	6869      	ldr	r1, [r5, #4]
 80102f4:	b101      	cbz	r1, 80102f8 <forward_pw_sssa8_ch+0x1c>
 80102f6:	6809      	ldr	r1, [r1, #0]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	f000 8135 	beq.w	8010568 <forward_pw_sssa8_ch+0x28c>
 80102fe:	f8d5 b010 	ldr.w	fp, [r5, #16]
 8010302:	f1bb 0f00 	cmp.w	fp, #0
 8010306:	d001      	beq.n	801030c <forward_pw_sssa8_ch+0x30>
 8010308:	f8db b000 	ldr.w	fp, [fp]
 801030c:	2b02      	cmp	r3, #2
 801030e:	f000 8102 	beq.w	8010516 <forward_pw_sssa8_ch+0x23a>
 8010312:	69ea      	ldr	r2, [r5, #28]
 8010314:	2a00      	cmp	r2, #0
 8010316:	f000 8120 	beq.w	801055a <forward_pw_sssa8_ch+0x27e>
 801031a:	8b2e      	ldrh	r6, [r5, #24]
 801031c:	6814      	ldr	r4, [r2, #0]
 801031e:	2e01      	cmp	r6, #1
 8010320:	f200 80fe 	bhi.w	8010520 <forward_pw_sssa8_ch+0x244>
 8010324:	2600      	movs	r6, #0
 8010326:	2b03      	cmp	r3, #3
 8010328:	f000 8121 	beq.w	801056e <forward_pw_sssa8_ch+0x292>
 801032c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 8116 	beq.w	8010560 <forward_pw_sssa8_ch+0x284>
 8010334:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010336:	681f      	ldr	r7, [r3, #0]
 8010338:	9518      	str	r5, [sp, #96]	; 0x60
 801033a:	9710      	str	r7, [sp, #64]	; 0x40
 801033c:	2d00      	cmp	r5, #0
 801033e:	f000 8108 	beq.w	8010552 <forward_pw_sssa8_ch+0x276>
 8010342:	685f      	ldr	r7, [r3, #4]
 8010344:	69b3      	ldr	r3, [r6, #24]
 8010346:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8010348:	689b      	ldr	r3, [r3, #8]
 801034a:	f8d6 e018 	ldr.w	lr, [r6, #24]
 801034e:	9319      	str	r3, [sp, #100]	; 0x64
 8010350:	68cb      	ldr	r3, [r1, #12]
 8010352:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8010356:	685e      	ldr	r6, [r3, #4]
 8010358:	68dd      	ldr	r5, [r3, #12]
 801035a:	689b      	ldr	r3, [r3, #8]
 801035c:	950d      	str	r5, [sp, #52]	; 0x34
 801035e:	b2b5      	uxth	r5, r6
 8010360:	9311      	str	r3, [sp, #68]	; 0x44
 8010362:	ee08 5a10 	vmov	s16, r5
 8010366:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801036a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801036e:	9514      	str	r5, [sp, #80]	; 0x50
 8010370:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8010374:	f8de a008 	ldr.w	sl, [lr, #8]
 8010378:	9515      	str	r5, [sp, #84]	; 0x54
 801037a:	b29d      	uxth	r5, r3
 801037c:	9616      	str	r6, [sp, #88]	; 0x58
 801037e:	950f      	str	r5, [sp, #60]	; 0x3c
 8010380:	2a00      	cmp	r2, #0
 8010382:	f000 80d5 	beq.w	8010530 <forward_pw_sssa8_ch+0x254>
 8010386:	6892      	ldr	r2, [r2, #8]
 8010388:	2a00      	cmp	r2, #0
 801038a:	f000 80d1 	beq.w	8010530 <forward_pw_sssa8_ch+0x254>
 801038e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8010392:	f1b8 0f00 	cmp.w	r8, #0
 8010396:	bf18      	it	ne
 8010398:	4690      	movne	r8, r2
 801039a:	680d      	ldr	r5, [r1, #0]
 801039c:	683e      	ldr	r6, [r7, #0]
 801039e:	6822      	ldr	r2, [r4, #0]
 80103a0:	2d00      	cmp	r5, #0
 80103a2:	f000 80c2 	beq.w	801052a <forward_pw_sssa8_ch+0x24e>
 80103a6:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80103aa:	f1bc 0f00 	cmp.w	ip, #0
 80103ae:	f000 80bc 	beq.w	801052a <forward_pw_sssa8_ch+0x24e>
 80103b2:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 80103b6:	f1b9 0f00 	cmp.w	r9, #0
 80103ba:	f000 80b6 	beq.w	801052a <forward_pw_sssa8_ch+0x24e>
 80103be:	f8dc c000 	ldr.w	ip, [ip]
 80103c2:	ed9c 0a00 	vldr	s0, [ip]
 80103c6:	2e00      	cmp	r6, #0
 80103c8:	f000 80ac 	beq.w	8010524 <forward_pw_sssa8_ch+0x248>
 80103cc:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80103d0:	f1bc 0f00 	cmp.w	ip, #0
 80103d4:	f000 80a6 	beq.w	8010524 <forward_pw_sssa8_ch+0x248>
 80103d8:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 80103dc:	f1b9 0f00 	cmp.w	r9, #0
 80103e0:	f000 80a0 	beq.w	8010524 <forward_pw_sssa8_ch+0x248>
 80103e4:	f8dc c000 	ldr.w	ip, [ip]
 80103e8:	eddc 0a00 	vldr	s1, [ip]
 80103ec:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80103f0:	69a1      	ldr	r1, [r4, #24]
 80103f2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80103f6:	6889      	ldr	r1, [r1, #8]
 80103f8:	f8dc 9008 	ldr.w	r9, [ip, #8]
 80103fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80103fe:	69b9      	ldr	r1, [r7, #24]
 8010400:	9012      	str	r0, [sp, #72]	; 0x48
 8010402:	6889      	ldr	r1, [r1, #8]
 8010404:	910e      	str	r1, [sp, #56]	; 0x38
 8010406:	b112      	cbz	r2, 801040e <forward_pw_sssa8_ch+0x132>
 8010408:	6852      	ldr	r2, [r2, #4]
 801040a:	b102      	cbz	r2, 801040e <forward_pw_sssa8_ch+0x132>
 801040c:	6812      	ldr	r2, [r2, #0]
 801040e:	b29b      	uxth	r3, r3
 8010410:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
 8010414:	fb00 f101 	mul.w	r1, r0, r1
 8010418:	980e      	ldr	r0, [sp, #56]	; 0x38
 801041a:	fb03 0101 	mla	r1, r3, r1, r0
 801041e:	4589      	cmp	r9, r1
 8010420:	f080 808f 	bcs.w	8010542 <forward_pw_sssa8_ch+0x266>
 8010424:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010426:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010428:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 801042c:	fb01 f404 	mul.w	r4, r1, r4
 8010430:	fb0c 9404 	mla	r4, ip, r4, r9
 8010434:	42a0      	cmp	r0, r4
 8010436:	bf2c      	ite	cs
 8010438:	2400      	movcs	r4, #0
 801043a:	2401      	movcc	r4, #1
 801043c:	b145      	cbz	r5, 8010450 <forward_pw_sssa8_ch+0x174>
 801043e:	6869      	ldr	r1, [r5, #4]
 8010440:	2900      	cmp	r1, #0
 8010442:	f000 8082 	beq.w	801054a <forward_pw_sssa8_ch+0x26e>
 8010446:	886d      	ldrh	r5, [r5, #2]
 8010448:	b115      	cbz	r5, 8010450 <forward_pw_sssa8_ch+0x174>
 801044a:	6849      	ldr	r1, [r1, #4]
 801044c:	f991 5000 	ldrsb.w	r5, [r1]
 8010450:	b13e      	cbz	r6, 8010462 <forward_pw_sssa8_ch+0x186>
 8010452:	6871      	ldr	r1, [r6, #4]
 8010454:	2900      	cmp	r1, #0
 8010456:	d07a      	beq.n	801054e <forward_pw_sssa8_ch+0x272>
 8010458:	8876      	ldrh	r6, [r6, #2]
 801045a:	b116      	cbz	r6, 8010462 <forward_pw_sssa8_ch+0x186>
 801045c:	6849      	ldr	r1, [r1, #4]
 801045e:	f991 6000 	ldrsb.w	r6, [r1]
 8010462:	edcd 0a15 	vstr	s1, [sp, #84]	; 0x54
 8010466:	ed8d 0a14 	vstr	s0, [sp, #80]	; 0x50
 801046a:	e9de 0100 	ldrd	r0, r1, [lr]
 801046e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010472:	f005 fea3 	bl	80161bc <ai_array_get_byte_size>
 8010476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010478:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801047a:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801047e:	eddd 0a15 	vldr	s1, [sp, #84]	; 0x54
 8010482:	4610      	mov	r0, r2
 8010484:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
 8010488:	4453      	add	r3, sl
 801048a:	4652      	mov	r2, sl
 801048c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801048e:	f002 fdbf 	bl	8013010 <align_factor_ch>
 8010492:	2c00      	cmp	r4, #0
 8010494:	d157      	bne.n	8010546 <forward_pw_sssa8_ch+0x26a>
 8010496:	2301      	movs	r3, #1
 8010498:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801049c:	930d      	str	r3, [sp, #52]	; 0x34
 801049e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104a0:	2401      	movs	r4, #1
 80104a2:	9214      	str	r2, [sp, #80]	; 0x50
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104aa:	f005 fe87 	bl	80161bc <ai_array_get_byte_size>
 80104ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80104b2:	9307      	str	r3, [sp, #28]
 80104b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104b6:	9009      	str	r0, [sp, #36]	; 0x24
 80104b8:	4648      	mov	r0, r9
 80104ba:	9306      	str	r3, [sp, #24]
 80104bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104be:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80104c2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80104c6:	9503      	str	r5, [sp, #12]
 80104c8:	9408      	str	r4, [sp, #32]
 80104ca:	e9cd 6304 	strd	r6, r3, [sp, #16]
 80104ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80104d0:	9302      	str	r3, [sp, #8]
 80104d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104d4:	9301      	str	r3, [sp, #4]
 80104d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	ee18 3a10 	vmov	r3, s16
 80104de:	f001 f9cb 	bl	8011878 <forward_lite_pw_sssa8_ch>
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	4622      	mov	r2, r4
 80104e6:	0a1b      	lsrs	r3, r3, #8
 80104e8:	d008      	beq.n	80104fc <forward_pw_sssa8_ch+0x220>
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80104f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104f4:	4298      	cmp	r0, r3
 80104f6:	fb01 f202 	mul.w	r2, r1, r2
 80104fa:	d1f9      	bne.n	80104f0 <forward_pw_sssa8_ch+0x214>
 80104fc:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8010500:	4643      	mov	r3, r8
 8010502:	4639      	mov	r1, r7
 8010504:	4658      	mov	r0, fp
 8010506:	ee17 ca90 	vmov	ip, s15
 801050a:	b01b      	add	sp, #108	; 0x6c
 801050c:	ecbd 8b02 	vpop	{d8}
 8010510:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	4760      	bx	ip
 8010516:	2300      	movs	r3, #0
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	deff      	udf	#255	; 0xff
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	deff      	udf	#255	; 0xff
 8010520:	6856      	ldr	r6, [r2, #4]
 8010522:	e700      	b.n	8010326 <forward_pw_sssa8_ch+0x4a>
 8010524:	eddf 0a14 	vldr	s1, [pc, #80]	; 8010578 <forward_pw_sssa8_ch+0x29c>
 8010528:	e760      	b.n	80103ec <forward_pw_sssa8_ch+0x110>
 801052a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8010578 <forward_pw_sssa8_ch+0x29c>
 801052e:	e74a      	b.n	80103c6 <forward_pw_sssa8_ch+0xea>
 8010530:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8010534:	f1b8 0f00 	cmp.w	r8, #0
 8010538:	f43f af2f 	beq.w	801039a <forward_pw_sssa8_ch+0xbe>
 801053c:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8010540:	e72b      	b.n	801039a <forward_pw_sssa8_ch+0xbe>
 8010542:	2400      	movs	r4, #0
 8010544:	e77a      	b.n	801043c <forward_pw_sssa8_ch+0x160>
 8010546:	4622      	mov	r2, r4
 8010548:	e7a9      	b.n	801049e <forward_pw_sssa8_ch+0x1c2>
 801054a:	460d      	mov	r5, r1
 801054c:	e780      	b.n	8010450 <forward_pw_sssa8_ch+0x174>
 801054e:	460e      	mov	r6, r1
 8010550:	e787      	b.n	8010462 <forward_pw_sssa8_ch+0x186>
 8010552:	4b0a      	ldr	r3, [pc, #40]	; (801057c <forward_pw_sssa8_ch+0x2a0>)
 8010554:	465f      	mov	r7, fp
 8010556:	9318      	str	r3, [sp, #96]	; 0x60
 8010558:	e6f4      	b.n	8010344 <forward_pw_sssa8_ch+0x68>
 801055a:	4614      	mov	r4, r2
 801055c:	4616      	mov	r6, r2
 801055e:	e6e2      	b.n	8010326 <forward_pw_sssa8_ch+0x4a>
 8010560:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8010562:	b93a      	cbnz	r2, 8010574 <forward_pw_sssa8_ch+0x298>
 8010564:	6993      	ldr	r3, [r2, #24]
 8010566:	deff      	udf	#255	; 0xff
 8010568:	2300      	movs	r3, #0
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	deff      	udf	#255	; 0xff
 801056e:	2300      	movs	r3, #0
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	deff      	udf	#255	; 0xff
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	deff      	udf	#255	; 0xff
 8010578:	00000000 	.word	0x00000000
 801057c:	080102d9 	.word	0x080102d9

08010580 <forward_eltwise_integer_INT8>:
 8010580:	6982      	ldr	r2, [r0, #24]
 8010582:	8813      	ldrh	r3, [r2, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d04e      	beq.n	8010626 <forward_eltwise_integer_INT8+0xa6>
 8010588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	ed2d 8b02 	vpush	{d8}
 8010590:	6852      	ldr	r2, [r2, #4]
 8010592:	b0ab      	sub	sp, #172	; 0xac
 8010594:	6854      	ldr	r4, [r2, #4]
 8010596:	2c00      	cmp	r4, #0
 8010598:	f000 81d4 	beq.w	8010944 <forward_eltwise_integer_INT8+0x3c4>
 801059c:	e9d4 5400 	ldrd	r5, r4, [r4]
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	f000 81d3 	beq.w	801094c <forward_eltwise_integer_INT8+0x3cc>
 80105a6:	6916      	ldr	r6, [r2, #16]
 80105a8:	b106      	cbz	r6, 80105ac <forward_eltwise_integer_INT8+0x2c>
 80105aa:	6836      	ldr	r6, [r6, #0]
 80105ac:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80105b0:	f105 0108 	add.w	r1, r5, #8
 80105b4:	f104 0b08 	add.w	fp, r4, #8
 80105b8:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 80105bc:	68a0      	ldr	r0, [r4, #8]
 80105be:	930b      	str	r3, [sp, #44]	; 0x2c
 80105c0:	ea8c 0300 	eor.w	r3, ip, r0
 80105c4:	f3cc 2c17 	ubfx	ip, ip, #8, #24
 80105c8:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 80105cc:	d10e      	bne.n	80105ec <forward_eltwise_integer_INT8+0x6c>
 80105ce:	4663      	mov	r3, ip
 80105d0:	4686      	mov	lr, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f000 81b2 	beq.w	801093c <forward_eltwise_integer_INT8+0x3bc>
 80105d8:	3b01      	subs	r3, #1
 80105da:	68e2      	ldr	r2, [r4, #12]
 80105dc:	68e8      	ldr	r0, [r5, #12]
 80105de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80105e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80105e6:	4290      	cmp	r0, r2
 80105e8:	d0f3      	beq.n	80105d2 <forward_eltwise_integer_INT8+0x52>
 80105ea:	4670      	mov	r0, lr
 80105ec:	2300      	movs	r3, #0
 80105ee:	9308      	str	r3, [sp, #32]
 80105f0:	f10c 33ff 	add.w	r3, ip, #4294967295
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	e005      	b.n	8010604 <forward_eltwise_integer_INT8+0x84>
 80105f8:	68ea      	ldr	r2, [r5, #12]
 80105fa:	58d2      	ldr	r2, [r2, r3]
 80105fc:	3b04      	subs	r3, #4
 80105fe:	2a01      	cmp	r2, #1
 8010600:	f040 8199 	bne.w	8010936 <forward_eltwise_integer_INT8+0x3b6>
 8010604:	1d1a      	adds	r2, r3, #4
 8010606:	d1f7      	bne.n	80105f8 <forward_eltwise_integer_INT8+0x78>
 8010608:	f04f 0a01 	mov.w	sl, #1
 801060c:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8010610:	b158      	cbz	r0, 801062a <forward_eltwise_integer_INT8+0xaa>
 8010612:	3801      	subs	r0, #1
 8010614:	68e3      	ldr	r3, [r4, #12]
 8010616:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801061a:	2b01      	cmp	r3, #1
 801061c:	d0f8      	beq.n	8010610 <forward_eltwise_integer_INT8+0x90>
 801061e:	2300      	movs	r3, #0
 8010620:	46d1      	mov	r9, sl
 8010622:	9309      	str	r3, [sp, #36]	; 0x24
 8010624:	e005      	b.n	8010632 <forward_eltwise_integer_INT8+0xb2>
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	deff      	udf	#255	; 0xff
 801062a:	2301      	movs	r3, #1
 801062c:	f08a 0901 	eor.w	r9, sl, #1
 8010630:	9309      	str	r3, [sp, #36]	; 0x24
 8010632:	6972      	ldr	r2, [r6, #20]
 8010634:	2000      	movs	r0, #0
 8010636:	696b      	ldr	r3, [r5, #20]
 8010638:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801063c:	aa1b      	add	r2, sp, #108	; 0x6c
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	9216      	str	r2, [sp, #88]	; 0x58
 8010642:	f240 5201 	movw	r2, #1281	; 0x501
 8010646:	901f      	str	r0, [sp, #124]	; 0x7c
 8010648:	9215      	str	r2, [sp, #84]	; 0x54
 801064a:	465a      	mov	r2, fp
 801064c:	930d      	str	r3, [sp, #52]	; 0x34
 801064e:	910c      	str	r1, [sp, #48]	; 0x30
 8010650:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 8010654:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 8010658:	a815      	add	r0, sp, #84	; 0x54
 801065a:	f005 fe03 	bl	8016264 <core_get_broadcasted_shape>
 801065e:	69ab      	ldr	r3, [r5, #24]
 8010660:	f8d5 c000 	ldr.w	ip, [r5]
 8010664:	930a      	str	r3, [sp, #40]	; 0x28
 8010666:	6832      	ldr	r2, [r6, #0]
 8010668:	6820      	ldr	r0, [r4, #0]
 801066a:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
 801066e:	f1bc 0f00 	cmp.w	ip, #0
 8010672:	d018      	beq.n	80106a6 <forward_eltwise_integer_INT8+0x126>
 8010674:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8010678:	b1ad      	cbz	r5, 80106a6 <forward_eltwise_integer_INT8+0x126>
 801067a:	f8bc e002 	ldrh.w	lr, [ip, #2]
 801067e:	f1be 0f00 	cmp.w	lr, #0
 8010682:	d010      	beq.n	80106a6 <forward_eltwise_integer_INT8+0x126>
 8010684:	682d      	ldr	r5, [r5, #0]
 8010686:	682d      	ldr	r5, [r5, #0]
 8010688:	950f      	str	r5, [sp, #60]	; 0x3c
 801068a:	b980      	cbnz	r0, 80106ae <forward_eltwise_integer_INT8+0x12e>
 801068c:	2500      	movs	r5, #0
 801068e:	9510      	str	r5, [sp, #64]	; 0x40
 8010690:	b1d2      	cbz	r2, 80106c8 <forward_eltwise_integer_INT8+0x148>
 8010692:	6855      	ldr	r5, [r2, #4]
 8010694:	b1c5      	cbz	r5, 80106c8 <forward_eltwise_integer_INT8+0x148>
 8010696:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801069a:	f1be 0f00 	cmp.w	lr, #0
 801069e:	d013      	beq.n	80106c8 <forward_eltwise_integer_INT8+0x148>
 80106a0:	682d      	ldr	r5, [r5, #0]
 80106a2:	682d      	ldr	r5, [r5, #0]
 80106a4:	e011      	b.n	80106ca <forward_eltwise_integer_INT8+0x14a>
 80106a6:	2500      	movs	r5, #0
 80106a8:	950f      	str	r5, [sp, #60]	; 0x3c
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d0ee      	beq.n	801068c <forward_eltwise_integer_INT8+0x10c>
 80106ae:	6845      	ldr	r5, [r0, #4]
 80106b0:	2d00      	cmp	r5, #0
 80106b2:	d0eb      	beq.n	801068c <forward_eltwise_integer_INT8+0x10c>
 80106b4:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 80106b8:	f1be 0f00 	cmp.w	lr, #0
 80106bc:	d0e6      	beq.n	801068c <forward_eltwise_integer_INT8+0x10c>
 80106be:	682d      	ldr	r5, [r5, #0]
 80106c0:	682d      	ldr	r5, [r5, #0]
 80106c2:	9510      	str	r5, [sp, #64]	; 0x40
 80106c4:	2a00      	cmp	r2, #0
 80106c6:	d1e4      	bne.n	8010692 <forward_eltwise_integer_INT8+0x112>
 80106c8:	2500      	movs	r5, #0
 80106ca:	69b6      	ldr	r6, [r6, #24]
 80106cc:	9511      	str	r5, [sp, #68]	; 0x44
 80106ce:	69a5      	ldr	r5, [r4, #24]
 80106d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80106d2:	68ad      	ldr	r5, [r5, #8]
 80106d4:	68a4      	ldr	r4, [r4, #8]
 80106d6:	68b6      	ldr	r6, [r6, #8]
 80106d8:	f1bc 0f00 	cmp.w	ip, #0
 80106dc:	d00e      	beq.n	80106fc <forward_eltwise_integer_INT8+0x17c>
 80106de:	f8dc e004 	ldr.w	lr, [ip, #4]
 80106e2:	f1be 0f00 	cmp.w	lr, #0
 80106e6:	f000 8100 	beq.w	80108ea <forward_eltwise_integer_INT8+0x36a>
 80106ea:	f8bc c002 	ldrh.w	ip, [ip, #2]
 80106ee:	f1bc 0f00 	cmp.w	ip, #0
 80106f2:	d003      	beq.n	80106fc <forward_eltwise_integer_INT8+0x17c>
 80106f4:	f8de c004 	ldr.w	ip, [lr, #4]
 80106f8:	f99c c000 	ldrsb.w	ip, [ip]
 80106fc:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 8010700:	b158      	cbz	r0, 801071a <forward_eltwise_integer_INT8+0x19a>
 8010702:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8010706:	f1bc 0f00 	cmp.w	ip, #0
 801070a:	f000 80f2 	beq.w	80108f2 <forward_eltwise_integer_INT8+0x372>
 801070e:	8840      	ldrh	r0, [r0, #2]
 8010710:	b118      	cbz	r0, 801071a <forward_eltwise_integer_INT8+0x19a>
 8010712:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010716:	f990 0000 	ldrsb.w	r0, [r0]
 801071a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
 801071e:	b142      	cbz	r2, 8010732 <forward_eltwise_integer_INT8+0x1b2>
 8010720:	6850      	ldr	r0, [r2, #4]
 8010722:	2800      	cmp	r0, #0
 8010724:	f000 80df 	beq.w	80108e6 <forward_eltwise_integer_INT8+0x366>
 8010728:	8852      	ldrh	r2, [r2, #2]
 801072a:	b112      	cbz	r2, 8010732 <forward_eltwise_integer_INT8+0x1b2>
 801072c:	6842      	ldr	r2, [r0, #4]
 801072e:	f992 2000 	ldrsb.w	r2, [r2]
 8010732:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8010736:	9a08      	ldr	r2, [sp, #32]
 8010738:	b912      	cbnz	r2, 8010740 <forward_eltwise_integer_INT8+0x1c0>
 801073a:	f1b9 0f00 	cmp.w	r9, #0
 801073e:	d030      	beq.n	80107a2 <forward_eltwise_integer_INT8+0x222>
 8010740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010742:	4553      	cmp	r3, sl
 8010744:	f000 80d3 	beq.w	80108ee <forward_eltwise_integer_INT8+0x36e>
 8010748:	f1ba 0f00 	cmp.w	sl, #0
 801074c:	bf14      	ite	ne
 801074e:	2701      	movne	r7, #1
 8010750:	2702      	moveq	r7, #2
 8010752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010754:	0a1b      	lsrs	r3, r3, #8
 8010756:	f000 80f7 	beq.w	8010948 <forward_eltwise_integer_INT8+0x3c8>
 801075a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801075c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8010760:	2301      	movs	r3, #1
 8010762:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010766:	4290      	cmp	r0, r2
 8010768:	fb01 f303 	mul.w	r3, r1, r3
 801076c:	d1f9      	bne.n	8010762 <forward_eltwise_integer_INT8+0x1e2>
 801076e:	4621      	mov	r1, r4
 8010770:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 8010774:	462a      	mov	r2, r5
 8010776:	4630      	mov	r0, r6
 8010778:	9405      	str	r4, [sp, #20]
 801077a:	ac11      	add	r4, sp, #68	; 0x44
 801077c:	9706      	str	r7, [sp, #24]
 801077e:	9404      	str	r4, [sp, #16]
 8010780:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 8010784:	9403      	str	r4, [sp, #12]
 8010786:	ac10      	add	r4, sp, #64	; 0x40
 8010788:	9402      	str	r4, [sp, #8]
 801078a:	f10d 0439 	add.w	r4, sp, #57	; 0x39
 801078e:	9401      	str	r4, [sp, #4]
 8010790:	ac0f      	add	r4, sp, #60	; 0x3c
 8010792:	9400      	str	r4, [sp, #0]
 8010794:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010796:	47a0      	blx	r4
 8010798:	b02b      	add	sp, #172	; 0xac
 801079a:	ecbd 8b02 	vpop	{d8}
 801079e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a2:	aa20      	add	r2, sp, #128	; 0x80
 80107a4:	a817      	add	r0, sp, #92	; 0x5c
 80107a6:	9308      	str	r3, [sp, #32]
 80107a8:	9218      	str	r2, [sp, #96]	; 0x60
 80107aa:	aa25      	add	r2, sp, #148	; 0x94
 80107ac:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 80107b0:	921a      	str	r2, [sp, #104]	; 0x68
 80107b2:	f240 5202 	movw	r2, #1282	; 0x502
 80107b6:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 80107ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80107bc:	9219      	str	r2, [sp, #100]	; 0x64
 80107be:	aa15      	add	r2, sp, #84	; 0x54
 80107c0:	e9cd 9921 	strd	r9, r9, [sp, #132]	; 0x84
 80107c4:	e9cd 9923 	strd	r9, r9, [sp, #140]	; 0x8c
 80107c8:	e9cd 9926 	strd	r9, r9, [sp, #152]	; 0x98
 80107cc:	e9cd 9928 	strd	r9, r9, [sp, #160]	; 0xa0
 80107d0:	f005 fd70 	bl	80162b4 <core_compute_offsets>
 80107d4:	9b08      	ldr	r3, [sp, #32]
 80107d6:	aa15      	add	r2, sp, #84	; 0x54
 80107d8:	4659      	mov	r1, fp
 80107da:	a819      	add	r0, sp, #100	; 0x64
 80107dc:	f005 fd6a 	bl	80162b4 <core_compute_offsets>
 80107e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107e2:	68d3      	ldr	r3, [r2, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d0d7      	beq.n	8010798 <forward_eltwise_integer_INT8+0x218>
 80107e8:	6891      	ldr	r1, [r2, #8]
 80107ea:	eddf 8a5a 	vldr	s17, [pc, #360]	; 8010954 <forward_eltwise_integer_INT8+0x3d4>
 80107ee:	468c      	mov	ip, r1
 80107f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80107f4:	f1bc 0f00 	cmp.w	ip, #0
 80107f8:	d0ce      	beq.n	8010798 <forward_eltwise_integer_INT8+0x218>
 80107fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80107fc:	f04f 0b00 	mov.w	fp, #0
 8010800:	f3c0 2017 	ubfx	r0, r0, #8, #24
 8010804:	f04f 0a00 	mov.w	sl, #0
 8010808:	2804      	cmp	r0, #4
 801080a:	bf8c      	ite	hi
 801080c:	6911      	ldrhi	r1, [r2, #16]
 801080e:	2101      	movls	r1, #1
 8010810:	458a      	cmp	sl, r1
 8010812:	d270      	bcs.n	80108f6 <forward_eltwise_integer_INT8+0x376>
 8010814:	6851      	ldr	r1, [r2, #4]
 8010816:	2900      	cmp	r1, #0
 8010818:	d054      	beq.n	80108c4 <forward_eltwise_integer_INT8+0x344>
 801081a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801081e:	f04f 0900 	mov.w	r9, #0
 8010822:	f994 2000 	ldrsb.w	r2, [r4]
 8010826:	a814      	add	r0, sp, #80	; 0x50
 8010828:	f99d 1039 	ldrsb.w	r1, [sp, #57]	; 0x39
 801082c:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8010830:	1a53      	subs	r3, r2, r1
 8010832:	f99d 103a 	ldrsb.w	r1, [sp, #58]	; 0x3a
 8010836:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 801083a:	ee07 3a10 	vmov	s14, r3
 801083e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010846:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 801084a:	f995 2000 	ldrsb.w	r2, [r5]
 801084e:	1a53      	subs	r3, r2, r1
 8010850:	aa13      	add	r2, sp, #76	; 0x4c
 8010852:	a912      	add	r1, sp, #72	; 0x48
 8010854:	ee07 3a90 	vmov	s15, r3
 8010858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801085c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010860:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8010864:	47b8      	blx	r7
 8010866:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 801086a:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 801086e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8010872:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010876:	ee07 3a90 	vmov	s15, r3
 801087a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088a:	fe38 7a28 	vselgt.f32	s14, s16, s17
 801088e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010892:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010896:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801089a:	ee17 2a10 	vmov	r2, s14
 801089e:	f302 0207 	ssat	r2, #8, r2
 80108a2:	7032      	strb	r2, [r6, #0]
 80108a4:	f109 0901 	add.w	r9, r9, #1
 80108a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80108aa:	4446      	add	r6, r8
 80108ac:	6852      	ldr	r2, [r2, #4]
 80108ae:	4414      	add	r4, r2
 80108b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80108b2:	6852      	ldr	r2, [r2, #4]
 80108b4:	4415      	add	r5, r2
 80108b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80108b8:	6851      	ldr	r1, [r2, #4]
 80108ba:	4549      	cmp	r1, r9
 80108bc:	d8b1      	bhi.n	8010822 <forward_eltwise_integer_INT8+0x2a2>
 80108be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80108c0:	f3c0 2017 	ubfx	r0, r0, #8, #24
 80108c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80108c6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80108ca:	d302      	bcc.n	80108d2 <forward_eltwise_integer_INT8+0x352>
 80108cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80108ce:	6909      	ldr	r1, [r1, #16]
 80108d0:	440c      	add	r4, r1
 80108d2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80108d4:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80108d8:	d302      	bcc.n	80108e0 <forward_eltwise_integer_INT8+0x360>
 80108da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80108dc:	6909      	ldr	r1, [r1, #16]
 80108de:	440d      	add	r5, r1
 80108e0:	f10a 0a01 	add.w	sl, sl, #1
 80108e4:	e790      	b.n	8010808 <forward_eltwise_integer_INT8+0x288>
 80108e6:	4602      	mov	r2, r0
 80108e8:	e723      	b.n	8010732 <forward_eltwise_integer_INT8+0x1b2>
 80108ea:	46f4      	mov	ip, lr
 80108ec:	e706      	b.n	80106fc <forward_eltwise_integer_INT8+0x17c>
 80108ee:	2700      	movs	r7, #0
 80108f0:	e72f      	b.n	8010752 <forward_eltwise_integer_INT8+0x1d2>
 80108f2:	4660      	mov	r0, ip
 80108f4:	e711      	b.n	801071a <forward_eltwise_integer_INT8+0x19a>
 80108f6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80108fa:	f10b 0b01 	add.w	fp, fp, #1
 80108fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010900:	f8de 1008 	ldr.w	r1, [lr, #8]
 8010904:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8010908:	440c      	add	r4, r1
 801090a:	6899      	ldr	r1, [r3, #8]
 801090c:	45dc      	cmp	ip, fp
 801090e:	440d      	add	r5, r1
 8010910:	f63f af78 	bhi.w	8010804 <forward_eltwise_integer_INT8+0x284>
 8010914:	f8de 000c 	ldr.w	r0, [lr, #12]
 8010918:	9908      	ldr	r1, [sp, #32]
 801091a:	4404      	add	r4, r0
 801091c:	68d0      	ldr	r0, [r2, #12]
 801091e:	3101      	adds	r1, #1
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	4288      	cmp	r0, r1
 8010924:	441d      	add	r5, r3
 8010926:	9108      	str	r1, [sp, #32]
 8010928:	f63f af64 	bhi.w	80107f4 <forward_eltwise_integer_INT8+0x274>
 801092c:	b02b      	add	sp, #172	; 0xac
 801092e:	ecbd 8b02 	vpop	{d8}
 8010932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010936:	f04f 0a00 	mov.w	sl, #0
 801093a:	e667      	b.n	801060c <forward_eltwise_integer_INT8+0x8c>
 801093c:	2301      	movs	r3, #1
 801093e:	4670      	mov	r0, lr
 8010940:	9308      	str	r3, [sp, #32]
 8010942:	e655      	b.n	80105f0 <forward_eltwise_integer_INT8+0x70>
 8010944:	4625      	mov	r5, r4
 8010946:	e62b      	b.n	80105a0 <forward_eltwise_integer_INT8+0x20>
 8010948:	2301      	movs	r3, #1
 801094a:	e710      	b.n	801076e <forward_eltwise_integer_INT8+0x1ee>
 801094c:	2300      	movs	r3, #0
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	deff      	udf	#255	; 0xff
 8010952:	bf00      	nop
 8010954:	befffffc 	.word	0xbefffffc

08010958 <forward_lite_conv2d_rgb_sssa8_ch>:
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	4694      	mov	ip, r2
 801095e:	461c      	mov	r4, r3
 8010960:	460d      	mov	r5, r1
 8010962:	4661      	mov	r1, ip
 8010964:	ed2d 8b02 	vpush	{d8}
 8010968:	b0d1      	sub	sp, #324	; 0x144
 801096a:	ee08 2a90 	vmov	s17, r2
 801096e:	4622      	mov	r2, r4
 8010970:	f8bd c174 	ldrh.w	ip, [sp, #372]	; 0x174
 8010974:	9317      	str	r3, [sp, #92]	; 0x5c
 8010976:	4692      	mov	sl, r2
 8010978:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 801097a:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 801097e:	f8bd c178 	ldrh.w	ip, [sp, #376]	; 0x178
 8010982:	900d      	str	r0, [sp, #52]	; 0x34
 8010984:	9301      	str	r3, [sp, #4]
 8010986:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801098a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801098e:	f89d c188 	ldrb.w	ip, [sp, #392]	; 0x188
 8010992:	f8bd 6170 	ldrh.w	r6, [sp, #368]	; 0x170
 8010996:	f99d b180 	ldrsb.w	fp, [sp, #384]	; 0x180
 801099a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 801099e:	f8bd c190 	ldrh.w	ip, [sp, #400]	; 0x190
 80109a2:	9600      	str	r6, [sp, #0]
 80109a4:	f8cd b008 	str.w	fp, [sp, #8]
 80109a8:	9623      	str	r6, [sp, #140]	; 0x8c
 80109aa:	f99d 8184 	ldrsb.w	r8, [sp, #388]	; 0x184
 80109ae:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80109b2:	e9dd 9065 	ldrd	r9, r0, [sp, #404]	; 0x194
 80109b6:	eba9 0444 	sub.w	r4, r9, r4, lsl #1
 80109ba:	9003      	str	r0, [sp, #12]
 80109bc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80109c0:	4633      	mov	r3, r6
 80109c2:	4404      	add	r4, r0
 80109c4:	2003      	movs	r0, #3
 80109c6:	9714      	str	r7, [sp, #80]	; 0x50
 80109c8:	f002 fb52 	bl	8013070 <st_sssa8_ch_convolve_rank1upd>
 80109cc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80109ce:	4652      	mov	r2, sl
 80109d0:	fb16 f306 	smulbb	r3, r6, r6
 80109d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80109d8:	b29b      	uxth	r3, r3
 80109da:	9315      	str	r3, [sp, #84]	; 0x54
 80109dc:	ebca 734a 	rsb	r3, sl, sl, lsl #29
 80109e0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 80109e4:	0057      	lsls	r7, r2, #1
 80109e6:	932c      	str	r3, [sp, #176]	; 0xb0
 80109e8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80109ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80109ee:	b1ca      	cbz	r2, 8010a24 <forward_lite_conv2d_rgb_sssa8_ch+0xcc>
 80109f0:	1d1a      	adds	r2, r3, #4
 80109f2:	f04f 0c01 	mov.w	ip, #1
 80109f6:	19e0      	adds	r0, r4, r7
 80109f8:	f934 3b02 	ldrsh.w	r3, [r4], #2
 80109fc:	1e59      	subs	r1, r3, #1
 80109fe:	fa0c f603 	lsl.w	r6, ip, r3
 8010a02:	fa08 f303 	lsl.w	r3, r8, r3
 8010a06:	b289      	uxth	r1, r1
 8010a08:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 8010a0c:	2914      	cmp	r1, #20
 8010a0e:	f200 8103 	bhi.w	8010c18 <forward_lite_conv2d_rgb_sssa8_ch+0x2c0>
 8010a12:	4284      	cmp	r4, r0
 8010a14:	f842 3c04 	str.w	r3, [r2, #-4]
 8010a18:	f102 0204 	add.w	r2, r2, #4
 8010a1c:	d1ec      	bne.n	80109f8 <forward_lite_conv2d_rgb_sssa8_ch+0xa0>
 8010a1e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8010a20:	eb03 0409 	add.w	r4, r3, r9
 8010a24:	1be3      	subs	r3, r4, r7
 8010a26:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8010a28:	aa30      	add	r2, sp, #192	; 0xc0
 8010a2a:	a93c      	add	r1, sp, #240	; 0xf0
 8010a2c:	932e      	str	r3, [sp, #184]	; 0xb8
 8010a2e:	a846      	add	r0, sp, #280	; 0x118
 8010a30:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010a32:	f013 0f01 	tst.w	r3, #1
 8010a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a38:	bf18      	it	ne
 8010a3a:	3302      	addne	r3, #2
 8010a3c:	fb03 f303 	mul.w	r3, r3, r3
 8010a40:	931d      	str	r3, [sp, #116]	; 0x74
 8010a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a44:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
 8010a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a4a:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
 8010a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010a50:	e9cd 3340 	strd	r3, r3, [sp, #256]	; 0x100
 8010a54:	ab38      	add	r3, sp, #224	; 0xe0
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	ab34      	add	r3, sp, #208	; 0xd0
 8010a5a:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
 8010a5e:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
 8010a62:	f003 f891 	bl	8013b88 <ai_padding_opt_init>
 8010a66:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010a68:	fb04 f304 	mul.w	r3, r4, r4
 8010a6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010a6e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8010a70:	fb01 f403 	mul.w	r4, r1, r3
 8010a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a78:	fb01 f202 	mul.w	r2, r1, r2
 8010a7c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010a7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010a82:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8010a86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010a8a:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8010a8e:	901e      	str	r0, [sp, #120]	; 0x78
 8010a90:	9310      	str	r3, [sp, #64]	; 0x40
 8010a92:	bfa8      	it	ge
 8010a94:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8010a98:	42a2      	cmp	r2, r4
 8010a9a:	f340 81cf 	ble.w	8010e3c <forward_lite_conv2d_rgb_sssa8_ch+0x4e4>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	9329      	str	r3, [sp, #164]	; 0xa4
 8010aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aa4:	fbb4 f3f3 	udiv	r3, r4, r3
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	4619      	mov	r1, r3
 8010aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010aae:	4299      	cmp	r1, r3
 8010ab0:	bf28      	it	cs
 8010ab2:	4619      	movcs	r1, r3
 8010ab4:	fbb3 f2f1 	udiv	r2, r3, r1
 8010ab8:	fb01 3312 	mls	r3, r1, r2, r3
 8010abc:	b292      	uxth	r2, r2
 8010abe:	912a      	str	r1, [sp, #168]	; 0xa8
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	9222      	str	r2, [sp, #136]	; 0x88
 8010ac4:	b11b      	cbz	r3, 8010ace <forward_lite_conv2d_rgb_sssa8_ch+0x176>
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	3301      	adds	r3, #1
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	9322      	str	r3, [sp, #136]	; 0x88
 8010ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f000 819a 	beq.w	8010e0a <forward_lite_conv2d_rgb_sssa8_ch+0x4b2>
 8010ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010ad8:	fa0f fb8b 	sxth.w	fp, fp
 8010adc:	2400      	movs	r4, #0
 8010ade:	425b      	negs	r3, r3
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	9228      	str	r2, [sp, #160]	; 0xa0
 8010ae8:	9221      	str	r2, [sp, #132]	; 0x84
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	932f      	str	r3, [sp, #188]	; 0xbc
 8010aee:	465b      	mov	r3, fp
 8010af0:	46ab      	mov	fp, r5
 8010af2:	4625      	mov	r5, r4
 8010af4:	461e      	mov	r6, r3
 8010af6:	a846      	add	r0, sp, #280	; 0x118
 8010af8:	f003 f8a0 	bl	8013c3c <ai_padding_opt_phase1>
 8010afc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010afe:	2b03      	cmp	r3, #3
 8010b00:	f000 8188 	beq.w	8010e14 <forward_lite_conv2d_rgb_sssa8_ch+0x4bc>
 8010b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b06:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8010b08:	fb05 f303 	mul.w	r3, r5, r3
 8010b0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010b0e:	fb01 2303 	mla	r3, r1, r3, r2
 8010b12:	9319      	str	r3, [sp, #100]	; 0x64
 8010b14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 8188 	beq.w	8010e2c <forward_lite_conv2d_rgb_sssa8_ch+0x4d4>
 8010b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f000 8164 	beq.w	8010dec <forward_lite_conv2d_rgb_sssa8_ch+0x494>
 8010b24:	b2a3      	uxth	r3, r4
 8010b26:	edcd 8a26 	vstr	s17, [sp, #152]	; 0x98
 8010b2a:	9327      	str	r3, [sp, #156]	; 0x9c
 8010b2c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8010b30:	1a9b      	subs	r3, r3, r2
 8010b32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010b34:	932b      	str	r3, [sp, #172]	; 0xac
 8010b36:	fb02 3705 	mla	r7, r2, r5, r3
 8010b3a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8010b3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8010b40:	46ba      	mov	sl, r7
 8010b42:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8010b44:	931f      	str	r3, [sp, #124]	; 0x7c
 8010b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b48:	9320      	str	r3, [sp, #128]	; 0x80
 8010b4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8010b4c:	9316      	str	r3, [sp, #88]	; 0x58
 8010b4e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010b50:	931a      	str	r3, [sp, #104]	; 0x68
 8010b52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8010b54:	ee08 3a10 	vmov	s16, r3
 8010b58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8010b5a:	931c      	str	r3, [sp, #112]	; 0x70
 8010b5c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8010b5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010b60:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8010b62:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010b64:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b66:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8010b68:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8010b6a:	9348      	str	r3, [sp, #288]	; 0x120
 8010b6c:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 8010b70:	9118      	str	r1, [sp, #96]	; 0x60
 8010b72:	2100      	movs	r1, #0
 8010b74:	930e      	str	r3, [sp, #56]	; 0x38
 8010b76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010b78:	9246      	str	r2, [sp, #280]	; 0x118
 8010b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8010b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b80:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8010b84:	2a00      	cmp	r2, #0
 8010b86:	d073      	beq.n	8010c70 <forward_lite_conv2d_rgb_sssa8_ch+0x318>
 8010b88:	3a01      	subs	r2, #1
 8010b8a:	9246      	str	r2, [sp, #280]	; 0x118
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8010b92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010b94:	4552      	cmp	r2, sl
 8010b96:	da53      	bge.n	8010c40 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 8010b98:	f9bd 5038 	ldrsh.w	r5, [sp, #56]	; 0x38
 8010b9c:	4696      	mov	lr, r2
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8010ba4:	4545      	cmp	r5, r8
 8010ba6:	dd42      	ble.n	8010c2e <forward_lite_conv2d_rgb_sssa8_ch+0x2d6>
 8010ba8:	fb01 800b 	mla	r0, r1, fp, r8
 8010bac:	1d9a      	adds	r2, r3, #6
 8010bae:	ea4f 7cde 	mov.w	ip, lr, lsr #31
 8010bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010bb8:	458b      	cmp	fp, r1
 8010bba:	bfd8      	it	le
 8010bbc:	f04c 0c01 	orrle.w	ip, ip, #1
 8010bc0:	4641      	mov	r1, r8
 8010bc2:	4418      	add	r0, r3
 8010bc4:	e00b      	b.n	8010bde <forward_lite_conv2d_rgb_sssa8_ch+0x286>
 8010bc6:	f366 441f 	bfi	r4, r6, #16, #16
 8010bca:	f842 4c04 	str.w	r4, [r2, #-4]
 8010bce:	3101      	adds	r1, #1
 8010bd0:	f822 7c06 	strh.w	r7, [r2, #-6]
 8010bd4:	3003      	adds	r0, #3
 8010bd6:	3206      	adds	r2, #6
 8010bd8:	b20c      	sxth	r4, r1
 8010bda:	42a5      	cmp	r5, r4
 8010bdc:	dd27      	ble.n	8010c2e <forward_lite_conv2d_rgb_sssa8_ch+0x2d6>
 8010bde:	2400      	movs	r4, #0
 8010be0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8010be4:	f1a2 0906 	sub.w	r9, r2, #6
 8010be8:	4637      	mov	r7, r6
 8010bea:	f366 040f 	bfi	r4, r6, #0, #16
 8010bee:	4613      	mov	r3, r2
 8010bf0:	d1e9      	bne.n	8010bc6 <forward_lite_conv2d_rgb_sssa8_ch+0x26e>
 8010bf2:	f1bc 0f00 	cmp.w	ip, #0
 8010bf6:	d1e6      	bne.n	8010bc6 <forward_lite_conv2d_rgb_sssa8_ch+0x26e>
 8010bf8:	458b      	cmp	fp, r1
 8010bfa:	dde4      	ble.n	8010bc6 <forward_lite_conv2d_rgb_sssa8_ch+0x26e>
 8010bfc:	6804      	ldr	r4, [r0, #0]
 8010bfe:	fa2f fa84 	sxtb16	sl, r4
 8010c02:	ea4f 2434 	mov.w	r4, r4, ror #8
 8010c06:	fa0f f78a 	sxth.w	r7, sl
 8010c0a:	fa2f f484 	sxtb16	r4, r4
 8010c0e:	eac4 040a 	pkhbt	r4, r4, sl
 8010c12:	f8c9 4002 	str.w	r4, [r9, #2]
 8010c16:	e7da      	b.n	8010bce <forward_lite_conv2d_rgb_sssa8_ch+0x276>
 8010c18:	4284      	cmp	r4, r0
 8010c1a:	f842 8c04 	str.w	r8, [r2, #-4]
 8010c1e:	f102 0204 	add.w	r2, r2, #4
 8010c22:	f47f aee9 	bne.w	80109f8 <forward_lite_conv2d_rgb_sssa8_ch+0xa0>
 8010c26:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8010c28:	eb03 0409 	add.w	r4, r3, r9
 8010c2c:	e6fa      	b.n	8010a24 <forward_lite_conv2d_rgb_sssa8_ch+0xcc>
 8010c2e:	f10e 0e01 	add.w	lr, lr, #1
 8010c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c34:	fa0f fe8e 	sxth.w	lr, lr
 8010c38:	4596      	cmp	lr, r2
 8010c3a:	4671      	mov	r1, lr
 8010c3c:	dbb2      	blt.n	8010ba4 <forward_lite_conv2d_rgb_sssa8_ch+0x24c>
 8010c3e:	4692      	mov	sl, r2
 8010c40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d058      	beq.n	8010cf8 <forward_lite_conv2d_rgb_sssa8_ch+0x3a0>
 8010c46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010c4c:	4422      	add	r2, r4
 8010c4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010c50:	3001      	adds	r0, #1
 8010c52:	b292      	uxth	r2, r2
 8010c54:	4421      	add	r1, r4
 8010c56:	b200      	sxth	r0, r0
 8010c58:	920b      	str	r2, [sp, #44]	; 0x2c
 8010c5a:	b289      	uxth	r1, r1
 8010c5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8010c60:	4290      	cmp	r0, r2
 8010c62:	910e      	str	r1, [sp, #56]	; 0x38
 8010c64:	da74      	bge.n	8010d50 <forward_lite_conv2d_rgb_sssa8_ch+0x3f8>
 8010c66:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8010c68:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8010c6c:	2a00      	cmp	r2, #0
 8010c6e:	d18b      	bne.n	8010b88 <forward_lite_conv2d_rgb_sssa8_ch+0x230>
 8010c70:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8010c72:	b932      	cbnz	r2, 8010c82 <forward_lite_conv2d_rgb_sssa8_ch+0x32a>
 8010c74:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8010c76:	3a01      	subs	r2, #1
 8010c78:	9248      	str	r2, [sp, #288]	; 0x120
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8010c80:	e787      	b.n	8010b92 <forward_lite_conv2d_rgb_sssa8_ch+0x23a>
 8010c82:	3a01      	subs	r2, #1
 8010c84:	9247      	str	r2, [sp, #284]	; 0x11c
 8010c86:	f8bd 213c 	ldrh.w	r2, [sp, #316]	; 0x13c
 8010c8a:	2a01      	cmp	r2, #1
 8010c8c:	f8ad 213e 	strh.w	r2, [sp, #318]	; 0x13e
 8010c90:	f43f af7f 	beq.w	8010b92 <forward_lite_conv2d_rgb_sssa8_ch+0x23a>
 8010c94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c96:	4552      	cmp	r2, sl
 8010c98:	dad2      	bge.n	8010c40 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 8010c9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010c9c:	4615      	mov	r5, r2
 8010c9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010ca0:	1e4f      	subs	r7, r1, #1
 8010ca2:	fa0f fc81 	sxth.w	ip, r1
 8010ca6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010ca8:	4611      	mov	r1, r2
 8010caa:	1a3f      	subs	r7, r7, r0
 8010cac:	b2bf      	uxth	r7, r7
 8010cae:	3701      	adds	r7, #1
 8010cb0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010cb4:	007f      	lsls	r7, r7, #1
 8010cb6:	45c4      	cmp	ip, r8
 8010cb8:	dd16      	ble.n	8010ce8 <forward_lite_conv2d_rgb_sssa8_ch+0x390>
 8010cba:	fb01 810b 	mla	r1, r1, fp, r8
 8010cbe:	19d8      	adds	r0, r3, r7
 8010cc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010cc4:	4421      	add	r1, r4
 8010cc6:	3306      	adds	r3, #6
 8010cc8:	f851 2b03 	ldr.w	r2, [r1], #3
 8010ccc:	fa2f fe82 	sxtb16	lr, r2
 8010cd0:	4283      	cmp	r3, r0
 8010cd2:	ea4f 2232 	mov.w	r2, r2, ror #8
 8010cd6:	f823 ec06 	strh.w	lr, [r3, #-6]
 8010cda:	fa2f f282 	sxtb16	r2, r2
 8010cde:	eac2 020e 	pkhbt	r2, r2, lr
 8010ce2:	f843 2c04 	str.w	r2, [r3, #-4]
 8010ce6:	d1ee      	bne.n	8010cc6 <forward_lite_conv2d_rgb_sssa8_ch+0x36e>
 8010ce8:	3501      	adds	r5, #1
 8010cea:	b22d      	sxth	r5, r5
 8010cec:	4555      	cmp	r5, sl
 8010cee:	4629      	mov	r1, r5
 8010cf0:	dbe1      	blt.n	8010cb6 <forward_lite_conv2d_rgb_sssa8_ch+0x35e>
 8010cf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d1a6      	bne.n	8010c46 <forward_lite_conv2d_rgb_sssa8_ch+0x2ee>
 8010cf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010cfa:	4610      	mov	r0, r2
 8010cfc:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010cfe:	ee18 2a10 	vmov	r2, s16
 8010d02:	9308      	str	r3, [sp, #32]
 8010d04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010d06:	9307      	str	r3, [sp, #28]
 8010d08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010d0a:	9306      	str	r3, [sp, #24]
 8010d0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d0e:	9305      	str	r3, [sp, #20]
 8010d10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d16:	9303      	str	r3, [sp, #12]
 8010d18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d1a:	9302      	str	r3, [sp, #8]
 8010d1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	2300      	movs	r3, #0
 8010d22:	9301      	str	r3, [sp, #4]
 8010d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d26:	f002 ffa3 	bl	8013c70 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8010d2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010d30:	4423      	add	r3, r4
 8010d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d34:	3101      	adds	r1, #1
 8010d36:	9018      	str	r0, [sp, #96]	; 0x60
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	4422      	add	r2, r4
 8010d3c:	b209      	sxth	r1, r1
 8010d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d40:	b292      	uxth	r2, r2
 8010d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d44:	910f      	str	r1, [sp, #60]	; 0x3c
 8010d46:	4299      	cmp	r1, r3
 8010d48:	920e      	str	r2, [sp, #56]	; 0x38
 8010d4a:	da1a      	bge.n	8010d82 <forward_lite_conv2d_rgb_sssa8_ch+0x42a>
 8010d4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d4e:	e78a      	b.n	8010c66 <forward_lite_conv2d_rgb_sssa8_ch+0x30e>
 8010d50:	9914      	ldr	r1, [sp, #80]	; 0x50
 8010d52:	4299      	cmp	r1, r3
 8010d54:	d015      	beq.n	8010d82 <forward_lite_conv2d_rgb_sssa8_ch+0x42a>
 8010d56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010d58:	ee18 2a10 	vmov	r2, s16
 8010d5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010d5e:	9307      	str	r3, [sp, #28]
 8010d60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010d62:	9306      	str	r3, [sp, #24]
 8010d64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010d66:	9305      	str	r3, [sp, #20]
 8010d68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d6a:	9304      	str	r3, [sp, #16]
 8010d6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010d6e:	9303      	str	r3, [sp, #12]
 8010d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d72:	9302      	str	r3, [sp, #8]
 8010d74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d76:	9301      	str	r3, [sp, #4]
 8010d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d7e:	f003 fb61 	bl	8014444 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8010d82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010d84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010d86:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010d88:	1a9b      	subs	r3, r3, r2
 8010d8a:	4411      	add	r1, r2
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	9119      	str	r1, [sp, #100]	; 0x64
 8010d90:	429a      	cmp	r2, r3
 8010d92:	9320      	str	r3, [sp, #128]	; 0x80
 8010d94:	bf28      	it	cs
 8010d96:	461a      	movcs	r2, r3
 8010d98:	b294      	uxth	r4, r2
 8010d9a:	b954      	cbnz	r4, 8010db2 <forward_lite_conv2d_rgb_sssa8_ch+0x45a>
 8010d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d9e:	3b01      	subs	r3, #1
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	461a      	mov	r2, r3
 8010da4:	931f      	str	r3, [sp, #124]	; 0x7c
 8010da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d020      	beq.n	8010df0 <forward_lite_conv2d_rgb_sssa8_ch+0x498>
 8010dae:	9416      	str	r4, [sp, #88]	; 0x58
 8010db0:	e6d6      	b.n	8010b60 <forward_lite_conv2d_rgb_sssa8_ch+0x208>
 8010db2:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	; 0x54
 8010db6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8010db8:	fb02 1003 	mla	r0, r2, r3, r1
 8010dbc:	ee18 1a10 	vmov	r1, s16
 8010dc0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010dc4:	9026      	str	r0, [sp, #152]	; 0x98
 8010dc6:	ee08 1a10 	vmov	s16, r1
 8010dca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010dcc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8010dd0:	911c      	str	r1, [sp, #112]	; 0x70
 8010dd2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010dd4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010dd8:	911b      	str	r1, [sp, #108]	; 0x6c
 8010dda:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010ddc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010de0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010de2:	931a      	str	r3, [sp, #104]	; 0x68
 8010de4:	4623      	mov	r3, r4
 8010de6:	f002 fde5 	bl	80139b4 <st_int8_to16_dual>
 8010dea:	e7d7      	b.n	8010d9c <forward_lite_conv2d_rgb_sssa8_ch+0x444>
 8010dec:	b2a3      	uxth	r3, r4
 8010dee:	9327      	str	r3, [sp, #156]	; 0x9c
 8010df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010df2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010df4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010df6:	4413      	add	r3, r2
 8010df8:	3401      	adds	r4, #1
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	b224      	sxth	r4, r4
 8010dfe:	9321      	str	r3, [sp, #132]	; 0x84
 8010e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e02:	4625      	mov	r5, r4
 8010e04:	429c      	cmp	r4, r3
 8010e06:	f6ff ae76 	blt.w	8010af6 <forward_lite_conv2d_rgb_sssa8_ch+0x19e>
 8010e0a:	b051      	add	sp, #324	; 0x144
 8010e0c:	ecbd 8b02 	vpop	{d8}
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e16:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 8010e18:	3302      	adds	r3, #2
 8010e1a:	fb05 3303 	mla	r3, r5, r3, r3
 8010e1e:	3301      	adds	r3, #1
 8010e20:	18d3      	adds	r3, r2, r3
 8010e22:	9319      	str	r3, [sp, #100]	; 0x64
 8010e24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	f47f ae78 	bne.w	8010b1c <forward_lite_conv2d_rgb_sssa8_ch+0x1c4>
 8010e2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8010e2e:	ee18 0a90 	vmov	r0, s17
 8010e32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010e34:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010e36:	f002 fdbd 	bl	80139b4 <st_int8_to16_dual>
 8010e3a:	e66f      	b.n	8010b1c <forward_lite_conv2d_rgb_sssa8_ch+0x1c4>
 8010e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e3e:	ee18 0a90 	vmov	r0, s17
 8010e42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010e44:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010e46:	f002 fdb5 	bl	80139b4 <st_int8_to16_dual>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	9329      	str	r3, [sp, #164]	; 0xa4
 8010e4e:	e628      	b.n	8010aa2 <forward_lite_conv2d_rgb_sssa8_ch+0x14a>

08010e50 <forward_lite_node_convert_integer_iu8ou8>:
 8010e50:	ee07 3a90 	vmov	s15, r3
 8010e54:	f89d 3000 	ldrb.w	r3, [sp]
 8010e58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010e5c:	ee06 3a90 	vmov	s13, r3
 8010e60:	1883      	adds	r3, r0, r2
 8010e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e66:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8010e6a:	4298      	cmp	r0, r3
 8010e6c:	ee76 6a87 	vadd.f32	s13, s13, s14
 8010e70:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8010e74:	d215      	bcs.n	8010ea2 <forward_lite_node_convert_integer_iu8ou8+0x52>
 8010e76:	3801      	subs	r0, #1
 8010e78:	440a      	add	r2, r1
 8010e7a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010e7e:	eef0 7a66 	vmov.f32	s15, s13
 8010e82:	ee07 3a10 	vmov	s14, r3
 8010e86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e8a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8010e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e92:	ee17 3a90 	vmov	r3, s15
 8010e96:	f383 0308 	usat	r3, #8, r3
 8010e9a:	f801 3b01 	strb.w	r3, [r1], #1
 8010e9e:	4291      	cmp	r1, r2
 8010ea0:	d1eb      	bne.n	8010e7a <forward_lite_node_convert_integer_iu8ou8+0x2a>
 8010ea2:	4770      	bx	lr

08010ea4 <forward_lite_node_convert_integer_iu8os8>:
 8010ea4:	ee07 3a90 	vmov	s15, r3
 8010ea8:	f99d 3000 	ldrsb.w	r3, [sp]
 8010eac:	ee06 3a90 	vmov	s13, r3
 8010eb0:	1883      	adds	r3, r0, r2
 8010eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eb6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010eba:	4298      	cmp	r0, r3
 8010ebc:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8010ec0:	d22d      	bcs.n	8010f1e <forward_lite_node_convert_integer_iu8os8+0x7a>
 8010ec2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010ec6:	3801      	subs	r0, #1
 8010ec8:	440a      	add	r2, r1
 8010eca:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010f20 <forward_lite_node_convert_integer_iu8os8+0x7c>
 8010ece:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010ed2:	eef0 7a66 	vmov.f32	s15, s13
 8010ed6:	ee07 3a10 	vmov	s14, r3
 8010eda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010ede:	eee7 7a00 	vfma.f32	s15, s14, s0
 8010ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ee6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8010eea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010efa:	dd08      	ble.n	8010f0e <forward_lite_node_convert_integer_iu8os8+0x6a>
 8010efc:	ee17 3a10 	vmov	r3, s14
 8010f00:	f303 0307 	ssat	r3, #8, r3
 8010f04:	f801 3b01 	strb.w	r3, [r1], #1
 8010f08:	4291      	cmp	r1, r2
 8010f0a:	d1e0      	bne.n	8010ece <forward_lite_node_convert_integer_iu8os8+0x2a>
 8010f0c:	4770      	bx	lr
 8010f0e:	ee17 3a90 	vmov	r3, s15
 8010f12:	f303 0307 	ssat	r3, #8, r3
 8010f16:	f801 3b01 	strb.w	r3, [r1], #1
 8010f1a:	4291      	cmp	r1, r2
 8010f1c:	d1d7      	bne.n	8010ece <forward_lite_node_convert_integer_iu8os8+0x2a>
 8010f1e:	4770      	bx	lr
 8010f20:	3efffffc 	.word	0x3efffffc

08010f24 <forward_lite_node_convert_integer_iu8os8_fast>:
 8010f24:	b570      	push	{r4, r5, r6, lr}
 8010f26:	1095      	asrs	r5, r2, #2
 8010f28:	2d00      	cmp	r5, #0
 8010f2a:	dd31      	ble.n	8010f90 <forward_lite_node_convert_integer_iu8os8_fast+0x6c>
 8010f2c:	00ae      	lsls	r6, r5, #2
 8010f2e:	460c      	mov	r4, r1
 8010f30:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010f34:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 8010f38:	f850 3b04 	ldr.w	r3, [r0], #4
 8010f3c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8010f40:	fa3f fc8c 	uxtb16	ip, ip
 8010f44:	fadc fc0e 	ssub16	ip, ip, lr
 8010f48:	fa3f f383 	uxtb16	r3, r3
 8010f4c:	fad3 f30e 	ssub16	r3, r3, lr
 8010f50:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8010f54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8010f58:	42a8      	cmp	r0, r5
 8010f5a:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 8010f5e:	ea43 030c 	orr.w	r3, r3, ip
 8010f62:	f844 3b04 	str.w	r3, [r4], #4
 8010f66:	d1e7      	bne.n	8010f38 <forward_lite_node_convert_integer_iu8os8_fast+0x14>
 8010f68:	4431      	add	r1, r6
 8010f6a:	f012 0203 	ands.w	r2, r2, #3
 8010f6e:	d00e      	beq.n	8010f8e <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 8010f70:	782b      	ldrb	r3, [r5, #0]
 8010f72:	3a01      	subs	r2, #1
 8010f74:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8010f78:	700b      	strb	r3, [r1, #0]
 8010f7a:	d008      	beq.n	8010f8e <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 8010f7c:	786b      	ldrb	r3, [r5, #1]
 8010f7e:	2a01      	cmp	r2, #1
 8010f80:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8010f84:	704b      	strb	r3, [r1, #1]
 8010f86:	d002      	beq.n	8010f8e <forward_lite_node_convert_integer_iu8os8_fast+0x6a>
 8010f88:	78ab      	ldrb	r3, [r5, #2]
 8010f8a:	3b80      	subs	r3, #128	; 0x80
 8010f8c:	708b      	strb	r3, [r1, #2]
 8010f8e:	bd70      	pop	{r4, r5, r6, pc}
 8010f90:	4605      	mov	r5, r0
 8010f92:	e7ea      	b.n	8010f6a <forward_lite_node_convert_integer_iu8os8_fast+0x46>

08010f94 <forward_lite_node_convert_integer_is8ou8>:
 8010f94:	ee07 3a90 	vmov	s15, r3
 8010f98:	f89d 3000 	ldrb.w	r3, [sp]
 8010f9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010fa0:	ee06 3a90 	vmov	s13, r3
 8010fa4:	1883      	adds	r3, r0, r2
 8010fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010faa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8010fae:	4298      	cmp	r0, r3
 8010fb0:	ee76 6a87 	vadd.f32	s13, s13, s14
 8010fb4:	eee7 6ac0 	vfms.f32	s13, s15, s0
 8010fb8:	d215      	bcs.n	8010fe6 <forward_lite_node_convert_integer_is8ou8+0x52>
 8010fba:	3801      	subs	r0, #1
 8010fbc:	440a      	add	r2, r1
 8010fbe:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 8010fc2:	eef0 7a66 	vmov.f32	s15, s13
 8010fc6:	ee07 3a10 	vmov	s14, r3
 8010fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010fce:	eee7 7a00 	vfma.f32	s15, s14, s0
 8010fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fd6:	ee17 3a90 	vmov	r3, s15
 8010fda:	f383 0308 	usat	r3, #8, r3
 8010fde:	f801 3b01 	strb.w	r3, [r1], #1
 8010fe2:	4291      	cmp	r1, r2
 8010fe4:	d1eb      	bne.n	8010fbe <forward_lite_node_convert_integer_is8ou8+0x2a>
 8010fe6:	4770      	bx	lr

08010fe8 <forward_lite_node_convert_integer_is8ou8_fast>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	1095      	asrs	r5, r2, #2
 8010fec:	2d00      	cmp	r5, #0
 8010fee:	dd2d      	ble.n	801104c <forward_lite_node_convert_integer_is8ou8_fast+0x64>
 8010ff0:	00ae      	lsls	r6, r5, #2
 8010ff2:	460c      	mov	r4, r1
 8010ff4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010ff8:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 8010ffc:	f850 3b04 	ldr.w	r3, [r0], #4
 8011000:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8011004:	fa2f fc8c 	sxtb16	ip, ip
 8011008:	fa9c fc0e 	sadd16	ip, ip, lr
 801100c:	fa2f f383 	sxtb16	r3, r3
 8011010:	fa93 f30e 	sadd16	r3, r3, lr
 8011014:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011018:	42a8      	cmp	r0, r5
 801101a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 801101e:	f844 3b04 	str.w	r3, [r4], #4
 8011022:	d1eb      	bne.n	8010ffc <forward_lite_node_convert_integer_is8ou8_fast+0x14>
 8011024:	4431      	add	r1, r6
 8011026:	f012 0203 	ands.w	r2, r2, #3
 801102a:	d00e      	beq.n	801104a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 801102c:	782b      	ldrb	r3, [r5, #0]
 801102e:	3a01      	subs	r2, #1
 8011030:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8011034:	700b      	strb	r3, [r1, #0]
 8011036:	d008      	beq.n	801104a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 8011038:	786b      	ldrb	r3, [r5, #1]
 801103a:	2a01      	cmp	r2, #1
 801103c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8011040:	704b      	strb	r3, [r1, #1]
 8011042:	d002      	beq.n	801104a <forward_lite_node_convert_integer_is8ou8_fast+0x62>
 8011044:	78ab      	ldrb	r3, [r5, #2]
 8011046:	3b80      	subs	r3, #128	; 0x80
 8011048:	708b      	strb	r3, [r1, #2]
 801104a:	bd70      	pop	{r4, r5, r6, pc}
 801104c:	4605      	mov	r5, r0
 801104e:	e7ea      	b.n	8011026 <forward_lite_node_convert_integer_is8ou8_fast+0x3e>

08011050 <forward_lite_dw_3x3_sssa8_ch>:
 8011050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011054:	b09b      	sub	sp, #108	; 0x6c
 8011056:	461f      	mov	r7, r3
 8011058:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801105c:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8011060:	9207      	str	r2, [sp, #28]
 8011062:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	; 0xa0
 8011066:	9306      	str	r3, [sp, #24]
 8011068:	9204      	str	r2, [sp, #16]
 801106a:	f99d 20a4 	ldrsb.w	r2, [sp, #164]	; 0xa4
 801106e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011070:	9208      	str	r2, [sp, #32]
 8011072:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 8011076:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 801107a:	920f      	str	r2, [sp, #60]	; 0x3c
 801107c:	f8bd 20b0 	ldrh.w	r2, [sp, #176]	; 0xb0
 8011080:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8011084:	9017      	str	r0, [sp, #92]	; 0x5c
 8011086:	9103      	str	r1, [sp, #12]
 8011088:	9215      	str	r2, [sp, #84]	; 0x54
 801108a:	2b00      	cmp	r3, #0
 801108c:	f000 82b2 	beq.w	80115f4 <forward_lite_dw_3x3_sssa8_ch+0x5a4>
 8011090:	00fb      	lsls	r3, r7, #3
 8011092:	0079      	lsls	r1, r7, #1
 8011094:	9305      	str	r3, [sp, #20]
 8011096:	9a08      	ldr	r2, [sp, #32]
 8011098:	2f03      	cmp	r7, #3
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80110a0:	9806      	ldr	r0, [sp, #24]
 80110a2:	fb07 f303 	mul.w	r3, r7, r3
 80110a6:	f102 0201 	add.w	r2, r2, #1
 80110aa:	fb07 f000 	mul.w	r0, r7, r0
 80110ae:	920a      	str	r2, [sp, #40]	; 0x28
 80110b0:	9a07      	ldr	r2, [sp, #28]
 80110b2:	9010      	str	r0, [sp, #64]	; 0x40
 80110b4:	fb03 f202 	mul.w	r2, r3, r2
 80110b8:	eba3 0301 	sub.w	r3, r3, r1
 80110bc:	9216      	str	r2, [sp, #88]	; 0x58
 80110be:	9303      	str	r3, [sp, #12]
 80110c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80110c2:	9b05      	ldr	r3, [sp, #20]
 80110c4:	441a      	add	r2, r3
 80110c6:	443b      	add	r3, r7
 80110c8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80110cc:	9212      	str	r2, [sp, #72]	; 0x48
 80110ce:	9311      	str	r3, [sp, #68]	; 0x44
 80110d0:	9b04      	ldr	r3, [sp, #16]
 80110d2:	f1c3 0300 	rsb	r3, r3, #0
 80110d6:	eac3 4e03 	pkhbt	lr, r3, r3, lsl #16
 80110da:	bf8c      	ite	hi
 80110dc:	1efb      	subhi	r3, r7, #3
 80110de:	2300      	movls	r3, #0
 80110e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80110e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f000 8278 	beq.w	80115da <forward_lite_dw_3x3_sssa8_ch+0x58a>
 80110ea:	f007 0203 	and.w	r2, r7, #3
 80110ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110f0:	920d      	str	r2, [sp, #52]	; 0x34
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f000 8271 	beq.w	80115da <forward_lite_dw_3x3_sssa8_ch+0x58a>
 80110f8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80110fc:	2100      	movs	r1, #0
 80110fe:	4675      	mov	r5, lr
 8011100:	46c3      	mov	fp, r8
 8011102:	9307      	str	r3, [sp, #28]
 8011104:	1e53      	subs	r3, r2, #1
 8011106:	9114      	str	r1, [sp, #80]	; 0x50
 8011108:	b29b      	uxth	r3, r3
 801110a:	9708      	str	r7, [sp, #32]
 801110c:	9313      	str	r3, [sp, #76]	; 0x4c
 801110e:	460b      	mov	r3, r1
 8011110:	46d8      	mov	r8, fp
 8011112:	46ab      	mov	fp, r5
 8011114:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
 8011118:	fb03 2301 	mla	r3, r3, r1, r2
 801111c:	9306      	str	r3, [sp, #24]
 801111e:	2300      	movs	r3, #0
 8011120:	930e      	str	r3, [sp, #56]	; 0x38
 8011122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011124:	2b00      	cmp	r3, #0
 8011126:	f000 825b 	beq.w	80115e0 <forward_lite_dw_3x3_sssa8_ch+0x590>
 801112a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801112c:	f108 0104 	add.w	r1, r8, #4
 8011130:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011132:	2500      	movs	r5, #0
 8011134:	f102 0010 	add.w	r0, r2, #16
 8011138:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801113a:	f103 0410 	add.w	r4, r3, #16
 801113e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011140:	3208      	adds	r2, #8
 8011142:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011146:	3348      	adds	r3, #72	; 0x48
 8011148:	9002      	str	r0, [sp, #8]
 801114a:	9201      	str	r2, [sp, #4]
 801114c:	f1c8 0200 	rsb	r2, r8, #0
 8011150:	9104      	str	r1, [sp, #16]
 8011152:	920c      	str	r2, [sp, #48]	; 0x30
 8011154:	9906      	ldr	r1, [sp, #24]
 8011156:	9409      	str	r4, [sp, #36]	; 0x24
 8011158:	194a      	adds	r2, r1, r5
 801115a:	9305      	str	r3, [sp, #20]
 801115c:	5949      	ldr	r1, [r1, r5]
 801115e:	f852 c00a 	ldr.w	ip, [r2, sl]
 8011162:	eb02 074a 	add.w	r7, r2, sl, lsl #1
 8011166:	eac1 460c 	pkhbt	r6, r1, ip, lsl #16
 801116a:	f853 5c48 	ldr.w	r5, [r3, #-72]
 801116e:	eacc 4c21 	pkhtb	ip, ip, r1, asr #16
 8011172:	fa2b fe86 	sxtab16	lr, fp, r6
 8011176:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801117a:	fb25 110e 	smlad	r1, r5, lr, r1
 801117e:	fa2b fe96 	sxtab16	lr, fp, r6, ror #8
 8011182:	f853 5c44 	ldr.w	r5, [r3, #-68]
 8011186:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 801118a:	fb25 6e0e 	smlad	lr, r5, lr, r6
 801118e:	f853 5c40 	ldr.w	r5, [r3, #-64]
 8011192:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8011196:	fa2b f88c 	sxtab16	r8, fp, ip
 801119a:	fb25 6808 	smlad	r8, r5, r8, r6
 801119e:	fa2b fc9c 	sxtab16	ip, fp, ip, ror #8
 80111a2:	f853 5c3c 	ldr.w	r5, [r3, #-60]
 80111a6:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80111aa:	fb25 6c0c 	smlad	ip, r5, ip, r6
 80111ae:	9d03      	ldr	r5, [sp, #12]
 80111b0:	f852 201a 	ldr.w	r2, [r2, sl, lsl #1]
 80111b4:	eb07 0905 	add.w	r9, r7, r5
 80111b8:	597e      	ldr	r6, [r7, r5]
 80111ba:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80111be:	eac2 4506 	pkhbt	r5, r2, r6, lsl #16
 80111c2:	eb09 070a 	add.w	r7, r9, sl
 80111c6:	eac6 4222 	pkhtb	r2, r6, r2, asr #16
 80111ca:	fa2b f685 	sxtab16	r6, fp, r5
 80111ce:	fb20 1106 	smlad	r1, r0, r6, r1
 80111d2:	fa2b f595 	sxtab16	r5, fp, r5, ror #8
 80111d6:	f853 0c34 	ldr.w	r0, [r3, #-52]
 80111da:	fb20 ee05 	smlad	lr, r0, r5, lr
 80111de:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80111e2:	fa2b f582 	sxtab16	r5, fp, r2
 80111e6:	fb20 8805 	smlad	r8, r0, r5, r8
 80111ea:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 80111ee:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 80111f2:	fb20 cc02 	smlad	ip, r0, r2, ip
 80111f6:	4457      	add	r7, sl
 80111f8:	9d03      	ldr	r5, [sp, #12]
 80111fa:	f859 200a 	ldr.w	r2, [r9, sl]
 80111fe:	197d      	adds	r5, r7, r5
 8011200:	f859 901a 	ldr.w	r9, [r9, sl, lsl #1]
 8011204:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011208:	eac2 4609 	pkhbt	r6, r2, r9, lsl #16
 801120c:	eac9 4922 	pkhtb	r9, r9, r2, asr #16
 8011210:	fa2b f286 	sxtab16	r2, fp, r6
 8011214:	fb20 1102 	smlad	r1, r0, r2, r1
 8011218:	fa2b f696 	sxtab16	r6, fp, r6, ror #8
 801121c:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8011220:	fb20 ee06 	smlad	lr, r0, r6, lr
 8011224:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8011228:	fa2b f689 	sxtab16	r6, fp, r9
 801122c:	fb22 8806 	smlad	r8, r2, r6, r8
 8011230:	fa2b f999 	sxtab16	r9, fp, r9, ror #8
 8011234:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8011238:	fb20 cc09 	smlad	ip, r0, r9, ip
 801123c:	9a03      	ldr	r2, [sp, #12]
 801123e:	f855 900a 	ldr.w	r9, [r5, sl]
 8011242:	58be      	ldr	r6, [r7, r2]
 8011244:	f853 7c18 	ldr.w	r7, [r3, #-24]
 8011248:	eac6 4209 	pkhbt	r2, r6, r9, lsl #16
 801124c:	eac9 4926 	pkhtb	r9, r9, r6, asr #16
 8011250:	fa2b f682 	sxtab16	r6, fp, r2
 8011254:	fb27 1706 	smlad	r7, r7, r6, r1
 8011258:	fa2b f292 	sxtab16	r2, fp, r2, ror #8
 801125c:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8011260:	fb21 ee02 	smlad	lr, r1, r2, lr
 8011264:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8011268:	fa2b f289 	sxtab16	r2, fp, r9
 801126c:	fb21 8802 	smlad	r8, r1, r2, r8
 8011270:	fa2b f999 	sxtab16	r9, fp, r9, ror #8
 8011274:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8011278:	fb22 cc09 	smlad	ip, r2, r9, ip
 801127c:	f855 501a 	ldr.w	r5, [r5, sl, lsl #1]
 8011280:	9901      	ldr	r1, [sp, #4]
 8011282:	9807      	ldr	r0, [sp, #28]
 8011284:	f345 2907 	sbfx	r9, r5, #8, #8
 8011288:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801128c:	b269      	sxtb	r1, r5
 801128e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011292:	eba9 0900 	sub.w	r9, r9, r0
 8011296:	1a09      	subs	r1, r1, r0
 8011298:	3607      	adds	r6, #7
 801129a:	fb12 7701 	smlabb	r7, r2, r1, r7
 801129e:	f345 4207 	sbfx	r2, r5, #16, #8
 80112a2:	9902      	ldr	r1, [sp, #8]
 80112a4:	ebc0 6525 	rsb	r5, r0, r5, asr #24
 80112a8:	1a12      	subs	r2, r2, r0
 80112aa:	027f      	lsls	r7, r7, #9
 80112ac:	f851 1c10 	ldr.w	r1, [r1, #-16]
 80112b0:	2000      	movs	r0, #0
 80112b2:	fb57 0701 	smmla	r7, r7, r1, r0
 80112b6:	f833 1c06 	ldrh.w	r1, [r3, #-6]
 80112ba:	fa47 f606 	asr.w	r6, r7, r6
 80112be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80112c0:	fb11 ee09 	smlabb	lr, r1, r9, lr
 80112c4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80112c8:	f833 9c02 	ldrh.w	r9, [r3, #-2]
 80112cc:	4406      	add	r6, r0
 80112ce:	fb11 8802 	smlabb	r8, r1, r2, r8
 80112d2:	9902      	ldr	r1, [sp, #8]
 80112d4:	9a01      	ldr	r2, [sp, #4]
 80112d6:	fb19 c505 	smlabb	r5, r9, r5, ip
 80112da:	1076      	asrs	r6, r6, #1
 80112dc:	4689      	mov	r9, r1
 80112de:	4694      	mov	ip, r2
 80112e0:	f306 0607 	ssat	r6, #8, r6
 80112e4:	9f04      	ldr	r7, [sp, #16]
 80112e6:	ea4f 2e4e 	mov.w	lr, lr, lsl #9
 80112ea:	f807 6c04 	strb.w	r6, [r7, #-4]
 80112ee:	2600      	movs	r6, #0
 80112f0:	f932 2c06 	ldrsh.w	r2, [r2, #-6]
 80112f4:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 80112f8:	3207      	adds	r2, #7
 80112fa:	fb5e 6e01 	smmla	lr, lr, r1, r6
 80112fe:	fa4e f202 	asr.w	r2, lr, r2
 8011302:	4402      	add	r2, r0
 8011304:	1052      	asrs	r2, r2, #1
 8011306:	f302 0207 	ssat	r2, #8, r2
 801130a:	f807 2c03 	strb.w	r2, [r7, #-3]
 801130e:	f04f 0e00 	mov.w	lr, #0
 8011312:	f93c 6c04 	ldrsh.w	r6, [ip, #-4]
 8011316:	ea4f 2848 	mov.w	r8, r8, lsl #9
 801131a:	f859 1c08 	ldr.w	r1, [r9, #-8]
 801131e:	3607      	adds	r6, #7
 8011320:	fb58 e801 	smmla	r8, r8, r1, lr
 8011324:	fa48 f806 	asr.w	r8, r8, r6
 8011328:	4480      	add	r8, r0
 801132a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801132e:	f308 0807 	ssat	r8, #8, r8
 8011332:	f807 8c02 	strb.w	r8, [r7, #-2]
 8011336:	026d      	lsls	r5, r5, #9
 8011338:	f93c 1c02 	ldrsh.w	r1, [ip, #-2]
 801133c:	f859 2c04 	ldr.w	r2, [r9, #-4]
 8011340:	3107      	adds	r1, #7
 8011342:	fb55 e502 	smmla	r5, r5, r2, lr
 8011346:	410d      	asrs	r5, r1
 8011348:	4405      	add	r5, r0
 801134a:	106d      	asrs	r5, r5, #1
 801134c:	f305 0507 	ssat	r5, #8, r5
 8011350:	464a      	mov	r2, r9
 8011352:	f807 5c01 	strb.w	r5, [r7, #-1]
 8011356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011358:	3410      	adds	r4, #16
 801135a:	3210      	adds	r2, #16
 801135c:	3348      	adds	r3, #72	; 0x48
 801135e:	9202      	str	r2, [sp, #8]
 8011360:	4662      	mov	r2, ip
 8011362:	3208      	adds	r2, #8
 8011364:	9201      	str	r2, [sp, #4]
 8011366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011368:	19d5      	adds	r5, r2, r7
 801136a:	1d3a      	adds	r2, r7, #4
 801136c:	b2ad      	uxth	r5, r5
 801136e:	9204      	str	r2, [sp, #16]
 8011370:	428d      	cmp	r5, r1
 8011372:	462a      	mov	r2, r5
 8011374:	f4ff aeee 	bcc.w	8011154 <forward_lite_dw_3x3_sssa8_ch+0x104>
 8011378:	46ca      	mov	sl, r9
 801137a:	46b8      	mov	r8, r7
 801137c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801137e:	2b00      	cmp	r3, #0
 8011380:	f000 8115 	beq.w	80115ae <forward_lite_dw_3x3_sssa8_ch+0x55e>
 8011384:	9b06      	ldr	r3, [sp, #24]
 8011386:	f04f 0e00 	mov.w	lr, #0
 801138a:	9e07      	ldr	r6, [sp, #28]
 801138c:	9d05      	ldr	r5, [sp, #20]
 801138e:	189c      	adds	r4, r3, r2
 8011390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011392:	569b      	ldrsb	r3, [r3, r2]
 8011394:	9f08      	ldr	r7, [sp, #32]
 8011396:	1b98      	subs	r0, r3, r6
 8011398:	680b      	ldr	r3, [r1, #0]
 801139a:	8829      	ldrh	r1, [r5, #0]
 801139c:	fb10 3301 	smlabb	r3, r0, r1, r3
 80113a0:	57e1      	ldrsb	r1, [r4, r7]
 80113a2:	4630      	mov	r0, r6
 80113a4:	1b89      	subs	r1, r1, r6
 80113a6:	eb04 0647 	add.w	r6, r4, r7, lsl #1
 80113aa:	f914 4017 	ldrsb.w	r4, [r4, r7, lsl #1]
 80113ae:	462f      	mov	r7, r5
 80113b0:	1a24      	subs	r4, r4, r0
 80113b2:	8868      	ldrh	r0, [r5, #2]
 80113b4:	fb11 3300 	smlabb	r3, r1, r0, r3
 80113b8:	9903      	ldr	r1, [sp, #12]
 80113ba:	88b8      	ldrh	r0, [r7, #4]
 80113bc:	1875      	adds	r5, r6, r1
 80113be:	5671      	ldrsb	r1, [r6, r1]
 80113c0:	9e07      	ldr	r6, [sp, #28]
 80113c2:	fb14 3000 	smlabb	r0, r4, r0, r3
 80113c6:	88fb      	ldrh	r3, [r7, #6]
 80113c8:	1b89      	subs	r1, r1, r6
 80113ca:	9f03      	ldr	r7, [sp, #12]
 80113cc:	fb11 0003 	smlabb	r0, r1, r3, r0
 80113d0:	9b08      	ldr	r3, [sp, #32]
 80113d2:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 80113d6:	56e9      	ldrsb	r1, [r5, r3]
 80113d8:	f915 3013 	ldrsb.w	r3, [r5, r3, lsl #1]
 80113dc:	9d05      	ldr	r5, [sp, #20]
 80113de:	1b89      	subs	r1, r1, r6
 80113e0:	1b9b      	subs	r3, r3, r6
 80113e2:	892d      	ldrh	r5, [r5, #8]
 80113e4:	fb11 0105 	smlabb	r1, r1, r5, r0
 80113e8:	19e5      	adds	r5, r4, r7
 80113ea:	57e0      	ldrsb	r0, [r4, r7]
 80113ec:	9f05      	ldr	r7, [sp, #20]
 80113ee:	1b80      	subs	r0, r0, r6
 80113f0:	897c      	ldrh	r4, [r7, #10]
 80113f2:	fb13 1304 	smlabb	r3, r3, r4, r1
 80113f6:	89b9      	ldrh	r1, [r7, #12]
 80113f8:	f9bc 4000 	ldrsh.w	r4, [ip]
 80113fc:	fb10 3001 	smlabb	r0, r0, r1, r3
 8011400:	9908      	ldr	r1, [sp, #32]
 8011402:	3407      	adds	r4, #7
 8011404:	566b      	ldrsb	r3, [r5, r1]
 8011406:	f915 5011 	ldrsb.w	r5, [r5, r1, lsl #1]
 801140a:	1b9b      	subs	r3, r3, r6
 801140c:	89f9      	ldrh	r1, [r7, #14]
 801140e:	1bad      	subs	r5, r5, r6
 8011410:	fb13 0001 	smlabb	r0, r3, r1, r0
 8011414:	8a3b      	ldrh	r3, [r7, #16]
 8011416:	fb15 0503 	smlabb	r5, r5, r3, r0
 801141a:	f8da 3000 	ldr.w	r3, [sl]
 801141e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011420:	026d      	lsls	r5, r5, #9
 8011422:	fb55 e503 	smmla	r5, r5, r3, lr
 8011426:	fa45 f104 	asr.w	r1, r5, r4
 801142a:	1c53      	adds	r3, r2, #1
 801142c:	4401      	add	r1, r0
 801142e:	b29b      	uxth	r3, r3
 8011430:	1049      	asrs	r1, r1, #1
 8011432:	f301 0107 	ssat	r1, #8, r1
 8011436:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011438:	f888 1000 	strb.w	r1, [r8]
 801143c:	2d00      	cmp	r5, #0
 801143e:	f000 80b4 	beq.w	80115aa <forward_lite_dw_3x3_sssa8_ch+0x55a>
 8011442:	3202      	adds	r2, #2
 8011444:	8a79      	ldrh	r1, [r7, #18]
 8011446:	463c      	mov	r4, r7
 8011448:	9f08      	ldr	r7, [sp, #32]
 801144a:	b295      	uxth	r5, r2
 801144c:	9a06      	ldr	r2, [sp, #24]
 801144e:	18d0      	adds	r0, r2, r3
 8011450:	56d3      	ldrsb	r3, [r2, r3]
 8011452:	1b9a      	subs	r2, r3, r6
 8011454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	fb12 3301 	smlabb	r3, r2, r1, r3
 801145c:	57c1      	ldrsb	r1, [r0, r7]
 801145e:	eb00 0247 	add.w	r2, r0, r7, lsl #1
 8011462:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 8011466:	1b89      	subs	r1, r1, r6
 8011468:	4627      	mov	r7, r4
 801146a:	8aa4      	ldrh	r4, [r4, #20]
 801146c:	1b80      	subs	r0, r0, r6
 801146e:	fb11 3304 	smlabb	r3, r1, r4, r3
 8011472:	9903      	ldr	r1, [sp, #12]
 8011474:	1854      	adds	r4, r2, r1
 8011476:	5652      	ldrsb	r2, [r2, r1]
 8011478:	8af9      	ldrh	r1, [r7, #22]
 801147a:	1b92      	subs	r2, r2, r6
 801147c:	fb10 3101 	smlabb	r1, r0, r1, r3
 8011480:	8b3b      	ldrh	r3, [r7, #24]
 8011482:	9f05      	ldr	r7, [sp, #20]
 8011484:	fb12 1103 	smlabb	r1, r2, r3, r1
 8011488:	9b08      	ldr	r3, [sp, #32]
 801148a:	56e2      	ldrsb	r2, [r4, r3]
 801148c:	eb04 0043 	add.w	r0, r4, r3, lsl #1
 8011490:	f914 3013 	ldrsb.w	r3, [r4, r3, lsl #1]
 8011494:	1b92      	subs	r2, r2, r6
 8011496:	8b7c      	ldrh	r4, [r7, #26]
 8011498:	1b9b      	subs	r3, r3, r6
 801149a:	fb12 1204 	smlabb	r2, r2, r4, r1
 801149e:	9903      	ldr	r1, [sp, #12]
 80114a0:	1844      	adds	r4, r0, r1
 80114a2:	5641      	ldrsb	r1, [r0, r1]
 80114a4:	8bb8      	ldrh	r0, [r7, #28]
 80114a6:	1b89      	subs	r1, r1, r6
 80114a8:	fb13 2300 	smlabb	r3, r3, r0, r2
 80114ac:	8bfa      	ldrh	r2, [r7, #30]
 80114ae:	8c38      	ldrh	r0, [r7, #32]
 80114b0:	fb11 3102 	smlabb	r1, r1, r2, r3
 80114b4:	9b08      	ldr	r3, [sp, #32]
 80114b6:	56e2      	ldrsb	r2, [r4, r3]
 80114b8:	f914 3013 	ldrsb.w	r3, [r4, r3, lsl #1]
 80114bc:	4634      	mov	r4, r6
 80114be:	1b92      	subs	r2, r2, r6
 80114c0:	1b9b      	subs	r3, r3, r6
 80114c2:	fb12 1100 	smlabb	r1, r2, r0, r1
 80114c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114c8:	4638      	mov	r0, r7
 80114ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80114cc:	fb13 1202 	smlabb	r2, r3, r2, r1
 80114d0:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 80114d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80114d8:	3107      	adds	r1, #7
 80114da:	0252      	lsls	r2, r2, #9
 80114dc:	fb52 e303 	smmla	r3, r2, r3, lr
 80114e0:	410b      	asrs	r3, r1
 80114e2:	443b      	add	r3, r7
 80114e4:	105b      	asrs	r3, r3, #1
 80114e6:	f303 0307 	ssat	r3, #8, r3
 80114ea:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80114ec:	f888 3001 	strb.w	r3, [r8, #1]
 80114f0:	2e02      	cmp	r6, #2
 80114f2:	d05a      	beq.n	80115aa <forward_lite_dw_3x3_sssa8_ch+0x55a>
 80114f4:	9a06      	ldr	r2, [sp, #24]
 80114f6:	f9bc 3004 	ldrsh.w	r3, [ip, #4]
 80114fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80114fc:	f103 0c07 	add.w	ip, r3, #7
 8011500:	1953      	adds	r3, r2, r5
 8011502:	5752      	ldrsb	r2, [r2, r5]
 8011504:	4625      	mov	r5, r4
 8011506:	68b1      	ldr	r1, [r6, #8]
 8011508:	1b12      	subs	r2, r2, r4
 801150a:	8c84      	ldrh	r4, [r0, #36]	; 0x24
 801150c:	9f03      	ldr	r7, [sp, #12]
 801150e:	fb14 1202 	smlabb	r2, r4, r2, r1
 8011512:	9908      	ldr	r1, [sp, #32]
 8011514:	f8da 6008 	ldr.w	r6, [sl, #8]
 8011518:	565c      	ldrsb	r4, [r3, r1]
 801151a:	1b60      	subs	r0, r4, r5
 801151c:	460c      	mov	r4, r1
 801151e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8011522:	f913 5014 	ldrsb.w	r5, [r3, r4, lsl #1]
 8011526:	9c07      	ldr	r4, [sp, #28]
 8011528:	9b05      	ldr	r3, [sp, #20]
 801152a:	1b2d      	subs	r5, r5, r4
 801152c:	8cdc      	ldrh	r4, [r3, #38]	; 0x26
 801152e:	57cb      	ldrsb	r3, [r1, r7]
 8011530:	fb14 2400 	smlabb	r4, r4, r0, r2
 8011534:	19c8      	adds	r0, r1, r7
 8011536:	9f07      	ldr	r7, [sp, #28]
 8011538:	9905      	ldr	r1, [sp, #20]
 801153a:	1bda      	subs	r2, r3, r7
 801153c:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 801153e:	fb13 4305 	smlabb	r3, r3, r5, r4
 8011542:	460c      	mov	r4, r1
 8011544:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011546:	463d      	mov	r5, r7
 8011548:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
 801154a:	fb11 3302 	smlabb	r3, r1, r2, r3
 801154e:	9a08      	ldr	r2, [sp, #32]
 8011550:	5681      	ldrsb	r1, [r0, r2]
 8011552:	1bc9      	subs	r1, r1, r7
 8011554:	4617      	mov	r7, r2
 8011556:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801155a:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 801155e:	fb14 3101 	smlabb	r1, r4, r1, r3
 8011562:	9f03      	ldr	r7, [sp, #12]
 8011564:	1b40      	subs	r0, r0, r5
 8011566:	19d4      	adds	r4, r2, r7
 8011568:	57d2      	ldrsb	r2, [r2, r7]
 801156a:	9f05      	ldr	r7, [sp, #20]
 801156c:	1b52      	subs	r2, r2, r5
 801156e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011570:	fb13 1300 	smlabb	r3, r3, r0, r1
 8011574:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8011576:	fb11 3202 	smlabb	r2, r1, r2, r3
 801157a:	9b08      	ldr	r3, [sp, #32]
 801157c:	56e0      	ldrsb	r0, [r4, r3]
 801157e:	f914 1013 	ldrsb.w	r1, [r4, r3, lsl #1]
 8011582:	1b40      	subs	r0, r0, r5
 8011584:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011586:	1b49      	subs	r1, r1, r5
 8011588:	fb13 2200 	smlabb	r2, r3, r0, r2
 801158c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801158e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8011590:	fb13 2301 	smlabb	r3, r3, r1, r2
 8011594:	025b      	lsls	r3, r3, #9
 8011596:	fb53 e306 	smmla	r3, r3, r6, lr
 801159a:	fa43 f30c 	asr.w	r3, r3, ip
 801159e:	443b      	add	r3, r7
 80115a0:	105b      	asrs	r3, r3, #1
 80115a2:	f303 0307 	ssat	r3, #8, r3
 80115a6:	f888 3002 	strb.w	r3, [r8, #2]
 80115aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115ac:	4498      	add	r8, r3
 80115ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115b0:	9a06      	ldr	r2, [sp, #24]
 80115b2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80115b4:	3301      	adds	r3, #1
 80115b6:	440a      	add	r2, r1
 80115b8:	b21b      	sxth	r3, r3
 80115ba:	9206      	str	r2, [sp, #24]
 80115bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80115be:	930e      	str	r3, [sp, #56]	; 0x38
 80115c0:	4293      	cmp	r3, r2
 80115c2:	f6ff adae 	blt.w	8011122 <forward_lite_dw_3x3_sssa8_ch+0xd2>
 80115c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80115c8:	465d      	mov	r5, fp
 80115ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 80115cc:	46c3      	mov	fp, r8
 80115ce:	3301      	adds	r3, #1
 80115d0:	b21b      	sxth	r3, r3
 80115d2:	428b      	cmp	r3, r1
 80115d4:	9314      	str	r3, [sp, #80]	; 0x50
 80115d6:	f6ff ad9b 	blt.w	8011110 <forward_lite_dw_3x3_sssa8_ch+0xc0>
 80115da:	b01b      	add	sp, #108	; 0x6c
 80115dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e0:	461a      	mov	r2, r3
 80115e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80115e4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80115e8:	9309      	str	r3, [sp, #36]	; 0x24
 80115ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80115ec:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 80115f0:	9305      	str	r3, [sp, #20]
 80115f2:	e6c3      	b.n	801137c <forward_lite_dw_3x3_sssa8_ch+0x32c>
 80115f4:	00fb      	lsls	r3, r7, #3
 80115f6:	ea5f 0c97 	movs.w	ip, r7, lsr #2
 80115fa:	9305      	str	r3, [sp, #20]
 80115fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80115fe:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8011602:	f000 8136 	beq.w	8011872 <forward_lite_dw_3x3_sssa8_ch+0x822>
 8011606:	eb07 0447 	add.w	r4, r7, r7, lsl #1
 801160a:	f10c 39ff 	add.w	r9, ip, #4294967295
 801160e:	f10e 0304 	add.w	r3, lr, #4
 8011612:	4670      	mov	r0, lr
 8011614:	9402      	str	r4, [sp, #8]
 8011616:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 801161a:	fa1f f989 	uxth.w	r9, r9
 801161e:	9401      	str	r4, [sp, #4]
 8011620:	00fc      	lsls	r4, r7, #3
 8011622:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8011626:	eb0e 0307 	add.w	r3, lr, r7
 801162a:	eba4 0a07 	sub.w	sl, r4, r7
 801162e:	0079      	lsls	r1, r7, #1
 8011630:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8011634:	4614      	mov	r4, r2
 8011636:	9419      	str	r4, [sp, #100]	; 0x64
 8011638:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801163a:	6806      	ldr	r6, [r0, #0]
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	eac6 4402 	pkhbt	r4, r6, r2, lsl #16
 8011642:	eac2 4226 	pkhtb	r2, r2, r6, asr #16
 8011646:	1d2e      	adds	r6, r5, #4
 8011648:	9619      	str	r6, [sp, #100]	; 0x64
 801164a:	fa2f f684 	sxtb16	r6, r4
 801164e:	602e      	str	r6, [r5, #0]
 8011650:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011654:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8011656:	602c      	str	r4, [r5, #0]
 8011658:	3504      	adds	r5, #4
 801165a:	9519      	str	r5, [sp, #100]	; 0x64
 801165c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801165e:	fa2f f582 	sxtb16	r5, r2
 8011662:	3404      	adds	r4, #4
 8011664:	f844 5c04 	str.w	r5, [r4, #-4]
 8011668:	9419      	str	r4, [sp, #100]	; 0x64
 801166a:	fa2f f292 	sxtb16	r2, r2, ror #8
 801166e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8011670:	6022      	str	r2, [r4, #0]
 8011672:	3404      	adds	r4, #4
 8011674:	580e      	ldr	r6, [r1, r0]
 8011676:	9419      	str	r4, [sp, #100]	; 0x64
 8011678:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801167a:	58ca      	ldr	r2, [r1, r3]
 801167c:	eac6 4402 	pkhbt	r4, r6, r2, lsl #16
 8011680:	eac2 4226 	pkhtb	r2, r2, r6, asr #16
 8011684:	1d2e      	adds	r6, r5, #4
 8011686:	9619      	str	r6, [sp, #100]	; 0x64
 8011688:	fa2f f684 	sxtb16	r6, r4
 801168c:	602e      	str	r6, [r5, #0]
 801168e:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011692:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8011694:	602c      	str	r4, [r5, #0]
 8011696:	3504      	adds	r5, #4
 8011698:	9519      	str	r5, [sp, #100]	; 0x64
 801169a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801169c:	fa2f f582 	sxtb16	r5, r2
 80116a0:	3404      	adds	r4, #4
 80116a2:	f844 5c04 	str.w	r5, [r4, #-4]
 80116a6:	9419      	str	r4, [sp, #100]	; 0x64
 80116a8:	fa2f f292 	sxtb16	r2, r2, ror #8
 80116ac:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80116ae:	6022      	str	r2, [r4, #0]
 80116b0:	3404      	adds	r4, #4
 80116b2:	9a02      	ldr	r2, [sp, #8]
 80116b4:	9419      	str	r4, [sp, #100]	; 0x64
 80116b6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80116b8:	58d6      	ldr	r6, [r2, r3]
 80116ba:	f85b 2003 	ldr.w	r2, [fp, r3]
 80116be:	eac6 4402 	pkhbt	r4, r6, r2, lsl #16
 80116c2:	eac2 4226 	pkhtb	r2, r2, r6, asr #16
 80116c6:	1d2e      	adds	r6, r5, #4
 80116c8:	9619      	str	r6, [sp, #100]	; 0x64
 80116ca:	fa2f f684 	sxtb16	r6, r4
 80116ce:	602e      	str	r6, [r5, #0]
 80116d0:	fa2f f494 	sxtb16	r4, r4, ror #8
 80116d4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80116d6:	602c      	str	r4, [r5, #0]
 80116d8:	3504      	adds	r5, #4
 80116da:	9519      	str	r5, [sp, #100]	; 0x64
 80116dc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80116de:	fa2f f582 	sxtb16	r5, r2
 80116e2:	3404      	adds	r4, #4
 80116e4:	f844 5c04 	str.w	r5, [r4, #-4]
 80116e8:	9419      	str	r4, [sp, #100]	; 0x64
 80116ea:	fa2f f292 	sxtb16	r2, r2, ror #8
 80116ee:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80116f0:	6022      	str	r2, [r4, #0]
 80116f2:	3404      	adds	r4, #4
 80116f4:	9a01      	ldr	r2, [sp, #4]
 80116f6:	9419      	str	r4, [sp, #100]	; 0x64
 80116f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80116fa:	58d6      	ldr	r6, [r2, r3]
 80116fc:	f85a 2000 	ldr.w	r2, [sl, r0]
 8011700:	eac6 4402 	pkhbt	r4, r6, r2, lsl #16
 8011704:	eac2 4226 	pkhtb	r2, r2, r6, asr #16
 8011708:	1d2e      	adds	r6, r5, #4
 801170a:	9619      	str	r6, [sp, #100]	; 0x64
 801170c:	fa2f f684 	sxtb16	r6, r4
 8011710:	602e      	str	r6, [r5, #0]
 8011712:	fa2f f494 	sxtb16	r4, r4, ror #8
 8011716:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8011718:	602c      	str	r4, [r5, #0]
 801171a:	3504      	adds	r5, #4
 801171c:	9519      	str	r5, [sp, #100]	; 0x64
 801171e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8011720:	fa2f f582 	sxtb16	r5, r2
 8011724:	3404      	adds	r4, #4
 8011726:	f844 5c04 	str.w	r5, [r4, #-4]
 801172a:	9419      	str	r4, [sp, #100]	; 0x64
 801172c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8011730:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8011732:	6022      	str	r2, [r4, #0]
 8011734:	3404      	adds	r4, #4
 8011736:	f85a 2003 	ldr.w	r2, [sl, r3]
 801173a:	9419      	str	r4, [sp, #100]	; 0x64
 801173c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801173e:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 8011742:	fa2f f585 	sxtb16	r5, r5
 8011746:	8025      	strh	r5, [r4, #0]
 8011748:	0c2d      	lsrs	r5, r5, #16
 801174a:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 801174e:	8065      	strh	r5, [r4, #2]
 8011750:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 8011754:	3004      	adds	r0, #4
 8011756:	80a2      	strh	r2, [r4, #4]
 8011758:	0c12      	lsrs	r2, r2, #16
 801175a:	3408      	adds	r4, #8
 801175c:	4581      	cmp	r9, r0
 801175e:	f103 0304 	add.w	r3, r3, #4
 8011762:	f824 2c02 	strh.w	r2, [r4, #-2]
 8011766:	f47f af66 	bne.w	8011636 <forward_lite_dw_3x3_sssa8_ch+0x5e6>
 801176a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801176e:	4622      	mov	r2, r4
 8011770:	fa1f fc8c 	uxth.w	ip, ip
 8011774:	f017 0603 	ands.w	r6, r7, #3
 8011778:	f43f ac8d 	beq.w	8011096 <forward_lite_dw_3x3_sssa8_ch+0x46>
 801177c:	f91e 300c 	ldrsb.w	r3, [lr, ip]
 8011780:	3e01      	subs	r6, #1
 8011782:	f10c 0501 	add.w	r5, ip, #1
 8011786:	8013      	strh	r3, [r2, #0]
 8011788:	eb0e 030c 	add.w	r3, lr, ip
 801178c:	b2b6      	uxth	r6, r6
 801178e:	57d8      	ldrsb	r0, [r3, r7]
 8011790:	b2ad      	uxth	r5, r5
 8011792:	8050      	strh	r0, [r2, #2]
 8011794:	19d8      	adds	r0, r3, r7
 8011796:	f913 4017 	ldrsb.w	r4, [r3, r7, lsl #1]
 801179a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801179e:	8094      	strh	r4, [r2, #4]
 80117a0:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 80117a4:	80d0      	strh	r0, [r2, #6]
 80117a6:	19d8      	adds	r0, r3, r7
 80117a8:	f913 4017 	ldrsb.w	r4, [r3, r7, lsl #1]
 80117ac:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80117b0:	8114      	strh	r4, [r2, #8]
 80117b2:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 80117b6:	8150      	strh	r0, [r2, #10]
 80117b8:	19d8      	adds	r0, r3, r7
 80117ba:	f913 4017 	ldrsb.w	r4, [r3, r7, lsl #1]
 80117be:	8194      	strh	r4, [r2, #12]
 80117c0:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 80117c4:	81d0      	strh	r0, [r2, #14]
 80117c6:	f913 3027 	ldrsb.w	r3, [r3, r7, lsl #2]
 80117ca:	8213      	strh	r3, [r2, #16]
 80117cc:	2e00      	cmp	r6, #0
 80117ce:	f43f ac62 	beq.w	8011096 <forward_lite_dw_3x3_sssa8_ch+0x46>
 80117d2:	f10c 0302 	add.w	r3, ip, #2
 80117d6:	2e01      	cmp	r6, #1
 80117d8:	fa1f fc83 	uxth.w	ip, r3
 80117dc:	f91e 3005 	ldrsb.w	r3, [lr, r5]
 80117e0:	4475      	add	r5, lr
 80117e2:	8253      	strh	r3, [r2, #18]
 80117e4:	57eb      	ldrsb	r3, [r5, r7]
 80117e6:	8293      	strh	r3, [r2, #20]
 80117e8:	eb05 0307 	add.w	r3, r5, r7
 80117ec:	f915 0017 	ldrsb.w	r0, [r5, r7, lsl #1]
 80117f0:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 80117f4:	82d0      	strh	r0, [r2, #22]
 80117f6:	eb05 0007 	add.w	r0, r5, r7
 80117fa:	f913 3017 	ldrsb.w	r3, [r3, r7, lsl #1]
 80117fe:	8313      	strh	r3, [r2, #24]
 8011800:	f915 3017 	ldrsb.w	r3, [r5, r7, lsl #1]
 8011804:	8353      	strh	r3, [r2, #26]
 8011806:	eb05 0347 	add.w	r3, r5, r7, lsl #1
 801180a:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 801180e:	8390      	strh	r0, [r2, #28]
 8011810:	eb03 0007 	add.w	r0, r3, r7
 8011814:	f913 4017 	ldrsb.w	r4, [r3, r7, lsl #1]
 8011818:	83d4      	strh	r4, [r2, #30]
 801181a:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 801181e:	8410      	strh	r0, [r2, #32]
 8011820:	f913 3027 	ldrsb.w	r3, [r3, r7, lsl #2]
 8011824:	8453      	strh	r3, [r2, #34]	; 0x22
 8011826:	f43f ac36 	beq.w	8011096 <forward_lite_dw_3x3_sssa8_ch+0x46>
 801182a:	f91e 300c 	ldrsb.w	r3, [lr, ip]
 801182e:	eb0e 040c 	add.w	r4, lr, ip
 8011832:	8493      	strh	r3, [r2, #36]	; 0x24
 8011834:	57e3      	ldrsb	r3, [r4, r7]
 8011836:	84d3      	strh	r3, [r2, #38]	; 0x26
 8011838:	19e3      	adds	r3, r4, r7
 801183a:	f914 0017 	ldrsb.w	r0, [r4, r7, lsl #1]
 801183e:	eb04 0447 	add.w	r4, r4, r7, lsl #1
 8011842:	8510      	strh	r0, [r2, #40]	; 0x28
 8011844:	19e0      	adds	r0, r4, r7
 8011846:	f913 3017 	ldrsb.w	r3, [r3, r7, lsl #1]
 801184a:	8553      	strh	r3, [r2, #42]	; 0x2a
 801184c:	f914 3017 	ldrsb.w	r3, [r4, r7, lsl #1]
 8011850:	8593      	strh	r3, [r2, #44]	; 0x2c
 8011852:	eb04 0347 	add.w	r3, r4, r7, lsl #1
 8011856:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 801185a:	85d0      	strh	r0, [r2, #46]	; 0x2e
 801185c:	19d8      	adds	r0, r3, r7
 801185e:	f913 4017 	ldrsb.w	r4, [r3, r7, lsl #1]
 8011862:	8614      	strh	r4, [r2, #48]	; 0x30
 8011864:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
 8011868:	8650      	strh	r0, [r2, #50]	; 0x32
 801186a:	f913 3027 	ldrsb.w	r3, [r3, r7, lsl #2]
 801186e:	8693      	strh	r3, [r2, #52]	; 0x34
 8011870:	e411      	b.n	8011096 <forward_lite_dw_3x3_sssa8_ch+0x46>
 8011872:	0079      	lsls	r1, r7, #1
 8011874:	e77e      	b.n	8011774 <forward_lite_dw_3x3_sssa8_ch+0x724>
 8011876:	bf00      	nop

08011878 <forward_lite_pw_sssa8_ch>:
 8011878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187c:	b097      	sub	sp, #92	; 0x5c
 801187e:	4604      	mov	r4, r0
 8011880:	930d      	str	r3, [sp, #52]	; 0x34
 8011882:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 8011886:	f8bd b084 	ldrh.w	fp, [sp, #132]	; 0x84
 801188a:	9313      	str	r3, [sp, #76]	; 0x4c
 801188c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801188e:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
 8011892:	910c      	str	r1, [sp, #48]	; 0x30
 8011894:	eba3 014b 	sub.w	r1, r3, fp, lsl #1
 8011898:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801189a:	9215      	str	r2, [sp, #84]	; 0x54
 801189c:	4419      	add	r1, r3
 801189e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80118a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80118a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80118a6:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 80118aa:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80118ae:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80118b2:	9314      	str	r3, [sp, #80]	; 0x50
 80118b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80118b6:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 80118ba:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80118be:	f99d 7090 	ldrsb.w	r7, [sp, #144]	; 0x90
 80118c2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80118c4:	9310      	str	r3, [sp, #64]	; 0x40
 80118c6:	9211      	str	r2, [sp, #68]	; 0x44
 80118c8:	f1bb 0f00 	cmp.w	fp, #0
 80118cc:	f000 8088 	beq.w	80119e0 <forward_lite_pw_sssa8_ch+0x168>
 80118d0:	1d18      	adds	r0, r3, #4
 80118d2:	f04f 0e01 	mov.w	lr, #1
 80118d6:	eb01 0c0a 	add.w	ip, r1, sl
 80118da:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80118de:	1e5a      	subs	r2, r3, #1
 80118e0:	fa0e f603 	lsl.w	r6, lr, r3
 80118e4:	fa07 f303 	lsl.w	r3, r7, r3
 80118e8:	b292      	uxth	r2, r2
 80118ea:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 80118ee:	2a14      	cmp	r2, #20
 80118f0:	d857      	bhi.n	80119a2 <forward_lite_pw_sssa8_ch+0x12a>
 80118f2:	458c      	cmp	ip, r1
 80118f4:	f840 3c04 	str.w	r3, [r0, #-4]
 80118f8:	f100 0004 	add.w	r0, r0, #4
 80118fc:	d1ed      	bne.n	80118da <forward_lite_pw_sssa8_ch+0x62>
 80118fe:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
 8011902:	1899      	adds	r1, r3, r2
 8011904:	eba1 030a 	sub.w	r3, r1, sl
 8011908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801190a:	9312      	str	r3, [sp, #72]	; 0x48
 801190c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801190e:	fb02 f303 	mul.w	r3, r2, r3
 8011912:	930e      	str	r3, [sp, #56]	; 0x38
 8011914:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011916:	2b01      	cmp	r3, #1
 8011918:	d04c      	beq.n	80119b4 <forward_lite_pw_sssa8_ch+0x13c>
 801191a:	2300      	movs	r3, #0
 801191c:	9314      	str	r3, [sp, #80]	; 0x50
 801191e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011920:	07db      	lsls	r3, r3, #31
 8011922:	d545      	bpl.n	80119b0 <forward_lite_pw_sssa8_ch+0x138>
 8011924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011926:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8011928:	441f      	add	r7, r3
 801192a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801192c:	3702      	adds	r7, #2
 801192e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8011932:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d031      	beq.n	801199c <forward_lite_pw_sssa8_ch+0x124>
 8011938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801193a:	4649      	mov	r1, r9
 801193c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801193e:	2600      	movs	r6, #0
 8011940:	fb0b f003 	mul.w	r0, fp, r3
 8011944:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8011948:	fb02 fa03 	mul.w	sl, r2, r3
 801194c:	4642      	mov	r2, r8
 801194e:	46d8      	mov	r8, fp
 8011950:	46bb      	mov	fp, r7
 8011952:	4607      	mov	r7, r0
 8011954:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011956:	3601      	adds	r6, #1
 8011958:	4620      	mov	r0, r4
 801195a:	f8cd b00c 	str.w	fp, [sp, #12]
 801195e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011960:	4454      	add	r4, sl
 8011962:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011964:	9222      	str	r2, [sp, #136]	; 0x88
 8011966:	930a      	str	r3, [sp, #40]	; 0x28
 8011968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801196a:	9120      	str	r1, [sp, #128]	; 0x80
 801196c:	9309      	str	r3, [sp, #36]	; 0x24
 801196e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011970:	9308      	str	r3, [sp, #32]
 8011972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011974:	9307      	str	r3, [sp, #28]
 8011976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011978:	9306      	str	r3, [sp, #24]
 801197a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801197c:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8011980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011982:	9302      	str	r3, [sp, #8]
 8011984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	462b      	mov	r3, r5
 801198e:	f003 f8cf 	bl	8014b30 <st_sssa8_ch_nn_mat_mult_nt_t>
 8011992:	45b1      	cmp	r9, r6
 8011994:	443d      	add	r5, r7
 8011996:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011998:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801199a:	d1db      	bne.n	8011954 <forward_lite_pw_sssa8_ch+0xdc>
 801199c:	b017      	add	sp, #92	; 0x5c
 801199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a2:	458c      	cmp	ip, r1
 80119a4:	f840 7c04 	str.w	r7, [r0, #-4]
 80119a8:	f100 0004 	add.w	r0, r0, #4
 80119ac:	d195      	bne.n	80118da <forward_lite_pw_sssa8_ch+0x62>
 80119ae:	e7a6      	b.n	80118fe <forward_lite_pw_sssa8_ch+0x86>
 80119b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80119b2:	e7be      	b.n	8011932 <forward_lite_pw_sssa8_ch+0xba>
 80119b4:	f06f 0309 	mvn.w	r3, #9
 80119b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80119ba:	fb03 220b 	mla	r2, r3, fp, r2
 80119be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119c0:	fb0b f303 	mul.w	r3, fp, r3
 80119c4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80119c8:	dba7      	blt.n	801191a <forward_lite_pw_sssa8_ch+0xa2>
 80119ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80119cc:	4659      	mov	r1, fp
 80119ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119d0:	4648      	mov	r0, r9
 80119d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80119d4:	9601      	str	r6, [sp, #4]
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	f003 f86a 	bl	8014ab0 <st_sssa8_ch_fullW_prefetch>
 80119dc:	9614      	str	r6, [sp, #80]	; 0x50
 80119de:	e79e      	b.n	801191e <forward_lite_pw_sssa8_ch+0xa6>
 80119e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80119e2:	9310      	str	r3, [sp, #64]	; 0x40
 80119e4:	e78e      	b.n	8011904 <forward_lite_pw_sssa8_ch+0x8c>
 80119e6:	bf00      	nop

080119e8 <forward_lite_nl_softmax_is8os8>:
 80119e8:	188a      	adds	r2, r1, r2
 80119ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ee:	4291      	cmp	r1, r2
 80119f0:	b09b      	sub	sp, #108	; 0x6c
 80119f2:	9015      	str	r0, [sp, #84]	; 0x54
 80119f4:	9303      	str	r3, [sp, #12]
 80119f6:	9218      	str	r2, [sp, #96]	; 0x60
 80119f8:	f080 82f4 	bcs.w	8011fe4 <forward_lite_nl_softmax_is8os8+0x5fc>
 80119fc:	461a      	mov	r2, r3
 80119fe:	3b01      	subs	r3, #1
 8011a00:	9102      	str	r1, [sp, #8]
 8011a02:	18cb      	adds	r3, r1, r3
 8011a04:	9316      	str	r3, [sp, #88]	; 0x58
 8011a06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011a08:	3b04      	subs	r3, #4
 8011a0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011a10:	9319      	str	r3, [sp, #100]	; 0x64
 8011a12:	9a03      	ldr	r2, [sp, #12]
 8011a14:	9b02      	ldr	r3, [sp, #8]
 8011a16:	2a01      	cmp	r2, #1
 8011a18:	f993 b000 	ldrsb.w	fp, [r3]
 8011a1c:	f240 82f8 	bls.w	8012010 <forward_lite_nl_softmax_is8os8+0x628>
 8011a20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011a22:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
 8011a26:	4593      	cmp	fp, r2
 8011a28:	bfb8      	it	lt
 8011a2a:	4693      	movlt	fp, r2
 8011a2c:	428b      	cmp	r3, r1
 8011a2e:	d1f8      	bne.n	8011a22 <forward_lite_nl_softmax_is8os8+0x3a>
 8011a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8011a32:	445b      	add	r3, fp
 8011a34:	9305      	str	r3, [sp, #20]
 8011a36:	9b02      	ldr	r3, [sp, #8]
 8011a38:	1e5f      	subs	r7, r3, #1
 8011a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	9304      	str	r3, [sp, #16]
 8011a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011a44:	0fdb      	lsrs	r3, r3, #31
 8011a46:	e9cd 3b13 	strd	r3, fp, [sp, #76]	; 0x4c
 8011a4a:	e106      	b.n	8011c5a <forward_lite_nl_softmax_is8os8+0x272>
 8011a4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a4e:	1a9b      	subs	r3, r3, r2
 8011a50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011a52:	fa03 f202 	lsl.w	r2, r3, r2
 8011a56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a58:	ebb3 7fd2 	cmp.w	r3, r2, lsr #31
 8011a5c:	4bc8      	ldr	r3, [pc, #800]	; (8011d80 <forward_lite_nl_softmax_is8os8+0x398>)
 8011a5e:	bf06      	itte	eq
 8011a60:	2100      	moveq	r1, #0
 8011a62:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8011a66:	f04f 31ff 	movne.w	r1, #4294967295
 8011a6a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8011a6e:	f040 80fd 	bne.w	8011c6c <forward_lite_nl_softmax_is8os8+0x284>
 8011a72:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011a74:	4290      	cmp	r0, r2
 8011a76:	f040 80f9 	bne.w	8011c6c <forward_lite_nl_softmax_is8os8+0x284>
 8011a7a:	4bc2      	ldr	r3, [pc, #776]	; (8011d84 <forward_lite_nl_softmax_is8os8+0x39c>)
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	f04f 3eff 	mov.w	lr, #4294967295
 8011a82:	48c1      	ldr	r0, [pc, #772]	; (8011d88 <forward_lite_nl_softmax_is8os8+0x3a0>)
 8011a84:	9310      	str	r3, [sp, #64]	; 0x40
 8011a86:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 8011a8a:	4bc0      	ldr	r3, [pc, #768]	; (8011d8c <forward_lite_nl_softmax_is8os8+0x3a4>)
 8011a8c:	460d      	mov	r5, r1
 8011a8e:	4ac0      	ldr	r2, [pc, #768]	; (8011d90 <forward_lite_nl_softmax_is8os8+0x3a8>)
 8011a90:	468b      	mov	fp, r1
 8011a92:	9312      	str	r3, [sp, #72]	; 0x48
 8011a94:	460c      	mov	r4, r1
 8011a96:	4673      	mov	r3, lr
 8011a98:	4689      	mov	r9, r1
 8011a9a:	468a      	mov	sl, r1
 8011a9c:	f04f 0801 	mov.w	r8, #1
 8011aa0:	910f      	str	r1, [sp, #60]	; 0x3c
 8011aa2:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8011aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8011aa8:	9106      	str	r1, [sp, #24]
 8011aaa:	9111      	str	r1, [sp, #68]	; 0x44
 8011aac:	e9cd e10d 	strd	lr, r1, [sp, #52]	; 0x34
 8011ab0:	e9cd ee0a 	strd	lr, lr, [sp, #40]	; 0x28
 8011ab4:	e9cd ee07 	strd	lr, lr, [sp, #28]
 8011ab8:	4541      	cmp	r1, r8
 8011aba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011abc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011abe:	bfc8      	it	gt
 8011ac0:	f10c 0c01 	addgt.w	ip, ip, #1
 8011ac4:	428d      	cmp	r5, r1
 8011ac6:	49ae      	ldr	r1, [pc, #696]	; (8011d80 <forward_lite_nl_softmax_is8os8+0x398>)
 8011ac8:	bf06      	itte	eq
 8011aca:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 8011ace:	2500      	moveq	r5, #0
 8011ad0:	f04f 35ff 	movne.w	r5, #4294967295
 8011ad4:	1871      	adds	r1, r6, r1
 8011ad6:	eb42 0205 	adc.w	r2, r2, r5
 8011ada:	2a00      	cmp	r2, #0
 8011adc:	da04      	bge.n	8011ae8 <forward_lite_nl_softmax_is8os8+0x100>
 8011ade:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8011ae2:	1949      	adds	r1, r1, r5
 8011ae4:	f142 0200 	adc.w	r2, r2, #0
 8011ae8:	0fc9      	lsrs	r1, r1, #31
 8011aea:	4daa      	ldr	r5, [pc, #680]	; (8011d94 <forward_lite_nl_softmax_is8os8+0x3ac>)
 8011aec:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8011af0:	4aa3      	ldr	r2, [pc, #652]	; (8011d80 <forward_lite_nl_softmax_is8os8+0x398>)
 8011af2:	448c      	add	ip, r1
 8011af4:	f1bc 0f00 	cmp.w	ip, #0
 8011af8:	bfa6      	itte	ge
 8011afa:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8011afe:	2100      	movge	r1, #0
 8011b00:	f04f 31ff 	movlt.w	r1, #4294967295
 8011b04:	fbcc 2105 	smlal	r2, r1, ip, r5
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	da04      	bge.n	8011b16 <forward_lite_nl_softmax_is8os8+0x12e>
 8011b0c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8011b10:	1952      	adds	r2, r2, r5
 8011b12:	f141 0100 	adc.w	r1, r1, #0
 8011b16:	0fd2      	lsrs	r2, r2, #31
 8011b18:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011b1e:	4411      	add	r1, r2
 8011b20:	460a      	mov	r2, r1
 8011b22:	1049      	asrs	r1, r1, #1
 8011b24:	07d5      	lsls	r5, r2, #31
 8011b26:	d502      	bpl.n	8011b2e <forward_lite_nl_softmax_is8os8+0x146>
 8011b28:	2900      	cmp	r1, #0
 8011b2a:	bfa8      	it	ge
 8011b2c:	3101      	addge	r1, #1
 8011b2e:	4408      	add	r0, r1
 8011b30:	4a93      	ldr	r2, [pc, #588]	; (8011d80 <forward_lite_nl_softmax_is8os8+0x398>)
 8011b32:	4d99      	ldr	r5, [pc, #612]	; (8011d98 <forward_lite_nl_softmax_is8os8+0x3b0>)
 8011b34:	2800      	cmp	r0, #0
 8011b36:	bfa6      	itte	ge
 8011b38:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8011b3c:	2100      	movge	r1, #0
 8011b3e:	f04f 31ff 	movlt.w	r1, #4294967295
 8011b42:	fbc0 2105 	smlal	r2, r1, r0, r5
 8011b46:	2900      	cmp	r1, #0
 8011b48:	da04      	bge.n	8011b54 <forward_lite_nl_softmax_is8os8+0x16c>
 8011b4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011b4e:	1812      	adds	r2, r2, r0
 8011b50:	f141 0100 	adc.w	r1, r1, #0
 8011b54:	0fd2      	lsrs	r2, r2, #31
 8011b56:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8011b5a:	4890      	ldr	r0, [pc, #576]	; (8011d9c <forward_lite_nl_softmax_is8os8+0x3b4>)
 8011b5c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011b60:	2100      	movs	r1, #0
 8011b62:	4646      	mov	r6, r8
 8011b64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011b66:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 8011b6a:	468c      	mov	ip, r1
 8011b6c:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 8011b70:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8011b74:	fbc2 6c00 	smlal	r6, ip, r2, r0
 8011b78:	0ff0      	lsrs	r0, r6, #31
 8011b7a:	4015      	ands	r5, r2
 8011b7c:	4646      	mov	r6, r8
 8011b7e:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 8011b82:	4a87      	ldr	r2, [pc, #540]	; (8011da0 <forward_lite_nl_softmax_is8os8+0x3b8>)
 8011b84:	ea0b 0000 	and.w	r0, fp, r0
 8011b88:	46c3      	mov	fp, r8
 8011b8a:	4045      	eors	r5, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	fbc5 6002 	smlal	r6, r0, r5, r2
 8011b92:	0ff2      	lsrs	r2, r6, #31
 8011b94:	402b      	ands	r3, r5
 8011b96:	4d83      	ldr	r5, [pc, #524]	; (8011da4 <forward_lite_nl_softmax_is8os8+0x3bc>)
 8011b98:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8011b9c:	9807      	ldr	r0, [sp, #28]
 8011b9e:	4014      	ands	r4, r2
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	4063      	eors	r3, r4
 8011ba4:	460c      	mov	r4, r1
 8011ba6:	fbc3 2405 	smlal	r2, r4, r3, r5
 8011baa:	0fd2      	lsrs	r2, r2, #31
 8011bac:	4018      	ands	r0, r3
 8011bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bb0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8011bb4:	4c7c      	ldr	r4, [pc, #496]	; (8011da8 <forward_lite_nl_softmax_is8os8+0x3c0>)
 8011bb6:	4d7d      	ldr	r5, [pc, #500]	; (8011dac <forward_lite_nl_softmax_is8os8+0x3c4>)
 8011bb8:	4013      	ands	r3, r2
 8011bba:	460a      	mov	r2, r1
 8011bbc:	4058      	eors	r0, r3
 8011bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bc0:	fbc0 b204 	smlal	fp, r2, r0, r4
 8011bc4:	ea4f 7bdb 	mov.w	fp, fp, lsr #31
 8011bc8:	4003      	ands	r3, r0
 8011bca:	460c      	mov	r4, r1
 8011bcc:	ea4b 0b42 	orr.w	fp, fp, r2, lsl #1
 8011bd0:	9a06      	ldr	r2, [sp, #24]
 8011bd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011bd4:	ea02 0b0b 	and.w	fp, r2, fp
 8011bd8:	4642      	mov	r2, r8
 8011bda:	ea83 030b 	eor.w	r3, r3, fp
 8011bde:	fbc3 2405 	smlal	r2, r4, r3, r5
 8011be2:	0fd2      	lsrs	r2, r2, #31
 8011be4:	4018      	ands	r0, r3
 8011be6:	4d72      	ldr	r5, [pc, #456]	; (8011db0 <forward_lite_nl_softmax_is8os8+0x3c8>)
 8011be8:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8011bec:	4643      	mov	r3, r8
 8011bee:	460c      	mov	r4, r1
 8011bf0:	ea0a 0a02 	and.w	sl, sl, r2
 8011bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bf6:	ea80 000a 	eor.w	r0, r0, sl
 8011bfa:	fbc0 3405 	smlal	r3, r4, r0, r5
 8011bfe:	0fdb      	lsrs	r3, r3, #31
 8011c00:	4002      	ands	r2, r0
 8011c02:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8011c06:	ea09 0903 	and.w	r9, r9, r3
 8011c0a:	23f2      	movs	r3, #242	; 0xf2
 8011c0c:	ea82 0909 	eor.w	r9, r2, r9
 8011c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c12:	fbc9 8103 	smlal	r8, r1, r9, r3
 8011c16:	9b08      	ldr	r3, [sp, #32]
 8011c18:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8011c1c:	ea03 0909 	and.w	r9, r3, r9
 8011c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c22:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
 8011c26:	ea03 0808 	and.w	r8, r3, r8
 8011c2a:	ea89 0808 	eor.w	r8, r9, r8
 8011c2e:	ea08 030e 	and.w	r3, r8, lr
 8011c32:	4053      	eors	r3, r2
 8011c34:	131a      	asrs	r2, r3, #12
 8011c36:	0519      	lsls	r1, r3, #20
 8011c38:	9904      	ldr	r1, [sp, #16]
 8011c3a:	bf48      	it	mi
 8011c3c:	3201      	addmi	r2, #1
 8011c3e:	4411      	add	r1, r2
 8011c40:	9104      	str	r1, [sp, #16]
 8011c42:	9a00      	ldr	r2, [sp, #0]
 8011c44:	f842 3f04 	str.w	r3, [r2, #4]!
 8011c48:	9b01      	ldr	r3, [sp, #4]
 8011c4a:	9200      	str	r2, [sp, #0]
 8011c4c:	3302      	adds	r3, #2
 8011c4e:	9a02      	ldr	r2, [sp, #8]
 8011c50:	1a9b      	subs	r3, r3, r2
 8011c52:	9a03      	ldr	r2, [sp, #12]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	f240 80ad 	bls.w	8011db4 <forward_lite_nl_softmax_is8os8+0x3cc>
 8011c5a:	9a05      	ldr	r2, [sp, #20]
 8011c5c:	9701      	str	r7, [sp, #4]
 8011c5e:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 8011c62:	429a      	cmp	r2, r3
 8011c64:	f77f aef2 	ble.w	8011a4c <forward_lite_nl_softmax_is8os8+0x64>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e7ea      	b.n	8011c42 <forward_lite_nl_softmax_is8os8+0x25a>
 8011c6c:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011c6e:	fbc2 3100 	smlal	r3, r1, r2, r0
 8011c72:	2900      	cmp	r1, #0
 8011c74:	da04      	bge.n	8011c80 <forward_lite_nl_softmax_is8os8+0x298>
 8011c76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011c7a:	189b      	adds	r3, r3, r2
 8011c7c:	f141 0100 	adc.w	r1, r1, #0
 8011c80:	0fdb      	lsrs	r3, r3, #31
 8011c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011c86:	2500      	movs	r5, #0
 8011c88:	ea53 0341 	orrs.w	r3, r3, r1, lsl #1
 8011c8c:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 8011c90:	bf0c      	ite	eq
 8011c92:	f04f 0c01 	moveq.w	ip, #1
 8011c96:	f04f 0c00 	movne.w	ip, #0
 8011c9a:	1ac3      	subs	r3, r0, r3
 8011c9c:	0140      	lsls	r0, r0, #5
 8011c9e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8011ca2:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8011ca6:	fbc0 2500 	smlal	r2, r5, r0, r0
 8011caa:	2d00      	cmp	r5, #0
 8011cac:	da04      	bge.n	8011cb8 <forward_lite_nl_softmax_is8os8+0x2d0>
 8011cae:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8011cb2:	1992      	adds	r2, r2, r6
 8011cb4:	f145 0500 	adc.w	r5, r5, #0
 8011cb8:	0fd2      	lsrs	r2, r2, #31
 8011cba:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8011cbe:	17ed      	asrs	r5, r5, #31
 8011cc0:	fba2 1402 	umull	r1, r4, r2, r2
 8011cc4:	fb02 f605 	mul.w	r6, r2, r5
 8011cc8:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 8011ccc:	9210      	str	r2, [sp, #64]	; 0x40
 8011cce:	eb44 0446 	adc.w	r4, r4, r6, lsl #1
 8011cd2:	2c00      	cmp	r4, #0
 8011cd4:	da04      	bge.n	8011ce0 <forward_lite_nl_softmax_is8os8+0x2f8>
 8011cd6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8011cda:	1989      	adds	r1, r1, r6
 8011cdc:	f144 0400 	adc.w	r4, r4, #0
 8011ce0:	f3c3 6680 	ubfx	r6, r3, #26, #1
 8011ce4:	f1cc 0c00 	rsb	ip, ip, #0
 8011ce8:	0fc9      	lsrs	r1, r1, #31
 8011cea:	fb00 f505 	mul.w	r5, r0, r5
 8011cee:	3e01      	subs	r6, #1
 8011cf0:	f3c3 6bc0 	ubfx	fp, r3, #27, #1
 8011cf4:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8011cf8:	f02c 4400 	bic.w	r4, ip, #2147483648	; 0x80000000
 8011cfc:	9607      	str	r6, [sp, #28]
 8011cfe:	f3c3 6600 	ubfx	r6, r3, #24, #1
 8011d02:	940e      	str	r4, [sp, #56]	; 0x38
 8011d04:	17c4      	asrs	r4, r0, #31
 8011d06:	3e01      	subs	r6, #1
 8011d08:	f3c3 7940 	ubfx	r9, r3, #29, #1
 8011d0c:	fb02 5504 	mla	r5, r2, r4, r5
 8011d10:	f3c3 7880 	ubfx	r8, r3, #30, #1
 8011d14:	960b      	str	r6, [sp, #44]	; 0x2c
 8011d16:	0fd6      	lsrs	r6, r2, #31
 8011d18:	f3c3 7a00 	ubfx	sl, r3, #28, #1
 8011d1c:	f3c3 6440 	ubfx	r4, r3, #25, #1
 8011d20:	960f      	str	r6, [sp, #60]	; 0x3c
 8011d22:	ea5f 0ca1 	movs.w	ip, r1, asr #2
 8011d26:	fba0 6202 	umull	r6, r2, r0, r2
 8011d2a:	f001 0103 	and.w	r1, r1, #3
 8011d2e:	9612      	str	r6, [sp, #72]	; 0x48
 8011d30:	f10b 36ff 	add.w	r6, fp, #4294967295
 8011d34:	442a      	add	r2, r5
 8011d36:	ea4f 75d0 	mov.w	r5, r0, lsr #31
 8011d3a:	960d      	str	r6, [sp, #52]	; 0x34
 8011d3c:	f1cb 0600 	rsb	r6, fp, #0
 8011d40:	f343 6b00 	sbfx	fp, r3, #24, #1
 8011d44:	f343 6380 	sbfx	r3, r3, #26, #1
 8011d48:	9606      	str	r6, [sp, #24]
 8011d4a:	f109 36ff 	add.w	r6, r9, #4294967295
 8011d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d50:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011d54:	960a      	str	r6, [sp, #40]	; 0x28
 8011d56:	f108 36ff 	add.w	r6, r8, #4294967295
 8011d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8011d5c:	f1ca 0a00 	rsb	sl, sl, #0
 8011d60:	9608      	str	r6, [sp, #32]
 8011d62:	f1c8 0600 	rsb	r6, r8, #0
 8011d66:	f104 33ff 	add.w	r3, r4, #4294967295
 8011d6a:	f1c9 0900 	rsb	r9, r9, #0
 8011d6e:	f1c4 0400 	rsb	r4, r4, #0
 8011d72:	bf54      	ite	pl
 8011d74:	f04f 0801 	movpl.w	r8, #1
 8011d78:	f04f 0802 	movmi.w	r8, #2
 8011d7c:	9611      	str	r6, [sp, #68]	; 0x44
 8011d7e:	e69b      	b.n	8011ab8 <forward_lite_nl_softmax_is8os8+0xd0>
 8011d80:	c0000001 	.word	0xc0000001
 8011d84:	01fffff8 	.word	0x01fffff8
 8011d88:	0fffffe0 	.word	0x0fffffe0
 8011d8c:	40000100 	.word	0x40000100
 8011d90:	001fffff 	.word	0x001fffff
 8011d94:	2aaaaaab 	.word	0x2aaaaaab
 8011d98:	70f5a894 	.word	0x70f5a894
 8011d9c:	63afbe7b 	.word	0x63afbe7b
 8011da0:	4da2cbf2 	.word	0x4da2cbf2
 8011da4:	2f16ac6c 	.word	0x2f16ac6c
 8011da8:	1152aaa4 	.word	0x1152aaa4
 8011dac:	02582ab7 	.word	0x02582ab7
 8011db0:	000afe11 	.word	0x000afe11
 8011db4:	9b04      	ldr	r3, [sp, #16]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f000 812d 	beq.w	8012016 <forward_lite_nl_softmax_is8os8+0x62e>
 8011dbc:	fab3 f483 	clz	r4, r3
 8011dc0:	fa03 f104 	lsl.w	r1, r3, r4
 8011dc4:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8011dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dcc:	17da      	asrs	r2, r3, #31
 8011dce:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011dd2:	bf08      	it	eq
 8011dd4:	2900      	cmpeq	r1, #0
 8011dd6:	f000 811f 	beq.w	8012018 <forward_lite_nl_softmax_is8os8+0x630>
 8011dda:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8011dde:	49d0      	ldr	r1, [pc, #832]	; (8012120 <forward_lite_nl_softmax_is8os8+0x738>)
 8011de0:	4ed0      	ldr	r6, [pc, #832]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8011de2:	f142 0200 	adc.w	r2, r2, #0
 8011de6:	085b      	lsrs	r3, r3, #1
 8011de8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011dec:	1052      	asrs	r2, r2, #1
 8011dee:	4258      	negs	r0, r3
 8011df0:	fb01 0002 	mla	r0, r1, r2, r0
 8011df4:	fba3 1501 	umull	r1, r5, r3, r1
 8011df8:	1989      	adds	r1, r1, r6
 8011dfa:	4428      	add	r0, r5
 8011dfc:	f160 0000 	sbc.w	r0, r0, #0
 8011e00:	2800      	cmp	r0, #0
 8011e02:	da04      	bge.n	8011e0e <forward_lite_nl_softmax_is8os8+0x426>
 8011e04:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8011e08:	1949      	adds	r1, r1, r5
 8011e0a:	f140 0000 	adc.w	r0, r0, #0
 8011e0e:	0fc9      	lsrs	r1, r1, #31
 8011e10:	ea41 0740 	orr.w	r7, r1, r0, lsl #1
 8011e14:	f107 305a 	add.w	r0, r7, #1515870810	; 0x5a5a5a5a
 8011e18:	17c5      	asrs	r5, r0, #31
 8011e1a:	fb00 f102 	mul.w	r1, r0, r2
 8011e1e:	fba0 e803 	umull	lr, r8, r0, r3
 8011e22:	fb03 1105 	mla	r1, r3, r5, r1
 8011e26:	f11e 4680 	adds.w	r6, lr, #1073741824	; 0x40000000
 8011e2a:	4488      	add	r8, r1
 8011e2c:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8011e30:	f148 0100 	adc.w	r1, r8, #0
 8011e34:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8011e38:	f1d6 5600 	rsbs	r6, r6, #536870912	; 0x20000000
 8011e3c:	f140 81cd 	bpl.w	80121da <forward_lite_nl_softmax_is8os8+0x7f2>
 8011e40:	49b8      	ldr	r1, [pc, #736]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8011e42:	f04f 3cff 	mov.w	ip, #4294967295
 8011e46:	fbc0 1c06 	smlal	r1, ip, r0, r6
 8011e4a:	f1bc 0f00 	cmp.w	ip, #0
 8011e4e:	da04      	bge.n	8011e5a <forward_lite_nl_softmax_is8os8+0x472>
 8011e50:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8011e54:	1949      	adds	r1, r1, r5
 8011e56:	f14c 0c00 	adc.w	ip, ip, #0
 8011e5a:	0fc9      	lsrs	r1, r1, #31
 8011e5c:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 8011e60:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 8011e64:	f300 819a 	bgt.w	801219c <forward_lite_nl_softmax_is8os8+0x7b4>
 8011e68:	07d1      	lsls	r1, r2, #31
 8011e6a:	4dae      	ldr	r5, [pc, #696]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8011e6c:	07d8      	lsls	r0, r3, #31
 8011e6e:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 8011e72:	ebbe 0000 	subs.w	r0, lr, r0
 8011e76:	eb68 0101 	sbc.w	r1, r8, r1
 8011e7a:	eb10 0e05 	adds.w	lr, r0, r5
 8011e7e:	4daa      	ldr	r5, [pc, #680]	; (8012128 <forward_lite_nl_softmax_is8os8+0x740>)
 8011e80:	f161 0100 	sbc.w	r1, r1, #0
 8011e84:	443d      	add	r5, r7
 8011e86:	2900      	cmp	r1, #0
 8011e88:	da05      	bge.n	8011e96 <forward_lite_nl_softmax_is8os8+0x4ae>
 8011e8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011e8e:	eb1e 0e00 	adds.w	lr, lr, r0
 8011e92:	f141 0100 	adc.w	r1, r1, #0
 8011e96:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8011e9a:	48a2      	ldr	r0, [pc, #648]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8011e9c:	ea4e 0e41 	orr.w	lr, lr, r1, lsl #1
 8011ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8011ea4:	f1ce 5e00 	rsb	lr, lr, #536870912	; 0x20000000
 8011ea8:	fbc5 010e 	smlal	r0, r1, r5, lr
 8011eac:	2900      	cmp	r1, #0
 8011eae:	460e      	mov	r6, r1
 8011eb0:	da04      	bge.n	8011ebc <forward_lite_nl_softmax_is8os8+0x4d4>
 8011eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011eb6:	1840      	adds	r0, r0, r1
 8011eb8:	f146 0600 	adc.w	r6, r6, #0
 8011ebc:	0fc1      	lsrs	r1, r0, #31
 8011ebe:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8011ec2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8011ec6:	f2c0 8150 	blt.w	801216a <forward_lite_nl_softmax_is8os8+0x782>
 8011eca:	4d98      	ldr	r5, [pc, #608]	; (801212c <forward_lite_nl_softmax_is8os8+0x744>)
 8011ecc:	2600      	movs	r6, #0
 8011ece:	443d      	add	r5, r7
 8011ed0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011ed4:	2700      	movs	r7, #0
 8011ed6:	fb05 f202 	mul.w	r2, r5, r2
 8011eda:	17e9      	asrs	r1, r5, #31
 8011edc:	fb03 2201 	mla	r2, r3, r1, r2
 8011ee0:	fba5 3c03 	umull	r3, ip, r5, r3
 8011ee4:	181b      	adds	r3, r3, r0
 8011ee6:	4462      	add	r2, ip
 8011ee8:	eb42 0707 	adc.w	r7, r2, r7
 8011eec:	2f00      	cmp	r7, #0
 8011eee:	da04      	bge.n	8011efa <forward_lite_nl_softmax_is8os8+0x512>
 8011ef0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011ef4:	189b      	adds	r3, r3, r2
 8011ef6:	f147 0700 	adc.w	r7, r7, #0
 8011efa:	0fdb      	lsrs	r3, r3, #31
 8011efc:	4a89      	ldr	r2, [pc, #548]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8011efe:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8011f02:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8011f06:	0fd8      	lsrs	r0, r3, #31
 8011f08:	42b0      	cmp	r0, r6
 8011f0a:	bf06      	itte	eq
 8011f0c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8011f10:	2000      	moveq	r0, #0
 8011f12:	f04f 30ff 	movne.w	r0, #4294967295
 8011f16:	42ab      	cmp	r3, r5
 8011f18:	f040 80e2 	bne.w	80120e0 <forward_lite_nl_softmax_is8os8+0x6f8>
 8011f1c:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8011f20:	f040 80de 	bne.w	80120e0 <forward_lite_nl_softmax_is8os8+0x6f8>
 8011f24:	f04f 35ff 	mov.w	r5, #4294967295
 8011f28:	0068      	lsls	r0, r5, #1
 8011f2a:	9b03      	ldr	r3, [sp, #12]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d049      	beq.n	8011fc4 <forward_lite_nl_softmax_is8os8+0x5dc>
 8011f30:	2601      	movs	r6, #1
 8011f32:	f1a0 4800 	sub.w	r8, r0, #2147483648	; 0x80000000
 8011f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f38:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
 8011f3c:	40a6      	lsls	r6, r4
 8011f3e:	fab8 f888 	clz	r8, r8
 8011f42:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011f44:	1e5d      	subs	r5, r3, #1
 8011f46:	3e01      	subs	r6, #1
 8011f48:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011f4c:	4f75      	ldr	r7, [pc, #468]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8011f4e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011f52:	ea4f 0e66 	mov.w	lr, r6, asr #1
 8011f56:	f10e 0a01 	add.w	sl, lr, #1
 8011f5a:	f8cd a000 	str.w	sl, [sp]
 8011f5e:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011f62:	e00e      	b.n	8011f82 <forward_lite_nl_softmax_is8os8+0x59a>
 8011f64:	4596      	cmp	lr, r2
 8011f66:	da01      	bge.n	8011f6c <forward_lite_nl_softmax_is8os8+0x584>
 8011f68:	f10b 0b01 	add.w	fp, fp, #1
 8011f6c:	f1ab 0b80 	sub.w	fp, fp, #128	; 0x80
 8011f70:	f1bb 0f7e 	cmp.w	fp, #126	; 0x7e
 8011f74:	dd46      	ble.n	8012004 <forward_lite_nl_softmax_is8os8+0x61c>
 8011f76:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
 8011f7a:	458a      	cmp	sl, r1
 8011f7c:	f805 bf01 	strb.w	fp, [r5, #1]!
 8011f80:	d020      	beq.n	8011fc4 <forward_lite_nl_softmax_is8os8+0x5dc>
 8011f82:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011f86:	0fd3      	lsrs	r3, r2, #31
 8011f88:	4563      	cmp	r3, ip
 8011f8a:	bf0b      	itete	eq
 8011f8c:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8011f90:	463b      	movne	r3, r7
 8011f92:	f04f 0b00 	moveq.w	fp, #0
 8011f96:	f04f 3bff 	movne.w	fp, #4294967295
 8011f9a:	4282      	cmp	r2, r0
 8011f9c:	d125      	bne.n	8011fea <forward_lite_nl_softmax_is8os8+0x602>
 8011f9e:	f1b8 0f00 	cmp.w	r8, #0
 8011fa2:	d022      	beq.n	8011fea <forward_lite_nl_softmax_is8os8+0x602>
 8011fa4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011fa8:	ea06 020b 	and.w	r2, r6, fp
 8011fac:	fa5b fb04 	asrs.w	fp, fp, r4
 8011fb0:	d5d8      	bpl.n	8011f64 <forward_lite_nl_softmax_is8os8+0x57c>
 8011fb2:	9b00      	ldr	r3, [sp, #0]
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	dbd7      	blt.n	8011f68 <forward_lite_nl_softmax_is8os8+0x580>
 8011fb8:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
 8011fbc:	458a      	cmp	sl, r1
 8011fbe:	f805 bf01 	strb.w	fp, [r5, #1]!
 8011fc2:	d1de      	bne.n	8011f82 <forward_lite_nl_softmax_is8os8+0x59a>
 8011fc4:	9b02      	ldr	r3, [sp, #8]
 8011fc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011fc8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011fca:	4413      	add	r3, r2
 8011fcc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fce:	440a      	add	r2, r1
 8011fd0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011fd2:	9302      	str	r3, [sp, #8]
 8011fd4:	9215      	str	r2, [sp, #84]	; 0x54
 8011fd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011fd8:	440a      	add	r2, r1
 8011fda:	9216      	str	r2, [sp, #88]	; 0x58
 8011fdc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	f63f ad17 	bhi.w	8011a12 <forward_lite_nl_softmax_is8os8+0x2a>
 8011fe4:	b01b      	add	sp, #108	; 0x6c
 8011fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fea:	fbc2 3b00 	smlal	r3, fp, r2, r0
 8011fee:	f1bb 0f00 	cmp.w	fp, #0
 8011ff2:	da03      	bge.n	8011ffc <forward_lite_nl_softmax_is8os8+0x614>
 8011ff4:	eb13 0309 	adds.w	r3, r3, r9
 8011ff8:	f14b 0b00 	adc.w	fp, fp, #0
 8011ffc:	0fdb      	lsrs	r3, r3, #31
 8011ffe:	ea43 0b4b 	orr.w	fp, r3, fp, lsl #1
 8012002:	e7d1      	b.n	8011fa8 <forward_lite_nl_softmax_is8os8+0x5c0>
 8012004:	f11b 0f7f 	cmn.w	fp, #127	; 0x7f
 8012008:	dbd6      	blt.n	8011fb8 <forward_lite_nl_softmax_is8os8+0x5d0>
 801200a:	fa4f fb8b 	sxtb.w	fp, fp
 801200e:	e7b4      	b.n	8011f7a <forward_lite_nl_softmax_is8os8+0x592>
 8012010:	2a00      	cmp	r2, #0
 8012012:	f47f ad0d 	bne.w	8011a30 <forward_lite_nl_softmax_is8os8+0x48>
 8012016:	2403      	movs	r4, #3
 8012018:	f04f 37ff 	mov.w	r7, #4294967295
 801201c:	4844      	ldr	r0, [pc, #272]	; (8012130 <forward_lite_nl_softmax_is8os8+0x748>)
 801201e:	f8df e114 	ldr.w	lr, [pc, #276]	; 8012134 <forward_lite_nl_softmax_is8os8+0x74c>
 8012022:	f04f 0c00 	mov.w	ip, #0
 8012026:	f04f 0801 	mov.w	r8, #1
 801202a:	4605      	mov	r5, r0
 801202c:	463b      	mov	r3, r7
 801202e:	463a      	mov	r2, r7
 8012030:	46c1      	mov	r9, r8
 8012032:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012036:	2600      	movs	r6, #0
 8012038:	eb11 010e 	adds.w	r1, r1, lr
 801203c:	eb4c 0606 	adc.w	r6, ip, r6
 8012040:	2e00      	cmp	r6, #0
 8012042:	da05      	bge.n	8012050 <forward_lite_nl_softmax_is8os8+0x668>
 8012044:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8012048:	eb11 010c 	adds.w	r1, r1, ip
 801204c:	f146 0600 	adc.w	r6, r6, #0
 8012050:	0fc9      	lsrs	r1, r1, #31
 8012052:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8012056:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 801205a:	0fce      	lsrs	r6, r1, #31
 801205c:	fb01 f707 	mul.w	r7, r1, r7
 8012060:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8012064:	454e      	cmp	r6, r9
 8012066:	4e2f      	ldr	r6, [pc, #188]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 8012068:	fb00 770c 	mla	r7, r0, ip, r7
 801206c:	bf08      	it	eq
 801206e:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 8012072:	fba1 0100 	umull	r0, r1, r1, r0
 8012076:	bf0c      	ite	eq
 8012078:	f04f 0c00 	moveq.w	ip, #0
 801207c:	f04f 3cff 	movne.w	ip, #4294967295
 8012080:	440f      	add	r7, r1
 8012082:	1986      	adds	r6, r0, r6
 8012084:	eb47 070c 	adc.w	r7, r7, ip
 8012088:	2f00      	cmp	r7, #0
 801208a:	da04      	bge.n	8012096 <forward_lite_nl_softmax_is8os8+0x6ae>
 801208c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012090:	1876      	adds	r6, r6, r1
 8012092:	f147 0700 	adc.w	r7, r7, #0
 8012096:	0ff6      	lsrs	r6, r6, #31
 8012098:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 801209c:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80120a0:	4631      	mov	r1, r6
 80120a2:	da55      	bge.n	8012150 <forward_lite_nl_softmax_is8os8+0x768>
 80120a4:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 80120a8:	f300 80b0 	bgt.w	801220c <forward_lite_nl_softmax_is8os8+0x824>
 80120ac:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80120b0:	f1b8 0f00 	cmp.w	r8, #0
 80120b4:	d05e      	beq.n	8012174 <forward_lite_nl_softmax_is8os8+0x78c>
 80120b6:	17e9      	asrs	r1, r5, #31
 80120b8:	fb03 f001 	mul.w	r0, r3, r1
 80120bc:	fb05 0202 	mla	r2, r5, r2, r0
 80120c0:	fba3 3005 	umull	r3, r0, r3, r5
 80120c4:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 80120c8:	eb42 0200 	adc.w	r2, r2, r0
 80120cc:	2a00      	cmp	r2, #0
 80120ce:	db5f      	blt.n	8012190 <forward_lite_nl_softmax_is8os8+0x7a8>
 80120d0:	0fdb      	lsrs	r3, r3, #31
 80120d2:	f04f 30ff 	mov.w	r0, #4294967295
 80120d6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80120da:	4a12      	ldr	r2, [pc, #72]	; (8012124 <forward_lite_nl_softmax_is8os8+0x73c>)
 80120dc:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80120e0:	fb03 f101 	mul.w	r1, r3, r1
 80120e4:	17de      	asrs	r6, r3, #31
 80120e6:	fb05 1106 	mla	r1, r5, r6, r1
 80120ea:	fba3 3605 	umull	r3, r6, r3, r5
 80120ee:	189b      	adds	r3, r3, r2
 80120f0:	4431      	add	r1, r6
 80120f2:	eb41 0000 	adc.w	r0, r1, r0
 80120f6:	2800      	cmp	r0, #0
 80120f8:	da04      	bge.n	8012104 <forward_lite_nl_softmax_is8os8+0x71c>
 80120fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80120fe:	189b      	adds	r3, r3, r2
 8012100:	f140 0000 	adc.w	r0, r0, #0
 8012104:	0fdb      	lsrs	r3, r3, #31
 8012106:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 801210a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801210e:	db13      	blt.n	8012138 <forward_lite_nl_softmax_is8os8+0x750>
 8012110:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012114:	4405      	add	r5, r0
 8012116:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801211a:	f6bf af06 	bge.w	8011f2a <forward_lite_nl_softmax_is8os8+0x542>
 801211e:	e703      	b.n	8011f28 <forward_lite_nl_softmax_is8os8+0x540>
 8012120:	c3c3c3c4 	.word	0xc3c3c3c4
 8012124:	c0000001 	.word	0xc0000001
 8012128:	da5a5a5a 	.word	0xda5a5a5a
 801212c:	5a5a5a59 	.word	0x5a5a5a59
 8012130:	b4b4b4b6 	.word	0xb4b4b4b6
 8012134:	4b4b4b4a 	.word	0x4b4b4b4a
 8012138:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 801213c:	dc43      	bgt.n	80121c6 <forward_lite_nl_softmax_is8os8+0x7de>
 801213e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012142:	0068      	lsls	r0, r5, #1
 8012144:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8012148:	bfd8      	it	le
 801214a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801214e:	e6ec      	b.n	8011f2a <forward_lite_nl_softmax_is8os8+0x542>
 8012150:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012154:	4405      	add	r5, r0
 8012156:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 801215a:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801215e:	f43f aeb7 	beq.w	8011ed0 <forward_lite_nl_softmax_is8os8+0x4e8>
 8012162:	482d      	ldr	r0, [pc, #180]	; (8012218 <forward_lite_nl_softmax_is8os8+0x830>)
 8012164:	f04f 37ff 	mov.w	r7, #4294967295
 8012168:	e6b5      	b.n	8011ed6 <forward_lite_nl_softmax_is8os8+0x4ee>
 801216a:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 801216e:	dc4b      	bgt.n	8012208 <forward_lite_nl_softmax_is8os8+0x820>
 8012170:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8012174:	fb05 f202 	mul.w	r2, r5, r2
 8012178:	17e9      	asrs	r1, r5, #31
 801217a:	fb03 2201 	mla	r2, r3, r1, r2
 801217e:	fba5 0303 	umull	r0, r3, r5, r3
 8012182:	441a      	add	r2, r3
 8012184:	4b24      	ldr	r3, [pc, #144]	; (8012218 <forward_lite_nl_softmax_is8os8+0x830>)
 8012186:	18c3      	adds	r3, r0, r3
 8012188:	f162 0200 	sbc.w	r2, r2, #0
 801218c:	2a00      	cmp	r2, #0
 801218e:	da9f      	bge.n	80120d0 <forward_lite_nl_softmax_is8os8+0x6e8>
 8012190:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012194:	181b      	adds	r3, r3, r0
 8012196:	f142 0200 	adc.w	r2, r2, #0
 801219a:	e799      	b.n	80120d0 <forward_lite_nl_softmax_is8os8+0x6e8>
 801219c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80121a0:	17ef      	asrs	r7, r5, #31
 80121a2:	fba3 ec05 	umull	lr, ip, r3, r5
 80121a6:	2d00      	cmp	r5, #0
 80121a8:	4628      	mov	r0, r5
 80121aa:	fb03 f107 	mul.w	r1, r3, r7
 80121ae:	fb05 1102 	mla	r1, r5, r2, r1
 80121b2:	448c      	add	ip, r1
 80121b4:	da2c      	bge.n	8012210 <forward_lite_nl_softmax_is8os8+0x828>
 80121b6:	f04f 0901 	mov.w	r9, #1
 80121ba:	f04f 0800 	mov.w	r8, #0
 80121be:	4916      	ldr	r1, [pc, #88]	; (8012218 <forward_lite_nl_softmax_is8os8+0x830>)
 80121c0:	f04f 36ff 	mov.w	r6, #4294967295
 80121c4:	e738      	b.n	8012038 <forward_lite_nl_softmax_is8os8+0x650>
 80121c6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80121ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121ce:	db02      	blt.n	80121d6 <forward_lite_nl_softmax_is8os8+0x7ee>
 80121d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80121d4:	e6a9      	b.n	8011f2a <forward_lite_nl_softmax_is8os8+0x542>
 80121d6:	0058      	lsls	r0, r3, #1
 80121d8:	e7b4      	b.n	8012144 <forward_lite_nl_softmax_is8os8+0x75c>
 80121da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80121de:	f04f 0800 	mov.w	r8, #0
 80121e2:	460d      	mov	r5, r1
 80121e4:	4641      	mov	r1, r8
 80121e6:	fbc0 5106 	smlal	r5, r1, r0, r6
 80121ea:	0fed      	lsrs	r5, r5, #31
 80121ec:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 80121f0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80121f4:	17ef      	asrs	r7, r5, #31
 80121f6:	fba3 ec05 	umull	lr, ip, r3, r5
 80121fa:	4628      	mov	r0, r5
 80121fc:	fb03 f107 	mul.w	r1, r3, r7
 8012200:	fb05 1102 	mla	r1, r5, r2, r1
 8012204:	448c      	add	ip, r1
 8012206:	e713      	b.n	8012030 <forward_lite_nl_softmax_is8os8+0x648>
 8012208:	f04f 0800 	mov.w	r8, #0
 801220c:	0088      	lsls	r0, r1, #2
 801220e:	e7a1      	b.n	8012154 <forward_lite_nl_softmax_is8os8+0x76c>
 8012210:	f04f 0800 	mov.w	r8, #0
 8012214:	e70c      	b.n	8012030 <forward_lite_nl_softmax_is8os8+0x648>
 8012216:	bf00      	nop
 8012218:	c0000001 	.word	0xc0000001

0801221c <forward_lite_nl_softmax_iu8ou8>:
 801221c:	188a      	adds	r2, r1, r2
 801221e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012222:	4291      	cmp	r1, r2
 8012224:	b09b      	sub	sp, #108	; 0x6c
 8012226:	9015      	str	r0, [sp, #84]	; 0x54
 8012228:	9303      	str	r3, [sp, #12]
 801222a:	9218      	str	r2, [sp, #96]	; 0x60
 801222c:	f080 82fc 	bcs.w	8012828 <forward_lite_nl_softmax_iu8ou8+0x60c>
 8012230:	461a      	mov	r2, r3
 8012232:	3b01      	subs	r3, #1
 8012234:	9102      	str	r1, [sp, #8]
 8012236:	18cb      	adds	r3, r1, r3
 8012238:	9316      	str	r3, [sp, #88]	; 0x58
 801223a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801223c:	3b04      	subs	r3, #4
 801223e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012240:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012244:	9319      	str	r3, [sp, #100]	; 0x64
 8012246:	9a03      	ldr	r2, [sp, #12]
 8012248:	9b02      	ldr	r3, [sp, #8]
 801224a:	2a01      	cmp	r2, #1
 801224c:	f893 b000 	ldrb.w	fp, [r3]
 8012250:	f240 8300 	bls.w	8012854 <forward_lite_nl_softmax_iu8ou8+0x638>
 8012254:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012256:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801225a:	4593      	cmp	fp, r2
 801225c:	bfb8      	it	lt
 801225e:	4693      	movlt	fp, r2
 8012260:	428b      	cmp	r3, r1
 8012262:	d1f8      	bne.n	8012256 <forward_lite_nl_softmax_iu8ou8+0x3a>
 8012264:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8012266:	445b      	add	r3, fp
 8012268:	9305      	str	r3, [sp, #20]
 801226a:	9b02      	ldr	r3, [sp, #8]
 801226c:	1e5f      	subs	r7, r3, #1
 801226e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	2300      	movs	r3, #0
 8012274:	9304      	str	r3, [sp, #16]
 8012276:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012278:	0fdb      	lsrs	r3, r3, #31
 801227a:	e9cd 3b13 	strd	r3, fp, [sp, #76]	; 0x4c
 801227e:	e10b      	b.n	8012498 <forward_lite_nl_softmax_iu8ou8+0x27c>
 8012280:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012282:	1a9b      	subs	r3, r3, r2
 8012284:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8012286:	fa03 f202 	lsl.w	r2, r3, r2
 801228a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801228c:	ebb3 7fd2 	cmp.w	r3, r2, lsr #31
 8012290:	4bcd      	ldr	r3, [pc, #820]	; (80125c8 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 8012292:	bf06      	itte	eq
 8012294:	2100      	moveq	r1, #0
 8012296:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 801229a:	f04f 31ff 	movne.w	r1, #4294967295
 801229e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80122a2:	f040 8102 	bne.w	80124aa <forward_lite_nl_softmax_iu8ou8+0x28e>
 80122a6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80122a8:	4290      	cmp	r0, r2
 80122aa:	f040 80fe 	bne.w	80124aa <forward_lite_nl_softmax_iu8ou8+0x28e>
 80122ae:	f04f 35ff 	mov.w	r5, #4294967295
 80122b2:	4bc6      	ldr	r3, [pc, #792]	; (80125cc <forward_lite_nl_softmax_iu8ou8+0x3b0>)
 80122b4:	2100      	movs	r1, #0
 80122b6:	48c6      	ldr	r0, [pc, #792]	; (80125d0 <forward_lite_nl_softmax_iu8ou8+0x3b4>)
 80122b8:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
 80122bc:	4ac5      	ldr	r2, [pc, #788]	; (80125d4 <forward_lite_nl_softmax_iu8ou8+0x3b8>)
 80122be:	468e      	mov	lr, r1
 80122c0:	460c      	mov	r4, r1
 80122c2:	468b      	mov	fp, r1
 80122c4:	468a      	mov	sl, r1
 80122c6:	4689      	mov	r9, r1
 80122c8:	f04f 0801 	mov.w	r8, #1
 80122cc:	910a      	str	r1, [sp, #40]	; 0x28
 80122ce:	9111      	str	r1, [sp, #68]	; 0x44
 80122d0:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
 80122d4:	4bc0      	ldr	r3, [pc, #768]	; (80125d8 <forward_lite_nl_softmax_iu8ou8+0x3bc>)
 80122d6:	9312      	str	r3, [sp, #72]	; 0x48
 80122d8:	462b      	mov	r3, r5
 80122da:	e9cd 510d 	strd	r5, r1, [sp, #52]	; 0x34
 80122de:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
 80122e2:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80122e6:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80122ea:	4541      	cmp	r1, r8
 80122ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80122ee:	49b6      	ldr	r1, [pc, #728]	; (80125c8 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 80122f0:	bfc8      	it	gt
 80122f2:	f10c 0c01 	addgt.w	ip, ip, #1
 80122f6:	4574      	cmp	r4, lr
 80122f8:	bf06      	itte	eq
 80122fa:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 80122fe:	2400      	moveq	r4, #0
 8012300:	f04f 34ff 	movne.w	r4, #4294967295
 8012304:	1871      	adds	r1, r6, r1
 8012306:	eb42 0204 	adc.w	r2, r2, r4
 801230a:	2a00      	cmp	r2, #0
 801230c:	da04      	bge.n	8012318 <forward_lite_nl_softmax_iu8ou8+0xfc>
 801230e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8012312:	1909      	adds	r1, r1, r4
 8012314:	f142 0200 	adc.w	r2, r2, #0
 8012318:	0fc9      	lsrs	r1, r1, #31
 801231a:	4cb0      	ldr	r4, [pc, #704]	; (80125dc <forward_lite_nl_softmax_iu8ou8+0x3c0>)
 801231c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8012320:	4aa9      	ldr	r2, [pc, #676]	; (80125c8 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 8012322:	448c      	add	ip, r1
 8012324:	f1bc 0f00 	cmp.w	ip, #0
 8012328:	bfa6      	itte	ge
 801232a:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 801232e:	2100      	movge	r1, #0
 8012330:	f04f 31ff 	movlt.w	r1, #4294967295
 8012334:	fbcc 2104 	smlal	r2, r1, ip, r4
 8012338:	2900      	cmp	r1, #0
 801233a:	da04      	bge.n	8012346 <forward_lite_nl_softmax_iu8ou8+0x12a>
 801233c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8012340:	1912      	adds	r2, r2, r4
 8012342:	f141 0100 	adc.w	r1, r1, #0
 8012346:	0fd2      	lsrs	r2, r2, #31
 8012348:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801234c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801234e:	4411      	add	r1, r2
 8012350:	460a      	mov	r2, r1
 8012352:	1049      	asrs	r1, r1, #1
 8012354:	07d4      	lsls	r4, r2, #31
 8012356:	d502      	bpl.n	801235e <forward_lite_nl_softmax_iu8ou8+0x142>
 8012358:	2900      	cmp	r1, #0
 801235a:	bfa8      	it	ge
 801235c:	3101      	addge	r1, #1
 801235e:	4408      	add	r0, r1
 8012360:	4c9f      	ldr	r4, [pc, #636]	; (80125e0 <forward_lite_nl_softmax_iu8ou8+0x3c4>)
 8012362:	4999      	ldr	r1, [pc, #612]	; (80125c8 <forward_lite_nl_softmax_iu8ou8+0x3ac>)
 8012364:	2800      	cmp	r0, #0
 8012366:	bfa6      	itte	ge
 8012368:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 801236c:	2200      	movge	r2, #0
 801236e:	f04f 32ff 	movlt.w	r2, #4294967295
 8012372:	fbc0 1204 	smlal	r1, r2, r0, r4
 8012376:	2a00      	cmp	r2, #0
 8012378:	da04      	bge.n	8012384 <forward_lite_nl_softmax_iu8ou8+0x168>
 801237a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801237e:	1809      	adds	r1, r1, r0
 8012380:	f142 0200 	adc.w	r2, r2, #0
 8012384:	0fc9      	lsrs	r1, r1, #31
 8012386:	2000      	movs	r0, #0
 8012388:	4c96      	ldr	r4, [pc, #600]	; (80125e4 <forward_lite_nl_softmax_iu8ou8+0x3c8>)
 801238a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 801238e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012392:	4680      	mov	r8, r0
 8012394:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012396:	f101 41e2 	add.w	r1, r1, #1895825408	; 0x71000000
 801239a:	4694      	mov	ip, r2
 801239c:	f8df e258 	ldr.w	lr, [pc, #600]	; 80125f8 <forward_lite_nl_softmax_iu8ou8+0x3dc>
 80123a0:	f5a1 2125 	sub.w	r1, r1, #675840	; 0xa5000
 80123a4:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80123a8:	fbc1 c804 	smlal	ip, r8, r1, r4
 80123ac:	4664      	mov	r4, ip
 80123ae:	400e      	ands	r6, r1
 80123b0:	4694      	mov	ip, r2
 80123b2:	0fe4      	lsrs	r4, r4, #31
 80123b4:	498c      	ldr	r1, [pc, #560]	; (80125e8 <forward_lite_nl_softmax_iu8ou8+0x3cc>)
 80123b6:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
 80123ba:	4690      	mov	r8, r2
 80123bc:	ea0b 0404 	and.w	r4, fp, r4
 80123c0:	4693      	mov	fp, r2
 80123c2:	4066      	eors	r6, r4
 80123c4:	4604      	mov	r4, r0
 80123c6:	fbc6 c401 	smlal	ip, r4, r6, r1
 80123ca:	4661      	mov	r1, ip
 80123cc:	4033      	ands	r3, r6
 80123ce:	4694      	mov	ip, r2
 80123d0:	0fc9      	lsrs	r1, r1, #31
 80123d2:	4606      	mov	r6, r0
 80123d4:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 80123d8:	9c08      	ldr	r4, [sp, #32]
 80123da:	ea0a 0a01 	and.w	sl, sl, r1
 80123de:	4983      	ldr	r1, [pc, #524]	; (80125ec <forward_lite_nl_softmax_iu8ou8+0x3d0>)
 80123e0:	ea83 030a 	eor.w	r3, r3, sl
 80123e4:	fbc3 c601 	smlal	ip, r6, r3, r1
 80123e8:	4661      	mov	r1, ip
 80123ea:	401c      	ands	r4, r3
 80123ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ee:	0fc9      	lsrs	r1, r1, #31
 80123f0:	4694      	mov	ip, r2
 80123f2:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80123f6:	4e7e      	ldr	r6, [pc, #504]	; (80125f0 <forward_lite_nl_softmax_iu8ou8+0x3d4>)
 80123f8:	400b      	ands	r3, r1
 80123fa:	4601      	mov	r1, r0
 80123fc:	405c      	eors	r4, r3
 80123fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012400:	fbc4 b106 	smlal	fp, r1, r4, r6
 8012404:	ea4f 7bdb 	mov.w	fp, fp, lsr #31
 8012408:	4023      	ands	r3, r4
 801240a:	4606      	mov	r6, r0
 801240c:	ea4b 0b41 	orr.w	fp, fp, r1, lsl #1
 8012410:	9907      	ldr	r1, [sp, #28]
 8012412:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012414:	ea01 0b0b 	and.w	fp, r1, fp
 8012418:	4976      	ldr	r1, [pc, #472]	; (80125f4 <forward_lite_nl_softmax_iu8ou8+0x3d8>)
 801241a:	ea83 030b 	eor.w	r3, r3, fp
 801241e:	fbc3 c601 	smlal	ip, r6, r3, r1
 8012422:	4661      	mov	r1, ip
 8012424:	401c      	ands	r4, r3
 8012426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012428:	0fc9      	lsrs	r1, r1, #31
 801242a:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 801242e:	ea09 0901 	and.w	r9, r9, r1
 8012432:	4601      	mov	r1, r0
 8012434:	ea84 0409 	eor.w	r4, r4, r9
 8012438:	fbc4 810e 	smlal	r8, r1, r4, lr
 801243c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8012440:	4023      	ands	r3, r4
 8012442:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
 8012446:	9906      	ldr	r1, [sp, #24]
 8012448:	ea01 0808 	and.w	r8, r1, r8
 801244c:	ea83 0808 	eor.w	r8, r3, r8
 8012450:	23f2      	movs	r3, #242	; 0xf2
 8012452:	fbc8 2003 	smlal	r2, r0, r8, r3
 8012456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012458:	0fd2      	lsrs	r2, r2, #31
 801245a:	ea03 0808 	and.w	r8, r3, r8
 801245e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012460:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012464:	4013      	ands	r3, r2
 8012466:	ea88 0803 	eor.w	r8, r8, r3
 801246a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801246c:	ea08 0505 	and.w	r5, r8, r5
 8012470:	405d      	eors	r5, r3
 8012472:	132b      	asrs	r3, r5, #12
 8012474:	052a      	lsls	r2, r5, #20
 8012476:	9a04      	ldr	r2, [sp, #16]
 8012478:	bf48      	it	mi
 801247a:	3301      	addmi	r3, #1
 801247c:	441a      	add	r2, r3
 801247e:	9204      	str	r2, [sp, #16]
 8012480:	9b00      	ldr	r3, [sp, #0]
 8012482:	9a02      	ldr	r2, [sp, #8]
 8012484:	f843 5f04 	str.w	r5, [r3, #4]!
 8012488:	9300      	str	r3, [sp, #0]
 801248a:	9b01      	ldr	r3, [sp, #4]
 801248c:	3302      	adds	r3, #2
 801248e:	1a9b      	subs	r3, r3, r2
 8012490:	9a03      	ldr	r2, [sp, #12]
 8012492:	429a      	cmp	r2, r3
 8012494:	f240 80b2 	bls.w	80125fc <forward_lite_nl_softmax_iu8ou8+0x3e0>
 8012498:	9a05      	ldr	r2, [sp, #20]
 801249a:	9701      	str	r7, [sp, #4]
 801249c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80124a0:	429a      	cmp	r2, r3
 80124a2:	f77f aeed 	ble.w	8012280 <forward_lite_nl_softmax_iu8ou8+0x64>
 80124a6:	2500      	movs	r5, #0
 80124a8:	e7ea      	b.n	8012480 <forward_lite_nl_softmax_iu8ou8+0x264>
 80124aa:	9826      	ldr	r0, [sp, #152]	; 0x98
 80124ac:	fbc2 3100 	smlal	r3, r1, r2, r0
 80124b0:	2900      	cmp	r1, #0
 80124b2:	da04      	bge.n	80124be <forward_lite_nl_softmax_iu8ou8+0x2a2>
 80124b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80124b8:	189b      	adds	r3, r3, r2
 80124ba:	f141 0100 	adc.w	r1, r1, #0
 80124be:	0fdb      	lsrs	r3, r3, #31
 80124c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80124c4:	2400      	movs	r4, #0
 80124c6:	ea53 0341 	orrs.w	r3, r3, r1, lsl #1
 80124ca:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 80124ce:	bf0c      	ite	eq
 80124d0:	f04f 0c01 	moveq.w	ip, #1
 80124d4:	f04f 0c00 	movne.w	ip, #0
 80124d8:	1ac3      	subs	r3, r0, r3
 80124da:	0140      	lsls	r0, r0, #5
 80124dc:	f10c 35ff 	add.w	r5, ip, #4294967295
 80124e0:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80124e4:	f3c3 7e80 	ubfx	lr, r3, #30, #1
 80124e8:	fbc0 2400 	smlal	r2, r4, r0, r0
 80124ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 80124f0:	2c00      	cmp	r4, #0
 80124f2:	9110      	str	r1, [sp, #64]	; 0x40
 80124f4:	da04      	bge.n	8012500 <forward_lite_nl_softmax_iu8ou8+0x2e4>
 80124f6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80124fa:	1992      	adds	r2, r2, r6
 80124fc:	f144 0400 	adc.w	r4, r4, #0
 8012500:	0fd2      	lsrs	r2, r2, #31
 8012502:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8012506:	17e4      	asrs	r4, r4, #31
 8012508:	fba2 1602 	umull	r1, r6, r2, r2
 801250c:	fb02 f804 	mul.w	r8, r2, r4
 8012510:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 8012514:	920f      	str	r2, [sp, #60]	; 0x3c
 8012516:	eb46 0648 	adc.w	r6, r6, r8, lsl #1
 801251a:	2e00      	cmp	r6, #0
 801251c:	da05      	bge.n	801252a <forward_lite_nl_softmax_iu8ou8+0x30e>
 801251e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8012522:	eb11 0108 	adds.w	r1, r1, r8
 8012526:	f146 0600 	adc.w	r6, r6, #0
 801252a:	0fc9      	lsrs	r1, r1, #31
 801252c:	f1cc 0c00 	rsb	ip, ip, #0
 8012530:	fb00 f404 	mul.w	r4, r0, r4
 8012534:	f3c3 6bc0 	ubfx	fp, r3, #27, #1
 8012538:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 801253c:	f1ce 0600 	rsb	r6, lr, #0
 8012540:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
 8012544:	f3c3 7900 	ubfx	r9, r3, #28, #1
 8012548:	9611      	str	r6, [sp, #68]	; 0x44
 801254a:	f02c 4600 	bic.w	r6, ip, #2147483648	; 0x80000000
 801254e:	f3c3 7840 	ubfx	r8, r3, #29, #1
 8012552:	f3c3 6a40 	ubfx	sl, r3, #25, #1
 8012556:	960e      	str	r6, [sp, #56]	; 0x38
 8012558:	17c6      	asrs	r6, r0, #31
 801255a:	ea5f 0ca1 	movs.w	ip, r1, asr #2
 801255e:	f001 0103 	and.w	r1, r1, #3
 8012562:	fb02 4406 	mla	r4, r2, r6, r4
 8012566:	f3c3 6680 	ubfx	r6, r3, #26, #1
 801256a:	f106 36ff 	add.w	r6, r6, #4294967295
 801256e:	9608      	str	r6, [sp, #32]
 8012570:	f3c3 6600 	ubfx	r6, r3, #24, #1
 8012574:	f106 36ff 	add.w	r6, r6, #4294967295
 8012578:	960c      	str	r6, [sp, #48]	; 0x30
 801257a:	fba0 6202 	umull	r6, r2, r0, r2
 801257e:	9612      	str	r6, [sp, #72]	; 0x48
 8012580:	f10b 36ff 	add.w	r6, fp, #4294967295
 8012584:	4422      	add	r2, r4
 8012586:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 801258a:	960d      	str	r6, [sp, #52]	; 0x34
 801258c:	f1cb 0600 	rsb	r6, fp, #0
 8012590:	f343 6b00 	sbfx	fp, r3, #24, #1
 8012594:	f343 6380 	sbfx	r3, r3, #26, #1
 8012598:	9607      	str	r6, [sp, #28]
 801259a:	f109 36ff 	add.w	r6, r9, #4294967295
 801259e:	930a      	str	r3, [sp, #40]	; 0x28
 80125a0:	f1c9 0900 	rsb	r9, r9, #0
 80125a4:	960b      	str	r6, [sp, #44]	; 0x2c
 80125a6:	f108 36ff 	add.w	r6, r8, #4294967295
 80125aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80125ae:	f1ca 0a00 	rsb	sl, sl, #0
 80125b2:	9609      	str	r6, [sp, #36]	; 0x24
 80125b4:	f1c8 0600 	rsb	r6, r8, #0
 80125b8:	bf54      	ite	pl
 80125ba:	f04f 0801 	movpl.w	r8, #1
 80125be:	f04f 0802 	movmi.w	r8, #2
 80125c2:	9606      	str	r6, [sp, #24]
 80125c4:	e691      	b.n	80122ea <forward_lite_nl_softmax_iu8ou8+0xce>
 80125c6:	bf00      	nop
 80125c8:	c0000001 	.word	0xc0000001
 80125cc:	01fffff8 	.word	0x01fffff8
 80125d0:	0fffffe0 	.word	0x0fffffe0
 80125d4:	001fffff 	.word	0x001fffff
 80125d8:	40000100 	.word	0x40000100
 80125dc:	2aaaaaab 	.word	0x2aaaaaab
 80125e0:	70f5a894 	.word	0x70f5a894
 80125e4:	63afbe7b 	.word	0x63afbe7b
 80125e8:	4da2cbf2 	.word	0x4da2cbf2
 80125ec:	2f16ac6c 	.word	0x2f16ac6c
 80125f0:	1152aaa4 	.word	0x1152aaa4
 80125f4:	02582ab7 	.word	0x02582ab7
 80125f8:	000afe11 	.word	0x000afe11
 80125fc:	9b04      	ldr	r3, [sp, #16]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f000 812b 	beq.w	801285a <forward_lite_nl_softmax_iu8ou8+0x63e>
 8012604:	fab3 f483 	clz	r4, r3
 8012608:	fa03 f104 	lsl.w	r1, r3, r4
 801260c:	f1c4 0423 	rsb	r4, r4, #35	; 0x23
 8012610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012614:	17da      	asrs	r2, r3, #31
 8012616:	f1b2 3fff 	cmp.w	r2, #4294967295
 801261a:	bf08      	it	eq
 801261c:	2900      	cmpeq	r1, #0
 801261e:	f000 811d 	beq.w	801285c <forward_lite_nl_softmax_iu8ou8+0x640>
 8012622:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 8012626:	49cf      	ldr	r1, [pc, #828]	; (8012964 <forward_lite_nl_softmax_iu8ou8+0x748>)
 8012628:	4ecf      	ldr	r6, [pc, #828]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 801262a:	f142 0200 	adc.w	r2, r2, #0
 801262e:	085b      	lsrs	r3, r3, #1
 8012630:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012634:	1052      	asrs	r2, r2, #1
 8012636:	4258      	negs	r0, r3
 8012638:	fb01 0002 	mla	r0, r1, r2, r0
 801263c:	fba3 1501 	umull	r1, r5, r3, r1
 8012640:	1989      	adds	r1, r1, r6
 8012642:	4428      	add	r0, r5
 8012644:	f160 0000 	sbc.w	r0, r0, #0
 8012648:	2800      	cmp	r0, #0
 801264a:	da04      	bge.n	8012656 <forward_lite_nl_softmax_iu8ou8+0x43a>
 801264c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8012650:	1949      	adds	r1, r1, r5
 8012652:	f140 0000 	adc.w	r0, r0, #0
 8012656:	0fc9      	lsrs	r1, r1, #31
 8012658:	ea41 0740 	orr.w	r7, r1, r0, lsl #1
 801265c:	f107 305a 	add.w	r0, r7, #1515870810	; 0x5a5a5a5a
 8012660:	17c5      	asrs	r5, r0, #31
 8012662:	fb00 f102 	mul.w	r1, r0, r2
 8012666:	fba0 e803 	umull	lr, r8, r0, r3
 801266a:	fb03 1105 	mla	r1, r3, r5, r1
 801266e:	f11e 4680 	adds.w	r6, lr, #1073741824	; 0x40000000
 8012672:	4488      	add	r8, r1
 8012674:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8012678:	f148 0100 	adc.w	r1, r8, #0
 801267c:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8012680:	f1d6 5600 	rsbs	r6, r6, #536870912	; 0x20000000
 8012684:	f140 81cb 	bpl.w	8012a1e <forward_lite_nl_softmax_iu8ou8+0x802>
 8012688:	49b7      	ldr	r1, [pc, #732]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 801268a:	f04f 3cff 	mov.w	ip, #4294967295
 801268e:	fbc0 1c06 	smlal	r1, ip, r0, r6
 8012692:	f1bc 0f00 	cmp.w	ip, #0
 8012696:	da04      	bge.n	80126a2 <forward_lite_nl_softmax_iu8ou8+0x486>
 8012698:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801269c:	1949      	adds	r1, r1, r5
 801269e:	f14c 0c00 	adc.w	ip, ip, #0
 80126a2:	0fc9      	lsrs	r1, r1, #31
 80126a4:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 80126a8:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 80126ac:	f300 8198 	bgt.w	80129e0 <forward_lite_nl_softmax_iu8ou8+0x7c4>
 80126b0:	07d1      	lsls	r1, r2, #31
 80126b2:	4dad      	ldr	r5, [pc, #692]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 80126b4:	07d8      	lsls	r0, r3, #31
 80126b6:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 80126ba:	ebbe 0000 	subs.w	r0, lr, r0
 80126be:	eb68 0101 	sbc.w	r1, r8, r1
 80126c2:	eb10 0e05 	adds.w	lr, r0, r5
 80126c6:	4da9      	ldr	r5, [pc, #676]	; (801296c <forward_lite_nl_softmax_iu8ou8+0x750>)
 80126c8:	f161 0100 	sbc.w	r1, r1, #0
 80126cc:	443d      	add	r5, r7
 80126ce:	2900      	cmp	r1, #0
 80126d0:	da05      	bge.n	80126de <forward_lite_nl_softmax_iu8ou8+0x4c2>
 80126d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80126d6:	eb1e 0e00 	adds.w	lr, lr, r0
 80126da:	f141 0100 	adc.w	r1, r1, #0
 80126de:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 80126e2:	48a1      	ldr	r0, [pc, #644]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 80126e4:	ea4e 0e41 	orr.w	lr, lr, r1, lsl #1
 80126e8:	f04f 31ff 	mov.w	r1, #4294967295
 80126ec:	f1ce 5e00 	rsb	lr, lr, #536870912	; 0x20000000
 80126f0:	fbce 0105 	smlal	r0, r1, lr, r5
 80126f4:	2900      	cmp	r1, #0
 80126f6:	460e      	mov	r6, r1
 80126f8:	da04      	bge.n	8012704 <forward_lite_nl_softmax_iu8ou8+0x4e8>
 80126fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80126fe:	1840      	adds	r0, r0, r1
 8012700:	f146 0600 	adc.w	r6, r6, #0
 8012704:	0fc1      	lsrs	r1, r0, #31
 8012706:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 801270a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801270e:	f2c0 814e 	blt.w	80129ae <forward_lite_nl_softmax_iu8ou8+0x792>
 8012712:	4d97      	ldr	r5, [pc, #604]	; (8012970 <forward_lite_nl_softmax_iu8ou8+0x754>)
 8012714:	2600      	movs	r6, #0
 8012716:	443d      	add	r5, r7
 8012718:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801271c:	2700      	movs	r7, #0
 801271e:	fb05 f202 	mul.w	r2, r5, r2
 8012722:	17e9      	asrs	r1, r5, #31
 8012724:	fb03 2201 	mla	r2, r3, r1, r2
 8012728:	fba5 3c03 	umull	r3, ip, r5, r3
 801272c:	181b      	adds	r3, r3, r0
 801272e:	4462      	add	r2, ip
 8012730:	eb42 0707 	adc.w	r7, r2, r7
 8012734:	2f00      	cmp	r7, #0
 8012736:	da04      	bge.n	8012742 <forward_lite_nl_softmax_iu8ou8+0x526>
 8012738:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801273c:	189b      	adds	r3, r3, r2
 801273e:	f147 0700 	adc.w	r7, r7, #0
 8012742:	0fdb      	lsrs	r3, r3, #31
 8012744:	4a88      	ldr	r2, [pc, #544]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 8012746:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 801274a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 801274e:	0fd8      	lsrs	r0, r3, #31
 8012750:	42b0      	cmp	r0, r6
 8012752:	bf06      	itte	eq
 8012754:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8012758:	2000      	moveq	r0, #0
 801275a:	f04f 30ff 	movne.w	r0, #4294967295
 801275e:	42ab      	cmp	r3, r5
 8012760:	f040 80e0 	bne.w	8012924 <forward_lite_nl_softmax_iu8ou8+0x708>
 8012764:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8012768:	f040 80dc 	bne.w	8012924 <forward_lite_nl_softmax_iu8ou8+0x708>
 801276c:	f04f 35ff 	mov.w	r5, #4294967295
 8012770:	0068      	lsls	r0, r5, #1
 8012772:	9b03      	ldr	r3, [sp, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d047      	beq.n	8012808 <forward_lite_nl_softmax_iu8ou8+0x5ec>
 8012778:	2601      	movs	r6, #1
 801277a:	f1a0 4800 	sub.w	r8, r0, #2147483648	; 0x80000000
 801277e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012780:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
 8012784:	40a6      	lsls	r6, r4
 8012786:	fab8 f888 	clz	r8, r8
 801278a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801278c:	1e5d      	subs	r5, r3, #1
 801278e:	3e01      	subs	r6, #1
 8012790:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8012794:	4f74      	ldr	r7, [pc, #464]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 8012796:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801279a:	ea4f 0e66 	mov.w	lr, r6, asr #1
 801279e:	f10e 0a01 	add.w	sl, lr, #1
 80127a2:	f8cd a000 	str.w	sl, [sp]
 80127a6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80127aa:	e00c      	b.n	80127c6 <forward_lite_nl_softmax_iu8ou8+0x5aa>
 80127ac:	4596      	cmp	lr, r2
 80127ae:	da01      	bge.n	80127b4 <forward_lite_nl_softmax_iu8ou8+0x598>
 80127b0:	f10b 0b01 	add.w	fp, fp, #1
 80127b4:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
 80127b8:	dd46      	ble.n	8012848 <forward_lite_nl_softmax_iu8ou8+0x62c>
 80127ba:	f04f 0bff 	mov.w	fp, #255	; 0xff
 80127be:	458a      	cmp	sl, r1
 80127c0:	f805 bf01 	strb.w	fp, [r5, #1]!
 80127c4:	d020      	beq.n	8012808 <forward_lite_nl_softmax_iu8ou8+0x5ec>
 80127c6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80127ca:	0fd3      	lsrs	r3, r2, #31
 80127cc:	4563      	cmp	r3, ip
 80127ce:	bf0b      	itete	eq
 80127d0:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80127d4:	463b      	movne	r3, r7
 80127d6:	f04f 0b00 	moveq.w	fp, #0
 80127da:	f04f 3bff 	movne.w	fp, #4294967295
 80127de:	4282      	cmp	r2, r0
 80127e0:	d125      	bne.n	801282e <forward_lite_nl_softmax_iu8ou8+0x612>
 80127e2:	f1b8 0f00 	cmp.w	r8, #0
 80127e6:	d022      	beq.n	801282e <forward_lite_nl_softmax_iu8ou8+0x612>
 80127e8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80127ec:	ea06 020b 	and.w	r2, r6, fp
 80127f0:	fa5b fb04 	asrs.w	fp, fp, r4
 80127f4:	d5da      	bpl.n	80127ac <forward_lite_nl_softmax_iu8ou8+0x590>
 80127f6:	9b00      	ldr	r3, [sp, #0]
 80127f8:	4293      	cmp	r3, r2
 80127fa:	dbd9      	blt.n	80127b0 <forward_lite_nl_softmax_iu8ou8+0x594>
 80127fc:	f04f 0b00 	mov.w	fp, #0
 8012800:	458a      	cmp	sl, r1
 8012802:	f805 bf01 	strb.w	fp, [r5, #1]!
 8012806:	d1de      	bne.n	80127c6 <forward_lite_nl_softmax_iu8ou8+0x5aa>
 8012808:	9b02      	ldr	r3, [sp, #8]
 801280a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801280c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801280e:	4413      	add	r3, r2
 8012810:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012812:	440a      	add	r2, r1
 8012814:	9924      	ldr	r1, [sp, #144]	; 0x90
 8012816:	9302      	str	r3, [sp, #8]
 8012818:	9215      	str	r2, [sp, #84]	; 0x54
 801281a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801281c:	440a      	add	r2, r1
 801281e:	9216      	str	r2, [sp, #88]	; 0x58
 8012820:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012822:	429a      	cmp	r2, r3
 8012824:	f63f ad0f 	bhi.w	8012246 <forward_lite_nl_softmax_iu8ou8+0x2a>
 8012828:	b01b      	add	sp, #108	; 0x6c
 801282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282e:	fbc2 3b00 	smlal	r3, fp, r2, r0
 8012832:	f1bb 0f00 	cmp.w	fp, #0
 8012836:	da03      	bge.n	8012840 <forward_lite_nl_softmax_iu8ou8+0x624>
 8012838:	eb13 0309 	adds.w	r3, r3, r9
 801283c:	f14b 0b00 	adc.w	fp, fp, #0
 8012840:	0fdb      	lsrs	r3, r3, #31
 8012842:	ea43 0b4b 	orr.w	fp, r3, fp, lsl #1
 8012846:	e7d1      	b.n	80127ec <forward_lite_nl_softmax_iu8ou8+0x5d0>
 8012848:	f1bb 0f00 	cmp.w	fp, #0
 801284c:	ddd6      	ble.n	80127fc <forward_lite_nl_softmax_iu8ou8+0x5e0>
 801284e:	fa5f fb8b 	uxtb.w	fp, fp
 8012852:	e7b4      	b.n	80127be <forward_lite_nl_softmax_iu8ou8+0x5a2>
 8012854:	2a00      	cmp	r2, #0
 8012856:	f47f ad05 	bne.w	8012264 <forward_lite_nl_softmax_iu8ou8+0x48>
 801285a:	2403      	movs	r4, #3
 801285c:	f04f 37ff 	mov.w	r7, #4294967295
 8012860:	4844      	ldr	r0, [pc, #272]	; (8012974 <forward_lite_nl_softmax_iu8ou8+0x758>)
 8012862:	f8df e114 	ldr.w	lr, [pc, #276]	; 8012978 <forward_lite_nl_softmax_iu8ou8+0x75c>
 8012866:	f04f 0c00 	mov.w	ip, #0
 801286a:	f04f 0801 	mov.w	r8, #1
 801286e:	4605      	mov	r5, r0
 8012870:	463b      	mov	r3, r7
 8012872:	463a      	mov	r2, r7
 8012874:	46c1      	mov	r9, r8
 8012876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801287a:	2600      	movs	r6, #0
 801287c:	eb11 010e 	adds.w	r1, r1, lr
 8012880:	eb46 060c 	adc.w	r6, r6, ip
 8012884:	2e00      	cmp	r6, #0
 8012886:	da05      	bge.n	8012894 <forward_lite_nl_softmax_iu8ou8+0x678>
 8012888:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 801288c:	eb11 010c 	adds.w	r1, r1, ip
 8012890:	f146 0600 	adc.w	r6, r6, #0
 8012894:	0fc9      	lsrs	r1, r1, #31
 8012896:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 801289a:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 801289e:	0fce      	lsrs	r6, r1, #31
 80128a0:	fb01 f707 	mul.w	r7, r1, r7
 80128a4:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 80128a8:	454e      	cmp	r6, r9
 80128aa:	4e2f      	ldr	r6, [pc, #188]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 80128ac:	fb00 770c 	mla	r7, r0, ip, r7
 80128b0:	bf08      	it	eq
 80128b2:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80128b6:	fba1 0100 	umull	r0, r1, r1, r0
 80128ba:	bf0c      	ite	eq
 80128bc:	f04f 0c00 	moveq.w	ip, #0
 80128c0:	f04f 3cff 	movne.w	ip, #4294967295
 80128c4:	440f      	add	r7, r1
 80128c6:	1986      	adds	r6, r0, r6
 80128c8:	eb47 070c 	adc.w	r7, r7, ip
 80128cc:	2f00      	cmp	r7, #0
 80128ce:	da04      	bge.n	80128da <forward_lite_nl_softmax_iu8ou8+0x6be>
 80128d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128d4:	1876      	adds	r6, r6, r1
 80128d6:	f147 0700 	adc.w	r7, r7, #0
 80128da:	0ff6      	lsrs	r6, r6, #31
 80128dc:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 80128e0:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 80128e4:	4631      	mov	r1, r6
 80128e6:	da55      	bge.n	8012994 <forward_lite_nl_softmax_iu8ou8+0x778>
 80128e8:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
 80128ec:	f300 80b0 	bgt.w	8012a50 <forward_lite_nl_softmax_iu8ou8+0x834>
 80128f0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80128f4:	f1b8 0f00 	cmp.w	r8, #0
 80128f8:	d05e      	beq.n	80129b8 <forward_lite_nl_softmax_iu8ou8+0x79c>
 80128fa:	fb05 f202 	mul.w	r2, r5, r2
 80128fe:	17e9      	asrs	r1, r5, #31
 8012900:	fb03 2201 	mla	r2, r3, r1, r2
 8012904:	fba5 3003 	umull	r3, r0, r5, r3
 8012908:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 801290c:	eb42 0200 	adc.w	r2, r2, r0
 8012910:	2a00      	cmp	r2, #0
 8012912:	db5f      	blt.n	80129d4 <forward_lite_nl_softmax_iu8ou8+0x7b8>
 8012914:	0fdb      	lsrs	r3, r3, #31
 8012916:	f04f 30ff 	mov.w	r0, #4294967295
 801291a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 801291e:	4a12      	ldr	r2, [pc, #72]	; (8012968 <forward_lite_nl_softmax_iu8ou8+0x74c>)
 8012920:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8012924:	fb03 f101 	mul.w	r1, r3, r1
 8012928:	17de      	asrs	r6, r3, #31
 801292a:	fb05 1106 	mla	r1, r5, r6, r1
 801292e:	fba3 3605 	umull	r3, r6, r3, r5
 8012932:	189b      	adds	r3, r3, r2
 8012934:	4431      	add	r1, r6
 8012936:	eb41 0000 	adc.w	r0, r1, r0
 801293a:	2800      	cmp	r0, #0
 801293c:	da04      	bge.n	8012948 <forward_lite_nl_softmax_iu8ou8+0x72c>
 801293e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012942:	189b      	adds	r3, r3, r2
 8012944:	f140 0000 	adc.w	r0, r0, #0
 8012948:	0fdb      	lsrs	r3, r3, #31
 801294a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 801294e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012952:	db13      	blt.n	801297c <forward_lite_nl_softmax_iu8ou8+0x760>
 8012954:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012958:	4405      	add	r5, r0
 801295a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801295e:	f6bf af08 	bge.w	8012772 <forward_lite_nl_softmax_iu8ou8+0x556>
 8012962:	e705      	b.n	8012770 <forward_lite_nl_softmax_iu8ou8+0x554>
 8012964:	c3c3c3c4 	.word	0xc3c3c3c4
 8012968:	c0000001 	.word	0xc0000001
 801296c:	da5a5a5a 	.word	0xda5a5a5a
 8012970:	5a5a5a59 	.word	0x5a5a5a59
 8012974:	b4b4b4b6 	.word	0xb4b4b4b6
 8012978:	4b4b4b4a 	.word	0x4b4b4b4a
 801297c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8012980:	dc43      	bgt.n	8012a0a <forward_lite_nl_softmax_iu8ou8+0x7ee>
 8012982:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012986:	0068      	lsls	r0, r5, #1
 8012988:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 801298c:	bfd8      	it	le
 801298e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012992:	e6ee      	b.n	8012772 <forward_lite_nl_softmax_iu8ou8+0x556>
 8012994:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012998:	4405      	add	r5, r0
 801299a:	ebb8 7fd5 	cmp.w	r8, r5, lsr #31
 801299e:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80129a2:	f43f aeb9 	beq.w	8012718 <forward_lite_nl_softmax_iu8ou8+0x4fc>
 80129a6:	482d      	ldr	r0, [pc, #180]	; (8012a5c <forward_lite_nl_softmax_iu8ou8+0x840>)
 80129a8:	f04f 37ff 	mov.w	r7, #4294967295
 80129ac:	e6b7      	b.n	801271e <forward_lite_nl_softmax_iu8ou8+0x502>
 80129ae:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 80129b2:	dc4b      	bgt.n	8012a4c <forward_lite_nl_softmax_iu8ou8+0x830>
 80129b4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80129b8:	fb05 f202 	mul.w	r2, r5, r2
 80129bc:	17e9      	asrs	r1, r5, #31
 80129be:	fb03 2201 	mla	r2, r3, r1, r2
 80129c2:	fba5 0303 	umull	r0, r3, r5, r3
 80129c6:	441a      	add	r2, r3
 80129c8:	4b24      	ldr	r3, [pc, #144]	; (8012a5c <forward_lite_nl_softmax_iu8ou8+0x840>)
 80129ca:	18c3      	adds	r3, r0, r3
 80129cc:	f162 0200 	sbc.w	r2, r2, #0
 80129d0:	2a00      	cmp	r2, #0
 80129d2:	da9f      	bge.n	8012914 <forward_lite_nl_softmax_iu8ou8+0x6f8>
 80129d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80129d8:	181b      	adds	r3, r3, r0
 80129da:	f142 0200 	adc.w	r2, r2, #0
 80129de:	e799      	b.n	8012914 <forward_lite_nl_softmax_iu8ou8+0x6f8>
 80129e0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80129e4:	17ef      	asrs	r7, r5, #31
 80129e6:	fba3 ec05 	umull	lr, ip, r3, r5
 80129ea:	2d00      	cmp	r5, #0
 80129ec:	4628      	mov	r0, r5
 80129ee:	fb03 f107 	mul.w	r1, r3, r7
 80129f2:	fb05 1102 	mla	r1, r5, r2, r1
 80129f6:	448c      	add	ip, r1
 80129f8:	da2c      	bge.n	8012a54 <forward_lite_nl_softmax_iu8ou8+0x838>
 80129fa:	f04f 0901 	mov.w	r9, #1
 80129fe:	f04f 0800 	mov.w	r8, #0
 8012a02:	4916      	ldr	r1, [pc, #88]	; (8012a5c <forward_lite_nl_softmax_iu8ou8+0x840>)
 8012a04:	f04f 36ff 	mov.w	r6, #4294967295
 8012a08:	e738      	b.n	801287c <forward_lite_nl_softmax_iu8ou8+0x660>
 8012a0a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a12:	db02      	blt.n	8012a1a <forward_lite_nl_softmax_iu8ou8+0x7fe>
 8012a14:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012a18:	e6ab      	b.n	8012772 <forward_lite_nl_softmax_iu8ou8+0x556>
 8012a1a:	0058      	lsls	r0, r3, #1
 8012a1c:	e7b4      	b.n	8012988 <forward_lite_nl_softmax_iu8ou8+0x76c>
 8012a1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012a22:	f04f 0800 	mov.w	r8, #0
 8012a26:	460d      	mov	r5, r1
 8012a28:	4641      	mov	r1, r8
 8012a2a:	fbc0 5106 	smlal	r5, r1, r0, r6
 8012a2e:	0fed      	lsrs	r5, r5, #31
 8012a30:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 8012a34:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012a38:	17ef      	asrs	r7, r5, #31
 8012a3a:	fba3 ec05 	umull	lr, ip, r3, r5
 8012a3e:	4628      	mov	r0, r5
 8012a40:	fb03 f107 	mul.w	r1, r3, r7
 8012a44:	fb05 1102 	mla	r1, r5, r2, r1
 8012a48:	448c      	add	ip, r1
 8012a4a:	e713      	b.n	8012874 <forward_lite_nl_softmax_iu8ou8+0x658>
 8012a4c:	f04f 0800 	mov.w	r8, #0
 8012a50:	0088      	lsls	r0, r1, #2
 8012a52:	e7a1      	b.n	8012998 <forward_lite_nl_softmax_iu8ou8+0x77c>
 8012a54:	f04f 0800 	mov.w	r8, #0
 8012a58:	e70c      	b.n	8012874 <forward_lite_nl_softmax_iu8ou8+0x658>
 8012a5a:	bf00      	nop
 8012a5c:	c0000001 	.word	0xc0000001

08012a60 <forward_lite_pad_8bit_ch1st_3x3_constant>:
 8012a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	461e      	mov	r6, r3
 8012a66:	b083      	sub	sp, #12
 8012a68:	460d      	mov	r5, r1
 8012a6a:	f992 4000 	ldrsb.w	r4, [r2]
 8012a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a70:	2e06      	cmp	r6, #6
 8012a72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8012a74:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8012a78:	9301      	str	r3, [sp, #4]
 8012a7a:	f000 8087 	beq.w	8012b8c <forward_lite_pad_8bit_ch1st_3x3_constant+0x12c>
 8012a7e:	2e03      	cmp	r6, #3
 8012a80:	d055      	beq.n	8012b2e <forward_lite_pad_8bit_ch1st_3x3_constant+0xce>
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	db05      	blt.n	8012a92 <forward_lite_pad_8bit_ch1st_3x3_constant+0x32>
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	4608      	mov	r0, r1
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	4415      	add	r5, r2
 8012a8e:	f004 fb28 	bl	80170e2 <memset>
 8012a92:	f107 38ff 	add.w	r8, r7, #4294967295
 8012a96:	3e01      	subs	r6, #1
 8012a98:	f1b8 0f00 	cmp.w	r8, #0
 8012a9c:	dd27      	ble.n	8012aee <forward_lite_pad_8bit_ch1st_3x3_constant+0x8e>
 8012a9e:	9b01      	ldr	r3, [sp, #4]
 8012aa0:	f109 0702 	add.w	r7, r9, #2
 8012aa4:	f04f 0b00 	mov.w	fp, #0
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	fb07 f306 	mul.w	r3, r7, r6
 8012aae:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8012ab2:	9300      	str	r3, [sp, #0]
 8012ab4:	2e00      	cmp	r6, #0
 8012ab6:	eb05 0109 	add.w	r1, r5, r9
 8012aba:	dd0e      	ble.n	8012ada <forward_lite_pad_8bit_ch1st_3x3_constant+0x7a>
 8012abc:	4608      	mov	r0, r1
 8012abe:	2500      	movs	r5, #0
 8012ac0:	f04f 0300 	mov.w	r3, #0
 8012ac4:	3501      	adds	r5, #1
 8012ac6:	f364 0307 	bfi	r3, r4, #0, #8
 8012aca:	42b5      	cmp	r5, r6
 8012acc:	f364 230f 	bfi	r3, r4, #8, #8
 8012ad0:	8003      	strh	r3, [r0, #0]
 8012ad2:	4438      	add	r0, r7
 8012ad4:	d1f4      	bne.n	8012ac0 <forward_lite_pad_8bit_ch1st_3x3_constant+0x60>
 8012ad6:	9b00      	ldr	r3, [sp, #0]
 8012ad8:	4419      	add	r1, r3
 8012ada:	f10b 0b01 	add.w	fp, fp, #1
 8012ade:	4652      	mov	r2, sl
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	eb01 050a 	add.w	r5, r1, sl
 8012ae6:	f000 fe47 	bl	8013778 <st_int8_fill>
 8012aea:	45c3      	cmp	fp, r8
 8012aec:	d1e2      	bne.n	8012ab4 <forward_lite_pad_8bit_ch1st_3x3_constant+0x54>
 8012aee:	2e00      	cmp	r6, #0
 8012af0:	eb05 0009 	add.w	r0, r5, r9
 8012af4:	dd10      	ble.n	8012b18 <forward_lite_pad_8bit_ch1st_3x3_constant+0xb8>
 8012af6:	f109 0702 	add.w	r7, r9, #2
 8012afa:	4601      	mov	r1, r0
 8012afc:	2200      	movs	r2, #0
 8012afe:	f04f 0300 	mov.w	r3, #0
 8012b02:	3201      	adds	r2, #1
 8012b04:	f364 0307 	bfi	r3, r4, #0, #8
 8012b08:	42b2      	cmp	r2, r6
 8012b0a:	f364 230f 	bfi	r3, r4, #8, #8
 8012b0e:	800b      	strh	r3, [r1, #0]
 8012b10:	4439      	add	r1, r7
 8012b12:	d1f4      	bne.n	8012afe <forward_lite_pad_8bit_ch1st_3x3_constant+0x9e>
 8012b14:	fb07 0002 	mla	r0, r7, r2, r0
 8012b18:	9b01      	ldr	r3, [sp, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	db33      	blt.n	8012b86 <forward_lite_pad_8bit_ch1st_3x3_constant+0x126>
 8012b1e:	461a      	mov	r2, r3
 8012b20:	4621      	mov	r1, r4
 8012b22:	3201      	adds	r2, #1
 8012b24:	b003      	add	sp, #12
 8012b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2a:	f004 bada 	b.w	80170e2 <memset>
 8012b2e:	b2e2      	uxtb	r2, r4
 8012b30:	2f00      	cmp	r7, #0
 8012b32:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8012b36:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	ea4f 4104 	mov.w	r1, r4, lsl #16
 8012b40:	ea42 0203 	orr.w	r2, r2, r3
 8012b44:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8012b48:	ea41 0102 	orr.w	r1, r1, r2
 8012b4c:	b292      	uxth	r2, r2
 8012b4e:	dd1a      	ble.n	8012b86 <forward_lite_pad_8bit_ch1st_3x3_constant+0x126>
 8012b50:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 8012b54:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8012b58:	eb05 0008 	add.w	r0, r5, r8
 8012b5c:	f04f 0300 	mov.w	r3, #0
 8012b60:	6029      	str	r1, [r5, #0]
 8012b62:	80aa      	strh	r2, [r5, #4]
 8012b64:	3519      	adds	r5, #25
 8012b66:	f364 0307 	bfi	r3, r4, #0, #8
 8012b6a:	f825 2c0b 	strh.w	r2, [r5, #-11]
 8012b6e:	f805 4c06 	strb.w	r4, [r5, #-6]
 8012b72:	f845 1c05 	str.w	r1, [r5, #-5]
 8012b76:	f364 230f 	bfi	r3, r4, #8, #8
 8012b7a:	f805 4c01 	strb.w	r4, [r5, #-1]
 8012b7e:	4285      	cmp	r5, r0
 8012b80:	f825 3c10 	strh.w	r3, [r5, #-16]
 8012b84:	d1ea      	bne.n	8012b5c <forward_lite_pad_8bit_ch1st_3x3_constant+0xfc>
 8012b86:	b003      	add	sp, #12
 8012b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8c:	b2e2      	uxtb	r2, r4
 8012b8e:	2f00      	cmp	r7, #0
 8012b90:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8012b94:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	ea42 0203 	orr.w	r2, r2, r3
 8012b9e:	ea4f 4304 	mov.w	r3, r4, lsl #16
 8012ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012ba6:	ea42 0203 	orr.w	r2, r2, r3
 8012baa:	ddec      	ble.n	8012b86 <forward_lite_pad_8bit_ch1st_3x3_constant+0x126>
 8012bac:	350f      	adds	r5, #15
 8012bae:	2100      	movs	r1, #0
 8012bb0:	f04f 0300 	mov.w	r3, #0
 8012bb4:	3101      	adds	r1, #1
 8012bb6:	f845 2c0f 	str.w	r2, [r5, #-15]
 8012bba:	3540      	adds	r5, #64	; 0x40
 8012bbc:	f364 0307 	bfi	r3, r4, #0, #8
 8012bc0:	428f      	cmp	r7, r1
 8012bc2:	f845 2c4b 	str.w	r2, [r5, #-75]
 8012bc6:	f364 230f 	bfi	r3, r4, #8, #8
 8012bca:	f805 4c47 	strb.w	r4, [r5, #-71]
 8012bce:	f805 4c18 	strb.w	r4, [r5, #-24]
 8012bd2:	f845 2c17 	str.w	r2, [r5, #-23]
 8012bd6:	f845 2c13 	str.w	r2, [r5, #-19]
 8012bda:	f825 3c40 	strh.w	r3, [r5, #-64]
 8012bde:	f825 3c38 	strh.w	r3, [r5, #-56]
 8012be2:	f825 3c30 	strh.w	r3, [r5, #-48]
 8012be6:	f825 3c28 	strh.w	r3, [r5, #-40]
 8012bea:	f825 3c20 	strh.w	r3, [r5, #-32]
 8012bee:	d1df      	bne.n	8012bb0 <forward_lite_pad_8bit_ch1st_3x3_constant+0x150>
 8012bf0:	b003      	add	sp, #12
 8012bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf6:	bf00      	nop

08012bf8 <forward_lite_pad_constant>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	b085      	sub	sp, #20
 8012bfe:	4616      	mov	r6, r2
 8012c00:	4681      	mov	r9, r0
 8012c02:	2b08      	cmp	r3, #8
 8012c04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c06:	460c      	mov	r4, r1
 8012c08:	9201      	str	r2, [sp, #4]
 8012c0a:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
 8012c0e:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	; 0x3c
 8012c12:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	; 0x4c
 8012c16:	9002      	str	r0, [sp, #8]
 8012c18:	d051      	beq.n	8012cbe <forward_lite_pad_constant+0xc6>
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	dd11      	ble.n	8012c42 <forward_lite_pad_constant+0x4a>
 8012c1e:	f8cd 8000 	str.w	r8, [sp]
 8012c22:	f04f 0b00 	mov.w	fp, #0
 8012c26:	46b8      	mov	r8, r7
 8012c28:	4617      	mov	r7, r2
 8012c2a:	44ab      	add	fp, r5
 8012c2c:	4621      	mov	r1, r4
 8012c2e:	462a      	mov	r2, r5
 8012c30:	4630      	mov	r0, r6
 8012c32:	f000 fdff 	bl	8013834 <st_int8_copy>
 8012c36:	455f      	cmp	r7, fp
 8012c38:	442c      	add	r4, r5
 8012c3a:	dcf6      	bgt.n	8012c2a <forward_lite_pad_constant+0x32>
 8012c3c:	4647      	mov	r7, r8
 8012c3e:	f8dd 8000 	ldr.w	r8, [sp]
 8012c42:	9b01      	ldr	r3, [sp, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	dd29      	ble.n	8012c9c <forward_lite_pad_constant+0xa4>
 8012c48:	2300      	movs	r3, #0
 8012c4a:	9300      	str	r3, [sp, #0]
 8012c4c:	2f00      	cmp	r7, #0
 8012c4e:	dd0a      	ble.n	8012c66 <forward_lite_pad_constant+0x6e>
 8012c50:	f04f 0b00 	mov.w	fp, #0
 8012c54:	44ab      	add	fp, r5
 8012c56:	4621      	mov	r1, r4
 8012c58:	462a      	mov	r2, r5
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	f000 fdea 	bl	8013834 <st_int8_copy>
 8012c60:	455f      	cmp	r7, fp
 8012c62:	442c      	add	r4, r5
 8012c64:	dcf6      	bgt.n	8012c54 <forward_lite_pad_constant+0x5c>
 8012c66:	4621      	mov	r1, r4
 8012c68:	4648      	mov	r0, r9
 8012c6a:	4652      	mov	r2, sl
 8012c6c:	4454      	add	r4, sl
 8012c6e:	f000 fde1 	bl	8013834 <st_int8_copy>
 8012c72:	f1b8 0f00 	cmp.w	r8, #0
 8012c76:	44d1      	add	r9, sl
 8012c78:	dd0a      	ble.n	8012c90 <forward_lite_pad_constant+0x98>
 8012c7a:	f04f 0b00 	mov.w	fp, #0
 8012c7e:	44ab      	add	fp, r5
 8012c80:	4621      	mov	r1, r4
 8012c82:	462a      	mov	r2, r5
 8012c84:	4630      	mov	r0, r6
 8012c86:	f000 fdd5 	bl	8013834 <st_int8_copy>
 8012c8a:	45d8      	cmp	r8, fp
 8012c8c:	442c      	add	r4, r5
 8012c8e:	dcf6      	bgt.n	8012c7e <forward_lite_pad_constant+0x86>
 8012c90:	9b00      	ldr	r3, [sp, #0]
 8012c92:	9a01      	ldr	r2, [sp, #4]
 8012c94:	3301      	adds	r3, #1
 8012c96:	429a      	cmp	r2, r3
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	d1d7      	bne.n	8012c4c <forward_lite_pad_constant+0x54>
 8012c9c:	9b02      	ldr	r3, [sp, #8]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	dd0a      	ble.n	8012cb8 <forward_lite_pad_constant+0xc0>
 8012ca2:	2700      	movs	r7, #0
 8012ca4:	4698      	mov	r8, r3
 8012ca6:	442f      	add	r7, r5
 8012ca8:	4621      	mov	r1, r4
 8012caa:	462a      	mov	r2, r5
 8012cac:	4630      	mov	r0, r6
 8012cae:	f000 fdc1 	bl	8013834 <st_int8_copy>
 8012cb2:	45b8      	cmp	r8, r7
 8012cb4:	442c      	add	r4, r5
 8012cb6:	dcf6      	bgt.n	8012ca6 <forward_lite_pad_constant+0xae>
 8012cb8:	b005      	add	sp, #20
 8012cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cbe:	f996 5000 	ldrsb.w	r5, [r6]
 8012cc2:	4414      	add	r4, r2
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	9403      	str	r4, [sp, #12]
 8012cc8:	f000 fd56 	bl	8013778 <st_int8_fill>
 8012ccc:	9b01      	ldr	r3, [sp, #4]
 8012cce:	4626      	mov	r6, r4
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	dd29      	ble.n	8012d28 <forward_lite_pad_constant+0x130>
 8012cd4:	eb0a 0308 	add.w	r3, sl, r8
 8012cd8:	f04f 0b00 	mov.w	fp, #0
 8012cdc:	443c      	add	r4, r7
 8012cde:	443b      	add	r3, r7
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	4643      	mov	r3, r8
 8012ce4:	46d8      	mov	r8, fp
 8012ce6:	469b      	mov	fp, r3
 8012ce8:	9b00      	ldr	r3, [sp, #0]
 8012cea:	4631      	mov	r1, r6
 8012cec:	463a      	mov	r2, r7
 8012cee:	4628      	mov	r0, r5
 8012cf0:	441e      	add	r6, r3
 8012cf2:	f000 fd41 	bl	8013778 <st_int8_fill>
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	4648      	mov	r0, r9
 8012cfa:	4652      	mov	r2, sl
 8012cfc:	f108 0801 	add.w	r8, r8, #1
 8012d00:	f000 fd98 	bl	8013834 <st_int8_copy>
 8012d04:	9b00      	ldr	r3, [sp, #0]
 8012d06:	eb04 010a 	add.w	r1, r4, sl
 8012d0a:	465a      	mov	r2, fp
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	441c      	add	r4, r3
 8012d10:	f000 fd32 	bl	8013778 <st_int8_fill>
 8012d14:	9b01      	ldr	r3, [sp, #4]
 8012d16:	44d1      	add	r9, sl
 8012d18:	4543      	cmp	r3, r8
 8012d1a:	d1e5      	bne.n	8012ce8 <forward_lite_pad_constant+0xf0>
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	9900      	ldr	r1, [sp, #0]
 8012d20:	9b03      	ldr	r3, [sp, #12]
 8012d22:	fb01 3302 	mla	r3, r1, r2, r3
 8012d26:	9303      	str	r3, [sp, #12]
 8012d28:	4628      	mov	r0, r5
 8012d2a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d2e:	b005      	add	sp, #20
 8012d30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d34:	f000 bd20 	b.w	8013778 <st_int8_fill>

08012d38 <forward_lite_pad_edge>:
 8012d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3c:	ed2d 8b02 	vpush	{d8}
 8012d40:	b087      	sub	sp, #28
 8012d42:	9305      	str	r3, [sp, #20]
 8012d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012d46:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8012d4a:	18cd      	adds	r5, r1, r3
 8012d4c:	1e13      	subs	r3, r2, #0
 8012d4e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8012d52:	9103      	str	r1, [sp, #12]
 8012d54:	9504      	str	r5, [sp, #16]
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	; 0x50
 8012d5c:	dd36      	ble.n	8012dcc <forward_lite_pad_edge+0x94>
 8012d5e:	fb04 f308 	mul.w	r3, r4, r8
 8012d62:	4607      	mov	r7, r0
 8012d64:	ee08 aa10 	vmov	s16, sl
 8012d68:	9302      	str	r3, [sp, #8]
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	f1b9 0f00 	cmp.w	r9, #0
 8012d72:	dd09      	ble.n	8012d88 <forward_lite_pad_edge+0x50>
 8012d74:	2600      	movs	r6, #0
 8012d76:	4426      	add	r6, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	4622      	mov	r2, r4
 8012d7c:	4638      	mov	r0, r7
 8012d7e:	f000 fd59 	bl	8013834 <st_int8_copy>
 8012d82:	45b1      	cmp	r9, r6
 8012d84:	4425      	add	r5, r4
 8012d86:	dcf6      	bgt.n	8012d76 <forward_lite_pad_edge+0x3e>
 8012d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012d8a:	4638      	mov	r0, r7
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	461a      	mov	r2, r3
 8012d90:	441f      	add	r7, r3
 8012d92:	441d      	add	r5, r3
 8012d94:	f000 fd4e 	bl	8013834 <st_int8_copy>
 8012d98:	f1b8 0f00 	cmp.w	r8, #0
 8012d9c:	eba7 0a04 	sub.w	sl, r7, r4
 8012da0:	dd0c      	ble.n	8012dbc <forward_lite_pad_edge+0x84>
 8012da2:	46ab      	mov	fp, r5
 8012da4:	2600      	movs	r6, #0
 8012da6:	3601      	adds	r6, #1
 8012da8:	4659      	mov	r1, fp
 8012daa:	4622      	mov	r2, r4
 8012dac:	4650      	mov	r0, sl
 8012dae:	f000 fd41 	bl	8013834 <st_int8_copy>
 8012db2:	4546      	cmp	r6, r8
 8012db4:	44a3      	add	fp, r4
 8012db6:	d1f6      	bne.n	8012da6 <forward_lite_pad_edge+0x6e>
 8012db8:	9b02      	ldr	r3, [sp, #8]
 8012dba:	441d      	add	r5, r3
 8012dbc:	9b00      	ldr	r3, [sp, #0]
 8012dbe:	9a01      	ldr	r2, [sp, #4]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	d1d2      	bne.n	8012d6e <forward_lite_pad_edge+0x36>
 8012dc8:	ee18 aa10 	vmov	sl, s16
 8012dcc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d009      	beq.n	8012de8 <forward_lite_pad_edge+0xb0>
 8012dd4:	461c      	mov	r4, r3
 8012dd6:	4615      	mov	r5, r2
 8012dd8:	4621      	mov	r1, r4
 8012dda:	4454      	add	r4, sl
 8012ddc:	4652      	mov	r2, sl
 8012dde:	4628      	mov	r0, r5
 8012de0:	f000 fd28 	bl	8013834 <st_int8_copy>
 8012de4:	42a5      	cmp	r5, r4
 8012de6:	d1f7      	bne.n	8012dd8 <forward_lite_pad_edge+0xa0>
 8012de8:	9b01      	ldr	r3, [sp, #4]
 8012dea:	9d05      	ldr	r5, [sp, #20]
 8012dec:	441d      	add	r5, r3
 8012dee:	9b03      	ldr	r3, [sp, #12]
 8012df0:	3d01      	subs	r5, #1
 8012df2:	fb0a 3505 	mla	r5, sl, r5, r3
 8012df6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012df8:	18ec      	adds	r4, r5, r3
 8012dfa:	42a5      	cmp	r5, r4
 8012dfc:	d009      	beq.n	8012e12 <forward_lite_pad_edge+0xda>
 8012dfe:	f1ca 0600 	rsb	r6, sl, #0
 8012e02:	4621      	mov	r1, r4
 8012e04:	4434      	add	r4, r6
 8012e06:	4652      	mov	r2, sl
 8012e08:	4628      	mov	r0, r5
 8012e0a:	f000 fd13 	bl	8013834 <st_int8_copy>
 8012e0e:	42a5      	cmp	r5, r4
 8012e10:	d1f7      	bne.n	8012e02 <forward_lite_pad_edge+0xca>
 8012e12:	b007      	add	sp, #28
 8012e14:	ecbd 8b02 	vpop	{d8}
 8012e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e1c <forward_lite_pad_reflect>:
 8012e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e20:	b08f      	sub	sp, #60	; 0x3c
 8012e22:	460e      	mov	r6, r1
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	4684      	mov	ip, r0
 8012e28:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 8012e2c:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8012e2e:	f9bd e084 	ldrsh.w	lr, [sp, #132]	; 0x84
 8012e32:	910b      	str	r1, [sp, #44]	; 0x2c
 8012e34:	4437      	add	r7, r6
 8012e36:	9002      	str	r0, [sp, #8]
 8012e38:	950c      	str	r5, [sp, #48]	; 0x30
 8012e3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012e40:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012e42:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8012e46:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	; 0x7c
 8012e4a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8012e4c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8012e50:	9307      	str	r3, [sp, #28]
 8012e52:	dd58      	ble.n	8012f06 <forward_lite_pad_reflect+0xea>
 8012e54:	4408      	add	r0, r1
 8012e56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012e58:	f1c9 0a00 	rsb	sl, r9, #0
 8012e5c:	fb02 f200 	mul.w	r2, r2, r0
 8012e60:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012e62:	4403      	add	r3, r0
 8012e64:	9206      	str	r2, [sp, #24]
 8012e66:	442b      	add	r3, r5
 8012e68:	930a      	str	r3, [sp, #40]	; 0x28
 8012e6a:	197b      	adds	r3, r7, r5
 8012e6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e6e:	9301      	str	r3, [sp, #4]
 8012e70:	1e8b      	subs	r3, r1, #2
 8012e72:	fb04 f101 	mul.w	r1, r4, r1
 8012e76:	fb04 c303 	mla	r3, r4, r3, ip
 8012e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8012e7c:	9304      	str	r3, [sp, #16]
 8012e7e:	fb08 2305 	mla	r3, r8, r5, r2
 8012e82:	fb09 6303 	mla	r3, r9, r3, r6
 8012e86:	9303      	str	r3, [sp, #12]
 8012e88:	fb09 f308 	mul.w	r3, r9, r8
 8012e8c:	9308      	str	r3, [sp, #32]
 8012e8e:	2300      	movs	r3, #0
 8012e90:	9305      	str	r3, [sp, #20]
 8012e92:	9b01      	ldr	r3, [sp, #4]
 8012e94:	42bb      	cmp	r3, r7
 8012e96:	d00a      	beq.n	8012eae <forward_lite_pad_reflect+0x92>
 8012e98:	461d      	mov	r5, r3
 8012e9a:	9e02      	ldr	r6, [sp, #8]
 8012e9c:	4455      	add	r5, sl
 8012e9e:	4426      	add	r6, r4
 8012ea0:	4622      	mov	r2, r4
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f000 fcc5 	bl	8013834 <st_int8_copy>
 8012eaa:	42bd      	cmp	r5, r7
 8012eac:	d1f6      	bne.n	8012e9c <forward_lite_pad_reflect+0x80>
 8012eae:	9b02      	ldr	r3, [sp, #8]
 8012eb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	9901      	ldr	r1, [sp, #4]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	9302      	str	r3, [sp, #8]
 8012eba:	f000 fcbb 	bl	8013834 <st_int8_copy>
 8012ebe:	9b06      	ldr	r3, [sp, #24]
 8012ec0:	4543      	cmp	r3, r8
 8012ec2:	da0d      	bge.n	8012ee0 <forward_lite_pad_reflect+0xc4>
 8012ec4:	461d      	mov	r5, r3
 8012ec6:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8012eca:	3501      	adds	r5, #1
 8012ecc:	4659      	mov	r1, fp
 8012ece:	4630      	mov	r0, r6
 8012ed0:	4622      	mov	r2, r4
 8012ed2:	f000 fcaf 	bl	8013834 <st_int8_copy>
 8012ed6:	45a8      	cmp	r8, r5
 8012ed8:	44cb      	add	fp, r9
 8012eda:	eba6 0604 	sub.w	r6, r6, r4
 8012ede:	d1f4      	bne.n	8012eca <forward_lite_pad_reflect+0xae>
 8012ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ee2:	9901      	ldr	r1, [sp, #4]
 8012ee4:	4417      	add	r7, r2
 8012ee6:	9b05      	ldr	r3, [sp, #20]
 8012ee8:	4411      	add	r1, r2
 8012eea:	9a04      	ldr	r2, [sp, #16]
 8012eec:	3301      	adds	r3, #1
 8012eee:	9101      	str	r1, [sp, #4]
 8012ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ef2:	9305      	str	r3, [sp, #20]
 8012ef4:	440a      	add	r2, r1
 8012ef6:	9908      	ldr	r1, [sp, #32]
 8012ef8:	9204      	str	r2, [sp, #16]
 8012efa:	9a03      	ldr	r2, [sp, #12]
 8012efc:	440a      	add	r2, r1
 8012efe:	9203      	str	r2, [sp, #12]
 8012f00:	9a07      	ldr	r2, [sp, #28]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d1c5      	bne.n	8012e92 <forward_lite_pad_reflect+0x76>
 8012f06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012f0a:	fb03 f404 	mul.w	r4, r3, r4
 8012f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f10:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8012f14:	42a3      	cmp	r3, r4
 8012f16:	d00c      	beq.n	8012f32 <forward_lite_pad_reflect+0x116>
 8012f18:	461d      	mov	r5, r3
 8012f1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f1c:	425e      	negs	r6, r3
 8012f1e:	461f      	mov	r7, r3
 8012f20:	4629      	mov	r1, r5
 8012f22:	4620      	mov	r0, r4
 8012f24:	443d      	add	r5, r7
 8012f26:	4434      	add	r4, r6
 8012f28:	463a      	mov	r2, r7
 8012f2a:	f000 fc83 	bl	8013834 <st_int8_copy>
 8012f2e:	42a5      	cmp	r5, r4
 8012f30:	d1f6      	bne.n	8012f20 <forward_lite_pad_reflect+0x104>
 8012f32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012f34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012f36:	1e5c      	subs	r4, r3, #1
 8012f38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012f3c:	fb03 f505 	mul.w	r5, r3, r5
 8012f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f42:	fb02 3404 	mla	r4, r2, r4, r3
 8012f46:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8012f4a:	42ac      	cmp	r4, r5
 8012f4c:	d00a      	beq.n	8012f64 <forward_lite_pad_reflect+0x148>
 8012f4e:	4256      	negs	r6, r2
 8012f50:	4617      	mov	r7, r2
 8012f52:	4621      	mov	r1, r4
 8012f54:	4628      	mov	r0, r5
 8012f56:	4434      	add	r4, r6
 8012f58:	443d      	add	r5, r7
 8012f5a:	463a      	mov	r2, r7
 8012f5c:	f000 fc6a 	bl	8013834 <st_int8_copy>
 8012f60:	42ac      	cmp	r4, r5
 8012f62:	d1f6      	bne.n	8012f52 <forward_lite_pad_reflect+0x136>
 8012f64:	b00f      	add	sp, #60	; 0x3c
 8012f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f6a:	bf00      	nop

08012f6c <align_factor>:
 8012f6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f70:	4602      	mov	r2, r0
 8012f72:	b508      	push	{r3, lr}
 8012f74:	eeb4 0a67 	vcmp.f32	s0, s15
 8012f78:	2300      	movs	r3, #0
 8012f7a:	8003      	strh	r3, [r0, #0]
 8012f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f80:	d524      	bpl.n	8012fcc <align_factor+0x60>
 8012f82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8a:	dd1f      	ble.n	8012fcc <align_factor+0x60>
 8012f8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f90:	2301      	movs	r3, #1
 8012f92:	e005      	b.n	8012fa0 <align_factor+0x34>
 8012f94:	8013      	strh	r3, [r2, #0]
 8012f96:	b28b      	uxth	r3, r1
 8012f98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f9c:	2b21      	cmp	r3, #33	; 0x21
 8012f9e:	d02b      	beq.n	8012ff8 <align_factor+0x8c>
 8012fa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012fa4:	1c59      	adds	r1, r3, #1
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	d4f3      	bmi.n	8012f94 <align_factor+0x28>
 8012fac:	eddf 7a17 	vldr	s15, [pc, #92]	; 801300c <align_factor+0xa0>
 8012fb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012fb4:	ee17 0a90 	vmov	r0, s15
 8012fb8:	f7ed fe2e 	bl	8000c18 <__aeabi_f2lz>
 8012fbc:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8012fc0:	d003      	beq.n	8012fca <align_factor+0x5e>
 8012fc2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012fc6:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8012fca:	bd08      	pop	{r3, pc}
 8012fcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012fd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012fd8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8012fdc:	e005      	b.n	8012fea <align_factor+0x7e>
 8012fde:	8013      	strh	r3, [r2, #0]
 8012fe0:	b28b      	uxth	r3, r1
 8012fe2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012fe6:	4283      	cmp	r3, r0
 8012fe8:	d00a      	beq.n	8013000 <align_factor+0x94>
 8012fea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012fee:	1e59      	subs	r1, r3, #1
 8012ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff4:	dcf3      	bgt.n	8012fde <align_factor+0x72>
 8012ff6:	e7d9      	b.n	8012fac <align_factor+0x40>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	8013      	strh	r3, [r2, #0]
 8012ffe:	bd08      	pop	{r3, pc}
 8013000:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8013004:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013008:	8013      	strh	r3, [r2, #0]
 801300a:	e7cf      	b.n	8012fac <align_factor+0x40>
 801300c:	4f000000 	.word	0x4f000000

08013010 <align_factor_ch>:
 8013010:	b361      	cbz	r1, 801306c <align_factor_ch+0x5c>
 8013012:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8013016:	f1a2 0c04 	sub.w	ip, r2, #4
 801301a:	b530      	push	{r4, r5, lr}
 801301c:	f1a3 0e02 	sub.w	lr, r3, #2
 8013020:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8013024:	2500      	movs	r5, #0
 8013026:	ecf0 7a01 	vldmia	r0!, {s15}
 801302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801302e:	ee17 2a90 	vmov	r2, s15
 8013032:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013036:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801303a:	2a00      	cmp	r2, #0
 801303c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8013040:	f1c1 017e 	rsb	r1, r1, #126	; 0x7e
 8013044:	bfb8      	it	lt
 8013046:	425b      	neglt	r3, r3
 8013048:	291f      	cmp	r1, #31
 801304a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801304e:	dc06      	bgt.n	801305e <align_factor_ch+0x4e>
 8013050:	4284      	cmp	r4, r0
 8013052:	f82e 1f02 	strh.w	r1, [lr, #2]!
 8013056:	f84c 3f04 	str.w	r3, [ip, #4]!
 801305a:	d1e4      	bne.n	8013026 <align_factor_ch+0x16>
 801305c:	bd30      	pop	{r4, r5, pc}
 801305e:	4284      	cmp	r4, r0
 8013060:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8013064:	f84c 5f04 	str.w	r5, [ip, #4]!
 8013068:	d1dd      	bne.n	8013026 <align_factor_ch+0x16>
 801306a:	bd30      	pop	{r4, r5, pc}
 801306c:	4770      	bx	lr
 801306e:	bf00      	nop

08013070 <st_sssa8_ch_convolve_rank1upd>:
 8013070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013074:	b085      	sub	sp, #20
 8013076:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801307a:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 801307e:	fb13 f304 	smulbb	r3, r3, r4
 8013082:	460c      	mov	r4, r1
 8013084:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013086:	fb13 f500 	smulbb	r5, r3, r0
 801308a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801308c:	2a00      	cmp	r2, #0
 801308e:	d070      	beq.n	8013172 <st_sssa8_ch_convolve_rank1upd+0x102>
 8013090:	b2ad      	uxth	r5, r5
 8013092:	f1a1 0904 	sub.w	r9, r1, #4
 8013096:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801309a:	08af      	lsrs	r7, r5, #2
 801309c:	f005 0503 	and.w	r5, r5, #3
 80130a0:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 80130a4:	1e69      	subs	r1, r5, #1
 80130a6:	f1a7 0381 	sub.w	r3, r7, #129	; 0x81
 80130aa:	f1a7 0280 	sub.w	r2, r7, #128	; 0x80
 80130ae:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80130b2:	b289      	uxth	r1, r1
 80130b4:	9100      	str	r1, [sp, #0]
 80130b6:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 80130ba:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 80130be:	b292      	uxth	r2, r2
 80130c0:	9202      	str	r2, [sp, #8]
 80130c2:	025a      	lsls	r2, r3, #9
 80130c4:	3301      	adds	r3, #1
 80130c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130ca:	025b      	lsls	r3, r3, #9
 80130cc:	9203      	str	r2, [sp, #12]
 80130ce:	9301      	str	r3, [sp, #4]
 80130d0:	2f80      	cmp	r7, #128	; 0x80
 80130d2:	d953      	bls.n	801317c <st_sssa8_ch_convolve_rank1upd+0x10c>
 80130d4:	9b03      	ldr	r3, [sp, #12]
 80130d6:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80130da:	2600      	movs	r6, #0
 80130dc:	eb04 0c03 	add.w	ip, r4, r3
 80130e0:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 80130e4:	2200      	movs	r2, #0
 80130e6:	f851 3b04 	ldr.w	r3, [r1], #4
 80130ea:	fa2f fe83 	sxtb16	lr, r3
 80130ee:	4281      	cmp	r1, r0
 80130f0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80130f4:	fa92 f21e 	qadd16	r2, r2, lr
 80130f8:	fa2f f383 	sxtb16	r3, r3
 80130fc:	fa92 f213 	qadd16	r2, r2, r3
 8013100:	d1f1      	bne.n	80130e6 <st_sssa8_ch_convolve_rank1upd+0x76>
 8013102:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8013106:	b213      	sxth	r3, r2
 8013108:	4560      	cmp	r0, ip
 801310a:	eb03 4222 	add.w	r2, r3, r2, asr #16
 801310e:	4416      	add	r6, r2
 8013110:	d1e6      	bne.n	80130e0 <st_sssa8_ch_convolve_rank1upd+0x70>
 8013112:	9b01      	ldr	r3, [sp, #4]
 8013114:	18e1      	adds	r1, r4, r3
 8013116:	9c02      	ldr	r4, [sp, #8]
 8013118:	b374      	cbz	r4, 8013178 <st_sssa8_ch_convolve_rank1upd+0x108>
 801311a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801311e:	2200      	movs	r2, #0
 8013120:	f851 3b04 	ldr.w	r3, [r1], #4
 8013124:	fa2f f083 	sxtb16	r0, r3
 8013128:	428c      	cmp	r4, r1
 801312a:	ea4f 2333 	mov.w	r3, r3, ror #8
 801312e:	fa92 f210 	qadd16	r2, r2, r0
 8013132:	fa2f f383 	sxtb16	r3, r3
 8013136:	fa92 f213 	qadd16	r2, r2, r3
 801313a:	d1f1      	bne.n	8013120 <st_sssa8_ch_convolve_rank1upd+0xb0>
 801313c:	b213      	sxth	r3, r2
 801313e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8013142:	441e      	add	r6, r3
 8013144:	b16d      	cbz	r5, 8013162 <st_sssa8_ch_convolve_rank1upd+0xf2>
 8013146:	f994 3000 	ldrsb.w	r3, [r4]
 801314a:	441e      	add	r6, r3
 801314c:	9b00      	ldr	r3, [sp, #0]
 801314e:	b13b      	cbz	r3, 8013160 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8013150:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8013154:	2d02      	cmp	r5, #2
 8013156:	441e      	add	r6, r3
 8013158:	d002      	beq.n	8013160 <st_sssa8_ch_convolve_rank1upd+0xf0>
 801315a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 801315e:	441e      	add	r6, r3
 8013160:	442c      	add	r4, r5
 8013162:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8013166:	fb0b 3616 	mls	r6, fp, r6, r3
 801316a:	f84a 6b04 	str.w	r6, [sl], #4
 801316e:	45c2      	cmp	sl, r8
 8013170:	d1ae      	bne.n	80130d0 <st_sssa8_ch_convolve_rank1upd+0x60>
 8013172:	b005      	add	sp, #20
 8013174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013178:	460c      	mov	r4, r1
 801317a:	e7e3      	b.n	8013144 <st_sssa8_ch_convolve_rank1upd+0xd4>
 801317c:	4621      	mov	r1, r4
 801317e:	2600      	movs	r6, #0
 8013180:	463c      	mov	r4, r7
 8013182:	e7c9      	b.n	8013118 <st_sssa8_ch_convolve_rank1upd+0xa8>

08013184 <st_sssa8_fully_connected>:
 8013184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013188:	b097      	sub	sp, #92	; 0x5c
 801318a:	460d      	mov	r5, r1
 801318c:	4683      	mov	fp, r0
 801318e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8013190:	9313      	str	r3, [sp, #76]	; 0x4c
 8013192:	6823      	ldr	r3, [r4, #0]
 8013194:	9203      	str	r2, [sp, #12]
 8013196:	9307      	str	r3, [sp, #28]
 8013198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801319a:	f99d 6088 	ldrsb.w	r6, [sp, #136]	; 0x88
 801319e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80131a2:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
 80131a6:	1e4a      	subs	r2, r1, #1
 80131a8:	9104      	str	r1, [sp, #16]
 80131aa:	920d      	str	r2, [sp, #52]	; 0x34
 80131ac:	b292      	uxth	r2, r2
 80131ae:	2a14      	cmp	r2, #20
 80131b0:	f200 81b3 	bhi.w	801351a <st_sssa8_fully_connected+0x396>
 80131b4:	2201      	movs	r2, #1
 80131b6:	408b      	lsls	r3, r1
 80131b8:	408a      	lsls	r2, r1
 80131ba:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80131be:	9308      	str	r3, [sp, #32]
 80131c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	f000 81ae 	beq.w	8013524 <st_sssa8_fully_connected+0x3a0>
 80131c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80131ca:	b2b3      	uxth	r3, r6
 80131cc:	9600      	str	r6, [sp, #0]
 80131ce:	4658      	mov	r0, fp
 80131d0:	0851      	lsrs	r1, r2, #1
 80131d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80131d6:	9e03      	ldr	r6, [sp, #12]
 80131d8:	460c      	mov	r4, r1
 80131da:	9115      	str	r1, [sp, #84]	; 0x54
 80131dc:	4632      	mov	r2, r6
 80131de:	9926      	ldr	r1, [sp, #152]	; 0x98
 80131e0:	f000 fbb0 	bl	8013944 <st_int8_reordered_no_shift_zero>
 80131e4:	4621      	mov	r1, r4
 80131e6:	2c00      	cmp	r4, #0
 80131e8:	f000 8145 	beq.w	8013476 <st_sssa8_fully_connected+0x2f2>
 80131ec:	4634      	mov	r4, r6
 80131ee:	f1a6 0310 	sub.w	r3, r6, #16
 80131f2:	9e04      	ldr	r6, [sp, #16]
 80131f4:	1e4a      	subs	r2, r1, #1
 80131f6:	2001      	movs	r0, #1
 80131f8:	091b      	lsrs	r3, r3, #4
 80131fa:	1eb1      	subs	r1, r6, #2
 80131fc:	b292      	uxth	r2, r2
 80131fe:	3301      	adds	r3, #1
 8013200:	fa00 f101 	lsl.w	r1, r0, r1
 8013204:	9112      	str	r1, [sp, #72]	; 0x48
 8013206:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013208:	3110      	adds	r1, #16
 801320a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801320e:	920e      	str	r2, [sp, #56]	; 0x38
 8013210:	1ee2      	subs	r2, r4, #3
 8013212:	920f      	str	r2, [sp, #60]	; 0x3c
 8013214:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013216:	3208      	adds	r2, #8
 8013218:	9205      	str	r2, [sp, #20]
 801321a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801321c:	3202      	adds	r2, #2
 801321e:	9206      	str	r2, [sp, #24]
 8013220:	011a      	lsls	r2, r3, #4
 8013222:	9209      	str	r2, [sp, #36]	; 0x24
 8013224:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013226:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 801322a:	9310      	str	r3, [sp, #64]	; 0x40
 801322c:	1f23      	subs	r3, r4, #4
 801322e:	9311      	str	r3, [sp, #68]	; 0x44
 8013230:	1b83      	subs	r3, r0, r6
 8013232:	9314      	str	r3, [sp, #80]	; 0x50
 8013234:	9a03      	ldr	r2, [sp, #12]
 8013236:	9b05      	ldr	r3, [sp, #20]
 8013238:	2a0f      	cmp	r2, #15
 801323a:	eb05 0b02 	add.w	fp, r5, r2
 801323e:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 8013242:	f340 8260 	ble.w	8013706 <st_sssa8_fully_connected+0x582>
 8013246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013248:	465c      	mov	r4, fp
 801324a:	18ae      	adds	r6, r5, r2
 801324c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801324e:	682f      	ldr	r7, [r5, #0]
 8013250:	f8d4 a000 	ldr.w	sl, [r4]
 8013254:	ea4f 2037 	mov.w	r0, r7, ror #8
 8013258:	f8d2 9000 	ldr.w	r9, [r2]
 801325c:	ea4f 2e3a 	mov.w	lr, sl, ror #8
 8013260:	fa2f f080 	sxtb16	r0, r0
 8013264:	fa2f fc8e 	sxtb16	ip, lr
 8013268:	fa2f f787 	sxtb16	r7, r7
 801326c:	fa2f fe8a 	sxtb16	lr, sl
 8013270:	fb29 1107 	smlad	r1, r9, r7, r1
 8013274:	fb29 390e 	smlad	r9, r9, lr, r3
 8013278:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801327c:	fb28 1100 	smlad	r1, r8, r0, r1
 8013280:	fb28 9e0c 	smlad	lr, r8, ip, r9
 8013284:	6868      	ldr	r0, [r5, #4]
 8013286:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801328a:	ea4f 2330 	mov.w	r3, r0, ror #8
 801328e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8013292:	ea4f 2a39 	mov.w	sl, r9, ror #8
 8013296:	fa2f f383 	sxtb16	r3, r3
 801329a:	fa2f f78a 	sxtb16	r7, sl
 801329e:	fa2f f080 	sxtb16	r0, r0
 80132a2:	fa2f fa89 	sxtb16	sl, r9
 80132a6:	fb28 1000 	smlad	r0, r8, r0, r1
 80132aa:	fb28 e80a 	smlad	r8, r8, sl, lr
 80132ae:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80132b2:	fb2c 0003 	smlad	r0, ip, r3, r0
 80132b6:	fb2c 8a07 	smlad	sl, ip, r7, r8
 80132ba:	68ab      	ldr	r3, [r5, #8]
 80132bc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80132c0:	ea4f 2133 	mov.w	r1, r3, ror #8
 80132c4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80132c8:	ea4f 2e38 	mov.w	lr, r8, ror #8
 80132cc:	fa2f f181 	sxtb16	r1, r1
 80132d0:	fa2f f98e 	sxtb16	r9, lr
 80132d4:	fa2f f383 	sxtb16	r3, r3
 80132d8:	fa2f fe88 	sxtb16	lr, r8
 80132dc:	fb2c 0303 	smlad	r3, ip, r3, r0
 80132e0:	fb2c ac0e 	smlad	ip, ip, lr, sl
 80132e4:	6957      	ldr	r7, [r2, #20]
 80132e6:	fb27 3301 	smlad	r3, r7, r1, r3
 80132ea:	fb27 ce09 	smlad	lr, r7, r9, ip
 80132ee:	68e8      	ldr	r0, [r5, #12]
 80132f0:	3410      	adds	r4, #16
 80132f2:	f854 cc04 	ldr.w	ip, [r4, #-4]
 80132f6:	3510      	adds	r5, #16
 80132f8:	ea4f 2130 	mov.w	r1, r0, ror #8
 80132fc:	6997      	ldr	r7, [r2, #24]
 80132fe:	fa2f f881 	sxtb16	r8, r1
 8013302:	fa2f f180 	sxtb16	r1, r0
 8013306:	ea4f 203c 	mov.w	r0, ip, ror #8
 801330a:	fa2f fc8c 	sxtb16	ip, ip
 801330e:	fa2f f080 	sxtb16	r0, r0
 8013312:	fb27 3101 	smlad	r1, r7, r1, r3
 8013316:	fb27 e70c 	smlad	r7, r7, ip, lr
 801331a:	69d3      	ldr	r3, [r2, #28]
 801331c:	3220      	adds	r2, #32
 801331e:	fb23 1108 	smlad	r1, r3, r8, r1
 8013322:	fb23 7300 	smlad	r3, r3, r0, r7
 8013326:	42b5      	cmp	r5, r6
 8013328:	d191      	bne.n	801324e <st_sssa8_fully_connected+0xca>
 801332a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801332c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8013330:	4493      	add	fp, r2
 8013332:	4691      	mov	r9, r2
 8013334:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013336:	4591      	cmp	r9, r2
 8013338:	f280 81e3 	bge.w	8013702 <st_sssa8_fully_connected+0x57e>
 801333c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801333e:	4657      	mov	r7, sl
 8013340:	46d8      	mov	r8, fp
 8013342:	eba2 0209 	sub.w	r2, r2, r9
 8013346:	0892      	lsrs	r2, r2, #2
 8013348:	920c      	str	r2, [sp, #48]	; 0x30
 801334a:	3201      	adds	r2, #1
 801334c:	0090      	lsls	r0, r2, #2
 801334e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013350:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 8013354:	900a      	str	r0, [sp, #40]	; 0x28
 8013356:	f856 eb04 	ldr.w	lr, [r6], #4
 801335a:	f858 0b04 	ldr.w	r0, [r8], #4
 801335e:	ea4f 2c3e 	mov.w	ip, lr, ror #8
 8013362:	683a      	ldr	r2, [r7, #0]
 8013364:	ea4f 2530 	mov.w	r5, r0, ror #8
 8013368:	fa2f fc8c 	sxtb16	ip, ip
 801336c:	fa2f fe8e 	sxtb16	lr, lr
 8013370:	fa2f f585 	sxtb16	r5, r5
 8013374:	fa2f f080 	sxtb16	r0, r0
 8013378:	fb22 110e 	smlad	r1, r2, lr, r1
 801337c:	fb22 3300 	smlad	r3, r2, r0, r3
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	3708      	adds	r7, #8
 8013384:	fb22 110c 	smlad	r1, r2, ip, r1
 8013388:	fb22 3305 	smlad	r3, r2, r5, r3
 801338c:	42a6      	cmp	r6, r4
 801338e:	d1e2      	bne.n	8013356 <st_sssa8_fully_connected+0x1d2>
 8013390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013392:	f109 0904 	add.w	r9, r9, #4
 8013396:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 801339a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801339c:	4493      	add	fp, r2
 801339e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133a0:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80133a4:	9d03      	ldr	r5, [sp, #12]
 80133a6:	454d      	cmp	r5, r9
 80133a8:	dd37      	ble.n	801341a <st_sssa8_fully_connected+0x296>
 80133aa:	f9ba 2000 	ldrsh.w	r2, [sl]
 80133ae:	f994 0000 	ldrsb.w	r0, [r4]
 80133b2:	fb12 1100 	smlabb	r1, r2, r0, r1
 80133b6:	f99b 0000 	ldrsb.w	r0, [fp]
 80133ba:	fb12 3300 	smlabb	r3, r2, r0, r3
 80133be:	f109 0201 	add.w	r2, r9, #1
 80133c2:	42aa      	cmp	r2, r5
 80133c4:	da25      	bge.n	8013412 <st_sssa8_fully_connected+0x28e>
 80133c6:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 80133ca:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80133ce:	fb12 1100 	smlabb	r1, r2, r0, r1
 80133d2:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 80133d6:	fb12 3300 	smlabb	r3, r2, r0, r3
 80133da:	f109 0202 	add.w	r2, r9, #2
 80133de:	42aa      	cmp	r2, r5
 80133e0:	da17      	bge.n	8013412 <st_sssa8_fully_connected+0x28e>
 80133e2:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 80133e6:	f994 0002 	ldrsb.w	r0, [r4, #2]
 80133ea:	fb12 1100 	smlabb	r1, r2, r0, r1
 80133ee:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 80133f2:	fb12 3300 	smlabb	r3, r2, r0, r3
 80133f6:	f109 0203 	add.w	r2, r9, #3
 80133fa:	4295      	cmp	r5, r2
 80133fc:	dd09      	ble.n	8013412 <st_sssa8_fully_connected+0x28e>
 80133fe:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8013402:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 8013406:	fb12 3300 	smlabb	r3, r2, r0, r3
 801340a:	f994 0003 	ldrsb.w	r0, [r4, #3]
 801340e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8013412:	9a03      	ldr	r2, [sp, #12]
 8013414:	eba2 0909 	sub.w	r9, r2, r9
 8013418:	444c      	add	r4, r9
 801341a:	9a04      	ldr	r2, [sp, #16]
 801341c:	2a15      	cmp	r2, #21
 801341e:	f340 8140 	ble.w	80136a2 <st_sssa8_fully_connected+0x51e>
 8013422:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013424:	9a07      	ldr	r2, [sp, #28]
 8013426:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013428:	fb51 0102 	smmla	r1, r1, r2, r0
 801342c:	fb53 0302 	smmla	r3, r3, r2, r0
 8013430:	4129      	asrs	r1, r5
 8013432:	9a08      	ldr	r2, [sp, #32]
 8013434:	4411      	add	r1, r2
 8013436:	f301 0107 	ssat	r1, #8, r1
 801343a:	9806      	ldr	r0, [sp, #24]
 801343c:	412b      	asrs	r3, r5
 801343e:	f800 1c02 	strb.w	r1, [r0, #-2]
 8013442:	4413      	add	r3, r2
 8013444:	f303 0307 	ssat	r3, #8, r3
 8013448:	f800 3c01 	strb.w	r3, [r0, #-1]
 801344c:	9a03      	ldr	r2, [sp, #12]
 801344e:	9b05      	ldr	r3, [sp, #20]
 8013450:	18a5      	adds	r5, r4, r2
 8013452:	9a06      	ldr	r2, [sp, #24]
 8013454:	3308      	adds	r3, #8
 8013456:	3202      	adds	r2, #2
 8013458:	9305      	str	r3, [sp, #20]
 801345a:	9206      	str	r2, [sp, #24]
 801345c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801345e:	4293      	cmp	r3, r2
 8013460:	f47f aee8 	bne.w	8013234 <st_sssa8_fully_connected+0xb0>
 8013464:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013468:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801346c:	9225      	str	r2, [sp, #148]	; 0x94
 801346e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013474:	9324      	str	r3, [sp, #144]	; 0x90
 8013476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013478:	07db      	lsls	r3, r3, #31
 801347a:	d54a      	bpl.n	8013512 <st_sssa8_fully_connected+0x38e>
 801347c:	9a03      	ldr	r2, [sp, #12]
 801347e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013480:	0897      	lsrs	r7, r2, #2
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f000 8175 	beq.w	8013772 <st_sssa8_fully_connected+0x5ee>
 8013488:	eb05 0687 	add.w	r6, r5, r7, lsl #2
 801348c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801348e:	f855 2b04 	ldr.w	r2, [r5], #4
 8013492:	6801      	ldr	r1, [r0, #0]
 8013494:	fa2f f482 	sxtb16	r4, r2
 8013498:	ea4f 2232 	mov.w	r2, r2, ror #8
 801349c:	fa2f f282 	sxtb16	r2, r2
 80134a0:	fb21 3304 	smlad	r3, r1, r4, r3
 80134a4:	6841      	ldr	r1, [r0, #4]
 80134a6:	3008      	adds	r0, #8
 80134a8:	fb21 3302 	smlad	r3, r1, r2, r3
 80134ac:	42b5      	cmp	r5, r6
 80134ae:	d1ee      	bne.n	801348e <st_sssa8_fully_connected+0x30a>
 80134b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80134b2:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 80134b6:	9226      	str	r2, [sp, #152]	; 0x98
 80134b8:	9a03      	ldr	r2, [sp, #12]
 80134ba:	f012 0203 	ands.w	r2, r2, #3
 80134be:	d016      	beq.n	80134ee <st_sssa8_fully_connected+0x36a>
 80134c0:	3a01      	subs	r2, #1
 80134c2:	9826      	ldr	r0, [sp, #152]	; 0x98
 80134c4:	f996 1000 	ldrsb.w	r1, [r6]
 80134c8:	8800      	ldrh	r0, [r0, #0]
 80134ca:	b292      	uxth	r2, r2
 80134cc:	fb10 3301 	smlabb	r3, r0, r1, r3
 80134d0:	b16a      	cbz	r2, 80134ee <st_sssa8_fully_connected+0x36a>
 80134d2:	9826      	ldr	r0, [sp, #152]	; 0x98
 80134d4:	2a01      	cmp	r2, #1
 80134d6:	f996 1001 	ldrsb.w	r1, [r6, #1]
 80134da:	8840      	ldrh	r0, [r0, #2]
 80134dc:	fb10 3301 	smlabb	r3, r0, r1, r3
 80134e0:	d005      	beq.n	80134ee <st_sssa8_fully_connected+0x36a>
 80134e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80134e4:	f996 2002 	ldrsb.w	r2, [r6, #2]
 80134e8:	8889      	ldrh	r1, [r1, #4]
 80134ea:	fb11 3302 	smlabb	r3, r1, r2, r3
 80134ee:	9a04      	ldr	r2, [sp, #16]
 80134f0:	2a15      	cmp	r2, #21
 80134f2:	f340 811c 	ble.w	801372e <st_sssa8_fully_connected+0x5aa>
 80134f6:	1e91      	subs	r1, r2, #2
 80134f8:	2201      	movs	r2, #1
 80134fa:	408a      	lsls	r2, r1
 80134fc:	9907      	ldr	r1, [sp, #28]
 80134fe:	fb53 2301 	smmla	r3, r3, r1, r2
 8013502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013504:	4113      	asrs	r3, r2
 8013506:	9a08      	ldr	r2, [sp, #32]
 8013508:	4413      	add	r3, r2
 801350a:	f303 0307 	ssat	r3, #8, r3
 801350e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013510:	7013      	strb	r3, [r2, #0]
 8013512:	2000      	movs	r0, #0
 8013514:	b017      	add	sp, #92	; 0x5c
 8013516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351a:	9308      	str	r3, [sp, #32]
 801351c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801351e:	2b00      	cmp	r3, #0
 8013520:	f47f ae52 	bne.w	80131c8 <st_sssa8_fully_connected+0x44>
 8013524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013526:	4270      	negs	r0, r6
 8013528:	eac0 4000 	pkhbt	r0, r0, r0, lsl #16
 801352c:	2b00      	cmp	r3, #0
 801352e:	d0f0      	beq.n	8013512 <st_sssa8_fully_connected+0x38e>
 8013530:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013532:	3301      	adds	r3, #1
 8013534:	9903      	ldr	r1, [sp, #12]
 8013536:	b236      	sxth	r6, r6
 8013538:	18d3      	adds	r3, r2, r3
 801353a:	9c04      	ldr	r4, [sp, #16]
 801353c:	f1a1 0810 	sub.w	r8, r1, #16
 8013540:	f102 0e01 	add.w	lr, r2, #1
 8013544:	9305      	str	r3, [sp, #20]
 8013546:	2201      	movs	r2, #1
 8013548:	f028 080f 	bic.w	r8, r8, #15
 801354c:	1ea3      	subs	r3, r4, #2
 801354e:	468c      	mov	ip, r1
 8013550:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8013554:	fa02 f303 	lsl.w	r3, r2, r3
 8013558:	f108 0810 	add.w	r8, r8, #16
 801355c:	f1bc 0f0f 	cmp.w	ip, #15
 8013560:	f8cd b00c 	str.w	fp, [sp, #12]
 8013564:	9309      	str	r3, [sp, #36]	; 0x24
 8013566:	eb0b 0308 	add.w	r3, fp, r8
 801356a:	9306      	str	r3, [sp, #24]
 801356c:	eba2 0304 	sub.w	r3, r2, r4
 8013570:	930a      	str	r3, [sp, #40]	; 0x28
 8013572:	f859 3b04 	ldr.w	r3, [r9], #4
 8013576:	dd7e      	ble.n	8013676 <st_sssa8_fully_connected+0x4f2>
 8013578:	eb05 0708 	add.w	r7, r5, r8
 801357c:	462a      	mov	r2, r5
 801357e:	9d03      	ldr	r5, [sp, #12]
 8013580:	6811      	ldr	r1, [r2, #0]
 8013582:	682c      	ldr	r4, [r5, #0]
 8013584:	fa2f fb81 	sxtb16	fp, r1
 8013588:	ea4f 2a34 	mov.w	sl, r4, ror #8
 801358c:	ea4f 2131 	mov.w	r1, r1, ror #8
 8013590:	fa20 fa8a 	sxtab16	sl, r0, sl
 8013594:	fa2f f181 	sxtb16	r1, r1
 8013598:	fa20 f484 	sxtab16	r4, r0, r4
 801359c:	fb24 340b 	smlad	r4, r4, fp, r3
 80135a0:	fb2a 4b01 	smlad	fp, sl, r1, r4
 80135a4:	6851      	ldr	r1, [r2, #4]
 80135a6:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80135aa:	fa2f f481 	sxtb16	r4, r1
 80135ae:	ea4f 233a 	mov.w	r3, sl, ror #8
 80135b2:	ea4f 2131 	mov.w	r1, r1, ror #8
 80135b6:	fa20 f383 	sxtab16	r3, r0, r3
 80135ba:	fa2f f181 	sxtb16	r1, r1
 80135be:	fa20 fa8a 	sxtab16	sl, r0, sl
 80135c2:	fb2a ba04 	smlad	sl, sl, r4, fp
 80135c6:	fb23 a401 	smlad	r4, r3, r1, sl
 80135ca:	6891      	ldr	r1, [r2, #8]
 80135cc:	68ab      	ldr	r3, [r5, #8]
 80135ce:	fa2f fb81 	sxtb16	fp, r1
 80135d2:	ea4f 2a33 	mov.w	sl, r3, ror #8
 80135d6:	ea4f 2131 	mov.w	r1, r1, ror #8
 80135da:	fa20 fa8a 	sxtab16	sl, r0, sl
 80135de:	fa2f f181 	sxtb16	r1, r1
 80135e2:	fa20 f383 	sxtab16	r3, r0, r3
 80135e6:	fb23 430b 	smlad	r3, r3, fp, r4
 80135ea:	fb2a 3301 	smlad	r3, sl, r1, r3
 80135ee:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 80135f2:	3510      	adds	r5, #16
 80135f4:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80135f8:	3210      	adds	r2, #16
 80135fa:	ea4f 2b3a 	mov.w	fp, sl, ror #8
 80135fe:	ea4f 2431 	mov.w	r4, r1, ror #8
 8013602:	fa2f fa8a 	sxtb16	sl, sl
 8013606:	fa2f fb8b 	sxtb16	fp, fp
 801360a:	fa20 f181 	sxtab16	r1, r0, r1
 801360e:	fa20 f484 	sxtab16	r4, r0, r4
 8013612:	fb21 330a 	smlad	r3, r1, sl, r3
 8013616:	fb24 330b 	smlad	r3, r4, fp, r3
 801361a:	4297      	cmp	r7, r2
 801361c:	d1b0      	bne.n	8013580 <st_sssa8_fully_connected+0x3fc>
 801361e:	4645      	mov	r5, r8
 8013620:	9f06      	ldr	r7, [sp, #24]
 8013622:	45ac      	cmp	ip, r5
 8013624:	dd2c      	ble.n	8013680 <st_sssa8_fully_connected+0x4fc>
 8013626:	ebac 0505 	sub.w	r5, ip, r5
 801362a:	4415      	add	r5, r2
 801362c:	4611      	mov	r1, r2
 801362e:	f917 4b01 	ldrsb.w	r4, [r7], #1
 8013632:	3201      	adds	r2, #1
 8013634:	7809      	ldrb	r1, [r1, #0]
 8013636:	1ba4      	subs	r4, r4, r6
 8013638:	42aa      	cmp	r2, r5
 801363a:	b249      	sxtb	r1, r1
 801363c:	fb14 3301 	smlabb	r3, r4, r1, r3
 8013640:	d1f4      	bne.n	801362c <st_sssa8_fully_connected+0x4a8>
 8013642:	9a04      	ldr	r2, [sp, #16]
 8013644:	2a15      	cmp	r2, #21
 8013646:	dd1f      	ble.n	8013688 <st_sssa8_fully_connected+0x504>
 8013648:	9a07      	ldr	r2, [sp, #28]
 801364a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801364c:	fb53 1302 	smmla	r3, r3, r2, r1
 8013650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013652:	4113      	asrs	r3, r2
 8013654:	9a08      	ldr	r2, [sp, #32]
 8013656:	4413      	add	r3, r2
 8013658:	f303 0307 	ssat	r3, #8, r3
 801365c:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8013660:	f10e 0e01 	add.w	lr, lr, #1
 8013664:	9b05      	ldr	r3, [sp, #20]
 8013666:	459e      	cmp	lr, r3
 8013668:	f43f af53 	beq.w	8013512 <st_sssa8_fully_connected+0x38e>
 801366c:	f1bc 0f0f 	cmp.w	ip, #15
 8013670:	f859 3b04 	ldr.w	r3, [r9], #4
 8013674:	dc80      	bgt.n	8013578 <st_sssa8_fully_connected+0x3f4>
 8013676:	462a      	mov	r2, r5
 8013678:	2500      	movs	r5, #0
 801367a:	9f03      	ldr	r7, [sp, #12]
 801367c:	45ac      	cmp	ip, r5
 801367e:	dcd2      	bgt.n	8013626 <st_sssa8_fully_connected+0x4a2>
 8013680:	4615      	mov	r5, r2
 8013682:	9a04      	ldr	r2, [sp, #16]
 8013684:	2a15      	cmp	r2, #21
 8013686:	dcdf      	bgt.n	8013648 <st_sssa8_fully_connected+0x4c4>
 8013688:	2a00      	cmp	r2, #0
 801368a:	dd42      	ble.n	8013712 <st_sssa8_fully_connected+0x58e>
 801368c:	005b      	lsls	r3, r3, #1
 801368e:	e9dd 1407 	ldrd	r1, r4, [sp, #28]
 8013692:	fb53 4301 	smmla	r3, r3, r1, r4
 8013696:	4113      	asrs	r3, r2
 8013698:	f303 0307 	ssat	r3, #8, r3
 801369c:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80136a0:	e7de      	b.n	8013660 <st_sssa8_fully_connected+0x4dc>
 80136a2:	2a00      	cmp	r2, #0
 80136a4:	dd13      	ble.n	80136ce <st_sssa8_fully_connected+0x54a>
 80136a6:	0049      	lsls	r1, r1, #1
 80136a8:	005b      	lsls	r3, r3, #1
 80136aa:	e9dd 0507 	ldrd	r0, r5, [sp, #28]
 80136ae:	fb51 5100 	smmla	r1, r1, r0, r5
 80136b2:	fb53 5300 	smmla	r3, r3, r0, r5
 80136b6:	4111      	asrs	r1, r2
 80136b8:	f301 0107 	ssat	r1, #8, r1
 80136bc:	9806      	ldr	r0, [sp, #24]
 80136be:	4113      	asrs	r3, r2
 80136c0:	f800 1c02 	strb.w	r1, [r0, #-2]
 80136c4:	f303 0307 	ssat	r3, #8, r3
 80136c8:	f800 3c01 	strb.w	r3, [r0, #-1]
 80136cc:	e6be      	b.n	801344c <st_sssa8_fully_connected+0x2c8>
 80136ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80136d0:	fa01 f200 	lsl.w	r2, r1, r0
 80136d4:	f302 021f 	ssat	r2, #32, r2
 80136d8:	9907      	ldr	r1, [sp, #28]
 80136da:	fb52 f211 	smmulr	r2, r2, r1
 80136de:	4083      	lsls	r3, r0
 80136e0:	f303 031f 	ssat	r3, #32, r3
 80136e4:	fb53 f311 	smmulr	r3, r3, r1
 80136e8:	9908      	ldr	r1, [sp, #32]
 80136ea:	440a      	add	r2, r1
 80136ec:	f302 0207 	ssat	r2, #8, r2
 80136f0:	9806      	ldr	r0, [sp, #24]
 80136f2:	440b      	add	r3, r1
 80136f4:	f800 2c02 	strb.w	r2, [r0, #-2]
 80136f8:	f303 0307 	ssat	r3, #8, r3
 80136fc:	f800 3c01 	strb.w	r3, [r0, #-1]
 8013700:	e6a4      	b.n	801344c <st_sssa8_fully_connected+0x2c8>
 8013702:	4634      	mov	r4, r6
 8013704:	e64e      	b.n	80133a4 <st_sssa8_fully_connected+0x220>
 8013706:	462e      	mov	r6, r5
 8013708:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 801370c:	f04f 0900 	mov.w	r9, #0
 8013710:	e610      	b.n	8013334 <st_sssa8_fully_connected+0x1b0>
 8013712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013714:	4093      	lsls	r3, r2
 8013716:	f303 031f 	ssat	r3, #32, r3
 801371a:	9a07      	ldr	r2, [sp, #28]
 801371c:	fb53 f312 	smmulr	r3, r3, r2
 8013720:	9a08      	ldr	r2, [sp, #32]
 8013722:	4413      	add	r3, r2
 8013724:	f303 0307 	ssat	r3, #8, r3
 8013728:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801372c:	e798      	b.n	8013660 <st_sssa8_fully_connected+0x4dc>
 801372e:	2a00      	cmp	r2, #0
 8013730:	dd0d      	ble.n	801374e <st_sssa8_fully_connected+0x5ca>
 8013732:	005b      	lsls	r3, r3, #1
 8013734:	e9dd 1007 	ldrd	r1, r0, [sp, #28]
 8013738:	fb53 0301 	smmla	r3, r3, r1, r0
 801373c:	4113      	asrs	r3, r2
 801373e:	f303 0307 	ssat	r3, #8, r3
 8013742:	2000      	movs	r0, #0
 8013744:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8013746:	7013      	strb	r3, [r2, #0]
 8013748:	b017      	add	sp, #92	; 0x5c
 801374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801374e:	f1c2 0201 	rsb	r2, r2, #1
 8013752:	4093      	lsls	r3, r2
 8013754:	f303 031f 	ssat	r3, #32, r3
 8013758:	9a07      	ldr	r2, [sp, #28]
 801375a:	fb53 f312 	smmulr	r3, r3, r2
 801375e:	9a08      	ldr	r2, [sp, #32]
 8013760:	441a      	add	r2, r3
 8013762:	f302 0307 	ssat	r3, #8, r2
 8013766:	2000      	movs	r0, #0
 8013768:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801376a:	7013      	strb	r3, [r2, #0]
 801376c:	b017      	add	sp, #92	; 0x5c
 801376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013772:	462e      	mov	r6, r5
 8013774:	e6a0      	b.n	80134b8 <st_sssa8_fully_connected+0x334>
 8013776:	bf00      	nop

08013778 <st_int8_fill>:
 8013778:	0203      	lsls	r3, r0, #8
 801377a:	468c      	mov	ip, r1
 801377c:	b510      	push	{r4, lr}
 801377e:	b2c4      	uxtb	r4, r0
 8013780:	b29b      	uxth	r3, r3
 8013782:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 8013786:	431c      	orrs	r4, r3
 8013788:	0403      	lsls	r3, r0, #16
 801378a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801378e:	431c      	orrs	r4, r3
 8013790:	078b      	lsls	r3, r1, #30
 8013792:	d007      	beq.n	80137a4 <st_int8_fill+0x2c>
 8013794:	b3a2      	cbz	r2, 8013800 <st_int8_fill+0x88>
 8013796:	f80c 0b01 	strb.w	r0, [ip], #1
 801379a:	f01c 0f03 	tst.w	ip, #3
 801379e:	f102 32ff 	add.w	r2, r2, #4294967295
 80137a2:	d1f7      	bne.n	8013794 <st_int8_fill+0x1c>
 80137a4:	0911      	lsrs	r1, r2, #4
 80137a6:	d041      	beq.n	801382c <st_int8_fill+0xb4>
 80137a8:	1e4b      	subs	r3, r1, #1
 80137aa:	2b04      	cmp	r3, #4
 80137ac:	d929      	bls.n	8013802 <st_int8_fill+0x8a>
 80137ae:	f01c 0f07 	tst.w	ip, #7
 80137b2:	d126      	bne.n	8013802 <st_int8_fill+0x8a>
 80137b4:	f10c 0310 	add.w	r3, ip, #16
 80137b8:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80137bc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80137c0:	e943 4404 	strd	r4, r4, [r3, #-16]
 80137c4:	e943 4402 	strd	r4, r4, [r3, #-8]
 80137c8:	3310      	adds	r3, #16
 80137ca:	428b      	cmp	r3, r1
 80137cc:	d1f8      	bne.n	80137c0 <st_int8_fill+0x48>
 80137ce:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80137d2:	44f4      	add	ip, lr
 80137d4:	f002 0203 	and.w	r2, r2, #3
 80137d8:	b15b      	cbz	r3, 80137f2 <st_int8_fill+0x7a>
 80137da:	1e59      	subs	r1, r3, #1
 80137dc:	f8cc 4000 	str.w	r4, [ip]
 80137e0:	d005      	beq.n	80137ee <st_int8_fill+0x76>
 80137e2:	2901      	cmp	r1, #1
 80137e4:	f8cc 4004 	str.w	r4, [ip, #4]
 80137e8:	bf18      	it	ne
 80137ea:	f8cc 4008 	strne.w	r4, [ip, #8]
 80137ee:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 80137f2:	b12a      	cbz	r2, 8013800 <st_int8_fill+0x88>
 80137f4:	4601      	mov	r1, r0
 80137f6:	4660      	mov	r0, ip
 80137f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137fc:	f003 bc71 	b.w	80170e2 <memset>
 8013800:	bd10      	pop	{r4, pc}
 8013802:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8013806:	4663      	mov	r3, ip
 8013808:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 801380c:	601c      	str	r4, [r3, #0]
 801380e:	3310      	adds	r3, #16
 8013810:	f843 4c0c 	str.w	r4, [r3, #-12]
 8013814:	f843 4c08 	str.w	r4, [r3, #-8]
 8013818:	f843 4c04 	str.w	r4, [r3, #-4]
 801381c:	4299      	cmp	r1, r3
 801381e:	d1f5      	bne.n	801380c <st_int8_fill+0x94>
 8013820:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8013824:	44f4      	add	ip, lr
 8013826:	f002 0203 	and.w	r2, r2, #3
 801382a:	e7d5      	b.n	80137d8 <st_int8_fill+0x60>
 801382c:	0893      	lsrs	r3, r2, #2
 801382e:	f002 0203 	and.w	r2, r2, #3
 8013832:	e7d1      	b.n	80137d8 <st_int8_fill+0x60>

08013834 <st_int8_copy>:
 8013834:	4288      	cmp	r0, r1
 8013836:	d010      	beq.n	801385a <st_int8_copy+0x26>
 8013838:	b17a      	cbz	r2, 801385a <st_int8_copy+0x26>
 801383a:	4288      	cmp	r0, r1
 801383c:	eb00 0302 	add.w	r3, r0, r2
 8013840:	d20c      	bcs.n	801385c <st_int8_copy+0x28>
 8013842:	428b      	cmp	r3, r1
 8013844:	d90a      	bls.n	801385c <st_int8_copy+0x28>
 8013846:	4283      	cmp	r3, r0
 8013848:	440a      	add	r2, r1
 801384a:	d906      	bls.n	801385a <st_int8_copy+0x26>
 801384c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8013850:	4283      	cmp	r3, r0
 8013852:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8013856:	d1f9      	bne.n	801384c <st_int8_copy+0x18>
 8013858:	4770      	bx	lr
 801385a:	4770      	bx	lr
 801385c:	078b      	lsls	r3, r1, #30
 801385e:	d102      	bne.n	8013866 <st_int8_copy+0x32>
 8013860:	e008      	b.n	8013874 <st_int8_copy+0x40>
 8013862:	2a00      	cmp	r2, #0
 8013864:	d04d      	beq.n	8013902 <st_int8_copy+0xce>
 8013866:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801386a:	3a01      	subs	r2, #1
 801386c:	f801 3b01 	strb.w	r3, [r1], #1
 8013870:	078b      	lsls	r3, r1, #30
 8013872:	d1f6      	bne.n	8013862 <st_int8_copy+0x2e>
 8013874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013878:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 801387c:	d05e      	beq.n	801393c <st_int8_copy+0x108>
 801387e:	ea40 0301 	orr.w	r3, r0, r1
 8013882:	075b      	lsls	r3, r3, #29
 8013884:	d13e      	bne.n	8013904 <st_int8_copy+0xd0>
 8013886:	f10e 33ff 	add.w	r3, lr, #4294967295
 801388a:	2b01      	cmp	r3, #1
 801388c:	d93a      	bls.n	8013904 <st_int8_copy+0xd0>
 801388e:	f100 0310 	add.w	r3, r0, #16
 8013892:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8013896:	f101 0c10 	add.w	ip, r1, #16
 801389a:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 801389e:	3310      	adds	r3, #16
 80138a0:	f10c 0c10 	add.w	ip, ip, #16
 80138a4:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 80138a8:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 80138ac:	4573      	cmp	r3, lr
 80138ae:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 80138b2:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 80138b6:	d1f2      	bne.n	801389e <st_int8_copy+0x6a>
 80138b8:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80138bc:	4421      	add	r1, r4
 80138be:	4420      	add	r0, r4
 80138c0:	f002 0203 	and.w	r2, r2, #3
 80138c4:	b16b      	cbz	r3, 80138e2 <st_int8_copy+0xae>
 80138c6:	6804      	ldr	r4, [r0, #0]
 80138c8:	600c      	str	r4, [r1, #0]
 80138ca:	1e5c      	subs	r4, r3, #1
 80138cc:	d005      	beq.n	80138da <st_int8_copy+0xa6>
 80138ce:	6845      	ldr	r5, [r0, #4]
 80138d0:	2c01      	cmp	r4, #1
 80138d2:	604d      	str	r5, [r1, #4]
 80138d4:	d001      	beq.n	80138da <st_int8_copy+0xa6>
 80138d6:	6884      	ldr	r4, [r0, #8]
 80138d8:	608c      	str	r4, [r1, #8]
 80138da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80138de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80138e2:	b162      	cbz	r2, 80138fe <st_int8_copy+0xca>
 80138e4:	f990 3000 	ldrsb.w	r3, [r0]
 80138e8:	3a01      	subs	r2, #1
 80138ea:	700b      	strb	r3, [r1, #0]
 80138ec:	d007      	beq.n	80138fe <st_int8_copy+0xca>
 80138ee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80138f2:	2a01      	cmp	r2, #1
 80138f4:	704b      	strb	r3, [r1, #1]
 80138f6:	d002      	beq.n	80138fe <st_int8_copy+0xca>
 80138f8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80138fc:	708b      	strb	r3, [r1, #2]
 80138fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013902:	4770      	bx	lr
 8013904:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8013908:	460b      	mov	r3, r1
 801390a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 801390e:	4684      	mov	ip, r0
 8013910:	f8dc 8000 	ldr.w	r8, [ip]
 8013914:	3310      	adds	r3, #16
 8013916:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801391a:	f10c 0c10 	add.w	ip, ip, #16
 801391e:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8013922:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8013926:	f843 8c10 	str.w	r8, [r3, #-16]
 801392a:	f843 7c0c 	str.w	r7, [r3, #-12]
 801392e:	f843 6c08 	str.w	r6, [r3, #-8]
 8013932:	f843 5c04 	str.w	r5, [r3, #-4]
 8013936:	459e      	cmp	lr, r3
 8013938:	d1ea      	bne.n	8013910 <st_int8_copy+0xdc>
 801393a:	e7bd      	b.n	80138b8 <st_int8_copy+0x84>
 801393c:	0893      	lsrs	r3, r2, #2
 801393e:	f002 0203 	and.w	r2, r2, #3
 8013942:	e7bf      	b.n	80138c4 <st_int8_copy+0x90>

08013944 <st_int8_reordered_no_shift_zero>:
 8013944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013946:	0897      	lsrs	r7, r2, #2
 8013948:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 801394c:	d02f      	beq.n	80139ae <st_int8_reordered_no_shift_zero+0x6a>
 801394e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8013952:	460c      	mov	r4, r1
 8013954:	f850 cb04 	ldr.w	ip, [r0], #4
 8013958:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 801395c:	fa2f fe8e 	sxtb16	lr, lr
 8013960:	fade fe03 	ssub16	lr, lr, r3
 8013964:	fa2f fc8c 	sxtb16	ip, ip
 8013968:	fadc fc03 	ssub16	ip, ip, r3
 801396c:	42a8      	cmp	r0, r5
 801396e:	f8c4 c000 	str.w	ip, [r4]
 8013972:	f8c4 e004 	str.w	lr, [r4, #4]
 8013976:	f104 0408 	add.w	r4, r4, #8
 801397a:	d1eb      	bne.n	8013954 <st_int8_reordered_no_shift_zero+0x10>
 801397c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8013980:	f012 0203 	ands.w	r2, r2, #3
 8013984:	d012      	beq.n	80139ac <st_int8_reordered_no_shift_zero+0x68>
 8013986:	f995 0000 	ldrsb.w	r0, [r5]
 801398a:	b273      	sxtb	r3, r6
 801398c:	3a01      	subs	r2, #1
 801398e:	eba0 0003 	sub.w	r0, r0, r3
 8013992:	8008      	strh	r0, [r1, #0]
 8013994:	d00a      	beq.n	80139ac <st_int8_reordered_no_shift_zero+0x68>
 8013996:	f995 0001 	ldrsb.w	r0, [r5, #1]
 801399a:	2a01      	cmp	r2, #1
 801399c:	eba0 0003 	sub.w	r0, r0, r3
 80139a0:	8048      	strh	r0, [r1, #2]
 80139a2:	d003      	beq.n	80139ac <st_int8_reordered_no_shift_zero+0x68>
 80139a4:	f995 2002 	ldrsb.w	r2, [r5, #2]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	808b      	strh	r3, [r1, #4]
 80139ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ae:	4605      	mov	r5, r0
 80139b0:	e7e6      	b.n	8013980 <st_int8_reordered_no_shift_zero+0x3c>
 80139b2:	bf00      	nop

080139b4 <st_int8_to16_dual>:
 80139b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b8:	4698      	mov	r8, r3
 80139ba:	085b      	lsrs	r3, r3, #1
 80139bc:	eb00 0c02 	add.w	ip, r0, r2
 80139c0:	f000 80b9 	beq.w	8013b36 <st_int8_to16_dual+0x182>
 80139c4:	f1a2 0710 	sub.w	r7, r2, #16
 80139c8:	1f16      	subs	r6, r2, #4
 80139ca:	2f00      	cmp	r7, #0
 80139cc:	f04f 0500 	mov.w	r5, #0
 80139d0:	db73      	blt.n	8013aba <st_int8_to16_dual+0x106>
 80139d2:	f8d0 e000 	ldr.w	lr, [r0]
 80139d6:	f8dc 4000 	ldr.w	r4, [ip]
 80139da:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80139de:	fa2f fe8e 	sxtb16	lr, lr
 80139e2:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80139e6:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80139ea:	fa2f f994 	sxtb16	r9, r4, ror #8
 80139ee:	f8c1 e000 	str.w	lr, [r1]
 80139f2:	f8c1 a008 	str.w	sl, [r1, #8]
 80139f6:	fa2f f484 	sxtb16	r4, r4
 80139fa:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80139fe:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8013a02:	f8c1 e00c 	str.w	lr, [r1, #12]
 8013a06:	604c      	str	r4, [r1, #4]
 8013a08:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8013a0c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013a10:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8013a14:	fa2f fe8e 	sxtb16	lr, lr
 8013a18:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8013a1c:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8013a20:	fa2f f994 	sxtb16	r9, r4, ror #8
 8013a24:	f8c1 e010 	str.w	lr, [r1, #16]
 8013a28:	f8c1 a018 	str.w	sl, [r1, #24]
 8013a2c:	fa2f f484 	sxtb16	r4, r4
 8013a30:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8013a34:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8013a38:	f8c1 e01c 	str.w	lr, [r1, #28]
 8013a3c:	614c      	str	r4, [r1, #20]
 8013a3e:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8013a42:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8013a46:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8013a4a:	fa2f fe8e 	sxtb16	lr, lr
 8013a4e:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8013a52:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8013a56:	fa2f f994 	sxtb16	r9, r4, ror #8
 8013a5a:	3010      	adds	r0, #16
 8013a5c:	f10c 0c10 	add.w	ip, ip, #16
 8013a60:	f8c1 e020 	str.w	lr, [r1, #32]
 8013a64:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 8013a68:	fa2f f484 	sxtb16	r4, r4
 8013a6c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8013a70:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8013a74:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 8013a78:	624c      	str	r4, [r1, #36]	; 0x24
 8013a7a:	f850 ec04 	ldr.w	lr, [r0, #-4]
 8013a7e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8013a82:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 8013a86:	fa2f fe8e 	sxtb16	lr, lr
 8013a8a:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 8013a8e:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8013a92:	fa2f fa94 	sxtb16	sl, r4, ror #8
 8013a96:	3510      	adds	r5, #16
 8013a98:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 8013a9c:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 8013aa0:	3140      	adds	r1, #64	; 0x40
 8013aa2:	42bd      	cmp	r5, r7
 8013aa4:	fa2f f484 	sxtb16	r4, r4
 8013aa8:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 8013aac:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8013ab0:	f841 ec04 	str.w	lr, [r1, #-4]
 8013ab4:	f841 4c0c 	str.w	r4, [r1, #-12]
 8013ab8:	dd8b      	ble.n	80139d2 <st_int8_to16_dual+0x1e>
 8013aba:	42ae      	cmp	r6, r5
 8013abc:	db1e      	blt.n	8013afc <st_int8_to16_dual+0x148>
 8013abe:	f850 4b04 	ldr.w	r4, [r0], #4
 8013ac2:	f85c eb04 	ldr.w	lr, [ip], #4
 8013ac6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 8013aca:	fa2f f484 	sxtb16	r4, r4
 8013ace:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8013ad2:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8013ad6:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 8013ada:	3504      	adds	r5, #4
 8013adc:	600c      	str	r4, [r1, #0]
 8013ade:	f8c1 9008 	str.w	r9, [r1, #8]
 8013ae2:	3110      	adds	r1, #16
 8013ae4:	42b5      	cmp	r5, r6
 8013ae6:	fa2f fe8e 	sxtb16	lr, lr
 8013aea:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 8013aee:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8013af2:	f841 4c04 	str.w	r4, [r1, #-4]
 8013af6:	f841 ec0c 	str.w	lr, [r1, #-12]
 8013afa:	dde0      	ble.n	8013abe <st_int8_to16_dual+0x10a>
 8013afc:	42aa      	cmp	r2, r5
 8013afe:	dd40      	ble.n	8013b82 <st_int8_to16_dual+0x1ce>
 8013b00:	1b55      	subs	r5, r2, r5
 8013b02:	1d0c      	adds	r4, r1, #4
 8013b04:	46e6      	mov	lr, ip
 8013b06:	eb00 0a05 	add.w	sl, r0, r5
 8013b0a:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8013b0e:	3404      	adds	r4, #4
 8013b10:	f824 9c08 	strh.w	r9, [r4, #-8]
 8013b14:	4550      	cmp	r0, sl
 8013b16:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 8013b1a:	f824 9c06 	strh.w	r9, [r4, #-6]
 8013b1e:	d1f4      	bne.n	8013b0a <st_int8_to16_dual+0x156>
 8013b20:	44ac      	add	ip, r5
 8013b22:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013b26:	3b01      	subs	r3, #1
 8013b28:	eb0a 0002 	add.w	r0, sl, r2
 8013b2c:	4494      	add	ip, r2
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	f47f af4a 	bne.w	80139ca <st_int8_to16_dual+0x16>
 8013b36:	f018 0f01 	tst.w	r8, #1
 8013b3a:	d020      	beq.n	8013b7e <st_int8_to16_dual+0x1ca>
 8013b3c:	1f17      	subs	r7, r2, #4
 8013b3e:	f04f 0400 	mov.w	r4, #0
 8013b42:	d411      	bmi.n	8013b68 <st_int8_to16_dual+0x1b4>
 8013b44:	f850 3b04 	ldr.w	r3, [r0], #4
 8013b48:	fa2f f593 	sxtb16	r5, r3, ror #8
 8013b4c:	3404      	adds	r4, #4
 8013b4e:	3108      	adds	r1, #8
 8013b50:	fa2f f383 	sxtb16	r3, r3
 8013b54:	42a7      	cmp	r7, r4
 8013b56:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8013b5a:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8013b5e:	f841 6c04 	str.w	r6, [r1, #-4]
 8013b62:	f841 3c08 	str.w	r3, [r1, #-8]
 8013b66:	daed      	bge.n	8013b44 <st_int8_to16_dual+0x190>
 8013b68:	42a2      	cmp	r2, r4
 8013b6a:	dd08      	ble.n	8013b7e <st_int8_to16_dual+0x1ca>
 8013b6c:	1b13      	subs	r3, r2, r4
 8013b6e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8013b72:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8013b76:	f821 2b02 	strh.w	r2, [r1], #2
 8013b7a:	428b      	cmp	r3, r1
 8013b7c:	d1f9      	bne.n	8013b72 <st_int8_to16_dual+0x1be>
 8013b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b82:	4682      	mov	sl, r0
 8013b84:	e7cf      	b.n	8013b26 <st_int8_to16_dual+0x172>
 8013b86:	bf00      	nop

08013b88 <ai_padding_opt_init>:
 8013b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b8c:	2700      	movs	r7, #0
 8013b8e:	9c07      	ldr	r4, [sp, #28]
 8013b90:	e9c0 7700 	strd	r7, r7, [r0]
 8013b94:	6087      	str	r7, [r0, #8]
 8013b96:	46b9      	mov	r9, r7
 8013b98:	690d      	ldr	r5, [r1, #16]
 8013b9a:	f1c5 0c00 	rsb	ip, r5, #0
 8013b9e:	689d      	ldr	r5, [r3, #8]
 8013ba0:	42bd      	cmp	r5, r7
 8013ba2:	dd1c      	ble.n	8013bde <ai_padding_opt_init+0x56>
 8013ba4:	463e      	mov	r6, r7
 8013ba6:	46be      	mov	lr, r7
 8013ba8:	e010      	b.n	8013bcc <ai_padding_opt_init+0x44>
 8013baa:	6895      	ldr	r5, [r2, #8]
 8013bac:	eba5 080c 	sub.w	r8, r5, ip
 8013bb0:	68a5      	ldr	r5, [r4, #8]
 8013bb2:	45a8      	cmp	r8, r5
 8013bb4:	da10      	bge.n	8013bd8 <ai_padding_opt_init+0x50>
 8013bb6:	f109 0901 	add.w	r9, r9, #1
 8013bba:	f8c0 9008 	str.w	r9, [r0, #8]
 8013bbe:	688d      	ldr	r5, [r1, #8]
 8013bc0:	f10e 0e01 	add.w	lr, lr, #1
 8013bc4:	44ac      	add	ip, r5
 8013bc6:	689d      	ldr	r5, [r3, #8]
 8013bc8:	4575      	cmp	r5, lr
 8013bca:	dd09      	ble.n	8013be0 <ai_padding_opt_init+0x58>
 8013bcc:	f1bc 0f00 	cmp.w	ip, #0
 8013bd0:	daeb      	bge.n	8013baa <ai_padding_opt_init+0x22>
 8013bd2:	3601      	adds	r6, #1
 8013bd4:	6006      	str	r6, [r0, #0]
 8013bd6:	e7f2      	b.n	8013bbe <ai_padding_opt_init+0x36>
 8013bd8:	3701      	adds	r7, #1
 8013bda:	6047      	str	r7, [r0, #4]
 8013bdc:	e7ef      	b.n	8013bbe <ai_padding_opt_init+0x36>
 8013bde:	463e      	mov	r6, r7
 8013be0:	2500      	movs	r5, #0
 8013be2:	f8c0 9014 	str.w	r9, [r0, #20]
 8013be6:	e9c0 6703 	strd	r6, r7, [r0, #12]
 8013bea:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8013bee:	6205      	str	r5, [r0, #32]
 8013bf0:	694e      	ldr	r6, [r1, #20]
 8013bf2:	f1c6 0c00 	rsb	ip, r6, #0
 8013bf6:	685e      	ldr	r6, [r3, #4]
 8013bf8:	42ae      	cmp	r6, r5
 8013bfa:	dd1c      	ble.n	8013c36 <ai_padding_opt_init+0xae>
 8013bfc:	46ae      	mov	lr, r5
 8013bfe:	e00f      	b.n	8013c20 <ai_padding_opt_init+0x98>
 8013c00:	6855      	ldr	r5, [r2, #4]
 8013c02:	6866      	ldr	r6, [r4, #4]
 8013c04:	eba5 050c 	sub.w	r5, r5, ip
 8013c08:	42b5      	cmp	r5, r6
 8013c0a:	da10      	bge.n	8013c2e <ai_padding_opt_init+0xa6>
 8013c0c:	6a05      	ldr	r5, [r0, #32]
 8013c0e:	3501      	adds	r5, #1
 8013c10:	6205      	str	r5, [r0, #32]
 8013c12:	68cd      	ldr	r5, [r1, #12]
 8013c14:	f10e 0e01 	add.w	lr, lr, #1
 8013c18:	44ac      	add	ip, r5
 8013c1a:	685d      	ldr	r5, [r3, #4]
 8013c1c:	4575      	cmp	r5, lr
 8013c1e:	dd0a      	ble.n	8013c36 <ai_padding_opt_init+0xae>
 8013c20:	f1bc 0f00 	cmp.w	ip, #0
 8013c24:	daec      	bge.n	8013c00 <ai_padding_opt_init+0x78>
 8013c26:	6985      	ldr	r5, [r0, #24]
 8013c28:	3501      	adds	r5, #1
 8013c2a:	6185      	str	r5, [r0, #24]
 8013c2c:	e7f1      	b.n	8013c12 <ai_padding_opt_init+0x8a>
 8013c2e:	69c5      	ldr	r5, [r0, #28]
 8013c30:	3501      	adds	r5, #1
 8013c32:	61c5      	str	r5, [r0, #28]
 8013c34:	e7ed      	b.n	8013c12 <ai_padding_opt_init+0x8a>
 8013c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c3a:	bf00      	nop

08013c3c <ai_padding_opt_phase1>:
 8013c3c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8013c40:	b923      	cbnz	r3, 8013c4c <ai_padding_opt_phase1+0x10>
 8013c42:	b17a      	cbz	r2, 8013c64 <ai_padding_opt_phase1+0x28>
 8013c44:	3a01      	subs	r2, #1
 8013c46:	8483      	strh	r3, [r0, #36]	; 0x24
 8013c48:	61c2      	str	r2, [r0, #28]
 8013c4a:	e004      	b.n	8013c56 <ai_padding_opt_phase1+0x1a>
 8013c4c:	b152      	cbz	r2, 8013c64 <ai_padding_opt_phase1+0x28>
 8013c4e:	2201      	movs	r2, #1
 8013c50:	3b01      	subs	r3, #1
 8013c52:	8482      	strh	r2, [r0, #36]	; 0x24
 8013c54:	6183      	str	r3, [r0, #24]
 8013c56:	68c3      	ldr	r3, [r0, #12]
 8013c58:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8013c5c:	6003      	str	r3, [r0, #0]
 8013c5e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8013c62:	4770      	bx	lr
 8013c64:	6a03      	ldr	r3, [r0, #32]
 8013c66:	2201      	movs	r2, #1
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	8482      	strh	r2, [r0, #36]	; 0x24
 8013c6c:	6203      	str	r3, [r0, #32]
 8013c6e:	e7f2      	b.n	8013c56 <ai_padding_opt_phase1+0x1a>

08013c70 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8013c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c74:	b09b      	sub	sp, #108	; 0x6c
 8013c76:	4683      	mov	fp, r0
 8013c78:	f89d 00ac 	ldrb.w	r0, [sp, #172]	; 0xac
 8013c7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	900b      	str	r0, [sp, #44]	; 0x2c
 8013c82:	9825      	ldr	r0, [sp, #148]	; 0x94
 8013c84:	bf18      	it	ne
 8013c86:	2301      	movne	r3, #1
 8013c88:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8013c8c:	910c      	str	r1, [sp, #48]	; 0x30
 8013c8e:	fb00 3303 	mla	r3, r0, r3, r3
 8013c92:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8013c94:	9414      	str	r4, [sp, #80]	; 0x50
 8013c96:	0864      	lsrs	r4, r4, #1
 8013c98:	4403      	add	r3, r0
 8013c9a:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8013c9e:	9205      	str	r2, [sp, #20]
 8013ca0:	9302      	str	r3, [sp, #8]
 8013ca2:	9006      	str	r0, [sp, #24]
 8013ca4:	9415      	str	r4, [sp, #84]	; 0x54
 8013ca6:	f000 81c6 	beq.w	8014036 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c6>
 8013caa:	460d      	mov	r5, r1
 8013cac:	4601      	mov	r1, r0
 8013cae:	f1a0 0310 	sub.w	r3, r0, #16
 8013cb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013cb6:	1ece      	subs	r6, r1, #3
 8013cb8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013cbc:	091b      	lsrs	r3, r3, #4
 8013cbe:	920e      	str	r2, [sp, #56]	; 0x38
 8013cc0:	960d      	str	r6, [sp, #52]	; 0x34
 8013cc2:	46d9      	mov	r9, fp
 8013cc4:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8013cca:	3604      	adds	r6, #4
 8013ccc:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8013cd0:	9601      	str	r6, [sp, #4]
 8013cd2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8013cd4:	9207      	str	r2, [sp, #28]
 8013cd6:	011a      	lsls	r2, r3, #4
 8013cd8:	3608      	adds	r6, #8
 8013cda:	9212      	str	r2, [sp, #72]	; 0x48
 8013cdc:	019a      	lsls	r2, r3, #6
 8013cde:	9604      	str	r6, [sp, #16]
 8013ce0:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8013ce4:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8013ce6:	9311      	str	r3, [sp, #68]	; 0x44
 8013ce8:	1f0b      	subs	r3, r1, #4
 8013cea:	3608      	adds	r6, #8
 8013cec:	9210      	str	r2, [sp, #64]	; 0x40
 8013cee:	9313      	str	r3, [sp, #76]	; 0x4c
 8013cf0:	9603      	str	r6, [sp, #12]
 8013cf2:	00e6      	lsls	r6, r4, #3
 8013cf4:	9616      	str	r6, [sp, #88]	; 0x58
 8013cf6:	9905      	ldr	r1, [sp, #20]
 8013cf8:	9c06      	ldr	r4, [sp, #24]
 8013cfa:	680b      	ldr	r3, [r1, #0]
 8013cfc:	3108      	adds	r1, #8
 8013cfe:	2c0f      	cmp	r4, #15
 8013d00:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013d02:	9319      	str	r3, [sp, #100]	; 0x64
 8013d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d06:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013d08:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013d0c:	9105      	str	r1, [sp, #20]
 8013d0e:	9219      	str	r2, [sp, #100]	; 0x64
 8013d10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013d12:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013d14:	f340 82c1 	ble.w	801429a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62a>
 8013d18:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013d1a:	464c      	mov	r4, r9
 8013d1c:	9e07      	ldr	r6, [sp, #28]
 8013d1e:	f8d7 e000 	ldr.w	lr, [r7]
 8013d22:	f8d5 a000 	ldr.w	sl, [r5]
 8013d26:	f8d4 c000 	ldr.w	ip, [r4]
 8013d2a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013d2e:	fb2c 330e 	smlad	r3, ip, lr, r3
 8013d32:	fb2c 000a 	smlad	r0, ip, sl, r0
 8013d36:	fb28 2e0e 	smlad	lr, r8, lr, r2
 8013d3a:	fb28 110a 	smlad	r1, r8, sl, r1
 8013d3e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8013d42:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8013d46:	68a2      	ldr	r2, [r4, #8]
 8013d48:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8013d4c:	fb22 330c 	smlad	r3, r2, ip, r3
 8013d50:	fb22 0008 	smlad	r0, r2, r8, r0
 8013d54:	fb2b ee0c 	smlad	lr, fp, ip, lr
 8013d58:	fb2b 1808 	smlad	r8, fp, r8, r1
 8013d5c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8013d60:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8013d64:	6922      	ldr	r2, [r4, #16]
 8013d66:	f8d4 a014 	ldr.w	sl, [r4, #20]
 8013d6a:	fb22 330c 	smlad	r3, r2, ip, r3
 8013d6e:	fb22 000b 	smlad	r0, r2, fp, r0
 8013d72:	fb2a ee0c 	smlad	lr, sl, ip, lr
 8013d76:	fb2a 8b0b 	smlad	fp, sl, fp, r8
 8013d7a:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8013d7e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8013d82:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8013d86:	69e1      	ldr	r1, [r4, #28]
 8013d88:	fb28 330c 	smlad	r3, r8, ip, r3
 8013d8c:	fb28 000a 	smlad	r0, r8, sl, r0
 8013d90:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8013d94:	fb21 ba0a 	smlad	sl, r1, sl, fp
 8013d98:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8013d9c:	6929      	ldr	r1, [r5, #16]
 8013d9e:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8013da2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013da4:	fb28 330e 	smlad	r3, r8, lr, r3
 8013da8:	fb28 0001 	smlad	r0, r8, r1, r0
 8013dac:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8013db0:	fb22 a101 	smlad	r1, r2, r1, sl
 8013db4:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8013db8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8013dbc:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8013dc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013dc2:	fb28 330e 	smlad	r3, r8, lr, r3
 8013dc6:	fb28 000a 	smlad	r0, r8, sl, r0
 8013dca:	fb22 cc0e 	smlad	ip, r2, lr, ip
 8013dce:	fb22 120a 	smlad	r2, r2, sl, r1
 8013dd2:	f8d7 e018 	ldr.w	lr, [r7, #24]
 8013dd6:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8013dda:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8013dde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013de0:	fb28 330e 	smlad	r3, r8, lr, r3
 8013de4:	fb28 080b 	smlad	r8, r8, fp, r0
 8013de8:	fb21 ce0e 	smlad	lr, r1, lr, ip
 8013dec:	fb21 210b 	smlad	r1, r1, fp, r2
 8013df0:	69fa      	ldr	r2, [r7, #28]
 8013df2:	3520      	adds	r5, #32
 8013df4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8013df6:	3720      	adds	r7, #32
 8013df8:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8013dfc:	3440      	adds	r4, #64	; 0x40
 8013dfe:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8013e02:	fb20 3302 	smlad	r3, r0, r2, r3
 8013e06:	fb20 800b 	smlad	r0, r0, fp, r8
 8013e0a:	fb2c e202 	smlad	r2, ip, r2, lr
 8013e0e:	fb2c 110b 	smlad	r1, ip, fp, r1
 8013e12:	42b5      	cmp	r5, r6
 8013e14:	d183      	bne.n	8013d1e <st_sssa8_ch_nn_mat_mult_kernel_opt+0xae>
 8013e16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8013e18:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8013e1c:	44a1      	add	r9, r4
 8013e1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013e20:	9d07      	ldr	r5, [sp, #28]
 8013e22:	9400      	str	r4, [sp, #0]
 8013e24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013e26:	45a3      	cmp	fp, r4
 8013e28:	f280 823f 	bge.w	80142aa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63a>
 8013e2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013e2e:	f8dd c000 	ldr.w	ip, [sp]
 8013e32:	eba4 040b 	sub.w	r4, r4, fp
 8013e36:	08a4      	lsrs	r4, r4, #2
 8013e38:	4626      	mov	r6, r4
 8013e3a:	940a      	str	r4, [sp, #40]	; 0x28
 8013e3c:	464c      	mov	r4, r9
 8013e3e:	3601      	adds	r6, #1
 8013e40:	00f7      	lsls	r7, r6, #3
 8013e42:	9609      	str	r6, [sp, #36]	; 0x24
 8013e44:	eb05 08c6 	add.w	r8, r5, r6, lsl #3
 8013e48:	9708      	str	r7, [sp, #32]
 8013e4a:	f8dc e000 	ldr.w	lr, [ip]
 8013e4e:	682f      	ldr	r7, [r5, #0]
 8013e50:	f8d4 a000 	ldr.w	sl, [r4]
 8013e54:	6866      	ldr	r6, [r4, #4]
 8013e56:	fb2a 330e 	smlad	r3, sl, lr, r3
 8013e5a:	fb2a 0007 	smlad	r0, sl, r7, r0
 8013e5e:	fb26 220e 	smlad	r2, r6, lr, r2
 8013e62:	fb26 1107 	smlad	r1, r6, r7, r1
 8013e66:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8013e6a:	3508      	adds	r5, #8
 8013e6c:	68a6      	ldr	r6, [r4, #8]
 8013e6e:	f10c 0c08 	add.w	ip, ip, #8
 8013e72:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8013e76:	3410      	adds	r4, #16
 8013e78:	f855 ac04 	ldr.w	sl, [r5, #-4]
 8013e7c:	fb26 3307 	smlad	r3, r6, r7, r3
 8013e80:	fb26 000a 	smlad	r0, r6, sl, r0
 8013e84:	fb2e 2207 	smlad	r2, lr, r7, r2
 8013e88:	fb2e 110a 	smlad	r1, lr, sl, r1
 8013e8c:	4545      	cmp	r5, r8
 8013e8e:	d1dc      	bne.n	8013e4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8013e90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013e92:	f10b 0b04 	add.w	fp, fp, #4
 8013e96:	9d08      	ldr	r5, [sp, #32]
 8013e98:	eb09 1904 	add.w	r9, r9, r4, lsl #4
 8013e9c:	9c00      	ldr	r4, [sp, #0]
 8013e9e:	442c      	add	r4, r5
 8013ea0:	9400      	str	r4, [sp, #0]
 8013ea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013ea4:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8013ea8:	9f06      	ldr	r7, [sp, #24]
 8013eaa:	455f      	cmp	r7, fp
 8013eac:	dd54      	ble.n	8013f58 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2e8>
 8013eae:	9c00      	ldr	r4, [sp, #0]
 8013eb0:	f9b9 6000 	ldrsh.w	r6, [r9]
 8013eb4:	f9b4 4000 	ldrsh.w	r4, [r4]
 8013eb8:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8013ebc:	fb04 3306 	mla	r3, r4, r6, r3
 8013ec0:	fb05 2204 	mla	r2, r5, r4, r2
 8013ec4:	f9b8 4000 	ldrsh.w	r4, [r8]
 8013ec8:	fb04 0006 	mla	r0, r4, r6, r0
 8013ecc:	fb05 1104 	mla	r1, r5, r4, r1
 8013ed0:	f10b 0401 	add.w	r4, fp, #1
 8013ed4:	42bc      	cmp	r4, r7
 8013ed6:	da3a      	bge.n	8013f4e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8013ed8:	9c00      	ldr	r4, [sp, #0]
 8013eda:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8013ede:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8013ee2:	f9b9 4006 	ldrsh.w	r4, [r9, #6]
 8013ee6:	fb05 3306 	mla	r3, r5, r6, r3
 8013eea:	fb05 2204 	mla	r2, r5, r4, r2
 8013eee:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013ef2:	fb05 1104 	mla	r1, r5, r4, r1
 8013ef6:	f10b 0402 	add.w	r4, fp, #2
 8013efa:	fb06 0005 	mla	r0, r6, r5, r0
 8013efe:	42a7      	cmp	r7, r4
 8013f00:	dd25      	ble.n	8013f4e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8013f02:	9c00      	ldr	r4, [sp, #0]
 8013f04:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8013f08:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8013f0c:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 8013f10:	fb06 3305 	mla	r3, r6, r5, r3
 8013f14:	fb05 2204 	mla	r2, r5, r4, r2
 8013f18:	f9b8 5004 	ldrsh.w	r5, [r8, #4]
 8013f1c:	fb05 1104 	mla	r1, r5, r4, r1
 8013f20:	f10b 0403 	add.w	r4, fp, #3
 8013f24:	fb06 0005 	mla	r0, r6, r5, r0
 8013f28:	42a7      	cmp	r7, r4
 8013f2a:	dd10      	ble.n	8013f4e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2de>
 8013f2c:	9c00      	ldr	r4, [sp, #0]
 8013f2e:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 8013f32:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 8013f36:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
 8013f3a:	fb04 3305 	mla	r3, r4, r5, r3
 8013f3e:	fb04 0006 	mla	r0, r4, r6, r0
 8013f42:	f9b9 400e 	ldrsh.w	r4, [r9, #14]
 8013f46:	fb05 2204 	mla	r2, r5, r4, r2
 8013f4a:	fb06 1104 	mla	r1, r6, r4, r1
 8013f4e:	9c06      	ldr	r4, [sp, #24]
 8013f50:	eba4 0b0b 	sub.w	fp, r4, fp
 8013f54:	eb09 098b 	add.w	r9, r9, fp, lsl #2
 8013f58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013f5a:	2c00      	cmp	r4, #0
 8013f5c:	f000 80f2 	beq.w	8014144 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4d4>
 8013f60:	9c01      	ldr	r4, [sp, #4]
 8013f62:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 8013f66:	2c15      	cmp	r4, #21
 8013f68:	f340 8147 	ble.w	80141fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58a>
 8013f6c:	1ea5      	subs	r5, r4, #2
 8013f6e:	2601      	movs	r6, #1
 8013f70:	3c01      	subs	r4, #1
 8013f72:	fa06 f505 	lsl.w	r5, r6, r5
 8013f76:	9e04      	ldr	r6, [sp, #16]
 8013f78:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8013f7c:	fb53 5306 	smmla	r3, r3, r6, r5
 8013f80:	fb50 5006 	smmla	r0, r0, r6, r5
 8013f84:	9d03      	ldr	r5, [sp, #12]
 8013f86:	4123      	asrs	r3, r4
 8013f88:	9e04      	ldr	r6, [sp, #16]
 8013f8a:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8013f8e:	1f35      	subs	r5, r6, #4
 8013f90:	9e03      	ldr	r6, [sp, #12]
 8013f92:	443b      	add	r3, r7
 8013f94:	3e04      	subs	r6, #4
 8013f96:	f303 0307 	ssat	r3, #8, r3
 8013f9a:	4120      	asrs	r0, r4
 8013f9c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8013f9e:	4438      	add	r0, r7
 8013fa0:	7023      	strb	r3, [r4, #0]
 8013fa2:	f300 0007 	ssat	r0, #8, r0
 8013fa6:	9b02      	ldr	r3, [sp, #8]
 8013fa8:	7018      	strb	r0, [r3, #0]
 8013faa:	4620      	mov	r0, r4
 8013fac:	9b01      	ldr	r3, [sp, #4]
 8013fae:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8013fb0:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8013fb4:	1904      	adds	r4, r0, r4
 8013fb6:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8013fb8:	9802      	ldr	r0, [sp, #8]
 8013fba:	2b15      	cmp	r3, #21
 8013fbc:	4438      	add	r0, r7
 8013fbe:	f340 8109 	ble.w	80141d4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x564>
 8013fc2:	682f      	ldr	r7, [r5, #0]
 8013fc4:	f04f 0c01 	mov.w	ip, #1
 8013fc8:	1e9d      	subs	r5, r3, #2
 8013fca:	3b01      	subs	r3, #1
 8013fcc:	6836      	ldr	r6, [r6, #0]
 8013fce:	fa0c f505 	lsl.w	r5, ip, r5
 8013fd2:	fb52 5207 	smmla	r2, r2, r7, r5
 8013fd6:	411a      	asrs	r2, r3
 8013fd8:	fb51 5107 	smmla	r1, r1, r7, r5
 8013fdc:	4432      	add	r2, r6
 8013fde:	f302 0207 	ssat	r2, #8, r2
 8013fe2:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8013fe4:	4119      	asrs	r1, r3
 8013fe6:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8013fe8:	4431      	add	r1, r6
 8013fea:	55ea      	strb	r2, [r5, r7]
 8013fec:	f301 0107 	ssat	r1, #8, r1
 8013ff0:	9b02      	ldr	r3, [sp, #8]
 8013ff2:	55d9      	strb	r1, [r3, r7]
 8013ff4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ff6:	18e3      	adds	r3, r4, r3
 8013ff8:	932c      	str	r3, [sp, #176]	; 0xb0
 8013ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8013ffc:	18c3      	adds	r3, r0, r3
 8013ffe:	9302      	str	r3, [sp, #8]
 8014000:	9b01      	ldr	r3, [sp, #4]
 8014002:	9a05      	ldr	r2, [sp, #20]
 8014004:	3304      	adds	r3, #4
 8014006:	9301      	str	r3, [sp, #4]
 8014008:	9b04      	ldr	r3, [sp, #16]
 801400a:	3308      	adds	r3, #8
 801400c:	9304      	str	r3, [sp, #16]
 801400e:	9b03      	ldr	r3, [sp, #12]
 8014010:	3308      	adds	r3, #8
 8014012:	9303      	str	r3, [sp, #12]
 8014014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014016:	4293      	cmp	r3, r2
 8014018:	f47f ae6d 	bne.w	8013cf6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x86>
 801401c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801401e:	46cb      	mov	fp, r9
 8014020:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014022:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014026:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014028:	9328      	str	r3, [sp, #160]	; 0xa0
 801402a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801402c:	4413      	add	r3, r2
 801402e:	9329      	str	r3, [sp, #164]	; 0xa4
 8014030:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014032:	4413      	add	r3, r2
 8014034:	932a      	str	r3, [sp, #168]	; 0xa8
 8014036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014038:	07db      	lsls	r3, r3, #31
 801403a:	f140 81b1 	bpl.w	80143a0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x730>
 801403e:	9a06      	ldr	r2, [sp, #24]
 8014040:	9b05      	ldr	r3, [sp, #20]
 8014042:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014044:	0896      	lsrs	r6, r2, #2
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801404c:	f000 81f6 	beq.w	801443c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x7cc>
 8014050:	00f7      	lsls	r7, r6, #3
 8014052:	4674      	mov	r4, lr
 8014054:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8014058:	4658      	mov	r0, fp
 801405a:	461a      	mov	r2, r3
 801405c:	f8d0 c000 	ldr.w	ip, [r0]
 8014060:	3008      	adds	r0, #8
 8014062:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8014066:	f8d1 8000 	ldr.w	r8, [r1]
 801406a:	fb2c 3308 	smlad	r3, ip, r8, r3
 801406e:	f8d4 8000 	ldr.w	r8, [r4]
 8014072:	fb2c 2208 	smlad	r2, ip, r8, r2
 8014076:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801407a:	3408      	adds	r4, #8
 801407c:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8014080:	3108      	adds	r1, #8
 8014082:	fb25 3308 	smlad	r3, r5, r8, r3
 8014086:	fb25 220c 	smlad	r2, r5, ip, r2
 801408a:	42b1      	cmp	r1, r6
 801408c:	d1e6      	bne.n	801405c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ec>
 801408e:	44bb      	add	fp, r7
 8014090:	44be      	add	lr, r7
 8014092:	9906      	ldr	r1, [sp, #24]
 8014094:	f011 0103 	ands.w	r1, r1, #3
 8014098:	d01f      	beq.n	80140da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 801409a:	f9bb 0000 	ldrsh.w	r0, [fp]
 801409e:	3901      	subs	r1, #1
 80140a0:	8834      	ldrh	r4, [r6, #0]
 80140a2:	b289      	uxth	r1, r1
 80140a4:	fb14 3300 	smlabb	r3, r4, r0, r3
 80140a8:	f8be 4000 	ldrh.w	r4, [lr]
 80140ac:	fb14 2200 	smlabb	r2, r4, r0, r2
 80140b0:	b199      	cbz	r1, 80140da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 80140b2:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 80140b6:	2901      	cmp	r1, #1
 80140b8:	8874      	ldrh	r4, [r6, #2]
 80140ba:	fb14 3300 	smlabb	r3, r4, r0, r3
 80140be:	f8be 4002 	ldrh.w	r4, [lr, #2]
 80140c2:	fb14 2200 	smlabb	r2, r4, r0, r2
 80140c6:	d008      	beq.n	80140da <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46a>
 80140c8:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 80140cc:	88b0      	ldrh	r0, [r6, #4]
 80140ce:	fb11 3300 	smlabb	r3, r1, r0, r3
 80140d2:	f8be 0004 	ldrh.w	r0, [lr, #4]
 80140d6:	fb11 2200 	smlabb	r2, r1, r0, r2
 80140da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80140dc:	f9b1 0000 	ldrsh.w	r0, [r1]
 80140e0:	2815      	cmp	r0, #21
 80140e2:	f340 816c 	ble.w	80143be <st_sssa8_ch_nn_mat_mult_kernel_opt+0x74e>
 80140e6:	1e85      	subs	r5, r0, #2
 80140e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80140ea:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80140ec:	3801      	subs	r0, #1
 80140ee:	2601      	movs	r6, #1
 80140f0:	6809      	ldr	r1, [r1, #0]
 80140f2:	6824      	ldr	r4, [r4, #0]
 80140f4:	40ae      	lsls	r6, r5
 80140f6:	fb53 6501 	smmla	r5, r3, r1, r6
 80140fa:	fb52 6301 	smmla	r3, r2, r1, r6
 80140fe:	fa45 f200 	asr.w	r2, r5, r0
 8014102:	4422      	add	r2, r4
 8014104:	f302 0207 	ssat	r2, #8, r2
 8014108:	4103      	asrs	r3, r0
 801410a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801410c:	4423      	add	r3, r4
 801410e:	f801 2b01 	strb.w	r2, [r1], #1
 8014112:	f303 0307 	ssat	r3, #8, r3
 8014116:	9a02      	ldr	r2, [sp, #8]
 8014118:	912c      	str	r1, [sp, #176]	; 0xb0
 801411a:	7013      	strb	r3, [r2, #0]
 801411c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801411e:	2b00      	cmp	r3, #0
 8014120:	f000 8142 	beq.w	80143a8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x738>
 8014124:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014126:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8014128:	3b01      	subs	r3, #1
 801412a:	441a      	add	r2, r3
 801412c:	922c      	str	r2, [sp, #176]	; 0xb0
 801412e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014130:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014132:	1c98      	adds	r0, r3, #2
 8014134:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014136:	fb02 0013 	mls	r0, r2, r3, r0
 801413a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801413c:	4418      	add	r0, r3
 801413e:	b01b      	add	sp, #108	; 0x6c
 8014140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014144:	9c01      	ldr	r4, [sp, #4]
 8014146:	f934 4c04 	ldrsh.w	r4, [r4, #-4]
 801414a:	2c15      	cmp	r4, #21
 801414c:	f340 8089 	ble.w	8014262 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f2>
 8014150:	9f04      	ldr	r7, [sp, #16]
 8014152:	1ea5      	subs	r5, r4, #2
 8014154:	2601      	movs	r6, #1
 8014156:	3c01      	subs	r4, #1
 8014158:	fa06 f505 	lsl.w	r5, r6, r5
 801415c:	f857 6c08 	ldr.w	r6, [r7, #-8]
 8014160:	fb53 5306 	smmla	r3, r3, r6, r5
 8014164:	fb50 5006 	smmla	r0, r0, r6, r5
 8014168:	9d03      	ldr	r5, [sp, #12]
 801416a:	4123      	asrs	r3, r4
 801416c:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8014170:	1f3d      	subs	r5, r7, #4
 8014172:	9f03      	ldr	r7, [sp, #12]
 8014174:	4433      	add	r3, r6
 8014176:	3f04      	subs	r7, #4
 8014178:	f303 0307 	ssat	r3, #8, r3
 801417c:	4120      	asrs	r0, r4
 801417e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8014180:	4430      	add	r0, r6
 8014182:	7023      	strb	r3, [r4, #0]
 8014184:	f300 0007 	ssat	r0, #8, r0
 8014188:	9b02      	ldr	r3, [sp, #8]
 801418a:	7018      	strb	r0, [r3, #0]
 801418c:	9b01      	ldr	r3, [sp, #4]
 801418e:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8014192:	2b15      	cmp	r3, #21
 8014194:	dd4f      	ble.n	8014236 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c6>
 8014196:	1e98      	subs	r0, r3, #2
 8014198:	2601      	movs	r6, #1
 801419a:	3b01      	subs	r3, #1
 801419c:	682c      	ldr	r4, [r5, #0]
 801419e:	fa06 f000 	lsl.w	r0, r6, r0
 80141a2:	683d      	ldr	r5, [r7, #0]
 80141a4:	fb52 0204 	smmla	r2, r2, r4, r0
 80141a8:	411a      	asrs	r2, r3
 80141aa:	fb51 0104 	smmla	r1, r1, r4, r0
 80141ae:	442a      	add	r2, r5
 80141b0:	f302 0207 	ssat	r2, #8, r2
 80141b4:	fa41 f303 	asr.w	r3, r1, r3
 80141b8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80141ba:	442b      	add	r3, r5
 80141bc:	704a      	strb	r2, [r1, #1]
 80141be:	f303 0307 	ssat	r3, #8, r3
 80141c2:	9a02      	ldr	r2, [sp, #8]
 80141c4:	7053      	strb	r3, [r2, #1]
 80141c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80141c8:	3302      	adds	r3, #2
 80141ca:	932c      	str	r3, [sp, #176]	; 0xb0
 80141cc:	9b02      	ldr	r3, [sp, #8]
 80141ce:	3302      	adds	r3, #2
 80141d0:	9302      	str	r3, [sp, #8]
 80141d2:	e715      	b.n	8014000 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x390>
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	dd6a      	ble.n	80142ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x63e>
 80141d8:	682d      	ldr	r5, [r5, #0]
 80141da:	0052      	lsls	r2, r2, #1
 80141dc:	6837      	ldr	r7, [r6, #0]
 80141de:	0049      	lsls	r1, r1, #1
 80141e0:	fb52 7205 	smmla	r2, r2, r5, r7
 80141e4:	fb51 7105 	smmla	r1, r1, r5, r7
 80141e8:	411a      	asrs	r2, r3
 80141ea:	f302 0207 	ssat	r2, #8, r2
 80141ee:	4119      	asrs	r1, r3
 80141f0:	7022      	strb	r2, [r4, #0]
 80141f2:	f301 0107 	ssat	r1, #8, r1
 80141f6:	7001      	strb	r1, [r0, #0]
 80141f8:	e6fc      	b.n	8013ff4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 80141fa:	2c00      	cmp	r4, #0
 80141fc:	f340 8092 	ble.w	8014324 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6b4>
 8014200:	9f04      	ldr	r7, [sp, #16]
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	9e03      	ldr	r6, [sp, #12]
 8014206:	0040      	lsls	r0, r0, #1
 8014208:	f857 5c08 	ldr.w	r5, [r7, #-8]
 801420c:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8014210:	fb53 6305 	smmla	r3, r3, r5, r6
 8014214:	fb50 6005 	smmla	r0, r0, r5, r6
 8014218:	9e03      	ldr	r6, [sp, #12]
 801421a:	4123      	asrs	r3, r4
 801421c:	1f3d      	subs	r5, r7, #4
 801421e:	3e04      	subs	r6, #4
 8014220:	f303 0307 	ssat	r3, #8, r3
 8014224:	4120      	asrs	r0, r4
 8014226:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8014228:	7023      	strb	r3, [r4, #0]
 801422a:	f300 0007 	ssat	r0, #8, r0
 801422e:	9b02      	ldr	r3, [sp, #8]
 8014230:	7018      	strb	r0, [r3, #0]
 8014232:	4620      	mov	r0, r4
 8014234:	e6ba      	b.n	8013fac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 8014236:	2b00      	cmp	r3, #0
 8014238:	f340 8097 	ble.w	801436a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x6fa>
 801423c:	6828      	ldr	r0, [r5, #0]
 801423e:	0052      	lsls	r2, r2, #1
 8014240:	683c      	ldr	r4, [r7, #0]
 8014242:	0049      	lsls	r1, r1, #1
 8014244:	fb52 4200 	smmla	r2, r2, r0, r4
 8014248:	fb51 4100 	smmla	r1, r1, r0, r4
 801424c:	411a      	asrs	r2, r3
 801424e:	f302 0207 	ssat	r2, #8, r2
 8014252:	4119      	asrs	r1, r3
 8014254:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8014256:	705a      	strb	r2, [r3, #1]
 8014258:	f301 0107 	ssat	r1, #8, r1
 801425c:	9b02      	ldr	r3, [sp, #8]
 801425e:	7059      	strb	r1, [r3, #1]
 8014260:	e7b1      	b.n	80141c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 8014262:	2c00      	cmp	r4, #0
 8014264:	dd3c      	ble.n	80142e0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x670>
 8014266:	9f04      	ldr	r7, [sp, #16]
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	9e03      	ldr	r6, [sp, #12]
 801426c:	0040      	lsls	r0, r0, #1
 801426e:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8014272:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8014276:	fb53 6305 	smmla	r3, r3, r5, r6
 801427a:	fb50 6005 	smmla	r0, r0, r5, r6
 801427e:	9e03      	ldr	r6, [sp, #12]
 8014280:	1f3d      	subs	r5, r7, #4
 8014282:	4123      	asrs	r3, r4
 8014284:	1f37      	subs	r7, r6, #4
 8014286:	f303 0307 	ssat	r3, #8, r3
 801428a:	4120      	asrs	r0, r4
 801428c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801428e:	7023      	strb	r3, [r4, #0]
 8014290:	f300 0007 	ssat	r0, #8, r0
 8014294:	9b02      	ldr	r3, [sp, #8]
 8014296:	7018      	strb	r0, [r3, #0]
 8014298:	e778      	b.n	801418c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 801429a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801429c:	f04f 0b00 	mov.w	fp, #0
 80142a0:	9400      	str	r4, [sp, #0]
 80142a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80142a4:	45a3      	cmp	fp, r4
 80142a6:	f6ff adc1 	blt.w	8013e2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 80142aa:	46a8      	mov	r8, r5
 80142ac:	e5fc      	b.n	8013ea8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 80142ae:	f1c3 0301 	rsb	r3, r3, #1
 80142b2:	409a      	lsls	r2, r3
 80142b4:	f302 021f 	ssat	r2, #32, r2
 80142b8:	682d      	ldr	r5, [r5, #0]
 80142ba:	fb52 f215 	smmulr	r2, r2, r5
 80142be:	fa01 f303 	lsl.w	r3, r1, r3
 80142c2:	f303 031f 	ssat	r3, #32, r3
 80142c6:	fb53 f515 	smmulr	r5, r3, r5
 80142ca:	6833      	ldr	r3, [r6, #0]
 80142cc:	4413      	add	r3, r2
 80142ce:	f303 0307 	ssat	r3, #8, r3
 80142d2:	7023      	strb	r3, [r4, #0]
 80142d4:	6833      	ldr	r3, [r6, #0]
 80142d6:	442b      	add	r3, r5
 80142d8:	f303 0307 	ssat	r3, #8, r3
 80142dc:	7003      	strb	r3, [r0, #0]
 80142de:	e689      	b.n	8013ff4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x384>
 80142e0:	f1c4 0501 	rsb	r5, r4, #1
 80142e4:	fa03 f405 	lsl.w	r4, r3, r5
 80142e8:	f304 041f 	ssat	r4, #32, r4
 80142ec:	9e04      	ldr	r6, [sp, #16]
 80142ee:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80142f2:	fb54 f413 	smmulr	r4, r4, r3
 80142f6:	40a8      	lsls	r0, r5
 80142f8:	f300 001f 	ssat	r0, #32, r0
 80142fc:	1f35      	subs	r5, r6, #4
 80142fe:	fb50 f013 	smmulr	r0, r0, r3
 8014302:	9e03      	ldr	r6, [sp, #12]
 8014304:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8014308:	4423      	add	r3, r4
 801430a:	f303 0307 	ssat	r3, #8, r3
 801430e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8014310:	1f37      	subs	r7, r6, #4
 8014312:	7023      	strb	r3, [r4, #0]
 8014314:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8014318:	4403      	add	r3, r0
 801431a:	f303 0307 	ssat	r3, #8, r3
 801431e:	9802      	ldr	r0, [sp, #8]
 8014320:	7003      	strb	r3, [r0, #0]
 8014322:	e733      	b.n	801418c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51c>
 8014324:	f1c4 0401 	rsb	r4, r4, #1
 8014328:	fa03 f604 	lsl.w	r6, r3, r4
 801432c:	f306 061f 	ssat	r6, #32, r6
 8014330:	9d04      	ldr	r5, [sp, #16]
 8014332:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8014336:	fb56 f613 	smmulr	r6, r6, r3
 801433a:	40a0      	lsls	r0, r4
 801433c:	f300 001f 	ssat	r0, #32, r0
 8014340:	3d04      	subs	r5, #4
 8014342:	fb50 f013 	smmulr	r0, r0, r3
 8014346:	9c03      	ldr	r4, [sp, #12]
 8014348:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801434c:	4433      	add	r3, r6
 801434e:	f303 0307 	ssat	r3, #8, r3
 8014352:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8014354:	7033      	strb	r3, [r6, #0]
 8014356:	1f26      	subs	r6, r4, #4
 8014358:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801435c:	4403      	add	r3, r0
 801435e:	f303 0307 	ssat	r3, #8, r3
 8014362:	9802      	ldr	r0, [sp, #8]
 8014364:	7003      	strb	r3, [r0, #0]
 8014366:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014368:	e620      	b.n	8013fac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x33c>
 801436a:	f1c3 0301 	rsb	r3, r3, #1
 801436e:	409a      	lsls	r2, r3
 8014370:	f302 021f 	ssat	r2, #32, r2
 8014374:	6828      	ldr	r0, [r5, #0]
 8014376:	fb52 f210 	smmulr	r2, r2, r0
 801437a:	fa01 f303 	lsl.w	r3, r1, r3
 801437e:	f303 031f 	ssat	r3, #32, r3
 8014382:	fb53 f010 	smmulr	r0, r3, r0
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	4413      	add	r3, r2
 801438a:	f303 0307 	ssat	r3, #8, r3
 801438e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8014390:	7053      	strb	r3, [r2, #1]
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	4403      	add	r3, r0
 8014396:	f303 0307 	ssat	r3, #8, r3
 801439a:	9a02      	ldr	r2, [sp, #8]
 801439c:	7053      	strb	r3, [r2, #1]
 801439e:	e712      	b.n	80141c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x556>
 80143a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f47f aec3 	bne.w	801412e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4be>
 80143a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80143aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80143ac:	9914      	ldr	r1, [sp, #80]	; 0x50
 80143ae:	3302      	adds	r3, #2
 80143b0:	1a50      	subs	r0, r2, r1
 80143b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143b4:	fb02 0003 	mla	r0, r2, r3, r0
 80143b8:	b01b      	add	sp, #108	; 0x6c
 80143ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143be:	2800      	cmp	r0, #0
 80143c0:	dd1b      	ble.n	80143fa <st_sssa8_ch_nn_mat_mult_kernel_opt+0x78a>
 80143c2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80143c4:	0052      	lsls	r2, r2, #1
 80143c6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80143c8:	005b      	lsls	r3, r3, #1
 80143ca:	6809      	ldr	r1, [r1, #0]
 80143cc:	6824      	ldr	r4, [r4, #0]
 80143ce:	fb53 4301 	smmla	r3, r3, r1, r4
 80143d2:	fb52 4101 	smmla	r1, r2, r1, r4
 80143d6:	fa43 f000 	asr.w	r0, r3, r0
 80143da:	f300 0307 	ssat	r3, #8, r0
 80143de:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80143e0:	f802 3b01 	strb.w	r3, [r2], #1
 80143e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80143e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143ea:	fa41 f303 	asr.w	r3, r1, r3
 80143ee:	f303 0307 	ssat	r3, #8, r3
 80143f2:	9902      	ldr	r1, [sp, #8]
 80143f4:	922c      	str	r2, [sp, #176]	; 0xb0
 80143f6:	700b      	strb	r3, [r1, #0]
 80143f8:	e690      	b.n	801411c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 80143fa:	f1c0 0001 	rsb	r0, r0, #1
 80143fe:	fa03 f100 	lsl.w	r1, r3, r0
 8014402:	f301 011f 	ssat	r1, #32, r1
 8014406:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014408:	681c      	ldr	r4, [r3, #0]
 801440a:	fb51 f114 	smmulr	r1, r1, r4
 801440e:	fa02 f300 	lsl.w	r3, r2, r0
 8014412:	f303 031f 	ssat	r3, #32, r3
 8014416:	fb53 f414 	smmulr	r4, r3, r4
 801441a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	440b      	add	r3, r1
 8014420:	f303 0307 	ssat	r3, #8, r3
 8014424:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8014426:	f802 3b01 	strb.w	r3, [r2], #1
 801442a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	4423      	add	r3, r4
 8014430:	f303 0307 	ssat	r3, #8, r3
 8014434:	9902      	ldr	r1, [sp, #8]
 8014436:	922c      	str	r2, [sp, #176]	; 0xb0
 8014438:	700b      	strb	r3, [r1, #0]
 801443a:	e66f      	b.n	801411c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ac>
 801443c:	460e      	mov	r6, r1
 801443e:	461a      	mov	r2, r3
 8014440:	e627      	b.n	8014092 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x422>
 8014442:	bf00      	nop

08014444 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8014444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014448:	b095      	sub	sp, #84	; 0x54
 801444a:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 801444e:	920d      	str	r2, [sp, #52]	; 0x34
 8014450:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 8014454:	9311      	str	r3, [sp, #68]	; 0x44
 8014456:	9204      	str	r2, [sp, #16]
 8014458:	0862      	lsrs	r2, r4, #1
 801445a:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 801445e:	940f      	str	r4, [sp, #60]	; 0x3c
 8014460:	9106      	str	r1, [sp, #24]
 8014462:	9310      	str	r3, [sp, #64]	; 0x40
 8014464:	920e      	str	r2, [sp, #56]	; 0x38
 8014466:	2b00      	cmp	r3, #0
 8014468:	f000 81fb 	beq.w	8014862 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x41e>
 801446c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801446e:	b29c      	uxth	r4, r3
 8014470:	2a00      	cmp	r2, #0
 8014472:	f000 8144 	beq.w	80146fe <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2ba>
 8014476:	1c61      	adds	r1, r4, #1
 8014478:	0064      	lsls	r4, r4, #1
 801447a:	3a01      	subs	r2, #1
 801447c:	9d04      	ldr	r5, [sp, #16]
 801447e:	9407      	str	r4, [sp, #28]
 8014480:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8014482:	b292      	uxth	r2, r2
 8014484:	f1a5 0310 	sub.w	r3, r5, #16
 8014488:	1861      	adds	r1, r4, r1
 801448a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801448c:	091b      	lsrs	r3, r3, #4
 801448e:	9102      	str	r1, [sp, #8]
 8014490:	f104 0110 	add.w	r1, r4, #16
 8014494:	3301      	adds	r3, #1
 8014496:	f104 0908 	add.w	r9, r4, #8
 801449a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801449e:	1ee9      	subs	r1, r5, #3
 80144a0:	9108      	str	r1, [sp, #32]
 80144a2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80144a4:	9209      	str	r2, [sp, #36]	; 0x24
 80144a6:	3104      	adds	r1, #4
 80144a8:	9100      	str	r1, [sp, #0]
 80144aa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80144ac:	3108      	adds	r1, #8
 80144ae:	9101      	str	r1, [sp, #4]
 80144b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80144b2:	f101 0b08 	add.w	fp, r1, #8
 80144b6:	9925      	ldr	r1, [sp, #148]	; 0x94
 80144b8:	3101      	adds	r1, #1
 80144ba:	9103      	str	r1, [sp, #12]
 80144bc:	9906      	ldr	r1, [sp, #24]
 80144be:	eb01 1743 	add.w	r7, r1, r3, lsl #5
 80144c2:	0119      	lsls	r1, r3, #4
 80144c4:	019b      	lsls	r3, r3, #6
 80144c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80144c8:	930a      	str	r3, [sp, #40]	; 0x28
 80144ca:	1f2b      	subs	r3, r5, #4
 80144cc:	930c      	str	r3, [sp, #48]	; 0x30
 80144ce:	f859 3c08 	ldr.w	r3, [r9, #-8]
 80144d2:	9904      	ldr	r1, [sp, #16]
 80144d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80144d6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80144da:	290f      	cmp	r1, #15
 80144dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80144de:	9313      	str	r3, [sp, #76]	; 0x4c
 80144e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144e2:	9c06      	ldr	r4, [sp, #24]
 80144e4:	f340 81ba 	ble.w	801485c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x418>
 80144e8:	4601      	mov	r1, r0
 80144ea:	f8d4 c000 	ldr.w	ip, [r4]
 80144ee:	680e      	ldr	r6, [r1, #0]
 80144f0:	fb26 220c 	smlad	r2, r6, ip, r2
 80144f4:	684d      	ldr	r5, [r1, #4]
 80144f6:	fb25 330c 	smlad	r3, r5, ip, r3
 80144fa:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80144fe:	688e      	ldr	r6, [r1, #8]
 8014500:	fb26 260c 	smlad	r6, r6, ip, r2
 8014504:	68cd      	ldr	r5, [r1, #12]
 8014506:	fb25 350c 	smlad	r5, r5, ip, r3
 801450a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801450e:	690a      	ldr	r2, [r1, #16]
 8014510:	fb22 660c 	smlad	r6, r2, ip, r6
 8014514:	694b      	ldr	r3, [r1, #20]
 8014516:	fb23 550c 	smlad	r5, r3, ip, r5
 801451a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801451e:	698a      	ldr	r2, [r1, #24]
 8014520:	fb22 620c 	smlad	r2, r2, ip, r6
 8014524:	69cb      	ldr	r3, [r1, #28]
 8014526:	fb23 530c 	smlad	r3, r3, ip, r5
 801452a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801452e:	6a0e      	ldr	r6, [r1, #32]
 8014530:	fb26 220c 	smlad	r2, r6, ip, r2
 8014534:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8014536:	fb25 330c 	smlad	r3, r5, ip, r3
 801453a:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801453e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8014540:	fb26 260c 	smlad	r6, r6, ip, r2
 8014544:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8014546:	fb25 350c 	smlad	r5, r5, ip, r3
 801454a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801454e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8014550:	fb22 660c 	smlad	r6, r2, ip, r6
 8014554:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014556:	fb23 550c 	smlad	r5, r3, ip, r5
 801455a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 801455e:	3140      	adds	r1, #64	; 0x40
 8014560:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8014564:	3420      	adds	r4, #32
 8014566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801456a:	fb22 620c 	smlad	r2, r2, ip, r6
 801456e:	fb23 530c 	smlad	r3, r3, ip, r5
 8014572:	42bc      	cmp	r4, r7
 8014574:	d1b9      	bne.n	80144ea <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 8014576:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014578:	463c      	mov	r4, r7
 801457a:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 801457e:	4408      	add	r0, r1
 8014580:	9908      	ldr	r1, [sp, #32]
 8014582:	458e      	cmp	lr, r1
 8014584:	da25      	bge.n	80145d2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 8014586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014588:	eba1 0a0e 	sub.w	sl, r1, lr
 801458c:	4601      	mov	r1, r0
 801458e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 8014592:	f10a 0501 	add.w	r5, sl, #1
 8014596:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 801459a:	9505      	str	r5, [sp, #20]
 801459c:	6825      	ldr	r5, [r4, #0]
 801459e:	680e      	ldr	r6, [r1, #0]
 80145a0:	fb26 2205 	smlad	r2, r6, r5, r2
 80145a4:	684e      	ldr	r6, [r1, #4]
 80145a6:	fb26 3505 	smlad	r5, r6, r5, r3
 80145aa:	6866      	ldr	r6, [r4, #4]
 80145ac:	3110      	adds	r1, #16
 80145ae:	f851 cc08 	ldr.w	ip, [r1, #-8]
 80145b2:	3408      	adds	r4, #8
 80145b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145b8:	fb2c 2206 	smlad	r2, ip, r6, r2
 80145bc:	fb23 5306 	smlad	r3, r3, r6, r5
 80145c0:	45a0      	cmp	r8, r4
 80145c2:	d1eb      	bne.n	801459c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x158>
 80145c4:	9905      	ldr	r1, [sp, #20]
 80145c6:	f10e 0e04 	add.w	lr, lr, #4
 80145ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80145ce:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 80145d2:	9e04      	ldr	r6, [sp, #16]
 80145d4:	4576      	cmp	r6, lr
 80145d6:	dd30      	ble.n	801463a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1f6>
 80145d8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80145dc:	8805      	ldrh	r5, [r0, #0]
 80145de:	fb15 2201 	smlabb	r2, r5, r1, r2
 80145e2:	8845      	ldrh	r5, [r0, #2]
 80145e4:	fb11 3305 	smlabb	r3, r1, r5, r3
 80145e8:	f10e 0101 	add.w	r1, lr, #1
 80145ec:	428e      	cmp	r6, r1
 80145ee:	dd1f      	ble.n	8014630 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 80145f0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80145f4:	8885      	ldrh	r5, [r0, #4]
 80145f6:	fb15 2201 	smlabb	r2, r5, r1, r2
 80145fa:	88c5      	ldrh	r5, [r0, #6]
 80145fc:	fb11 3305 	smlabb	r3, r1, r5, r3
 8014600:	f10e 0102 	add.w	r1, lr, #2
 8014604:	428e      	cmp	r6, r1
 8014606:	dd13      	ble.n	8014630 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 8014608:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801460c:	8905      	ldrh	r5, [r0, #8]
 801460e:	fb15 2201 	smlabb	r2, r5, r1, r2
 8014612:	8945      	ldrh	r5, [r0, #10]
 8014614:	fb11 3305 	smlabb	r3, r1, r5, r3
 8014618:	f10e 0103 	add.w	r1, lr, #3
 801461c:	428e      	cmp	r6, r1
 801461e:	dd07      	ble.n	8014630 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ec>
 8014620:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014624:	8984      	ldrh	r4, [r0, #12]
 8014626:	fb14 2201 	smlabb	r2, r4, r1, r2
 801462a:	89c4      	ldrh	r4, [r0, #14]
 801462c:	fb11 3304 	smlabb	r3, r1, r4, r3
 8014630:	9904      	ldr	r1, [sp, #16]
 8014632:	eba1 0e0e 	sub.w	lr, r1, lr
 8014636:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801463a:	9e00      	ldr	r6, [sp, #0]
 801463c:	f936 5c04 	ldrsh.w	r5, [r6, #-4]
 8014640:	2d15      	cmp	r5, #21
 8014642:	f340 80b4 	ble.w	80147ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x36a>
 8014646:	1eac      	subs	r4, r5, #2
 8014648:	2101      	movs	r1, #1
 801464a:	3d01      	subs	r5, #1
 801464c:	f1a6 0c02 	sub.w	ip, r6, #2
 8014650:	fa01 f404 	lsl.w	r4, r1, r4
 8014654:	9901      	ldr	r1, [sp, #4]
 8014656:	f1ab 0604 	sub.w	r6, fp, #4
 801465a:	f851 1c08 	ldr.w	r1, [r1, #-8]
 801465e:	fb52 4401 	smmla	r4, r2, r1, r4
 8014662:	9901      	ldr	r1, [sp, #4]
 8014664:	fa44 f505 	asr.w	r5, r4, r5
 8014668:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 801466c:	f1a1 0e04 	sub.w	lr, r1, #4
 8014670:	442c      	add	r4, r5
 8014672:	f304 0407 	ssat	r4, #8, r4
 8014676:	9a03      	ldr	r2, [sp, #12]
 8014678:	f802 4c01 	strb.w	r4, [r2, #-1]
 801467c:	f9bc 2000 	ldrsh.w	r2, [ip]
 8014680:	2a15      	cmp	r2, #21
 8014682:	f340 80b1 	ble.w	80147e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3a4>
 8014686:	1e94      	subs	r4, r2, #2
 8014688:	2501      	movs	r5, #1
 801468a:	3a01      	subs	r2, #1
 801468c:	6836      	ldr	r6, [r6, #0]
 801468e:	f8de 1000 	ldr.w	r1, [lr]
 8014692:	fa05 f404 	lsl.w	r4, r5, r4
 8014696:	fb53 4301 	smmla	r3, r3, r1, r4
 801469a:	4113      	asrs	r3, r2
 801469c:	4433      	add	r3, r6
 801469e:	f303 0307 	ssat	r3, #8, r3
 80146a2:	9a02      	ldr	r2, [sp, #8]
 80146a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80146a8:	9b00      	ldr	r3, [sp, #0]
 80146aa:	f109 0908 	add.w	r9, r9, #8
 80146ae:	9a07      	ldr	r2, [sp, #28]
 80146b0:	f10b 0b08 	add.w	fp, fp, #8
 80146b4:	3304      	adds	r3, #4
 80146b6:	9300      	str	r3, [sp, #0]
 80146b8:	9b01      	ldr	r3, [sp, #4]
 80146ba:	3308      	adds	r3, #8
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	9b02      	ldr	r3, [sp, #8]
 80146c0:	4413      	add	r3, r2
 80146c2:	9302      	str	r3, [sp, #8]
 80146c4:	9b03      	ldr	r3, [sp, #12]
 80146c6:	4413      	add	r3, r2
 80146c8:	9303      	str	r3, [sp, #12]
 80146ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146cc:	4599      	cmp	r9, r3
 80146ce:	f47f aefe 	bne.w	80144ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x8a>
 80146d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146d4:	4611      	mov	r1, r2
 80146d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80146d8:	fb03 2201 	mla	r2, r3, r1, r2
 80146dc:	9225      	str	r2, [sp, #148]	; 0x94
 80146de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80146e4:	920d      	str	r2, [sp, #52]	; 0x34
 80146e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80146ec:	9221      	str	r2, [sp, #132]	; 0x84
 80146ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80146f0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80146f4:	9222      	str	r2, [sp, #136]	; 0x88
 80146f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80146f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80146fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80146fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014700:	07db      	lsls	r3, r3, #31
 8014702:	d546      	bpl.n	8014792 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 8014704:	9a04      	ldr	r2, [sp, #16]
 8014706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014708:	0896      	lsrs	r6, r2, #2
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	d013      	beq.n	8014736 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f2>
 801470e:	00f7      	lsls	r7, r6, #3
 8014710:	9906      	ldr	r1, [sp, #24]
 8014712:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8014716:	6804      	ldr	r4, [r0, #0]
 8014718:	3008      	adds	r0, #8
 801471a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801471e:	680d      	ldr	r5, [r1, #0]
 8014720:	fb24 3305 	smlad	r3, r4, r5, r3
 8014724:	684c      	ldr	r4, [r1, #4]
 8014726:	3108      	adds	r1, #8
 8014728:	fb22 3304 	smlad	r3, r2, r4, r3
 801472c:	4286      	cmp	r6, r0
 801472e:	d1f2      	bne.n	8014716 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2d2>
 8014730:	9a06      	ldr	r2, [sp, #24]
 8014732:	443a      	add	r2, r7
 8014734:	9206      	str	r2, [sp, #24]
 8014736:	9a04      	ldr	r2, [sp, #16]
 8014738:	f012 0203 	ands.w	r2, r2, #3
 801473c:	d011      	beq.n	8014762 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 801473e:	3a01      	subs	r2, #1
 8014740:	9d06      	ldr	r5, [sp, #24]
 8014742:	8801      	ldrh	r1, [r0, #0]
 8014744:	882c      	ldrh	r4, [r5, #0]
 8014746:	b292      	uxth	r2, r2
 8014748:	fb14 3301 	smlabb	r3, r4, r1, r3
 801474c:	b14a      	cbz	r2, 8014762 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 801474e:	886c      	ldrh	r4, [r5, #2]
 8014750:	2a01      	cmp	r2, #1
 8014752:	8841      	ldrh	r1, [r0, #2]
 8014754:	fb14 3301 	smlabb	r3, r4, r1, r3
 8014758:	d003      	beq.n	8014762 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31e>
 801475a:	8881      	ldrh	r1, [r0, #4]
 801475c:	88aa      	ldrh	r2, [r5, #4]
 801475e:	fb11 3302 	smlabb	r3, r1, r2, r3
 8014762:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014764:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014768:	2a15      	cmp	r2, #21
 801476a:	f340 8084 	ble.w	8014876 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x432>
 801476e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8014770:	1e95      	subs	r5, r2, #2
 8014772:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014774:	3a01      	subs	r2, #1
 8014776:	6804      	ldr	r4, [r0, #0]
 8014778:	2001      	movs	r0, #1
 801477a:	6809      	ldr	r1, [r1, #0]
 801477c:	40a8      	lsls	r0, r5
 801477e:	fb53 0301 	smmla	r3, r3, r1, r0
 8014782:	4113      	asrs	r3, r2
 8014784:	4423      	add	r3, r4
 8014786:	f303 0307 	ssat	r3, #8, r3
 801478a:	9825      	ldr	r0, [sp, #148]	; 0x94
 801478c:	f800 3b01 	strb.w	r3, [r0], #1
 8014790:	9025      	str	r0, [sp, #148]	; 0x94
 8014792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014794:	2b00      	cmp	r3, #0
 8014796:	d066      	beq.n	8014866 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x422>
 8014798:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801479a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801479c:	fb03 f000 	mul.w	r0, r3, r0
 80147a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80147a2:	f1c0 0001 	rsb	r0, r0, #1
 80147a6:	4418      	add	r0, r3
 80147a8:	b015      	add	sp, #84	; 0x54
 80147aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ae:	2d00      	cmp	r5, #0
 80147b0:	dd29      	ble.n	8014806 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3c2>
 80147b2:	9e01      	ldr	r6, [sp, #4]
 80147b4:	0052      	lsls	r2, r2, #1
 80147b6:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 80147ba:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80147be:	f1a6 0e04 	sub.w	lr, r6, #4
 80147c2:	fb52 4201 	smmla	r2, r2, r1, r4
 80147c6:	fa42 f505 	asr.w	r5, r2, r5
 80147ca:	9a00      	ldr	r2, [sp, #0]
 80147cc:	f1ab 0604 	sub.w	r6, fp, #4
 80147d0:	f1a2 0c02 	sub.w	ip, r2, #2
 80147d4:	f305 0507 	ssat	r5, #8, r5
 80147d8:	9a03      	ldr	r2, [sp, #12]
 80147da:	f802 5c01 	strb.w	r5, [r2, #-1]
 80147de:	f9bc 2000 	ldrsh.w	r2, [ip]
 80147e2:	2a15      	cmp	r2, #21
 80147e4:	f73f af4f 	bgt.w	8014686 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x242>
 80147e8:	2a00      	cmp	r2, #0
 80147ea:	dd25      	ble.n	8014838 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3f4>
 80147ec:	f8de 1000 	ldr.w	r1, [lr]
 80147f0:	005b      	lsls	r3, r3, #1
 80147f2:	6834      	ldr	r4, [r6, #0]
 80147f4:	fb53 4301 	smmla	r3, r3, r1, r4
 80147f8:	4113      	asrs	r3, r2
 80147fa:	f303 0307 	ssat	r3, #8, r3
 80147fe:	9a02      	ldr	r2, [sp, #8]
 8014800:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014804:	e750      	b.n	80146a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 8014806:	f1c5 0501 	rsb	r5, r5, #1
 801480a:	f1a6 0c02 	sub.w	ip, r6, #2
 801480e:	40aa      	lsls	r2, r5
 8014810:	f302 021f 	ssat	r2, #32, r2
 8014814:	9901      	ldr	r1, [sp, #4]
 8014816:	f1a1 0e04 	sub.w	lr, r1, #4
 801481a:	f851 1c08 	ldr.w	r1, [r1, #-8]
 801481e:	fb52 f111 	smmulr	r1, r2, r1
 8014822:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 8014826:	f1ab 0604 	sub.w	r6, fp, #4
 801482a:	440a      	add	r2, r1
 801482c:	f302 0207 	ssat	r2, #8, r2
 8014830:	9903      	ldr	r1, [sp, #12]
 8014832:	f801 2c01 	strb.w	r2, [r1, #-1]
 8014836:	e721      	b.n	801467c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x238>
 8014838:	f1c2 0201 	rsb	r2, r2, #1
 801483c:	fa03 f202 	lsl.w	r2, r3, r2
 8014840:	f302 021f 	ssat	r2, #32, r2
 8014844:	f8de 3000 	ldr.w	r3, [lr]
 8014848:	fb52 f313 	smmulr	r3, r2, r3
 801484c:	6832      	ldr	r2, [r6, #0]
 801484e:	4413      	add	r3, r2
 8014850:	f303 0307 	ssat	r3, #8, r3
 8014854:	9a02      	ldr	r2, [sp, #8]
 8014856:	f802 3c01 	strb.w	r3, [r2, #-1]
 801485a:	e725      	b.n	80146a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x264>
 801485c:	f04f 0e00 	mov.w	lr, #0
 8014860:	e68e      	b.n	8014580 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x13c>
 8014862:	2401      	movs	r4, #1
 8014864:	e604      	b.n	8014470 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c>
 8014866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801486a:	1a98      	subs	r0, r3, r2
 801486c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801486e:	4418      	add	r0, r3
 8014870:	b015      	add	sp, #84	; 0x54
 8014872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014876:	2a00      	cmp	r2, #0
 8014878:	dd0e      	ble.n	8014898 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x454>
 801487a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801487c:	005b      	lsls	r3, r3, #1
 801487e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8014880:	6809      	ldr	r1, [r1, #0]
 8014882:	6800      	ldr	r0, [r0, #0]
 8014884:	fb53 0301 	smmla	r3, r3, r1, r0
 8014888:	4113      	asrs	r3, r2
 801488a:	f303 0307 	ssat	r3, #8, r3
 801488e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8014890:	f800 3b01 	strb.w	r3, [r0], #1
 8014894:	9025      	str	r0, [sp, #148]	; 0x94
 8014896:	e77c      	b.n	8014792 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 8014898:	f1c2 0201 	rsb	r2, r2, #1
 801489c:	4093      	lsls	r3, r2
 801489e:	f303 031f 	ssat	r3, #32, r3
 80148a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80148a4:	6812      	ldr	r2, [r2, #0]
 80148a6:	fb53 f312 	smmulr	r3, r3, r2
 80148aa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80148ac:	6812      	ldr	r2, [r2, #0]
 80148ae:	4413      	add	r3, r2
 80148b0:	f303 0307 	ssat	r3, #8, r3
 80148b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80148b6:	f802 3b01 	strb.w	r3, [r2], #1
 80148ba:	9225      	str	r2, [sp, #148]	; 0x94
 80148bc:	e769      	b.n	8014792 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x34e>
 80148be:	bf00      	nop

080148c0 <weights_2channels_prefetch>:
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	b087      	sub	sp, #28
 80148c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80148cc:	9302      	str	r3, [sp, #8]
 80148ce:	f340 80e6 	ble.w	8014a9e <weights_2channels_prefetch+0x1de>
 80148d2:	f1a8 0310 	sub.w	r3, r8, #16
 80148d6:	f1a8 0403 	sub.w	r4, r8, #3
 80148da:	f04f 0b00 	mov.w	fp, #0
 80148de:	091b      	lsrs	r3, r3, #4
 80148e0:	9403      	str	r4, [sp, #12]
 80148e2:	f1a8 0404 	sub.w	r4, r8, #4
 80148e6:	3301      	adds	r3, #1
 80148e8:	9405      	str	r4, [sp, #20]
 80148ea:	011c      	lsls	r4, r3, #4
 80148ec:	019b      	lsls	r3, r3, #6
 80148ee:	9400      	str	r4, [sp, #0]
 80148f0:	9304      	str	r3, [sp, #16]
 80148f2:	f1b8 0f0f 	cmp.w	r8, #15
 80148f6:	f340 80d7 	ble.w	8014aa8 <weights_2channels_prefetch+0x1e8>
 80148fa:	9b00      	ldr	r3, [sp, #0]
 80148fc:	460d      	mov	r5, r1
 80148fe:	18c6      	adds	r6, r0, r3
 8014900:	4613      	mov	r3, r2
 8014902:	6804      	ldr	r4, [r0, #0]
 8014904:	3010      	adds	r0, #16
 8014906:	682f      	ldr	r7, [r5, #0]
 8014908:	3340      	adds	r3, #64	; 0x40
 801490a:	fa2f fc84 	sxtb16	ip, r4
 801490e:	3510      	adds	r5, #16
 8014910:	f843 cc40 	str.w	ip, [r3, #-64]
 8014914:	ea4f 2434 	mov.w	r4, r4, ror #8
 8014918:	42b0      	cmp	r0, r6
 801491a:	fa2f f484 	sxtb16	r4, r4
 801491e:	f843 4c3c 	str.w	r4, [r3, #-60]
 8014922:	ea4f 2437 	mov.w	r4, r7, ror #8
 8014926:	fa2f f787 	sxtb16	r7, r7
 801492a:	fa2f f484 	sxtb16	r4, r4
 801492e:	f843 7c38 	str.w	r7, [r3, #-56]
 8014932:	f843 4c34 	str.w	r4, [r3, #-52]
 8014936:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 801493a:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 801493e:	ea4f 2c34 	mov.w	ip, r4, ror #8
 8014942:	fa2f f484 	sxtb16	r4, r4
 8014946:	fa2f fc8c 	sxtb16	ip, ip
 801494a:	f843 4c28 	str.w	r4, [r3, #-40]
 801494e:	f843 cc24 	str.w	ip, [r3, #-36]
 8014952:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8014956:	fa2f f787 	sxtb16	r7, r7
 801495a:	f843 7c30 	str.w	r7, [r3, #-48]
 801495e:	fa2f f78c 	sxtb16	r7, ip
 8014962:	f843 7c2c 	str.w	r7, [r3, #-44]
 8014966:	f850 7c08 	ldr.w	r7, [r0, #-8]
 801496a:	f855 4c08 	ldr.w	r4, [r5, #-8]
 801496e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 8014972:	fa2f f787 	sxtb16	r7, r7
 8014976:	fa2f fc8c 	sxtb16	ip, ip
 801497a:	f843 7c20 	str.w	r7, [r3, #-32]
 801497e:	ea4f 2734 	mov.w	r7, r4, ror #8
 8014982:	f843 cc1c 	str.w	ip, [r3, #-28]
 8014986:	fa2f f787 	sxtb16	r7, r7
 801498a:	fa2f f484 	sxtb16	r4, r4
 801498e:	f843 7c14 	str.w	r7, [r3, #-20]
 8014992:	f843 4c18 	str.w	r4, [r3, #-24]
 8014996:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801499a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801499e:	ea4f 2c37 	mov.w	ip, r7, ror #8
 80149a2:	fa2f f787 	sxtb16	r7, r7
 80149a6:	fa2f fc8c 	sxtb16	ip, ip
 80149aa:	f843 7c10 	str.w	r7, [r3, #-16]
 80149ae:	ea4f 2734 	mov.w	r7, r4, ror #8
 80149b2:	f843 cc0c 	str.w	ip, [r3, #-12]
 80149b6:	fa2f f787 	sxtb16	r7, r7
 80149ba:	fa2f f484 	sxtb16	r4, r4
 80149be:	f843 7c04 	str.w	r7, [r3, #-4]
 80149c2:	f843 4c08 	str.w	r4, [r3, #-8]
 80149c6:	d19c      	bne.n	8014902 <weights_2channels_prefetch+0x42>
 80149c8:	9b04      	ldr	r3, [sp, #16]
 80149ca:	441a      	add	r2, r3
 80149cc:	9b00      	ldr	r3, [sp, #0]
 80149ce:	4419      	add	r1, r3
 80149d0:	469e      	mov	lr, r3
 80149d2:	9b03      	ldr	r3, [sp, #12]
 80149d4:	4573      	cmp	r3, lr
 80149d6:	dd65      	ble.n	8014aa4 <weights_2channels_prefetch+0x1e4>
 80149d8:	9b05      	ldr	r3, [sp, #20]
 80149da:	4614      	mov	r4, r2
 80149dc:	460f      	mov	r7, r1
 80149de:	eba3 090e 	sub.w	r9, r3, lr
 80149e2:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80149e6:	f109 0a01 	add.w	sl, r9, #1
 80149ea:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80149ee:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 80149f2:	9301      	str	r3, [sp, #4]
 80149f4:	f856 3b04 	ldr.w	r3, [r6], #4
 80149f8:	3410      	adds	r4, #16
 80149fa:	f857 5b04 	ldr.w	r5, [r7], #4
 80149fe:	fa2f fc83 	sxtb16	ip, r3
 8014a02:	4286      	cmp	r6, r0
 8014a04:	ea4f 2333 	mov.w	r3, r3, ror #8
 8014a08:	fa2f f383 	sxtb16	r3, r3
 8014a0c:	f844 3c0c 	str.w	r3, [r4, #-12]
 8014a10:	ea4f 2335 	mov.w	r3, r5, ror #8
 8014a14:	fa2f f585 	sxtb16	r5, r5
 8014a18:	f844 cc10 	str.w	ip, [r4, #-16]
 8014a1c:	f844 5c08 	str.w	r5, [r4, #-8]
 8014a20:	fa2f f383 	sxtb16	r3, r3
 8014a24:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a28:	d1e4      	bne.n	80149f4 <weights_2channels_prefetch+0x134>
 8014a2a:	9b01      	ldr	r3, [sp, #4]
 8014a2c:	f10e 0e04 	add.w	lr, lr, #4
 8014a30:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 8014a34:	4419      	add	r1, r3
 8014a36:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8014a3a:	45f0      	cmp	r8, lr
 8014a3c:	dd29      	ble.n	8014a92 <weights_2channels_prefetch+0x1d2>
 8014a3e:	f990 3000 	ldrsb.w	r3, [r0]
 8014a42:	8013      	strh	r3, [r2, #0]
 8014a44:	f991 3000 	ldrsb.w	r3, [r1]
 8014a48:	8053      	strh	r3, [r2, #2]
 8014a4a:	f10e 0301 	add.w	r3, lr, #1
 8014a4e:	4598      	cmp	r8, r3
 8014a50:	dd19      	ble.n	8014a86 <weights_2channels_prefetch+0x1c6>
 8014a52:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8014a56:	8093      	strh	r3, [r2, #4]
 8014a58:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8014a5c:	80d3      	strh	r3, [r2, #6]
 8014a5e:	f10e 0302 	add.w	r3, lr, #2
 8014a62:	4598      	cmp	r8, r3
 8014a64:	dd0f      	ble.n	8014a86 <weights_2channels_prefetch+0x1c6>
 8014a66:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8014a6a:	8113      	strh	r3, [r2, #8]
 8014a6c:	f10e 0303 	add.w	r3, lr, #3
 8014a70:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8014a74:	4598      	cmp	r8, r3
 8014a76:	8154      	strh	r4, [r2, #10]
 8014a78:	dd05      	ble.n	8014a86 <weights_2channels_prefetch+0x1c6>
 8014a7a:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8014a7e:	8193      	strh	r3, [r2, #12]
 8014a80:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8014a84:	81d3      	strh	r3, [r2, #14]
 8014a86:	eba8 0e0e 	sub.w	lr, r8, lr
 8014a8a:	4470      	add	r0, lr
 8014a8c:	4471      	add	r1, lr
 8014a8e:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8014a92:	f10b 0b01 	add.w	fp, fp, #1
 8014a96:	9b02      	ldr	r3, [sp, #8]
 8014a98:	455b      	cmp	r3, fp
 8014a9a:	f47f af2a 	bne.w	80148f2 <weights_2channels_prefetch+0x32>
 8014a9e:	b007      	add	sp, #28
 8014aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	e7c8      	b.n	8014a3a <weights_2channels_prefetch+0x17a>
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	f04f 0e00 	mov.w	lr, #0
 8014aae:	e790      	b.n	80149d2 <weights_2channels_prefetch+0x112>

08014ab0 <st_sssa8_ch_fullW_prefetch>:
 8014ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	b087      	sub	sp, #28
 8014ab6:	461c      	mov	r4, r3
 8014ab8:	4680      	mov	r8, r0
 8014aba:	4613      	mov	r3, r2
 8014abc:	104f      	asrs	r7, r1, #1
 8014abe:	4620      	mov	r0, r4
 8014ac0:	9103      	str	r1, [sp, #12]
 8014ac2:	9704      	str	r7, [sp, #16]
 8014ac4:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 8014ac8:	eb08 0402 	add.w	r4, r8, r2
 8014acc:	d020      	beq.n	8014b10 <st_sssa8_ch_fullW_prefetch+0x60>
 8014ace:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ad0:	4646      	mov	r6, r8
 8014ad2:	4655      	mov	r5, sl
 8014ad4:	f8cd 8014 	str.w	r8, [sp, #20]
 8014ad8:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8014adc:	4680      	mov	r8, r0
 8014ade:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8014ae2:	469a      	mov	sl, r3
 8014ae4:	462a      	mov	r2, r5
 8014ae6:	4621      	mov	r1, r4
 8014ae8:	4630      	mov	r0, r6
 8014aea:	4653      	mov	r3, sl
 8014aec:	f8cd 8000 	str.w	r8, [sp]
 8014af0:	445d      	add	r5, fp
 8014af2:	f7ff fee5 	bl	80148c0 <weights_2channels_prefetch>
 8014af6:	3f01      	subs	r7, #1
 8014af8:	444c      	add	r4, r9
 8014afa:	444e      	add	r6, r9
 8014afc:	d1f2      	bne.n	8014ae4 <st_sssa8_ch_fullW_prefetch+0x34>
 8014afe:	9b04      	ldr	r3, [sp, #16]
 8014b00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014b04:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8014b08:	fb03 8809 	mla	r8, r3, r9, r8
 8014b0c:	fb03 aa0b 	mla	sl, r3, fp, sl
 8014b10:	9b03      	ldr	r3, [sp, #12]
 8014b12:	07db      	lsls	r3, r3, #31
 8014b14:	d509      	bpl.n	8014b2a <st_sssa8_ch_fullW_prefetch+0x7a>
 8014b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	dd06      	ble.n	8014b2a <st_sssa8_ch_fullW_prefetch+0x7a>
 8014b1c:	4443      	add	r3, r8
 8014b1e:	f918 2b01 	ldrsb.w	r2, [r8], #1
 8014b22:	4543      	cmp	r3, r8
 8014b24:	f82a 2b02 	strh.w	r2, [sl], #2
 8014b28:	d1f9      	bne.n	8014b1e <st_sssa8_ch_fullW_prefetch+0x6e>
 8014b2a:	b007      	add	sp, #28
 8014b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b30 <st_sssa8_ch_nn_mat_mult_nt_t>:
 8014b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b34:	b0bf      	sub	sp, #252	; 0xfc
 8014b36:	902d      	str	r0, [sp, #180]	; 0xb4
 8014b38:	9328      	str	r3, [sp, #160]	; 0xa0
 8014b3a:	9134      	str	r1, [sp, #208]	; 0xd0
 8014b3c:	923d      	str	r2, [sp, #244]	; 0xf4
 8014b3e:	e9dd 3052 	ldrd	r3, r0, [sp, #328]	; 0x148
 8014b42:	2800      	cmp	r0, #0
 8014b44:	bf18      	it	ne
 8014b46:	4603      	movne	r3, r0
 8014b48:	9352      	str	r3, [sp, #328]	; 0x148
 8014b4a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	f340 827e 	ble.w	801504e <st_sssa8_ch_nn_mat_mult_nt_t+0x51e>
 8014b52:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8014b54:	4694      	mov	ip, r2
 8014b56:	f1a3 0210 	sub.w	r2, r3, #16
 8014b5a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8014b5c:	3b02      	subs	r3, #2
 8014b5e:	0912      	lsrs	r2, r2, #4
 8014b60:	085e      	lsrs	r6, r3, #1
 8014b62:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8014b64:	3201      	adds	r2, #1
 8014b66:	091b      	lsrs	r3, r3, #4
 8014b68:	963c      	str	r6, [sp, #240]	; 0xf0
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	9310      	str	r3, [sp, #64]	; 0x40
 8014b6e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8014b70:	f3c3 0481 	ubfx	r4, r3, #2, #2
 8014b74:	f003 0503 	and.w	r5, r3, #3
 8014b78:	109f      	asrs	r7, r3, #2
 8014b7a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8014b7c:	9411      	str	r4, [sp, #68]	; 0x44
 8014b7e:	f013 0302 	ands.w	r3, r3, #2
 8014b82:	9504      	str	r5, [sp, #16]
 8014b84:	9736      	str	r7, [sp, #216]	; 0xd8
 8014b86:	930c      	str	r3, [sp, #48]	; 0x30
 8014b88:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8014b8a:	f103 0304 	add.w	r3, r3, #4
 8014b8e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8014b92:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 8014b94:	9330      	str	r3, [sp, #192]	; 0xc0
 8014b96:	f06f 0303 	mvn.w	r3, #3
 8014b9a:	eba3 0306 	sub.w	r3, r3, r6
 8014b9e:	9302      	str	r3, [sp, #8]
 8014ba0:	f1a6 030f 	sub.w	r3, r6, #15
 8014ba4:	9337      	str	r3, [sp, #220]	; 0xdc
 8014ba6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8014ba8:	f003 0301 	and.w	r3, r3, #1
 8014bac:	931b      	str	r3, [sp, #108]	; 0x6c
 8014bae:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8014bb0:	ea4f 0363 	mov.w	r3, r3, asr #1
 8014bb4:	932f      	str	r3, [sp, #188]	; 0xbc
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	f100 30ff 	add.w	r0, r0, #4294967295
 8014bbc:	9015      	str	r0, [sp, #84]	; 0x54
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f104 34ff 	add.w	r4, r4, #4294967295
 8014bc4:	9414      	str	r4, [sp, #80]	; 0x50
 8014bc6:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8014bc8:	f004 0401 	and.w	r4, r4, #1
 8014bcc:	942e      	str	r4, [sp, #184]	; 0xb8
 8014bce:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 8014bd0:	bf08      	it	eq
 8014bd2:	2401      	moveq	r4, #1
 8014bd4:	943b      	str	r4, [sp, #236]	; 0xec
 8014bd6:	0074      	lsls	r4, r6, #1
 8014bd8:	942c      	str	r4, [sp, #176]	; 0xb0
 8014bda:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 8014bdc:	0064      	lsls	r4, r4, #1
 8014bde:	9435      	str	r4, [sp, #212]	; 0xd4
 8014be0:	00b4      	lsls	r4, r6, #2
 8014be2:	9433      	str	r4, [sp, #204]	; 0xcc
 8014be4:	1f34      	subs	r4, r6, #4
 8014be6:	9413      	str	r4, [sp, #76]	; 0x4c
 8014be8:	9c49      	ldr	r4, [sp, #292]	; 0x124
 8014bea:	9427      	str	r4, [sp, #156]	; 0x9c
 8014bec:	9c48      	ldr	r4, [sp, #288]	; 0x120
 8014bee:	9129      	str	r1, [sp, #164]	; 0xa4
 8014bf0:	3404      	adds	r4, #4
 8014bf2:	9426      	str	r4, [sp, #152]	; 0x98
 8014bf4:	9c51      	ldr	r4, [sp, #324]	; 0x144
 8014bf6:	3404      	adds	r4, #4
 8014bf8:	9425      	str	r4, [sp, #148]	; 0x94
 8014bfa:	4664      	mov	r4, ip
 8014bfc:	3404      	adds	r4, #4
 8014bfe:	9424      	str	r4, [sp, #144]	; 0x90
 8014c00:	0114      	lsls	r4, r2, #4
 8014c02:	0192      	lsls	r2, r2, #6
 8014c04:	9432      	str	r4, [sp, #200]	; 0xc8
 8014c06:	9238      	str	r2, [sp, #224]	; 0xe0
 8014c08:	013a      	lsls	r2, r7, #4
 8014c0a:	923a      	str	r2, [sp, #232]	; 0xe8
 8014c0c:	1e6a      	subs	r2, r5, #1
 8014c0e:	921c      	str	r2, [sp, #112]	; 0x70
 8014c10:	1eaa      	subs	r2, r5, #2
 8014c12:	9220      	str	r2, [sp, #128]	; 0x80
 8014c14:	011a      	lsls	r2, r3, #4
 8014c16:	019b      	lsls	r3, r3, #6
 8014c18:	9216      	str	r2, [sp, #88]	; 0x58
 8014c1a:	9331      	str	r3, [sp, #196]	; 0xc4
 8014c1c:	0103      	lsls	r3, r0, #4
 8014c1e:	9318      	str	r3, [sp, #96]	; 0x60
 8014c20:	0083      	lsls	r3, r0, #2
 8014c22:	9317      	str	r3, [sp, #92]	; 0x5c
 8014c24:	1ef3      	subs	r3, r6, #3
 8014c26:	9339      	str	r3, [sp, #228]	; 0xe4
 8014c28:	4633      	mov	r3, r6
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	9319      	str	r3, [sp, #100]	; 0x64
 8014c2e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014c30:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014c34:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8014c38:	2b15      	cmp	r3, #21
 8014c3a:	931e      	str	r3, [sp, #120]	; 0x78
 8014c3c:	921a      	str	r2, [sp, #104]	; 0x68
 8014c3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014c40:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014c44:	6812      	ldr	r2, [r2, #0]
 8014c46:	9109      	str	r1, [sp, #36]	; 0x24
 8014c48:	920d      	str	r2, [sp, #52]	; 0x34
 8014c4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014c4c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014c50:	6812      	ldr	r2, [r2, #0]
 8014c52:	910e      	str	r1, [sp, #56]	; 0x38
 8014c54:	920f      	str	r2, [sp, #60]	; 0x3c
 8014c56:	f300 857e 	bgt.w	8015756 <st_sssa8_ch_nn_mat_mult_nt_t+0xc26>
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	bfcc      	ite	gt
 8014c5e:	2300      	movgt	r3, #0
 8014c60:	2301      	movle	r3, #1
 8014c62:	425b      	negs	r3, r3
 8014c64:	9308      	str	r3, [sp, #32]
 8014c66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014c68:	2b15      	cmp	r3, #21
 8014c6a:	f300 8444 	bgt.w	80154f6 <st_sssa8_ch_nn_mat_mult_nt_t+0x9c6>
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	bfcc      	ite	gt
 8014c72:	2300      	movgt	r3, #0
 8014c74:	2301      	movle	r3, #1
 8014c76:	425b      	negs	r3, r3
 8014c78:	9307      	str	r3, [sp, #28]
 8014c7a:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f000 8440 	beq.w	8015502 <st_sssa8_ch_nn_mat_mult_nt_t+0x9d2>
 8014c82:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f040 8516 	bne.w	80156b6 <st_sssa8_ch_nn_mat_mult_nt_t+0xb86>
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014c90:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014c94:	18cb      	adds	r3, r1, r3
 8014c96:	930a      	str	r3, [sp, #40]	; 0x28
 8014c98:	6803      	ldr	r3, [r0, #0]
 8014c9a:	18d3      	adds	r3, r2, r3
 8014c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	f000 831e 	beq.w	80152e2 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b2>
 8014ca6:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8014ca8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014caa:	3303      	adds	r3, #3
 8014cac:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8014cae:	18d3      	adds	r3, r2, r3
 8014cb0:	9303      	str	r3, [sp, #12]
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	f000 831b 	beq.w	80152ee <st_sssa8_ch_nn_mat_mult_nt_t+0x7be>
 8014cb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014cba:	2401      	movs	r4, #1
 8014cbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014cbe:	1e93      	subs	r3, r2, #2
 8014cc0:	9005      	str	r0, [sp, #20]
 8014cc2:	fa04 f303 	lsl.w	r3, r4, r3
 8014cc6:	9322      	str	r3, [sp, #136]	; 0x88
 8014cc8:	1e8b      	subs	r3, r1, #2
 8014cca:	fa04 f303 	lsl.w	r3, r4, r3
 8014cce:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8014cd0:	9321      	str	r3, [sp, #132]	; 0x84
 8014cd2:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8014cd4:	4423      	add	r3, r4
 8014cd6:	9312      	str	r3, [sp, #72]	; 0x48
 8014cd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8014cde:	931d      	str	r3, [sp, #116]	; 0x74
 8014ce0:	1e4b      	subs	r3, r1, #1
 8014ce2:	9323      	str	r3, [sp, #140]	; 0x8c
 8014ce4:	f1c1 0301 	rsb	r3, r1, #1
 8014ce8:	932a      	str	r3, [sp, #168]	; 0xa8
 8014cea:	1e53      	subs	r3, r2, #1
 8014cec:	931f      	str	r3, [sp, #124]	; 0x7c
 8014cee:	f1c2 0301 	rsb	r3, r2, #1
 8014cf2:	932b      	str	r3, [sp, #172]	; 0xac
 8014cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	f000 82ec 	beq.w	80152d4 <st_sssa8_ch_nn_mat_mult_nt_t+0x7a4>
 8014cfc:	9b01      	ldr	r3, [sp, #4]
 8014cfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d02:	189f      	adds	r7, r3, r2
 8014d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d06:	9e52      	ldr	r6, [sp, #328]	; 0x148
 8014d08:	4604      	mov	r4, r0
 8014d0a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8014d0e:	4613      	mov	r3, r2
 8014d10:	9902      	ldr	r1, [sp, #8]
 8014d12:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8014d16:	f851 c007 	ldr.w	ip, [r1, r7]
 8014d1a:	eb01 0e07 	add.w	lr, r1, r7
 8014d1e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8014d22:	6831      	ldr	r1, [r6, #0]
 8014d24:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8014d28:	fa2f f58c 	sxtb16	r5, ip
 8014d2c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8014d30:	fb25 0001 	smlad	r0, r5, r1, r0
 8014d34:	fb2c 000a 	smlad	r0, ip, sl, r0
 8014d38:	fb25 250b 	smlad	r5, r5, fp, r2
 8014d3c:	fb2c 5509 	smlad	r5, ip, r9, r5
 8014d40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014d44:	fa2f fc82 	sxtb16	ip, r2
 8014d48:	fa2f f292 	sxtb16	r2, r2, ror #8
 8014d4c:	fb2c 4101 	smlad	r1, ip, r1, r4
 8014d50:	fb2c 330b 	smlad	r3, ip, fp, r3
 8014d54:	fb22 110a 	smlad	r1, r2, sl, r1
 8014d58:	f8d6 a010 	ldr.w	sl, [r6, #16]
 8014d5c:	6974      	ldr	r4, [r6, #20]
 8014d5e:	fb22 3909 	smlad	r9, r2, r9, r3
 8014d62:	f8de 3004 	ldr.w	r3, [lr, #4]
 8014d66:	69b2      	ldr	r2, [r6, #24]
 8014d68:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 8014d6c:	fa2f fc83 	sxtb16	ip, r3
 8014d70:	fa2f f393 	sxtb16	r3, r3, ror #8
 8014d74:	fb2c 000a 	smlad	r0, ip, sl, r0
 8014d78:	fb23 0004 	smlad	r0, r3, r4, r0
 8014d7c:	fb2c 5c02 	smlad	ip, ip, r2, r5
 8014d80:	fb23 cc0b 	smlad	ip, r3, fp, ip
 8014d84:	683d      	ldr	r5, [r7, #0]
 8014d86:	fa2f f385 	sxtb16	r3, r5
 8014d8a:	fa2f f595 	sxtb16	r5, r5, ror #8
 8014d8e:	fb23 1a0a 	smlad	sl, r3, sl, r1
 8014d92:	fb23 9902 	smlad	r9, r3, r2, r9
 8014d96:	fb25 aa04 	smlad	sl, r5, r4, sl
 8014d9a:	6a34      	ldr	r4, [r6, #32]
 8014d9c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014d9e:	fb25 9b0b 	smlad	fp, r5, fp, r9
 8014da2:	f8de 1008 	ldr.w	r1, [lr, #8]
 8014da6:	f8d6 9028 	ldr.w	r9, [r6, #40]	; 0x28
 8014daa:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8014dac:	fa2f f381 	sxtb16	r3, r1
 8014db0:	fa2f f191 	sxtb16	r1, r1, ror #8
 8014db4:	fb23 0004 	smlad	r0, r3, r4, r0
 8014db8:	fb21 0002 	smlad	r0, r1, r2, r0
 8014dbc:	fb23 c309 	smlad	r3, r3, r9, ip
 8014dc0:	fb21 3105 	smlad	r1, r1, r5, r3
 8014dc4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8014dc8:	fa2f f38c 	sxtb16	r3, ip
 8014dcc:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 8014dd0:	fb23 a404 	smlad	r4, r3, r4, sl
 8014dd4:	fb23 bb09 	smlad	fp, r3, r9, fp
 8014dd8:	fb2c 4a02 	smlad	sl, ip, r2, r4
 8014ddc:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
 8014de0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8014de2:	fb2c b505 	smlad	r5, ip, r5, fp
 8014de6:	f8de 200c 	ldr.w	r2, [lr, #12]
 8014dea:	3640      	adds	r6, #64	; 0x40
 8014dec:	f856 bc08 	ldr.w	fp, [r6, #-8]
 8014df0:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8014df4:	fa2f f382 	sxtb16	r3, r2
 8014df8:	fa2f f292 	sxtb16	r2, r2, ror #8
 8014dfc:	fb23 0009 	smlad	r0, r3, r9, r0
 8014e00:	fb22 0004 	smlad	r0, r2, r4, r0
 8014e04:	fb23 110b 	smlad	r1, r3, fp, r1
 8014e08:	fb22 120e 	smlad	r2, r2, lr, r1
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	fa2f f183 	sxtb16	r1, r3
 8014e12:	fa2f f393 	sxtb16	r3, r3, ror #8
 8014e16:	fb21 aa09 	smlad	sl, r1, r9, sl
 8014e1a:	fb21 550b 	smlad	r5, r1, fp, r5
 8014e1e:	fb23 a404 	smlad	r4, r3, r4, sl
 8014e22:	fb23 530e 	smlad	r3, r3, lr, r5
 8014e26:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e2a:	3710      	adds	r7, #16
 8014e2c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8014e30:	f47f af6e 	bne.w	8014d10 <st_sssa8_ch_nn_mat_mult_nt_t+0x1e0>
 8014e34:	9901      	ldr	r1, [sp, #4]
 8014e36:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8014e38:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8014e3c:	4429      	add	r1, r5
 8014e3e:	9101      	str	r1, [sp, #4]
 8014e40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014e42:	b3c1      	cbz	r1, 8014eb6 <st_sssa8_ch_nn_mat_mult_nt_t+0x386>
 8014e44:	4659      	mov	r1, fp
 8014e46:	f8cd b018 	str.w	fp, [sp, #24]
 8014e4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014e4e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014e52:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8014e56:	f8d1 a000 	ldr.w	sl, [r1]
 8014e5a:	3110      	adds	r1, #16
 8014e5c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8014e60:	f851 8c0c 	ldr.w	r8, [r1, #-12]
 8014e64:	f851 9c08 	ldr.w	r9, [r1, #-8]
 8014e68:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8014e6c:	fa2f f685 	sxtb16	r6, r5
 8014e70:	fa2f f595 	sxtb16	r5, r5, ror #8
 8014e74:	fb26 000a 	smlad	r0, r6, sl, r0
 8014e78:	fb25 0008 	smlad	r0, r5, r8, r0
 8014e7c:	fb26 2209 	smlad	r2, r6, r9, r2
 8014e80:	fb25 2207 	smlad	r2, r5, r7, r2
 8014e84:	f85e 500b 	ldr.w	r5, [lr, fp]
 8014e88:	fa2f f685 	sxtb16	r6, r5
 8014e8c:	fa2f f595 	sxtb16	r5, r5, ror #8
 8014e90:	fb26 440a 	smlad	r4, r6, sl, r4
 8014e94:	fb26 3309 	smlad	r3, r6, r9, r3
 8014e98:	fb25 4408 	smlad	r4, r5, r8, r4
 8014e9c:	fb25 3307 	smlad	r3, r5, r7, r3
 8014ea0:	f1bc 0c01 	subs.w	ip, ip, #1
 8014ea4:	d2d7      	bcs.n	8014e56 <st_sssa8_ch_nn_mat_mult_nt_t+0x326>
 8014ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014ea8:	f8dd b018 	ldr.w	fp, [sp, #24]
 8014eac:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014eae:	448b      	add	fp, r1
 8014eb0:	9901      	ldr	r1, [sp, #4]
 8014eb2:	4429      	add	r1, r5
 8014eb4:	9101      	str	r1, [sp, #4]
 8014eb6:	9904      	ldr	r1, [sp, #16]
 8014eb8:	2900      	cmp	r1, #0
 8014eba:	d04f      	beq.n	8014f5c <st_sssa8_ch_nn_mat_mult_nt_t+0x42c>
 8014ebc:	9f01      	ldr	r7, [sp, #4]
 8014ebe:	f9bb 6000 	ldrsh.w	r6, [fp]
 8014ec2:	f997 1000 	ldrsb.w	r1, [r7]
 8014ec6:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
 8014eca:	fb16 0001 	smlabb	r0, r6, r1, r0
 8014ece:	fb15 2201 	smlabb	r2, r5, r1, r2
 8014ed2:	994d      	ldr	r1, [sp, #308]	; 0x134
 8014ed4:	5679      	ldrsb	r1, [r7, r1]
 8014ed6:	fb16 4401 	smlabb	r4, r6, r1, r4
 8014eda:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8014edc:	fb15 3301 	smlabb	r3, r5, r1, r3
 8014ee0:	b3c6      	cbz	r6, 8014f54 <st_sssa8_ch_nn_mat_mult_nt_t+0x424>
 8014ee2:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 8014ee4:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
 8014ee8:	19b9      	adds	r1, r7, r6
 8014eea:	f9bb 6004 	ldrsh.w	r6, [fp, #4]
 8014eee:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8014ef2:	fb16 4401 	smlabb	r4, r6, r1, r4
 8014ef6:	fb15 3301 	smlabb	r3, r5, r1, r3
 8014efa:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8014efe:	fb16 0001 	smlabb	r0, r6, r1, r0
 8014f02:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014f04:	fb15 2201 	smlabb	r2, r5, r1, r2
 8014f08:	1cb9      	adds	r1, r7, #2
 8014f0a:	b31e      	cbz	r6, 8014f54 <st_sssa8_ch_nn_mat_mult_nt_t+0x424>
 8014f0c:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 8014f0e:	f9bb 500a 	ldrsh.w	r5, [fp, #10]
 8014f12:	5789      	ldrsb	r1, [r1, r6]
 8014f14:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8014f18:	fb15 3301 	smlabb	r3, r5, r1, r3
 8014f1c:	fb16 4401 	smlabb	r4, r6, r1, r4
 8014f20:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8014f24:	fb15 2201 	smlabb	r2, r5, r1, r2
 8014f28:	9d04      	ldr	r5, [sp, #16]
 8014f2a:	fb16 0001 	smlabb	r0, r6, r1, r0
 8014f2e:	1cf9      	adds	r1, r7, #3
 8014f30:	2d03      	cmp	r5, #3
 8014f32:	d00f      	beq.n	8014f54 <st_sssa8_ch_nn_mat_mult_nt_t+0x424>
 8014f34:	9d4d      	ldr	r5, [sp, #308]	; 0x134
 8014f36:	f9bb 600e 	ldrsh.w	r6, [fp, #14]
 8014f3a:	574d      	ldrsb	r5, [r1, r5]
 8014f3c:	f9bb 100c 	ldrsh.w	r1, [fp, #12]
 8014f40:	fb16 3305 	smlabb	r3, r6, r5, r3
 8014f44:	fb11 4405 	smlabb	r4, r1, r5, r4
 8014f48:	f997 5003 	ldrsb.w	r5, [r7, #3]
 8014f4c:	fb11 0005 	smlabb	r0, r1, r5, r0
 8014f50:	fb16 2205 	smlabb	r2, r6, r5, r2
 8014f54:	9901      	ldr	r1, [sp, #4]
 8014f56:	9d04      	ldr	r5, [sp, #16]
 8014f58:	4429      	add	r1, r5
 8014f5a:	9101      	str	r1, [sp, #4]
 8014f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014f5e:	2900      	cmp	r1, #0
 8014f60:	f000 811c 	beq.w	801519c <st_sssa8_ch_nn_mat_mult_nt_t+0x66c>
 8014f64:	9f03      	ldr	r7, [sp, #12]
 8014f66:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014f68:	1c79      	adds	r1, r7, #1
 8014f6a:	2d00      	cmp	r5, #0
 8014f6c:	f000 8114 	beq.w	8015198 <st_sssa8_ch_nn_mat_mult_nt_t+0x668>
 8014f70:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014f72:	1eb5      	subs	r5, r6, #2
 8014f74:	2d00      	cmp	r5, #0
 8014f76:	f340 8176 	ble.w	8015266 <st_sssa8_ch_nn_mat_mult_nt_t+0x736>
 8014f7a:	951d      	str	r5, [sp, #116]	; 0x74
 8014f7c:	9d03      	ldr	r5, [sp, #12]
 8014f7e:	9e08      	ldr	r6, [sp, #32]
 8014f80:	3502      	adds	r5, #2
 8014f82:	2e00      	cmp	r6, #0
 8014f84:	f040 80ef 	bne.w	8015166 <st_sssa8_ch_nn_mat_mult_nt_t+0x636>
 8014f88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014f8a:	0040      	lsls	r0, r0, #1
 8014f8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014f8e:	0064      	lsls	r4, r4, #1
 8014f90:	fb50 7006 	smmla	r0, r0, r6, r7
 8014f94:	fb54 7406 	smmla	r4, r4, r6, r7
 8014f98:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8014f9a:	4130      	asrs	r0, r6
 8014f9c:	f300 0007 	ssat	r0, #8, r0
 8014fa0:	9f03      	ldr	r7, [sp, #12]
 8014fa2:	4134      	asrs	r4, r6
 8014fa4:	7038      	strb	r0, [r7, #0]
 8014fa6:	f304 0407 	ssat	r4, #8, r4
 8014faa:	700c      	strb	r4, [r1, #0]
 8014fac:	984b      	ldr	r0, [sp, #300]	; 0x12c
 8014fae:	9e03      	ldr	r6, [sp, #12]
 8014fb0:	9f07      	ldr	r7, [sp, #28]
 8014fb2:	1834      	adds	r4, r6, r0
 8014fb4:	1808      	adds	r0, r1, r0
 8014fb6:	2f00      	cmp	r7, #0
 8014fb8:	f040 80bd 	bne.w	8015136 <st_sssa8_ch_nn_mat_mult_nt_t+0x606>
 8014fbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014fbe:	0052      	lsls	r2, r2, #1
 8014fc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014fc2:	005b      	lsls	r3, r3, #1
 8014fc4:	fb52 4200 	smmla	r2, r2, r0, r4
 8014fc8:	fb53 4300 	smmla	r3, r3, r0, r4
 8014fcc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014fce:	4102      	asrs	r2, r0
 8014fd0:	f302 0207 	ssat	r2, #8, r2
 8014fd4:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
 8014fd6:	4103      	asrs	r3, r0
 8014fd8:	5532      	strb	r2, [r6, r4]
 8014fda:	f303 0307 	ssat	r3, #8, r3
 8014fde:	550b      	strb	r3, [r1, r4]
 8014fe0:	9503      	str	r5, [sp, #12]
 8014fe2:	9b01      	ldr	r3, [sp, #4]
 8014fe4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8014fe6:	4413      	add	r3, r2
 8014fe8:	9301      	str	r3, [sp, #4]
 8014fea:	9b05      	ldr	r3, [sp, #20]
 8014fec:	3b01      	subs	r3, #1
 8014fee:	9305      	str	r3, [sp, #20]
 8014ff0:	f47f ae80 	bne.w	8014cf4 <st_sssa8_ch_nn_mat_mult_nt_t+0x1c4>
 8014ff4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f040 817f 	bne.w	80152fa <st_sssa8_ch_nn_mat_mult_nt_t+0x7ca>
 8014ffc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8014ffe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8015000:	4413      	add	r3, r2
 8015002:	9329      	str	r3, [sp, #164]	; 0xa4
 8015004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015006:	2b00      	cmp	r3, #0
 8015008:	f000 8271 	beq.w	80154ee <st_sssa8_ch_nn_mat_mult_nt_t+0x9be>
 801500c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801500e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8015010:	4413      	add	r3, r2
 8015012:	9328      	str	r3, [sp, #160]	; 0xa0
 8015014:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8015016:	b11b      	cbz	r3, 8015020 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f0>
 8015018:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801501a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801501c:	4413      	add	r3, r2
 801501e:	9352      	str	r3, [sp, #328]	; 0x148
 8015020:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015022:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015024:	3208      	adds	r2, #8
 8015026:	3304      	adds	r3, #4
 8015028:	9226      	str	r2, [sp, #152]	; 0x98
 801502a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801502c:	9327      	str	r3, [sp, #156]	; 0x9c
 801502e:	3208      	adds	r2, #8
 8015030:	9225      	str	r2, [sp, #148]	; 0x94
 8015032:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015034:	3208      	adds	r2, #8
 8015036:	9224      	str	r2, [sp, #144]	; 0x90
 8015038:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801503a:	429a      	cmp	r2, r3
 801503c:	f47f adf7 	bne.w	8014c2e <st_sssa8_ch_nn_mat_mult_nt_t+0xfe>
 8015040:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8015042:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8015044:	fb02 3303 	mla	r3, r2, r3, r3
 8015048:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801504a:	441a      	add	r2, r3
 801504c:	9234      	str	r2, [sp, #208]	; 0xd0
 801504e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8015050:	07db      	lsls	r3, r3, #31
 8015052:	d56c      	bpl.n	801512e <st_sssa8_ch_nn_mat_mult_nt_t+0x5fe>
 8015054:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8015056:	f013 0b01 	ands.w	fp, r3, #1
 801505a:	d004      	beq.n	8015066 <st_sssa8_ch_nn_mat_mult_nt_t+0x536>
 801505c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 801505e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015060:	3303      	adds	r3, #3
 8015062:	441a      	add	r2, r3
 8015064:	9228      	str	r2, [sp, #160]	; 0xa0
 8015066:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8015068:	2b00      	cmp	r3, #0
 801506a:	dd60      	ble.n	801512e <st_sssa8_ch_nn_mat_mult_nt_t+0x5fe>
 801506c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 801506e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8015072:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8015076:	f8dd 9140 	ldr.w	r9, [sp, #320]	; 0x140
 801507a:	f003 0c02 	and.w	ip, r3, #2
 801507e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8015080:	2100      	movs	r1, #0
 8015082:	f04f 0a01 	mov.w	sl, #1
 8015086:	441c      	add	r4, r3
 8015088:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 801508a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801508c:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
 8015090:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8015092:	f8cd b00c 	str.w	fp, [sp, #12]
 8015096:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801509a:	9b51      	ldr	r3, [sp, #324]	; 0x144
 801509c:	f8cd 9010 	str.w	r9, [sp, #16]
 80150a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80150a4:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 80150a6:	4498      	add	r8, r3
 80150a8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80150aa:	e9cd ec01 	strd	lr, ip, [sp, #4]
 80150ae:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80150b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150b4:	e9dd e24d 	ldrd	lr, r2, [sp, #308]	; 0x134
 80150b8:	9d01      	ldr	r5, [sp, #4]
 80150ba:	f1be 0f00 	cmp.w	lr, #0
 80150be:	682f      	ldr	r7, [r5, #0]
 80150c0:	dd0d      	ble.n	80150de <st_sssa8_ch_nn_mat_mult_nt_t+0x5ae>
 80150c2:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 80150c4:	eb03 0b0e 	add.w	fp, r3, lr
 80150c8:	f105 3cff 	add.w	ip, r5, #4294967295
 80150cc:	f913 5b01 	ldrsb.w	r5, [r3], #1
 80150d0:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 80150d4:	1aad      	subs	r5, r5, r2
 80150d6:	459b      	cmp	fp, r3
 80150d8:	fb09 7705 	mla	r7, r9, r5, r7
 80150dc:	d1f6      	bne.n	80150cc <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 80150de:	f9b8 c000 	ldrsh.w	ip, [r8]
 80150e2:	f1bc 0f15 	cmp.w	ip, #21
 80150e6:	f340 8394 	ble.w	8015812 <st_sssa8_ch_nn_mat_mult_nt_t+0xce2>
 80150ea:	f1ac 0902 	sub.w	r9, ip, #2
 80150ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80150f2:	6805      	ldr	r5, [r0, #0]
 80150f4:	fa0a f909 	lsl.w	r9, sl, r9
 80150f8:	fb57 9505 	smmla	r5, r7, r5, r9
 80150fc:	fa45 fc0c 	asr.w	ip, r5, ip
 8015100:	6825      	ldr	r5, [r4, #0]
 8015102:	4465      	add	r5, ip
 8015104:	f305 0507 	ssat	r5, #8, r5
 8015108:	7035      	strb	r5, [r6, #0]
 801510a:	9d02      	ldr	r5, [sp, #8]
 801510c:	2d00      	cmp	r5, #0
 801510e:	f000 837d 	beq.w	801580c <st_sssa8_ch_nn_mat_mult_nt_t+0xcdc>
 8015112:	9d03      	ldr	r5, [sp, #12]
 8015114:	b135      	cbz	r5, 8015124 <st_sssa8_ch_nn_mat_mult_nt_t+0x5f4>
 8015116:	9d04      	ldr	r5, [sp, #16]
 8015118:	3d01      	subs	r5, #1
 801511a:	9504      	str	r5, [sp, #16]
 801511c:	d102      	bne.n	8015124 <st_sssa8_ch_nn_mat_mult_nt_t+0x5f4>
 801511e:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8015120:	3602      	adds	r6, #2
 8015122:	9504      	str	r5, [sp, #16]
 8015124:	3601      	adds	r6, #1
 8015126:	3101      	adds	r1, #1
 8015128:	9d4a      	ldr	r5, [sp, #296]	; 0x128
 801512a:	428d      	cmp	r5, r1
 801512c:	d1c4      	bne.n	80150b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x588>
 801512e:	2000      	movs	r0, #0
 8015130:	b03f      	add	sp, #252	; 0xfc
 8015132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015136:	4639      	mov	r1, r7
 8015138:	3101      	adds	r1, #1
 801513a:	f000 80b4 	beq.w	80152a6 <st_sssa8_ch_nn_mat_mult_nt_t+0x776>
 801513e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8015140:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015142:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8015144:	fb52 6201 	smmla	r2, r2, r1, r6
 8015148:	fb53 6301 	smmla	r3, r3, r1, r6
 801514c:	413a      	asrs	r2, r7
 801514e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015150:	440a      	add	r2, r1
 8015152:	f302 0207 	ssat	r2, #8, r2
 8015156:	413b      	asrs	r3, r7
 8015158:	7022      	strb	r2, [r4, #0]
 801515a:	440b      	add	r3, r1
 801515c:	f303 0307 	ssat	r3, #8, r3
 8015160:	7003      	strb	r3, [r0, #0]
 8015162:	9503      	str	r5, [sp, #12]
 8015164:	e73d      	b.n	8014fe2 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b2>
 8015166:	3601      	adds	r6, #1
 8015168:	f000 8086 	beq.w	8015278 <st_sssa8_ch_nn_mat_mult_nt_t+0x748>
 801516c:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801516e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015170:	fb50 7006 	smmla	r0, r0, r6, r7
 8015174:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8015176:	4130      	asrs	r0, r6
 8015178:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801517a:	fb54 7406 	smmla	r4, r4, r6, r7
 801517e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8015180:	4438      	add	r0, r7
 8015182:	f300 0007 	ssat	r0, #8, r0
 8015186:	9e03      	ldr	r6, [sp, #12]
 8015188:	7030      	strb	r0, [r6, #0]
 801518a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801518c:	4134      	asrs	r4, r6
 801518e:	19e0      	adds	r0, r4, r7
 8015190:	f300 0007 	ssat	r0, #8, r0
 8015194:	7008      	strb	r0, [r1, #0]
 8015196:	e709      	b.n	8014fac <st_sssa8_ch_nn_mat_mult_nt_t+0x47c>
 8015198:	463d      	mov	r5, r7
 801519a:	e6f0      	b.n	8014f7e <st_sssa8_ch_nn_mat_mult_nt_t+0x44e>
 801519c:	9e03      	ldr	r6, [sp, #12]
 801519e:	994c      	ldr	r1, [sp, #304]	; 0x130
 80151a0:	9d4c      	ldr	r5, [sp, #304]	; 0x130
 80151a2:	9f08      	ldr	r7, [sp, #32]
 80151a4:	1871      	adds	r1, r6, r1
 80151a6:	eb06 0c45 	add.w	ip, r6, r5, lsl #1
 80151aa:	bb47      	cbnz	r7, 80151fe <st_sssa8_ch_nn_mat_mult_nt_t+0x6ce>
 80151ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80151ae:	0065      	lsls	r5, r4, #1
 80151b0:	0040      	lsls	r0, r0, #1
 80151b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80151b4:	fb50 4007 	smmla	r0, r0, r7, r4
 80151b8:	fb55 4407 	smmla	r4, r5, r7, r4
 80151bc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80151be:	4138      	asrs	r0, r7
 80151c0:	f300 0007 	ssat	r0, #8, r0
 80151c4:	7030      	strb	r0, [r6, #0]
 80151c6:	413c      	asrs	r4, r7
 80151c8:	f304 0407 	ssat	r4, #8, r4
 80151cc:	984c      	ldr	r0, [sp, #304]	; 0x130
 80151ce:	5434      	strb	r4, [r6, r0]
 80151d0:	9807      	ldr	r0, [sp, #28]
 80151d2:	bb78      	cbnz	r0, 8015234 <st_sssa8_ch_nn_mat_mult_nt_t+0x704>
 80151d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80151d6:	0052      	lsls	r2, r2, #1
 80151d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80151da:	005b      	lsls	r3, r3, #1
 80151dc:	fb52 4200 	smmla	r2, r2, r0, r4
 80151e0:	fb53 4300 	smmla	r3, r3, r0, r4
 80151e4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80151e6:	4102      	asrs	r2, r0
 80151e8:	f302 0207 	ssat	r2, #8, r2
 80151ec:	9c03      	ldr	r4, [sp, #12]
 80151ee:	4103      	asrs	r3, r0
 80151f0:	7062      	strb	r2, [r4, #1]
 80151f2:	f303 0307 	ssat	r3, #8, r3
 80151f6:	704b      	strb	r3, [r1, #1]
 80151f8:	f8cd c00c 	str.w	ip, [sp, #12]
 80151fc:	e6f1      	b.n	8014fe2 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b2>
 80151fe:	463e      	mov	r6, r7
 8015200:	3601      	adds	r6, #1
 8015202:	f000 82ac 	beq.w	801575e <st_sssa8_ch_nn_mat_mult_nt_t+0xc2e>
 8015206:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8015208:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801520a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801520c:	fb50 7006 	smmla	r0, r0, r6, r7
 8015210:	fb54 7406 	smmla	r4, r4, r6, r7
 8015214:	4128      	asrs	r0, r5
 8015216:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015218:	4430      	add	r0, r6
 801521a:	f300 0007 	ssat	r0, #8, r0
 801521e:	9f03      	ldr	r7, [sp, #12]
 8015220:	7038      	strb	r0, [r7, #0]
 8015222:	fa44 f005 	asr.w	r0, r4, r5
 8015226:	4430      	add	r0, r6
 8015228:	f300 0007 	ssat	r0, #8, r0
 801522c:	7008      	strb	r0, [r1, #0]
 801522e:	9807      	ldr	r0, [sp, #28]
 8015230:	2800      	cmp	r0, #0
 8015232:	d0cf      	beq.n	80151d4 <st_sssa8_ch_nn_mat_mult_nt_t+0x6a4>
 8015234:	3001      	adds	r0, #1
 8015236:	f000 82a9 	beq.w	801578c <st_sssa8_ch_nn_mat_mult_nt_t+0xc5c>
 801523a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801523c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801523e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8015240:	fb52 4200 	smmla	r2, r2, r0, r4
 8015244:	fb53 4300 	smmla	r3, r3, r0, r4
 8015248:	412a      	asrs	r2, r5
 801524a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801524c:	4402      	add	r2, r0
 801524e:	f302 0207 	ssat	r2, #8, r2
 8015252:	9c03      	ldr	r4, [sp, #12]
 8015254:	412b      	asrs	r3, r5
 8015256:	7062      	strb	r2, [r4, #1]
 8015258:	4403      	add	r3, r0
 801525a:	f303 0307 	ssat	r3, #8, r3
 801525e:	704b      	strb	r3, [r1, #1]
 8015260:	f8cd c00c 	str.w	ip, [sp, #12]
 8015264:	e6bd      	b.n	8014fe2 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b2>
 8015266:	f1c6 0602 	rsb	r6, r6, #2
 801526a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 801526e:	9e50      	ldr	r6, [sp, #320]	; 0x140
 8015270:	1975      	adds	r5, r6, r5
 8015272:	951d      	str	r5, [sp, #116]	; 0x74
 8015274:	1cbd      	adds	r5, r7, #2
 8015276:	e682      	b.n	8014f7e <st_sssa8_ch_nn_mat_mult_nt_t+0x44e>
 8015278:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801527a:	40b0      	lsls	r0, r6
 801527c:	f300 001f 	ssat	r0, #32, r0
 8015280:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015282:	fb50 f017 	smmulr	r0, r0, r7
 8015286:	40b4      	lsls	r4, r6
 8015288:	f304 041f 	ssat	r4, #32, r4
 801528c:	fb54 f417 	smmulr	r4, r4, r7
 8015290:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015292:	4430      	add	r0, r6
 8015294:	f300 0007 	ssat	r0, #8, r0
 8015298:	9f03      	ldr	r7, [sp, #12]
 801529a:	7038      	strb	r0, [r7, #0]
 801529c:	1930      	adds	r0, r6, r4
 801529e:	f300 0007 	ssat	r0, #8, r0
 80152a2:	7008      	strb	r0, [r1, #0]
 80152a4:	e682      	b.n	8014fac <st_sssa8_ch_nn_mat_mult_nt_t+0x47c>
 80152a6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80152a8:	408a      	lsls	r2, r1
 80152aa:	f302 021f 	ssat	r2, #32, r2
 80152ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80152b0:	fb52 f216 	smmulr	r2, r2, r6
 80152b4:	408b      	lsls	r3, r1
 80152b6:	f303 031f 	ssat	r3, #32, r3
 80152ba:	fb53 f316 	smmulr	r3, r3, r6
 80152be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152c0:	440a      	add	r2, r1
 80152c2:	f302 0207 	ssat	r2, #8, r2
 80152c6:	440b      	add	r3, r1
 80152c8:	7022      	strb	r2, [r4, #0]
 80152ca:	f303 0307 	ssat	r3, #8, r3
 80152ce:	7003      	strb	r3, [r0, #0]
 80152d0:	9503      	str	r5, [sp, #12]
 80152d2:	e686      	b.n	8014fe2 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b2>
 80152d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152d8:	f8dd b148 	ldr.w	fp, [sp, #328]	; 0x148
 80152dc:	4613      	mov	r3, r2
 80152de:	4604      	mov	r4, r0
 80152e0:	e5ae      	b.n	8014e40 <st_sssa8_ch_nn_mat_mult_nt_t+0x310>
 80152e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80152e4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80152e6:	9303      	str	r3, [sp, #12]
 80152e8:	2800      	cmp	r0, #0
 80152ea:	f47f ace5 	bne.w	8014cb8 <st_sssa8_ch_nn_mat_mult_nt_t+0x188>
 80152ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152f0:	9301      	str	r3, [sp, #4]
 80152f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f43f ae81 	beq.w	8014ffc <st_sssa8_ch_nn_mat_mult_nt_t+0x4cc>
 80152fa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	f340 82cc 	ble.w	801589a <st_sssa8_ch_nn_mat_mult_nt_t+0xd6a>
 8015302:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015304:	9801      	ldr	r0, [sp, #4]
 8015306:	e9dd 520a 	ldrd	r5, r2, [sp, #40]	; 0x28
 801530a:	18c7      	adds	r7, r0, r3
 801530c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801530e:	6801      	ldr	r1, [r0, #0]
 8015310:	fa2f f481 	sxtb16	r4, r1
 8015314:	fa2f f191 	sxtb16	r1, r1, ror #8
 8015318:	681e      	ldr	r6, [r3, #0]
 801531a:	fb24 5506 	smlad	r5, r4, r6, r5
 801531e:	685e      	ldr	r6, [r3, #4]
 8015320:	fb21 5606 	smlad	r6, r1, r6, r5
 8015324:	689d      	ldr	r5, [r3, #8]
 8015326:	fb24 2205 	smlad	r2, r4, r5, r2
 801532a:	68dc      	ldr	r4, [r3, #12]
 801532c:	fb21 2104 	smlad	r1, r1, r4, r2
 8015330:	6842      	ldr	r2, [r0, #4]
 8015332:	fa2f f482 	sxtb16	r4, r2
 8015336:	fa2f f292 	sxtb16	r2, r2, ror #8
 801533a:	691d      	ldr	r5, [r3, #16]
 801533c:	fb24 6505 	smlad	r5, r4, r5, r6
 8015340:	695e      	ldr	r6, [r3, #20]
 8015342:	fb22 5606 	smlad	r6, r2, r6, r5
 8015346:	699d      	ldr	r5, [r3, #24]
 8015348:	fb24 1105 	smlad	r1, r4, r5, r1
 801534c:	69dc      	ldr	r4, [r3, #28]
 801534e:	fb22 1104 	smlad	r1, r2, r4, r1
 8015352:	6882      	ldr	r2, [r0, #8]
 8015354:	fa2f f482 	sxtb16	r4, r2
 8015358:	fa2f f292 	sxtb16	r2, r2, ror #8
 801535c:	6a1d      	ldr	r5, [r3, #32]
 801535e:	fb24 6505 	smlad	r5, r4, r5, r6
 8015362:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8015364:	fb22 5606 	smlad	r6, r2, r6, r5
 8015368:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801536a:	fb24 1105 	smlad	r1, r4, r5, r1
 801536e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8015370:	fb22 1104 	smlad	r1, r2, r4, r1
 8015374:	68c2      	ldr	r2, [r0, #12]
 8015376:	3340      	adds	r3, #64	; 0x40
 8015378:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801537c:	3010      	adds	r0, #16
 801537e:	f853 8c0c 	ldr.w	r8, [r3, #-12]
 8015382:	f853 ec08 	ldr.w	lr, [r3, #-8]
 8015386:	f853 cc04 	ldr.w	ip, [r3, #-4]
 801538a:	fa2f f482 	sxtb16	r4, r2
 801538e:	fa2f f292 	sxtb16	r2, r2, ror #8
 8015392:	fb24 6505 	smlad	r5, r4, r5, r6
 8015396:	fb22 5508 	smlad	r5, r2, r8, r5
 801539a:	fb24 110e 	smlad	r1, r4, lr, r1
 801539e:	fb22 120c 	smlad	r2, r2, ip, r1
 80153a2:	4287      	cmp	r7, r0
 80153a4:	d1b3      	bne.n	801530e <st_sssa8_ch_nn_mat_mult_nt_t+0x7de>
 80153a6:	9b52      	ldr	r3, [sp, #328]	; 0x148
 80153a8:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 80153ac:	9001      	str	r0, [sp, #4]
 80153ae:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
 80153b2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80153b4:	eb03 0c02 	add.w	ip, r3, r2
 80153b8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80153ba:	459e      	cmp	lr, r3
 80153bc:	f280 8275 	bge.w	80158aa <st_sssa8_ch_nn_mat_mult_nt_t+0xd7a>
 80153c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80153c2:	9c01      	ldr	r4, [sp, #4]
 80153c4:	eba3 090e 	sub.w	r9, r3, lr
 80153c8:	4663      	mov	r3, ip
 80153ca:	f8cd c004 	str.w	ip, [sp, #4]
 80153ce:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80153d2:	f109 0801 	add.w	r8, r9, #1
 80153d6:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80153da:	eb04 0788 	add.w	r7, r4, r8, lsl #2
 80153de:	6818      	ldr	r0, [r3, #0]
 80153e0:	3310      	adds	r3, #16
 80153e2:	f854 2b04 	ldr.w	r2, [r4], #4
 80153e6:	f853 bc0c 	ldr.w	fp, [r3, #-12]
 80153ea:	f853 ac08 	ldr.w	sl, [r3, #-8]
 80153ee:	f853 cc04 	ldr.w	ip, [r3, #-4]
 80153f2:	fa2f f182 	sxtb16	r1, r2
 80153f6:	fa2f f292 	sxtb16	r2, r2, ror #8
 80153fa:	fb21 5500 	smlad	r5, r1, r0, r5
 80153fe:	fb22 550b 	smlad	r5, r2, fp, r5
 8015402:	fb21 660a 	smlad	r6, r1, sl, r6
 8015406:	fb22 660c 	smlad	r6, r2, ip, r6
 801540a:	42bc      	cmp	r4, r7
 801540c:	d1e7      	bne.n	80153de <st_sssa8_ch_nn_mat_mult_nt_t+0x8ae>
 801540e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8015412:	f10e 0e04 	add.w	lr, lr, #4
 8015416:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 801541a:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 801541e:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 8015422:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8015424:	4573      	cmp	r3, lr
 8015426:	dd40      	ble.n	80154aa <st_sssa8_ch_nn_mat_mult_nt_t+0x97a>
 8015428:	f997 3000 	ldrsb.w	r3, [r7]
 801542c:	f8bc 2000 	ldrh.w	r2, [ip]
 8015430:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015432:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015434:	fb12 1103 	smlabb	r1, r2, r3, r1
 8015438:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801543c:	fb12 0003 	smlabb	r0, r2, r3, r0
 8015440:	f10e 0301 	add.w	r3, lr, #1
 8015444:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8015446:	910a      	str	r1, [sp, #40]	; 0x28
 8015448:	429a      	cmp	r2, r3
 801544a:	900b      	str	r0, [sp, #44]	; 0x2c
 801544c:	dd2d      	ble.n	80154aa <st_sssa8_ch_nn_mat_mult_nt_t+0x97a>
 801544e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8015452:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8015456:	fb12 1103 	smlabb	r1, r2, r3, r1
 801545a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 801545e:	fb12 0003 	smlabb	r0, r2, r3, r0
 8015462:	f10e 0302 	add.w	r3, lr, #2
 8015466:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8015468:	910a      	str	r1, [sp, #40]	; 0x28
 801546a:	429a      	cmp	r2, r3
 801546c:	900b      	str	r0, [sp, #44]	; 0x2c
 801546e:	dd1c      	ble.n	80154aa <st_sssa8_ch_nn_mat_mult_nt_t+0x97a>
 8015470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015474:	f10e 0e03 	add.w	lr, lr, #3
 8015478:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 801547c:	fb12 1103 	smlabb	r1, r2, r3, r1
 8015480:	f8bc 200a 	ldrh.w	r2, [ip, #10]
 8015484:	fb12 0003 	smlabb	r0, r2, r3, r0
 8015488:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 801548a:	910a      	str	r1, [sp, #40]	; 0x28
 801548c:	4573      	cmp	r3, lr
 801548e:	900b      	str	r0, [sp, #44]	; 0x2c
 8015490:	dd0b      	ble.n	80154aa <st_sssa8_ch_nn_mat_mult_nt_t+0x97a>
 8015492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015496:	f8bc 200c 	ldrh.w	r2, [ip, #12]
 801549a:	fb12 1203 	smlabb	r2, r2, r3, r1
 801549e:	920a      	str	r2, [sp, #40]	; 0x28
 80154a0:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 80154a4:	fb12 0303 	smlabb	r3, r2, r3, r0
 80154a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80154aa:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80154ac:	9a03      	ldr	r2, [sp, #12]
 80154ae:	18d1      	adds	r1, r2, r3
 80154b0:	9b08      	ldr	r3, [sp, #32]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	f040 8196 	bne.w	80157e4 <st_sssa8_ch_nn_mat_mult_nt_t+0xcb4>
 80154b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	fb53 4300 	smmla	r3, r3, r0, r4
 80154c4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80154c6:	4103      	asrs	r3, r0
 80154c8:	f303 0307 	ssat	r3, #8, r3
 80154cc:	7013      	strb	r3, [r2, #0]
 80154ce:	9b07      	ldr	r3, [sp, #28]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f040 8174 	bne.w	80157be <st_sssa8_ch_nn_mat_mult_nt_t+0xc8e>
 80154d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80154dc:	005b      	lsls	r3, r3, #1
 80154de:	fb53 0302 	smmla	r3, r3, r2, r0
 80154e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80154e4:	4113      	asrs	r3, r2
 80154e6:	f303 0307 	ssat	r3, #8, r3
 80154ea:	700b      	strb	r3, [r1, #0]
 80154ec:	e586      	b.n	8014ffc <st_sssa8_ch_nn_mat_mult_nt_t+0x4cc>
 80154ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80154f0:	3302      	adds	r3, #2
 80154f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80154f4:	e58e      	b.n	8015014 <st_sssa8_ch_nn_mat_mult_nt_t+0x4e4>
 80154f6:	2301      	movs	r3, #1
 80154f8:	9307      	str	r3, [sp, #28]
 80154fa:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f47f abc0 	bne.w	8014c82 <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 8015502:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015504:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8015506:	eb03 0a02 	add.w	sl, r3, r2
 801550a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801550c:	2b00      	cmp	r3, #0
 801550e:	f340 81d0 	ble.w	80158b2 <st_sssa8_ch_nn_mat_mult_nt_t+0xd82>
 8015512:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015514:	4650      	mov	r0, sl
 8015516:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8015518:	18d4      	adds	r4, r2, r3
 801551a:	9b52      	ldr	r3, [sp, #328]	; 0x148
 801551c:	6811      	ldr	r1, [r2, #0]
 801551e:	3210      	adds	r2, #16
 8015520:	6805      	ldr	r5, [r0, #0]
 8015522:	3340      	adds	r3, #64	; 0x40
 8015524:	fa2f f681 	sxtb16	r6, r1
 8015528:	3010      	adds	r0, #16
 801552a:	f843 6c40 	str.w	r6, [r3, #-64]
 801552e:	ea4f 2131 	mov.w	r1, r1, ror #8
 8015532:	42a2      	cmp	r2, r4
 8015534:	fa2f f181 	sxtb16	r1, r1
 8015538:	f843 1c3c 	str.w	r1, [r3, #-60]
 801553c:	ea4f 2135 	mov.w	r1, r5, ror #8
 8015540:	fa2f f585 	sxtb16	r5, r5
 8015544:	fa2f f181 	sxtb16	r1, r1
 8015548:	f843 5c38 	str.w	r5, [r3, #-56]
 801554c:	f843 1c34 	str.w	r1, [r3, #-52]
 8015550:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 8015554:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8015558:	ea4f 2631 	mov.w	r6, r1, ror #8
 801555c:	fa2f f181 	sxtb16	r1, r1
 8015560:	fa2f f686 	sxtb16	r6, r6
 8015564:	f843 1c28 	str.w	r1, [r3, #-40]
 8015568:	f843 6c24 	str.w	r6, [r3, #-36]
 801556c:	ea4f 2635 	mov.w	r6, r5, ror #8
 8015570:	fa2f f585 	sxtb16	r5, r5
 8015574:	f843 5c30 	str.w	r5, [r3, #-48]
 8015578:	fa2f f586 	sxtb16	r5, r6
 801557c:	f843 5c2c 	str.w	r5, [r3, #-44]
 8015580:	f852 5c08 	ldr.w	r5, [r2, #-8]
 8015584:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8015588:	ea4f 2635 	mov.w	r6, r5, ror #8
 801558c:	fa2f f585 	sxtb16	r5, r5
 8015590:	fa2f f686 	sxtb16	r6, r6
 8015594:	f843 5c20 	str.w	r5, [r3, #-32]
 8015598:	ea4f 2531 	mov.w	r5, r1, ror #8
 801559c:	f843 6c1c 	str.w	r6, [r3, #-28]
 80155a0:	fa2f f585 	sxtb16	r5, r5
 80155a4:	fa2f f181 	sxtb16	r1, r1
 80155a8:	f843 5c14 	str.w	r5, [r3, #-20]
 80155ac:	f843 1c18 	str.w	r1, [r3, #-24]
 80155b0:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80155b4:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80155b8:	ea4f 2635 	mov.w	r6, r5, ror #8
 80155bc:	fa2f f585 	sxtb16	r5, r5
 80155c0:	fa2f f686 	sxtb16	r6, r6
 80155c4:	f843 5c10 	str.w	r5, [r3, #-16]
 80155c8:	ea4f 2531 	mov.w	r5, r1, ror #8
 80155cc:	f843 6c0c 	str.w	r6, [r3, #-12]
 80155d0:	fa2f f585 	sxtb16	r5, r5
 80155d4:	fa2f f181 	sxtb16	r1, r1
 80155d8:	f843 5c04 	str.w	r5, [r3, #-4]
 80155dc:	f843 1c08 	str.w	r1, [r3, #-8]
 80155e0:	d19c      	bne.n	801551c <st_sssa8_ch_nn_mat_mult_nt_t+0x9ec>
 80155e2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80155e4:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80155e6:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80155e8:	449a      	add	sl, r3
 80155ea:	469c      	mov	ip, r3
 80155ec:	1857      	adds	r7, r2, r1
 80155ee:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80155f0:	4563      	cmp	r3, ip
 80155f2:	f340 815c 	ble.w	80158ae <st_sssa8_ch_nn_mat_mult_nt_t+0xd7e>
 80155f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80155f8:	463a      	mov	r2, r7
 80155fa:	4650      	mov	r0, sl
 80155fc:	eba3 030c 	sub.w	r3, r3, ip
 8015600:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8015604:	f108 0e01 	add.w	lr, r8, #1
 8015608:	ea4f 098e 	mov.w	r9, lr, lsl #2
 801560c:	eb04 068e 	add.w	r6, r4, lr, lsl #2
 8015610:	f854 3b04 	ldr.w	r3, [r4], #4
 8015614:	3210      	adds	r2, #16
 8015616:	f850 1b04 	ldr.w	r1, [r0], #4
 801561a:	fa2f f583 	sxtb16	r5, r3
 801561e:	42a6      	cmp	r6, r4
 8015620:	ea4f 2333 	mov.w	r3, r3, ror #8
 8015624:	fa2f f383 	sxtb16	r3, r3
 8015628:	f842 3c0c 	str.w	r3, [r2, #-12]
 801562c:	ea4f 2331 	mov.w	r3, r1, ror #8
 8015630:	fa2f f181 	sxtb16	r1, r1
 8015634:	f842 5c10 	str.w	r5, [r2, #-16]
 8015638:	f842 1c08 	str.w	r1, [r2, #-8]
 801563c:	fa2f f383 	sxtb16	r3, r3
 8015640:	f842 3c04 	str.w	r3, [r2, #-4]
 8015644:	d1e4      	bne.n	8015610 <st_sssa8_ch_nn_mat_mult_nt_t+0xae0>
 8015646:	f10c 0304 	add.w	r3, ip, #4
 801564a:	44ca      	add	sl, r9
 801564c:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8015650:	eb03 0c88 	add.w	ip, r3, r8, lsl #2
 8015654:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8015656:	4563      	cmp	r3, ip
 8015658:	f77f ab13 	ble.w	8014c82 <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 801565c:	f996 3000 	ldrsb.w	r3, [r6]
 8015660:	803b      	strh	r3, [r7, #0]
 8015662:	f10c 0301 	add.w	r3, ip, #1
 8015666:	f99a 2000 	ldrsb.w	r2, [sl]
 801566a:	807a      	strh	r2, [r7, #2]
 801566c:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 801566e:	4293      	cmp	r3, r2
 8015670:	f6bf ab07 	bge.w	8014c82 <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 8015674:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8015678:	80bb      	strh	r3, [r7, #4]
 801567a:	f10c 0302 	add.w	r3, ip, #2
 801567e:	f99a 2001 	ldrsb.w	r2, [sl, #1]
 8015682:	80fa      	strh	r2, [r7, #6]
 8015684:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 8015686:	4293      	cmp	r3, r2
 8015688:	f6bf aafb 	bge.w	8014c82 <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 801568c:	f996 3002 	ldrsb.w	r3, [r6, #2]
 8015690:	f10c 0c03 	add.w	ip, ip, #3
 8015694:	813b      	strh	r3, [r7, #8]
 8015696:	4594      	cmp	ip, r2
 8015698:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 801569c:	817b      	strh	r3, [r7, #10]
 801569e:	f6bf aaf0 	bge.w	8014c82 <st_sssa8_ch_nn_mat_mult_nt_t+0x152>
 80156a2:	f996 3003 	ldrsb.w	r3, [r6, #3]
 80156a6:	81bb      	strh	r3, [r7, #12]
 80156a8:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 80156ac:	81fb      	strh	r3, [r7, #14]
 80156ae:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f43f aaea 	beq.w	8014c8a <st_sssa8_ch_nn_mat_mult_nt_t+0x15a>
 80156b6:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80156b8:	2800      	cmp	r0, #0
 80156ba:	f000 80ea 	beq.w	8015892 <st_sssa8_ch_nn_mat_mult_nt_t+0xd62>
 80156be:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80156c0:	2300      	movs	r3, #0
 80156c2:	f102 0110 	add.w	r1, r2, #16
 80156c6:	461a      	mov	r2, r3
 80156c8:	f931 4c10 	ldrsh.w	r4, [r1, #-16]
 80156cc:	3801      	subs	r0, #1
 80156ce:	f101 0110 	add.w	r1, r1, #16
 80156d2:	eba3 0304 	sub.w	r3, r3, r4
 80156d6:	f931 4c18 	ldrsh.w	r4, [r1, #-24]
 80156da:	eba2 0204 	sub.w	r2, r2, r4
 80156de:	f931 4c1e 	ldrsh.w	r4, [r1, #-30]
 80156e2:	eba3 0304 	sub.w	r3, r3, r4
 80156e6:	f931 4c16 	ldrsh.w	r4, [r1, #-22]
 80156ea:	eba2 0204 	sub.w	r2, r2, r4
 80156ee:	f931 4c1c 	ldrsh.w	r4, [r1, #-28]
 80156f2:	eba3 0304 	sub.w	r3, r3, r4
 80156f6:	f931 4c14 	ldrsh.w	r4, [r1, #-20]
 80156fa:	eba2 0204 	sub.w	r2, r2, r4
 80156fe:	f931 4c1a 	ldrsh.w	r4, [r1, #-26]
 8015702:	eba3 0304 	sub.w	r3, r3, r4
 8015706:	f931 4c12 	ldrsh.w	r4, [r1, #-18]
 801570a:	eba2 0204 	sub.w	r2, r2, r4
 801570e:	d1db      	bne.n	80156c8 <st_sssa8_ch_nn_mat_mult_nt_t+0xb98>
 8015710:	9952      	ldr	r1, [sp, #328]	; 0x148
 8015712:	983a      	ldr	r0, [sp, #232]	; 0xe8
 8015714:	4401      	add	r1, r0
 8015716:	9804      	ldr	r0, [sp, #16]
 8015718:	b1a8      	cbz	r0, 8015746 <st_sssa8_ch_nn_mat_mult_nt_t+0xc16>
 801571a:	f9b1 0000 	ldrsh.w	r0, [r1]
 801571e:	1a1b      	subs	r3, r3, r0
 8015720:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8015724:	1a12      	subs	r2, r2, r0
 8015726:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015728:	b168      	cbz	r0, 8015746 <st_sssa8_ch_nn_mat_mult_nt_t+0xc16>
 801572a:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 801572e:	1a1b      	subs	r3, r3, r0
 8015730:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
 8015734:	1a12      	subs	r2, r2, r0
 8015736:	9820      	ldr	r0, [sp, #128]	; 0x80
 8015738:	b128      	cbz	r0, 8015746 <st_sssa8_ch_nn_mat_mult_nt_t+0xc16>
 801573a:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 801573e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015742:	1a1b      	subs	r3, r3, r0
 8015744:	1a52      	subs	r2, r2, r1
 8015746:	994e      	ldr	r1, [sp, #312]	; 0x138
 8015748:	fb03 f101 	mul.w	r1, r3, r1
 801574c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 801574e:	fb03 f202 	mul.w	r2, r3, r2
 8015752:	f7ff ba9c 	b.w	8014c8e <st_sssa8_ch_nn_mat_mult_nt_t+0x15e>
 8015756:	2301      	movs	r3, #1
 8015758:	9308      	str	r3, [sp, #32]
 801575a:	f7ff ba84 	b.w	8014c66 <st_sssa8_ch_nn_mat_mult_nt_t+0x136>
 801575e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8015760:	40a8      	lsls	r0, r5
 8015762:	f300 001f 	ssat	r0, #32, r0
 8015766:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015768:	fb50 f016 	smmulr	r0, r0, r6
 801576c:	40ac      	lsls	r4, r5
 801576e:	f304 041f 	ssat	r4, #32, r4
 8015772:	fb54 f416 	smmulr	r4, r4, r6
 8015776:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015778:	4428      	add	r0, r5
 801577a:	f300 0007 	ssat	r0, #8, r0
 801577e:	9e03      	ldr	r6, [sp, #12]
 8015780:	7030      	strb	r0, [r6, #0]
 8015782:	1928      	adds	r0, r5, r4
 8015784:	f300 0007 	ssat	r0, #8, r0
 8015788:	7008      	strb	r0, [r1, #0]
 801578a:	e521      	b.n	80151d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x6a0>
 801578c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801578e:	4082      	lsls	r2, r0
 8015790:	f302 021f 	ssat	r2, #32, r2
 8015794:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015796:	fb52 f214 	smmulr	r2, r2, r4
 801579a:	4083      	lsls	r3, r0
 801579c:	f303 031f 	ssat	r3, #32, r3
 80157a0:	fb53 f314 	smmulr	r3, r3, r4
 80157a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80157a6:	4402      	add	r2, r0
 80157a8:	f302 0207 	ssat	r2, #8, r2
 80157ac:	9c03      	ldr	r4, [sp, #12]
 80157ae:	4403      	add	r3, r0
 80157b0:	7062      	strb	r2, [r4, #1]
 80157b2:	f303 0307 	ssat	r3, #8, r3
 80157b6:	704b      	strb	r3, [r1, #1]
 80157b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80157bc:	e411      	b.n	8014fe2 <st_sssa8_ch_nn_mat_mult_nt_t+0x4b2>
 80157be:	3301      	adds	r3, #1
 80157c0:	d056      	beq.n	8015870 <st_sssa8_ch_nn_mat_mult_nt_t+0xd40>
 80157c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80157c4:	2001      	movs	r0, #1
 80157c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80157c8:	1e93      	subs	r3, r2, #2
 80157ca:	3a01      	subs	r2, #1
 80157cc:	fa00 f303 	lsl.w	r3, r0, r3
 80157d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80157d2:	fb50 3304 	smmla	r3, r0, r4, r3
 80157d6:	4113      	asrs	r3, r2
 80157d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80157da:	4413      	add	r3, r2
 80157dc:	f303 0307 	ssat	r3, #8, r3
 80157e0:	700b      	strb	r3, [r1, #0]
 80157e2:	e40b      	b.n	8014ffc <st_sssa8_ch_nn_mat_mult_nt_t+0x4cc>
 80157e4:	3301      	adds	r3, #1
 80157e6:	d032      	beq.n	801584e <st_sssa8_ch_nn_mat_mult_nt_t+0xd1e>
 80157e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80157ea:	2001      	movs	r0, #1
 80157ec:	1e93      	subs	r3, r2, #2
 80157ee:	3a01      	subs	r2, #1
 80157f0:	fa00 f303 	lsl.w	r3, r0, r3
 80157f4:	e9dd 4009 	ldrd	r4, r0, [sp, #36]	; 0x24
 80157f8:	fb50 3304 	smmla	r3, r0, r4, r3
 80157fc:	4113      	asrs	r3, r2
 80157fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015800:	4413      	add	r3, r2
 8015802:	f303 0307 	ssat	r3, #8, r3
 8015806:	9a03      	ldr	r2, [sp, #12]
 8015808:	7013      	strb	r3, [r2, #0]
 801580a:	e660      	b.n	80154ce <st_sssa8_ch_nn_mat_mult_nt_t+0x99e>
 801580c:	9d4c      	ldr	r5, [sp, #304]	; 0x130
 801580e:	442e      	add	r6, r5
 8015810:	e489      	b.n	8015126 <st_sssa8_ch_nn_mat_mult_nt_t+0x5f6>
 8015812:	f1bc 0f00 	cmp.w	ip, #0
 8015816:	dd0b      	ble.n	8015830 <st_sssa8_ch_nn_mat_mult_nt_t+0xd00>
 8015818:	ea4f 0947 	mov.w	r9, r7, lsl #1
 801581c:	6805      	ldr	r5, [r0, #0]
 801581e:	6827      	ldr	r7, [r4, #0]
 8015820:	fb59 7705 	smmla	r7, r9, r5, r7
 8015824:	fa47 f50c 	asr.w	r5, r7, ip
 8015828:	f305 0507 	ssat	r5, #8, r5
 801582c:	7035      	strb	r5, [r6, #0]
 801582e:	e46c      	b.n	801510a <st_sssa8_ch_nn_mat_mult_nt_t+0x5da>
 8015830:	f1cc 0c01 	rsb	ip, ip, #1
 8015834:	fa07 f70c 	lsl.w	r7, r7, ip
 8015838:	f307 071f 	ssat	r7, #32, r7
 801583c:	6805      	ldr	r5, [r0, #0]
 801583e:	fb57 f715 	smmulr	r7, r7, r5
 8015842:	6825      	ldr	r5, [r4, #0]
 8015844:	443d      	add	r5, r7
 8015846:	f305 0507 	ssat	r5, #8, r5
 801584a:	7035      	strb	r5, [r6, #0]
 801584c:	e45d      	b.n	801510a <st_sssa8_ch_nn_mat_mult_nt_t+0x5da>
 801584e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015852:	f1c3 0301 	rsb	r3, r3, #1
 8015856:	409a      	lsls	r2, r3
 8015858:	f302 031f 	ssat	r3, #32, r2
 801585c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801585e:	fb53 f312 	smmulr	r3, r3, r2
 8015862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015864:	441a      	add	r2, r3
 8015866:	f302 0307 	ssat	r3, #8, r2
 801586a:	9a03      	ldr	r2, [sp, #12]
 801586c:	7013      	strb	r3, [r2, #0]
 801586e:	e62e      	b.n	80154ce <st_sssa8_ch_nn_mat_mult_nt_t+0x99e>
 8015870:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015872:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015874:	f1c3 0301 	rsb	r3, r3, #1
 8015878:	409a      	lsls	r2, r3
 801587a:	f302 031f 	ssat	r3, #32, r2
 801587e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015880:	fb53 f312 	smmulr	r3, r3, r2
 8015884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015886:	441a      	add	r2, r3
 8015888:	f302 0307 	ssat	r3, #8, r2
 801588c:	700b      	strb	r3, [r1, #0]
 801588e:	f7ff bbb5 	b.w	8014ffc <st_sssa8_ch_nn_mat_mult_nt_t+0x4cc>
 8015892:	4602      	mov	r2, r0
 8015894:	9952      	ldr	r1, [sp, #328]	; 0x148
 8015896:	4603      	mov	r3, r0
 8015898:	e73d      	b.n	8015716 <st_sssa8_ch_nn_mat_mult_nt_t+0xbe6>
 801589a:	f04f 0e00 	mov.w	lr, #0
 801589e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80158a0:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
 80158a4:	459e      	cmp	lr, r3
 80158a6:	f6ff ad8b 	blt.w	80153c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x890>
 80158aa:	9f01      	ldr	r7, [sp, #4]
 80158ac:	e5b9      	b.n	8015422 <st_sssa8_ch_nn_mat_mult_nt_t+0x8f2>
 80158ae:	4626      	mov	r6, r4
 80158b0:	e6d0      	b.n	8015654 <st_sssa8_ch_nn_mat_mult_nt_t+0xb24>
 80158b2:	9f52      	ldr	r7, [sp, #328]	; 0x148
 80158b4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80158b6:	f8dd c14c 	ldr.w	ip, [sp, #332]	; 0x14c
 80158ba:	e698      	b.n	80155ee <st_sssa8_ch_nn_mat_mult_nt_t+0xabe>

080158bc <st_int8_avepool>:
 80158bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c0:	b095      	sub	sp, #84	; 0x54
 80158c2:	4699      	mov	r9, r3
 80158c4:	4692      	mov	sl, r2
 80158c6:	ee80 6a20 	vdiv.f32	s12, s0, s1
 80158ca:	9102      	str	r1, [sp, #8]
 80158cc:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 80158d0:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80158d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80158d6:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 80158da:	930d      	str	r3, [sp, #52]	; 0x34
 80158dc:	9110      	str	r1, [sp, #64]	; 0x40
 80158de:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80158e2:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 80158e6:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 80158ea:	9309      	str	r3, [sp, #36]	; 0x24
 80158ec:	9104      	str	r1, [sp, #16]
 80158ee:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 80158f2:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 80158f6:	930e      	str	r3, [sp, #56]	; 0x38
 80158f8:	ee03 1a90 	vmov	s7, r1
 80158fc:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 8015900:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 8015904:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 8015908:	9211      	str	r2, [sp, #68]	; 0x44
 801590a:	2a00      	cmp	r2, #0
 801590c:	f000 80b3 	beq.w	8015a76 <st_int8_avepool+0x1ba>
 8015910:	eeb4 0a60 	vcmp.f32	s0, s1
 8015914:	ee03 1a10 	vmov	s6, r1
 8015918:	4683      	mov	fp, r0
 801591a:	ee13 1a90 	vmov	r1, s7
 801591e:	ee13 0a10 	vmov	r0, s6
 8015922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015926:	bf0c      	ite	eq
 8015928:	2201      	moveq	r2, #1
 801592a:	2200      	movne	r2, #0
 801592c:	4281      	cmp	r1, r0
 801592e:	bf14      	ite	ne
 8015930:	2200      	movne	r2, #0
 8015932:	f002 0201 	andeq.w	r2, r2, #1
 8015936:	f1b8 0f01 	cmp.w	r8, #1
 801593a:	9201      	str	r2, [sp, #4]
 801593c:	f040 80c2 	bne.w	8015ac4 <st_int8_avepool+0x208>
 8015940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015942:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8015abc <st_int8_avepool+0x200>
 8015946:	1ad3      	subs	r3, r2, r3
 8015948:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8015ac0 <st_int8_avepool+0x204>
 801594c:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8015950:	b29b      	uxth	r3, r3
 8015952:	1a89      	subs	r1, r1, r2
 8015954:	4252      	negs	r2, r2
 8015956:	9306      	str	r3, [sp, #24]
 8015958:	b293      	uxth	r3, r2
 801595a:	2200      	movs	r2, #0
 801595c:	910d      	str	r1, [sp, #52]	; 0x34
 801595e:	930c      	str	r3, [sp, #48]	; 0x30
 8015960:	4613      	mov	r3, r2
 8015962:	9904      	ldr	r1, [sp, #16]
 8015964:	2900      	cmp	r1, #0
 8015966:	f000 80a6 	beq.w	8015ab6 <st_int8_avepool+0x1fa>
 801596a:	b292      	uxth	r2, r2
 801596c:	2100      	movs	r1, #0
 801596e:	eeb8 4ae3 	vcvt.f32.s32	s8, s7
 8015972:	9207      	str	r2, [sp, #28]
 8015974:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 8015978:	9a04      	ldr	r2, [sp, #16]
 801597a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801597e:	4688      	mov	r8, r1
 8015980:	fb02 f303 	mul.w	r3, r2, r3
 8015984:	9a06      	ldr	r2, [sp, #24]
 8015986:	9308      	str	r3, [sp, #32]
 8015988:	fa0f fe82 	sxth.w	lr, r2
 801598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801598e:	1ad3      	subs	r3, r2, r3
 8015990:	b21b      	sxth	r3, r3
 8015992:	930b      	str	r3, [sp, #44]	; 0x2c
 8015994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015996:	9303      	str	r3, [sp, #12]
 8015998:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801599c:	9305      	str	r3, [sp, #20]
 801599e:	b28b      	uxth	r3, r1
 80159a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80159a2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80159a6:	930a      	str	r3, [sp, #40]	; 0x28
 80159a8:	4570      	cmp	r0, lr
 80159aa:	9b08      	ldr	r3, [sp, #32]
 80159ac:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80159b0:	4498      	add	r8, r3
 80159b2:	da79      	bge.n	8015aa8 <st_int8_avepool+0x1ec>
 80159b4:	2700      	movs	r7, #0
 80159b6:	46bc      	mov	ip, r7
 80159b8:	42a6      	cmp	r6, r4
 80159ba:	da17      	bge.n	80159ec <st_int8_avepool+0x130>
 80159bc:	43c5      	mvns	r5, r0
 80159be:	4548      	cmp	r0, r9
 80159c0:	fb0a f200 	mul.w	r2, sl, r0
 80159c4:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 80159c8:	da10      	bge.n	80159ec <st_int8_avepool+0x130>
 80159ca:	4432      	add	r2, r6
 80159cc:	4633      	mov	r3, r6
 80159ce:	445a      	add	r2, fp
 80159d0:	0419      	lsls	r1, r3, #16
 80159d2:	d406      	bmi.n	80159e2 <st_int8_avepool+0x126>
 80159d4:	b12d      	cbz	r5, 80159e2 <st_int8_avepool+0x126>
 80159d6:	4553      	cmp	r3, sl
 80159d8:	da03      	bge.n	80159e2 <st_int8_avepool+0x126>
 80159da:	f992 1000 	ldrsb.w	r1, [r2]
 80159de:	3701      	adds	r7, #1
 80159e0:	448c      	add	ip, r1
 80159e2:	3301      	adds	r3, #1
 80159e4:	3201      	adds	r2, #1
 80159e6:	b219      	sxth	r1, r3
 80159e8:	42a1      	cmp	r1, r4
 80159ea:	dbf1      	blt.n	80159d0 <st_int8_avepool+0x114>
 80159ec:	3001      	adds	r0, #1
 80159ee:	b200      	sxth	r0, r0
 80159f0:	4570      	cmp	r0, lr
 80159f2:	dbe1      	blt.n	80159b8 <st_int8_avepool+0xfc>
 80159f4:	9b01      	ldr	r3, [sp, #4]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d140      	bne.n	8015a7c <st_int8_avepool+0x1c0>
 80159fa:	ee07 ca90 	vmov	s15, ip
 80159fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015a02:	ee07 7a90 	vmov	s15, r7
 8015a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015a0e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8015a12:	eeb0 7a64 	vmov.f32	s14, s9
 8015a16:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015a1a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a22:	fe65 7a25 	vselge.f32	s15, s10, s11
 8015a26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015a2e:	ee17 3a90 	vmov	r3, s15
 8015a32:	f303 0307 	ssat	r3, #8, r3
 8015a36:	9a02      	ldr	r2, [sp, #8]
 8015a38:	f802 3008 	strb.w	r3, [r2, r8]
 8015a3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015a3e:	9b05      	ldr	r3, [sp, #20]
 8015a40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015a42:	4403      	add	r3, r0
 8015a44:	9a03      	ldr	r2, [sp, #12]
 8015a46:	3101      	adds	r1, #1
 8015a48:	b29b      	uxth	r3, r3
 8015a4a:	4402      	add	r2, r0
 8015a4c:	b209      	sxth	r1, r1
 8015a4e:	9305      	str	r3, [sp, #20]
 8015a50:	b292      	uxth	r2, r2
 8015a52:	9b04      	ldr	r3, [sp, #16]
 8015a54:	4688      	mov	r8, r1
 8015a56:	9203      	str	r2, [sp, #12]
 8015a58:	428b      	cmp	r3, r1
 8015a5a:	dca0      	bgt.n	801599e <st_int8_avepool+0xe2>
 8015a5c:	9a07      	ldr	r2, [sp, #28]
 8015a5e:	9b06      	ldr	r3, [sp, #24]
 8015a60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015a62:	3201      	adds	r2, #1
 8015a64:	440b      	add	r3, r1
 8015a66:	b212      	sxth	r2, r2
 8015a68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	4291      	cmp	r1, r2
 8015a6e:	9306      	str	r3, [sp, #24]
 8015a70:	4613      	mov	r3, r2
 8015a72:	f73f af76 	bgt.w	8015962 <st_int8_avepool+0xa6>
 8015a76:	b015      	add	sp, #84	; 0x54
 8015a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a7c:	f1bc 0f00 	cmp.w	ip, #0
 8015a80:	db09      	blt.n	8015a96 <st_int8_avepool+0x1da>
 8015a82:	eb0c 0367 	add.w	r3, ip, r7, asr #1
 8015a86:	fbb3 f7f7 	udiv	r7, r3, r7
 8015a8a:	f307 0307 	ssat	r3, #8, r7
 8015a8e:	9a02      	ldr	r2, [sp, #8]
 8015a90:	f802 3008 	strb.w	r3, [r2, r8]
 8015a94:	e7d2      	b.n	8015a3c <st_int8_avepool+0x180>
 8015a96:	2f00      	cmp	r7, #0
 8015a98:	463b      	mov	r3, r7
 8015a9a:	bfb8      	it	lt
 8015a9c:	1c7b      	addlt	r3, r7, #1
 8015a9e:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8015aa2:	fb93 f7f7 	sdiv	r7, r3, r7
 8015aa6:	e7f0      	b.n	8015a8a <st_int8_avepool+0x1ce>
 8015aa8:	9b01      	ldr	r3, [sp, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f040 80df 	bne.w	8015c6e <st_int8_avepool+0x3b2>
 8015ab0:	eef0 7a62 	vmov.f32	s15, s5
 8015ab4:	e7ab      	b.n	8015a0e <st_int8_avepool+0x152>
 8015ab6:	b293      	uxth	r3, r2
 8015ab8:	9307      	str	r3, [sp, #28]
 8015aba:	e7cf      	b.n	8015a5c <st_int8_avepool+0x1a0>
 8015abc:	befffffc 	.word	0xbefffffc
 8015ac0:	7fc00000 	.word	0x7fc00000
 8015ac4:	425b      	negs	r3, r3
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	9904      	ldr	r1, [sp, #16]
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	f8cd b00c 	str.w	fp, [sp, #12]
 8015ad0:	ed5f 5a06 	vldr	s11, [pc, #-24]	; 8015abc <st_int8_avepool+0x200>
 8015ad4:	46d3      	mov	fp, sl
 8015ad6:	9308      	str	r3, [sp, #32]
 8015ad8:	46ca      	mov	sl, r9
 8015ada:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8015ac0 <st_int8_avepool+0x204>
 8015ade:	4613      	mov	r3, r2
 8015ae0:	2900      	cmp	r1, #0
 8015ae2:	f000 80a3 	beq.w	8015c2c <st_int8_avepool+0x370>
 8015ae6:	b292      	uxth	r2, r2
 8015ae8:	2100      	movs	r1, #0
 8015aea:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8015aee:	920c      	str	r2, [sp, #48]	; 0x30
 8015af0:	9a04      	ldr	r2, [sp, #16]
 8015af2:	fb03 f302 	mul.w	r3, r3, r2
 8015af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015af8:	9313      	str	r3, [sp, #76]	; 0x4c
 8015afa:	4253      	negs	r3, r2
 8015afc:	b29b      	uxth	r3, r3
 8015afe:	9306      	str	r3, [sp, #24]
 8015b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b02:	1a9b      	subs	r3, r3, r2
 8015b04:	b29b      	uxth	r3, r3
 8015b06:	9307      	str	r3, [sp, #28]
 8015b08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	fa0f fe83 	sxth.w	lr, r3
 8015b12:	b213      	sxth	r3, r2
 8015b14:	930a      	str	r3, [sp, #40]	; 0x28
 8015b16:	460b      	mov	r3, r1
 8015b18:	f1b8 0f00 	cmp.w	r8, #0
 8015b1c:	f000 80a4 	beq.w	8015c68 <st_int8_avepool+0x3ac>
 8015b20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015b22:	eeb8 4ac3 	vcvt.f32.s32	s8, s6
 8015b26:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8015b2a:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8015b2e:	4413      	add	r3, r2
 8015b30:	b28a      	uxth	r2, r1
 8015b32:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 8015b36:	920b      	str	r2, [sp, #44]	; 0x2c
 8015b38:	9a02      	ldr	r2, [sp, #8]
 8015b3a:	fb08 2303 	mla	r3, r8, r3, r2
 8015b3e:	9312      	str	r3, [sp, #72]	; 0x48
 8015b40:	2300      	movs	r3, #0
 8015b42:	4699      	mov	r9, r3
 8015b44:	9305      	str	r3, [sp, #20]
 8015b46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b48:	4570      	cmp	r0, lr
 8015b4a:	f280 8088 	bge.w	8015c5e <st_int8_avepool+0x3a2>
 8015b4e:	2700      	movs	r7, #0
 8015b50:	46bc      	mov	ip, r7
 8015b52:	42ae      	cmp	r6, r5
 8015b54:	da1a      	bge.n	8015b8c <st_int8_avepool+0x2d0>
 8015b56:	43c4      	mvns	r4, r0
 8015b58:	4550      	cmp	r0, sl
 8015b5a:	fb0b f300 	mul.w	r3, fp, r0
 8015b5e:	f3c4 34c0 	ubfx	r4, r4, #15, #1
 8015b62:	da13      	bge.n	8015b8c <st_int8_avepool+0x2d0>
 8015b64:	199a      	adds	r2, r3, r6
 8015b66:	9b03      	ldr	r3, [sp, #12]
 8015b68:	fb08 9202 	mla	r2, r8, r2, r9
 8015b6c:	441a      	add	r2, r3
 8015b6e:	4633      	mov	r3, r6
 8015b70:	0419      	lsls	r1, r3, #16
 8015b72:	d406      	bmi.n	8015b82 <st_int8_avepool+0x2c6>
 8015b74:	b12c      	cbz	r4, 8015b82 <st_int8_avepool+0x2c6>
 8015b76:	459b      	cmp	fp, r3
 8015b78:	dd03      	ble.n	8015b82 <st_int8_avepool+0x2c6>
 8015b7a:	f992 1000 	ldrsb.w	r1, [r2]
 8015b7e:	3701      	adds	r7, #1
 8015b80:	448c      	add	ip, r1
 8015b82:	3301      	adds	r3, #1
 8015b84:	4442      	add	r2, r8
 8015b86:	b219      	sxth	r1, r3
 8015b88:	42a9      	cmp	r1, r5
 8015b8a:	dbf1      	blt.n	8015b70 <st_int8_avepool+0x2b4>
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	b200      	sxth	r0, r0
 8015b90:	4570      	cmp	r0, lr
 8015b92:	dbde      	blt.n	8015b52 <st_int8_avepool+0x296>
 8015b94:	9b01      	ldr	r3, [sp, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d14b      	bne.n	8015c32 <st_int8_avepool+0x376>
 8015b9a:	ee07 ca90 	vmov	s15, ip
 8015b9e:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8015ba2:	ee07 7a90 	vmov	s15, r7
 8015ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015baa:	eec2 7a87 	vdiv.f32	s15, s5, s14
 8015bae:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8015bb2:	eeb0 7a44 	vmov.f32	s14, s8
 8015bb6:	eea7 7a86 	vfma.f32	s14, s15, s12
 8015bba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc2:	fe64 7aa5 	vselge.f32	s15, s9, s11
 8015bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015bce:	ee17 3a90 	vmov	r3, s15
 8015bd2:	f303 0307 	ssat	r3, #8, r3
 8015bd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015bd8:	f802 3009 	strb.w	r3, [r2, r9]
 8015bdc:	9b05      	ldr	r3, [sp, #20]
 8015bde:	3301      	adds	r3, #1
 8015be0:	b21b      	sxth	r3, r3
 8015be2:	4543      	cmp	r3, r8
 8015be4:	4699      	mov	r9, r3
 8015be6:	9305      	str	r3, [sp, #20]
 8015be8:	dbad      	blt.n	8015b46 <st_int8_avepool+0x28a>
 8015bea:	9a06      	ldr	r2, [sp, #24]
 8015bec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015bee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bf0:	4402      	add	r2, r0
 8015bf2:	9b07      	ldr	r3, [sp, #28]
 8015bf4:	3101      	adds	r1, #1
 8015bf6:	b292      	uxth	r2, r2
 8015bf8:	4403      	add	r3, r0
 8015bfa:	b209      	sxth	r1, r1
 8015bfc:	9206      	str	r2, [sp, #24]
 8015bfe:	b29b      	uxth	r3, r3
 8015c00:	9a04      	ldr	r2, [sp, #16]
 8015c02:	9307      	str	r3, [sp, #28]
 8015c04:	460b      	mov	r3, r1
 8015c06:	4291      	cmp	r1, r2
 8015c08:	db86      	blt.n	8015b18 <st_int8_avepool+0x25c>
 8015c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c0c:	9b08      	ldr	r3, [sp, #32]
 8015c0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015c10:	3201      	adds	r2, #1
 8015c12:	440b      	add	r3, r1
 8015c14:	b212      	sxth	r2, r2
 8015c16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	4291      	cmp	r1, r2
 8015c1c:	9308      	str	r3, [sp, #32]
 8015c1e:	4613      	mov	r3, r2
 8015c20:	f77f af29 	ble.w	8015a76 <st_int8_avepool+0x1ba>
 8015c24:	9904      	ldr	r1, [sp, #16]
 8015c26:	2900      	cmp	r1, #0
 8015c28:	f47f af5d 	bne.w	8015ae6 <st_int8_avepool+0x22a>
 8015c2c:	b293      	uxth	r3, r2
 8015c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8015c30:	e7eb      	b.n	8015c0a <st_int8_avepool+0x34e>
 8015c32:	f1bc 0f00 	cmp.w	ip, #0
 8015c36:	db09      	blt.n	8015c4c <st_int8_avepool+0x390>
 8015c38:	eb0c 0c67 	add.w	ip, ip, r7, asr #1
 8015c3c:	fbbc f7f7 	udiv	r7, ip, r7
 8015c40:	f307 0707 	ssat	r7, #8, r7
 8015c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015c46:	f803 7009 	strb.w	r7, [r3, r9]
 8015c4a:	e7c7      	b.n	8015bdc <st_int8_avepool+0x320>
 8015c4c:	2f00      	cmp	r7, #0
 8015c4e:	463b      	mov	r3, r7
 8015c50:	bfb8      	it	lt
 8015c52:	1c7b      	addlt	r3, r7, #1
 8015c54:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 8015c58:	fb93 f7f7 	sdiv	r7, r3, r7
 8015c5c:	e7f0      	b.n	8015c40 <st_int8_avepool+0x384>
 8015c5e:	9b01      	ldr	r3, [sp, #4]
 8015c60:	b92b      	cbnz	r3, 8015c6e <st_int8_avepool+0x3b2>
 8015c62:	eef0 7a66 	vmov.f32	s15, s13
 8015c66:	e7a2      	b.n	8015bae <st_int8_avepool+0x2f2>
 8015c68:	b28b      	uxth	r3, r1
 8015c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c6c:	e7bd      	b.n	8015bea <st_int8_avepool+0x32e>
 8015c6e:	deff      	udf	#255	; 0xff

08015c70 <ai_sum_f32>:
 8015c70:	edd1 7a00 	vldr	s15, [r1]
 8015c74:	ed92 7a00 	vldr	s14, [r2]
 8015c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c7c:	edc0 7a00 	vstr	s15, [r0]
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop

08015c84 <ai_sum_buffer_INT8>:
 8015c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c88:	b085      	sub	sp, #20
 8015c8a:	469a      	mov	sl, r3
 8015c8c:	2701      	movs	r7, #1
 8015c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015c92:	ed93 4a00 	vldr	s8, [r3]
 8015c96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015c98:	edd4 4a00 	vldr	s9, [r4]
 8015c9c:	ed93 5a00 	vldr	s10, [r3]
 8015ca0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015ca4:	ee84 7a05 	vdiv.f32	s14, s8, s10
 8015ca8:	f8cd a000 	str.w	sl, [sp]
 8015cac:	eec4 6a85 	vdiv.f32	s13, s9, s10
 8015cb0:	ee17 3a10 	vmov	r3, s14
 8015cb4:	ee37 6a07 	vadd.f32	s12, s14, s14
 8015cb8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8015cbc:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 8015cc0:	ee16 4a90 	vmov	r4, s13
 8015cc4:	ee76 5aa6 	vadd.f32	s11, s13, s13
 8015cc8:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8015ccc:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 8015cd0:	f1c4 047e 	rsb	r4, r4, #126	; 0x7e
 8015cd4:	429c      	cmp	r4, r3
 8015cd6:	bfa8      	it	ge
 8015cd8:	461c      	movge	r4, r3
 8015cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cdc:	f104 051d 	add.w	r5, r4, #29
 8015ce0:	f993 c000 	ldrsb.w	ip, [r3]
 8015ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ce6:	fa07 f505 	lsl.w	r5, r7, r5
 8015cea:	f993 9000 	ldrsb.w	r9, [r3]
 8015cee:	ee07 5a90 	vmov	s15, r5
 8015cf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cf8:	f993 5000 	ldrsb.w	r5, [r3]
 8015cfc:	4653      	mov	r3, sl
 8015cfe:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8015d02:	089b      	lsrs	r3, r3, #2
 8015d04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015d08:	eebd 6ae5 	vcvt.s32.f32	s12, s11
 8015d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015d10:	ee16 ea10 	vmov	lr, s12
 8015d14:	ee17 6a90 	vmov	r6, s15
 8015d18:	f1b8 0f00 	cmp.w	r8, #0
 8015d1c:	f040 80d1 	bne.w	8015ec2 <ai_sum_buffer_INT8+0x23e>
 8015d20:	eef4 4a45 	vcmp.f32	s9, s10
 8015d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d28:	d11b      	bne.n	8015d62 <ai_sum_buffer_INT8+0xde>
 8015d2a:	45ac      	cmp	ip, r5
 8015d2c:	d119      	bne.n	8015d62 <ai_sum_buffer_INT8+0xde>
 8015d2e:	eeb4 4a45 	vcmp.f32	s8, s10
 8015d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d36:	d114      	bne.n	8015d62 <ai_sum_buffer_INT8+0xde>
 8015d38:	45a9      	cmp	r9, r5
 8015d3a:	d112      	bne.n	8015d62 <ai_sum_buffer_INT8+0xde>
 8015d3c:	4653      	mov	r3, sl
 8015d3e:	b16b      	cbz	r3, 8015d5c <ai_sum_buffer_INT8+0xd8>
 8015d40:	4403      	add	r3, r0
 8015d42:	461e      	mov	r6, r3
 8015d44:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8015d48:	f912 4b01 	ldrsb.w	r4, [r2], #1
 8015d4c:	4423      	add	r3, r4
 8015d4e:	1b5b      	subs	r3, r3, r5
 8015d50:	f303 0307 	ssat	r3, #8, r3
 8015d54:	f800 3b01 	strb.w	r3, [r0], #1
 8015d58:	4286      	cmp	r6, r0
 8015d5a:	d1f3      	bne.n	8015d44 <ai_sum_buffer_INT8+0xc0>
 8015d5c:	b005      	add	sp, #20
 8015d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d62:	ee07 9a90 	vmov	s15, r9
 8015d66:	f1cc 0c00 	rsb	ip, ip, #0
 8015d6a:	f104 0a16 	add.w	sl, r4, #22
 8015d6e:	3415      	adds	r4, #21
 8015d70:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015d74:	ee06 ca10 	vmov	s12, ip
 8015d78:	ee07 5a90 	vmov	s15, r5
 8015d7c:	2501      	movs	r5, #1
 8015d7e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015d82:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8015d86:	fa05 f404 	lsl.w	r4, r5, r4
 8015d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d8e:	fa05 f50a 	lsl.w	r5, r5, sl
 8015d92:	eea6 7a26 	vfma.f32	s14, s12, s13
 8015d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015d9a:	ee07 5a10 	vmov	s14, r5
 8015d9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015da2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015da6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015daa:	ee17 7a90 	vmov	r7, s15
 8015dae:	4427      	add	r7, r4
 8015db0:	3f01      	subs	r7, #1
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f000 818f 	beq.w	80160d6 <ai_sum_buffer_INT8+0x452>
 8015db8:	009c      	lsls	r4, r3, #2
 8015dba:	f100 0904 	add.w	r9, r0, #4
 8015dbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015dc2:	4693      	mov	fp, r2
 8015dc4:	9401      	str	r4, [sp, #4]
 8015dc6:	4698      	mov	r8, r3
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	9002      	str	r0, [sp, #8]
 8015dcc:	f851 4b04 	ldr.w	r4, [r1], #4
 8015dd0:	f85b 3b04 	ldr.w	r3, [fp], #4
 8015dd4:	ea4f 2c04 	mov.w	ip, r4, lsl #8
 8015dd8:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 8015ddc:	fb3e 750c 	smlawb	r5, lr, ip, r7
 8015de0:	0218      	lsls	r0, r3, #8
 8015de2:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8015de6:	fb36 5500 	smlawb	r5, r6, r0, r5
 8015dea:	fa45 f50a 	asr.w	r5, r5, sl
 8015dee:	f305 0507 	ssat	r5, #8, r5
 8015df2:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 8015df6:	f809 5c04 	strb.w	r5, [r9, #-4]
 8015dfa:	fb3e 7504 	smlawb	r5, lr, r4, r7
 8015dfe:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8015e02:	fb36 5503 	smlawb	r5, r6, r3, r5
 8015e06:	fa45 f50a 	asr.w	r5, r5, sl
 8015e0a:	f305 0507 	ssat	r5, #8, r5
 8015e0e:	f809 5c03 	strb.w	r5, [r9, #-3]
 8015e12:	fb3e 7c1c 	smlawt	ip, lr, ip, r7
 8015e16:	fb36 c010 	smlawt	r0, r6, r0, ip
 8015e1a:	fa40 f00a 	asr.w	r0, r0, sl
 8015e1e:	f300 0007 	ssat	r0, #8, r0
 8015e22:	f809 0c02 	strb.w	r0, [r9, #-2]
 8015e26:	fb3e 7414 	smlawt	r4, lr, r4, r7
 8015e2a:	fb36 4313 	smlawt	r3, r6, r3, r4
 8015e2e:	fa43 f30a 	asr.w	r3, r3, sl
 8015e32:	f303 0307 	ssat	r3, #8, r3
 8015e36:	4541      	cmp	r1, r8
 8015e38:	f809 3c01 	strb.w	r3, [r9, #-1]
 8015e3c:	f109 0904 	add.w	r9, r9, #4
 8015e40:	d1c4      	bne.n	8015dcc <ai_sum_buffer_INT8+0x148>
 8015e42:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
 8015e46:	4418      	add	r0, r3
 8015e48:	441a      	add	r2, r3
 8015e4a:	9b00      	ldr	r3, [sp, #0]
 8015e4c:	f013 0303 	ands.w	r3, r3, #3
 8015e50:	d084      	beq.n	8015d5c <ai_sum_buffer_INT8+0xd8>
 8015e52:	9d03      	ldr	r5, [sp, #12]
 8015e54:	f995 1000 	ldrsb.w	r1, [r5]
 8015e58:	0209      	lsls	r1, r1, #8
 8015e5a:	fb3e 7401 	smlawb	r4, lr, r1, r7
 8015e5e:	f992 1000 	ldrsb.w	r1, [r2]
 8015e62:	0209      	lsls	r1, r1, #8
 8015e64:	fb36 4101 	smlawb	r1, r6, r1, r4
 8015e68:	fa41 f10a 	asr.w	r1, r1, sl
 8015e6c:	f301 0107 	ssat	r1, #8, r1
 8015e70:	3b01      	subs	r3, #1
 8015e72:	7001      	strb	r1, [r0, #0]
 8015e74:	f43f af72 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 8015e78:	f995 1001 	ldrsb.w	r1, [r5, #1]
 8015e7c:	0209      	lsls	r1, r1, #8
 8015e7e:	fb3e 7401 	smlawb	r4, lr, r1, r7
 8015e82:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8015e86:	0209      	lsls	r1, r1, #8
 8015e88:	fb36 4101 	smlawb	r1, r6, r1, r4
 8015e8c:	fa41 f10a 	asr.w	r1, r1, sl
 8015e90:	f301 0107 	ssat	r1, #8, r1
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	7041      	strb	r1, [r0, #1]
 8015e98:	f43f af60 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 8015e9c:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8015ea0:	021b      	lsls	r3, r3, #8
 8015ea2:	fb3e 7703 	smlawb	r7, lr, r3, r7
 8015ea6:	f992 3002 	ldrsb.w	r3, [r2, #2]
 8015eaa:	021b      	lsls	r3, r3, #8
 8015eac:	fb36 7603 	smlawb	r6, r6, r3, r7
 8015eb0:	fa46 fa0a 	asr.w	sl, r6, sl
 8015eb4:	f30a 0a07 	ssat	sl, #8, sl
 8015eb8:	f880 a002 	strb.w	sl, [r0, #2]
 8015ebc:	b005      	add	sp, #20
 8015ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec2:	f1b8 0f01 	cmp.w	r8, #1
 8015ec6:	d07f      	beq.n	8015fc8 <ai_sum_buffer_INT8+0x344>
 8015ec8:	ee07 ca90 	vmov	s15, ip
 8015ecc:	f992 2000 	ldrsb.w	r2, [r2]
 8015ed0:	f104 0616 	add.w	r6, r4, #22
 8015ed4:	3415      	adds	r4, #21
 8015ed6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015eda:	ee07 5a90 	vmov	s15, r5
 8015ede:	eba2 0209 	sub.w	r2, r2, r9
 8015ee2:	fa07 f404 	lsl.w	r4, r7, r4
 8015ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015eea:	40b7      	lsls	r7, r6
 8015eec:	ee05 2a90 	vmov	s11, r2
 8015ef0:	eee6 7a66 	vfms.f32	s15, s12, s13
 8015ef4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015ef8:	eee5 7a87 	vfma.f32	s15, s11, s14
 8015efc:	ee07 7a10 	vmov	s14, r7
 8015f00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015f0c:	ee17 2a90 	vmov	r2, s15
 8015f10:	4422      	add	r2, r4
 8015f12:	4614      	mov	r4, r2
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	f000 80e0 	beq.w	80160da <ai_sum_buffer_INT8+0x456>
 8015f1a:	1d05      	adds	r5, r0, #4
 8015f1c:	009f      	lsls	r7, r3, #2
 8015f1e:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8015f22:	f851 3b04 	ldr.w	r3, [r1], #4
 8015f26:	021a      	lsls	r2, r3, #8
 8015f28:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8015f2c:	fb3e 4802 	smlawb	r8, lr, r2, r4
 8015f30:	fa48 f806 	asr.w	r8, r8, r6
 8015f34:	f308 0807 	ssat	r8, #8, r8
 8015f38:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8015f3c:	f805 8c04 	strb.w	r8, [r5, #-4]
 8015f40:	fb3e 4803 	smlawb	r8, lr, r3, r4
 8015f44:	fa48 f806 	asr.w	r8, r8, r6
 8015f48:	f308 0807 	ssat	r8, #8, r8
 8015f4c:	f805 8c03 	strb.w	r8, [r5, #-3]
 8015f50:	fb3e 4212 	smlawt	r2, lr, r2, r4
 8015f54:	4132      	asrs	r2, r6
 8015f56:	f302 0207 	ssat	r2, #8, r2
 8015f5a:	f805 2c02 	strb.w	r2, [r5, #-2]
 8015f5e:	fb3e 4313 	smlawt	r3, lr, r3, r4
 8015f62:	4133      	asrs	r3, r6
 8015f64:	f303 0307 	ssat	r3, #8, r3
 8015f68:	4561      	cmp	r1, ip
 8015f6a:	f805 3c01 	strb.w	r3, [r5, #-1]
 8015f6e:	f105 0504 	add.w	r5, r5, #4
 8015f72:	d1d6      	bne.n	8015f22 <ai_sum_buffer_INT8+0x29e>
 8015f74:	4438      	add	r0, r7
 8015f76:	9b00      	ldr	r3, [sp, #0]
 8015f78:	f013 0303 	ands.w	r3, r3, #3
 8015f7c:	f43f aeee 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 8015f80:	f99c 2000 	ldrsb.w	r2, [ip]
 8015f84:	0212      	lsls	r2, r2, #8
 8015f86:	fb3e 4202 	smlawb	r2, lr, r2, r4
 8015f8a:	4132      	asrs	r2, r6
 8015f8c:	f302 0207 	ssat	r2, #8, r2
 8015f90:	3b01      	subs	r3, #1
 8015f92:	7002      	strb	r2, [r0, #0]
 8015f94:	f43f aee2 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 8015f98:	f99c 2001 	ldrsb.w	r2, [ip, #1]
 8015f9c:	0212      	lsls	r2, r2, #8
 8015f9e:	fb3e 4202 	smlawb	r2, lr, r2, r4
 8015fa2:	4132      	asrs	r2, r6
 8015fa4:	f302 0207 	ssat	r2, #8, r2
 8015fa8:	2b01      	cmp	r3, #1
 8015faa:	7042      	strb	r2, [r0, #1]
 8015fac:	f43f aed6 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 8015fb0:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8015fb4:	021b      	lsls	r3, r3, #8
 8015fb6:	fb3e 4303 	smlawb	r3, lr, r3, r4
 8015fba:	4133      	asrs	r3, r6
 8015fbc:	f303 0307 	ssat	r3, #8, r3
 8015fc0:	7083      	strb	r3, [r0, #2]
 8015fc2:	b005      	add	sp, #20
 8015fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc8:	ee07 9a90 	vmov	s15, r9
 8015fcc:	f991 1000 	ldrsb.w	r1, [r1]
 8015fd0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015fd4:	ee07 5a90 	vmov	s15, r5
 8015fd8:	eba1 010c 	sub.w	r1, r1, ip
 8015fdc:	f104 0c16 	add.w	ip, r4, #22
 8015fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fe4:	f104 0515 	add.w	r5, r4, #21
 8015fe8:	ee06 1a10 	vmov	s12, r1
 8015fec:	fa08 f10c 	lsl.w	r1, r8, ip
 8015ff0:	fa08 f505 	lsl.w	r5, r8, r5
 8015ff4:	eee5 7ac7 	vfms.f32	s15, s11, s14
 8015ff8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015ffc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8016000:	eeb0 7a67 	vmov.f32	s14, s15
 8016004:	ee07 1a90 	vmov	s15, r1
 8016008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801600c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016014:	ee17 1a90 	vmov	r1, s15
 8016018:	4429      	add	r1, r5
 801601a:	460d      	mov	r5, r1
 801601c:	2b00      	cmp	r3, #0
 801601e:	d05e      	beq.n	80160de <ai_sum_buffer_INT8+0x45a>
 8016020:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8016024:	1d07      	adds	r7, r0, #4
 8016026:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801602a:	f852 1b04 	ldr.w	r1, [r2], #4
 801602e:	020c      	lsls	r4, r1, #8
 8016030:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 8016034:	fb36 5804 	smlawb	r8, r6, r4, r5
 8016038:	fa48 f80c 	asr.w	r8, r8, ip
 801603c:	f308 0807 	ssat	r8, #8, r8
 8016040:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8016044:	f807 8c04 	strb.w	r8, [r7, #-4]
 8016048:	fb36 5801 	smlawb	r8, r6, r1, r5
 801604c:	fa48 f80c 	asr.w	r8, r8, ip
 8016050:	f308 0807 	ssat	r8, #8, r8
 8016054:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016058:	fb36 5414 	smlawt	r4, r6, r4, r5
 801605c:	fa44 f40c 	asr.w	r4, r4, ip
 8016060:	f304 0407 	ssat	r4, #8, r4
 8016064:	f807 4c02 	strb.w	r4, [r7, #-2]
 8016068:	fb36 5111 	smlawt	r1, r6, r1, r5
 801606c:	fa41 f10c 	asr.w	r1, r1, ip
 8016070:	f301 0107 	ssat	r1, #8, r1
 8016074:	429a      	cmp	r2, r3
 8016076:	f807 1c01 	strb.w	r1, [r7, #-1]
 801607a:	f107 0704 	add.w	r7, r7, #4
 801607e:	d1d4      	bne.n	801602a <ai_sum_buffer_INT8+0x3a6>
 8016080:	4470      	add	r0, lr
 8016082:	9a00      	ldr	r2, [sp, #0]
 8016084:	f012 0103 	ands.w	r1, r2, #3
 8016088:	f43f ae68 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 801608c:	f993 2000 	ldrsb.w	r2, [r3]
 8016090:	0212      	lsls	r2, r2, #8
 8016092:	fb36 5202 	smlawb	r2, r6, r2, r5
 8016096:	fa42 f20c 	asr.w	r2, r2, ip
 801609a:	f302 0207 	ssat	r2, #8, r2
 801609e:	3901      	subs	r1, #1
 80160a0:	7002      	strb	r2, [r0, #0]
 80160a2:	f43f ae5b 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 80160a6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80160aa:	0212      	lsls	r2, r2, #8
 80160ac:	fb36 5202 	smlawb	r2, r6, r2, r5
 80160b0:	fa42 f20c 	asr.w	r2, r2, ip
 80160b4:	f302 0207 	ssat	r2, #8, r2
 80160b8:	2901      	cmp	r1, #1
 80160ba:	7042      	strb	r2, [r0, #1]
 80160bc:	f43f ae4e 	beq.w	8015d5c <ai_sum_buffer_INT8+0xd8>
 80160c0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80160c4:	021b      	lsls	r3, r3, #8
 80160c6:	fb36 5303 	smlawb	r3, r6, r3, r5
 80160ca:	fa43 f30c 	asr.w	r3, r3, ip
 80160ce:	f303 0307 	ssat	r3, #8, r3
 80160d2:	7083      	strb	r3, [r0, #2]
 80160d4:	e642      	b.n	8015d5c <ai_sum_buffer_INT8+0xd8>
 80160d6:	9103      	str	r1, [sp, #12]
 80160d8:	e6b7      	b.n	8015e4a <ai_sum_buffer_INT8+0x1c6>
 80160da:	468c      	mov	ip, r1
 80160dc:	e74b      	b.n	8015f76 <ai_sum_buffer_INT8+0x2f2>
 80160de:	4613      	mov	r3, r2
 80160e0:	e7cf      	b.n	8016082 <ai_sum_buffer_INT8+0x3fe>
 80160e2:	bf00      	nop

080160e4 <ai_array_to_buffer_fmt>:
 80160e4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80160e8:	2b02      	cmp	r3, #2
 80160ea:	d050      	beq.n	801618e <ai_array_to_buffer_fmt+0xaa>
 80160ec:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80160f0:	4b29      	ldr	r3, [pc, #164]	; (8016198 <ai_array_to_buffer_fmt+0xb4>)
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d00b      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 80160f6:	dc1c      	bgt.n	8016132 <ai_array_to_buffer_fmt+0x4e>
 80160f8:	4b28      	ldr	r3, [pc, #160]	; (801619c <ai_array_to_buffer_fmt+0xb8>)
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d007      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 80160fe:	dd0b      	ble.n	8016118 <ai_array_to_buffer_fmt+0x34>
 8016100:	4b27      	ldr	r3, [pc, #156]	; (80161a0 <ai_array_to_buffer_fmt+0xbc>)
 8016102:	429a      	cmp	r2, r3
 8016104:	d003      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016106:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801610a:	429a      	cmp	r2, r3
 801610c:	d131      	bne.n	8016172 <ai_array_to_buffer_fmt+0x8e>
 801610e:	4613      	mov	r3, r2
 8016110:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8016114:	4318      	orrs	r0, r3
 8016116:	4770      	bx	lr
 8016118:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801611c:	429a      	cmp	r2, r3
 801611e:	d0f6      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016120:	dd2c      	ble.n	801617c <ai_array_to_buffer_fmt+0x98>
 8016122:	4b20      	ldr	r3, [pc, #128]	; (80161a4 <ai_array_to_buffer_fmt+0xc0>)
 8016124:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8016128:	429a      	cmp	r2, r3
 801612a:	bf18      	it	ne
 801612c:	2340      	movne	r3, #64	; 0x40
 801612e:	4318      	orrs	r0, r3
 8016130:	4770      	bx	lr
 8016132:	4b1d      	ldr	r3, [pc, #116]	; (80161a8 <ai_array_to_buffer_fmt+0xc4>)
 8016134:	429a      	cmp	r2, r3
 8016136:	d0ea      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016138:	dd0e      	ble.n	8016158 <ai_array_to_buffer_fmt+0x74>
 801613a:	4b1c      	ldr	r3, [pc, #112]	; (80161ac <ai_array_to_buffer_fmt+0xc8>)
 801613c:	429a      	cmp	r2, r3
 801613e:	d0e6      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016140:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8016144:	429a      	cmp	r2, r3
 8016146:	d0e2      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016148:	4b19      	ldr	r3, [pc, #100]	; (80161b0 <ai_array_to_buffer_fmt+0xcc>)
 801614a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801614e:	429a      	cmp	r2, r3
 8016150:	bf18      	it	ne
 8016152:	2340      	movne	r3, #64	; 0x40
 8016154:	4318      	orrs	r0, r3
 8016156:	4770      	bx	lr
 8016158:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801615c:	429a      	cmp	r2, r3
 801615e:	d0d6      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016160:	3307      	adds	r3, #7
 8016162:	429a      	cmp	r2, r3
 8016164:	d0d3      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016166:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801616a:	429a      	cmp	r2, r3
 801616c:	bf18      	it	ne
 801616e:	2340      	movne	r3, #64	; 0x40
 8016170:	e7ce      	b.n	8016110 <ai_array_to_buffer_fmt+0x2c>
 8016172:	4b10      	ldr	r3, [pc, #64]	; (80161b4 <ai_array_to_buffer_fmt+0xd0>)
 8016174:	429a      	cmp	r2, r3
 8016176:	bf18      	it	ne
 8016178:	2340      	movne	r3, #64	; 0x40
 801617a:	e7c9      	b.n	8016110 <ai_array_to_buffer_fmt+0x2c>
 801617c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8016180:	429a      	cmp	r2, r3
 8016182:	d0c4      	beq.n	801610e <ai_array_to_buffer_fmt+0x2a>
 8016184:	3380      	adds	r3, #128	; 0x80
 8016186:	429a      	cmp	r2, r3
 8016188:	bf18      	it	ne
 801618a:	2340      	movne	r3, #64	; 0x40
 801618c:	e7c0      	b.n	8016110 <ai_array_to_buffer_fmt+0x2c>
 801618e:	4b0a      	ldr	r3, [pc, #40]	; (80161b8 <ai_array_to_buffer_fmt+0xd4>)
 8016190:	4003      	ands	r3, r0
 8016192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016196:	e7bb      	b.n	8016110 <ai_array_to_buffer_fmt+0x2c>
 8016198:	00840040 	.word	0x00840040
 801619c:	00040840 	.word	0x00040840
 80161a0:	00041040 	.word	0x00041040
 80161a4:	00040447 	.word	0x00040447
 80161a8:	00840840 	.word	0x00840840
 80161ac:	00841040 	.word	0x00841040
 80161b0:	0084084f 	.word	0x0084084f
 80161b4:	0004084f 	.word	0x0004084f
 80161b8:	00803fff 	.word	0x00803fff

080161bc <ai_array_get_byte_size>:
 80161bc:	b319      	cbz	r1, 8016206 <ai_array_get_byte_size+0x4a>
 80161be:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80161c2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80161c6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80161ca:	11c0      	asrs	r0, r0, #7
 80161cc:	fb03 f101 	mul.w	r1, r3, r1
 80161d0:	2a04      	cmp	r2, #4
 80161d2:	f101 0107 	add.w	r1, r1, #7
 80161d6:	f021 0107 	bic.w	r1, r1, #7
 80161da:	fa21 f10c 	lsr.w	r1, r1, ip
 80161de:	d00b      	beq.n	80161f8 <ai_array_get_byte_size+0x3c>
 80161e0:	2a08      	cmp	r2, #8
 80161e2:	d002      	beq.n	80161ea <ai_array_get_byte_size+0x2e>
 80161e4:	3107      	adds	r1, #7
 80161e6:	08c8      	lsrs	r0, r1, #3
 80161e8:	4770      	bx	lr
 80161ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80161ee:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80161f2:	3107      	adds	r1, #7
 80161f4:	08c8      	lsrs	r0, r1, #3
 80161f6:	4770      	bx	lr
 80161f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80161fc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8016200:	3107      	adds	r1, #7
 8016202:	08c8      	lsrs	r0, r1, #3
 8016204:	4770      	bx	lr
 8016206:	4608      	mov	r0, r1
 8016208:	4770      	bx	lr
 801620a:	bf00      	nop

0801620c <ai_array_get_data_byte_size>:
 801620c:	b161      	cbz	r1, 8016228 <ai_array_get_data_byte_size+0x1c>
 801620e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8016212:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8016216:	fb03 f101 	mul.w	r1, r3, r1
 801621a:	1dc8      	adds	r0, r1, #7
 801621c:	f020 0007 	bic.w	r0, r0, #7
 8016220:	40d0      	lsrs	r0, r2
 8016222:	3007      	adds	r0, #7
 8016224:	08c0      	lsrs	r0, r0, #3
 8016226:	4770      	bx	lr
 8016228:	4608      	mov	r0, r1
 801622a:	4770      	bx	lr

0801622c <ai_version_get>:
 801622c:	0212      	lsls	r2, r2, #8
 801622e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016232:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8016236:	4770      	bx	lr

08016238 <get_tensor_byte_size>:
 8016238:	b430      	push	{r4, r5}
 801623a:	6985      	ldr	r5, [r0, #24]
 801623c:	68c4      	ldr	r4, [r0, #12]
 801623e:	6941      	ldr	r1, [r0, #20]
 8016240:	4b06      	ldr	r3, [pc, #24]	; (801625c <get_tensor_byte_size+0x24>)
 8016242:	6828      	ldr	r0, [r5, #0]
 8016244:	4a06      	ldr	r2, [pc, #24]	; (8016260 <get_tensor_byte_size+0x28>)
 8016246:	4003      	ands	r3, r0
 8016248:	68c9      	ldr	r1, [r1, #12]
 801624a:	68e0      	ldr	r0, [r4, #12]
 801624c:	4293      	cmp	r3, r2
 801624e:	fb01 f000 	mul.w	r0, r1, r0
 8016252:	d101      	bne.n	8016258 <get_tensor_byte_size+0x20>
 8016254:	3007      	adds	r0, #7
 8016256:	08c0      	lsrs	r0, r0, #3
 8016258:	bc30      	pop	{r4, r5}
 801625a:	4770      	bx	lr
 801625c:	017fffff 	.word	0x017fffff
 8016260:	000400c0 	.word	0x000400c0

08016264 <core_get_broadcasted_shape>:
 8016264:	b470      	push	{r4, r5, r6}
 8016266:	6804      	ldr	r4, [r0, #0]
 8016268:	f3c4 2417 	ubfx	r4, r4, #8, #24
 801626c:	b304      	cbz	r4, 80162b0 <core_get_broadcasted_shape+0x4c>
 801626e:	4623      	mov	r3, r4
 8016270:	3b01      	subs	r3, #1
 8016272:	429c      	cmp	r4, r3
 8016274:	d917      	bls.n	80162a6 <core_get_broadcasted_shape+0x42>
 8016276:	6815      	ldr	r5, [r2, #0]
 8016278:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801627c:	2401      	movs	r4, #1
 801627e:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8016282:	d202      	bcs.n	801628a <core_get_broadcasted_shape+0x26>
 8016284:	6854      	ldr	r4, [r2, #4]
 8016286:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801628a:	680e      	ldr	r6, [r1, #0]
 801628c:	2501      	movs	r5, #1
 801628e:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8016292:	d202      	bcs.n	801629a <core_get_broadcasted_shape+0x36>
 8016294:	684d      	ldr	r5, [r1, #4]
 8016296:	f855 500c 	ldr.w	r5, [r5, ip]
 801629a:	42ac      	cmp	r4, r5
 801629c:	bf38      	it	cc
 801629e:	462c      	movcc	r4, r5
 80162a0:	6845      	ldr	r5, [r0, #4]
 80162a2:	f845 400c 	str.w	r4, [r5, ip]
 80162a6:	b11b      	cbz	r3, 80162b0 <core_get_broadcasted_shape+0x4c>
 80162a8:	6804      	ldr	r4, [r0, #0]
 80162aa:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80162ae:	e7df      	b.n	8016270 <core_get_broadcasted_shape+0xc>
 80162b0:	bc70      	pop	{r4, r5, r6}
 80162b2:	4770      	bx	lr

080162b4 <core_compute_offsets>:
 80162b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b8:	e9d1 5c00 	ldrd	r5, ip, [r1]
 80162bc:	6857      	ldr	r7, [r2, #4]
 80162be:	b085      	sub	sp, #20
 80162c0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80162c4:	687e      	ldr	r6, [r7, #4]
 80162c6:	1ba1      	subs	r1, r4, r6
 80162c8:	bf18      	it	ne
 80162ca:	2101      	movne	r1, #1
 80162cc:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 80162d0:	9103      	str	r1, [sp, #12]
 80162d2:	d378      	bcc.n	80163c6 <core_compute_offsets+0x112>
 80162d4:	f8dc 9010 	ldr.w	r9, [ip, #16]
 80162d8:	fb09 fe04 	mul.w	lr, r9, r4
 80162dc:	6812      	ldr	r2, [r2, #0]
 80162de:	f8d0 b000 	ldr.w	fp, [r0]
 80162e2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80162e6:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 80162ea:	bf2c      	ite	cs
 80162ec:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 80162f0:	f04f 0a01 	movcc.w	sl, #1
 80162f4:	9201      	str	r2, [sp, #4]
 80162f6:	ebb9 0c0a 	subs.w	ip, r9, sl
 80162fa:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 80162fe:	bf18      	it	ne
 8016300:	f04f 0c01 	movne.w	ip, #1
 8016304:	ebb5 0708 	subs.w	r7, r5, r8
 8016308:	9202      	str	r2, [sp, #8]
 801630a:	f3cb 2217 	ubfx	r2, fp, #8, #24
 801630e:	bf18      	it	ne
 8016310:	2701      	movne	r7, #1
 8016312:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 8016316:	d321      	bcc.n	801635c <core_compute_offsets+0xa8>
 8016318:	42b4      	cmp	r4, r6
 801631a:	bf0c      	ite	eq
 801631c:	461a      	moveq	r2, r3
 801631e:	2200      	movne	r2, #0
 8016320:	6841      	ldr	r1, [r0, #4]
 8016322:	604a      	str	r2, [r1, #4]
 8016324:	f8d0 b000 	ldr.w	fp, [r0]
 8016328:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 801632c:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8016330:	d314      	bcc.n	801635c <core_compute_offsets+0xa8>
 8016332:	9a03      	ldr	r2, [sp, #12]
 8016334:	45d1      	cmp	r9, sl
 8016336:	bf14      	ite	ne
 8016338:	2200      	movne	r2, #0
 801633a:	f002 0201 	andeq.w	r2, r2, #1
 801633e:	42b4      	cmp	r4, r6
 8016340:	bf14      	ite	ne
 8016342:	f04f 0900 	movne.w	r9, #0
 8016346:	f00c 0901 	andeq.w	r9, ip, #1
 801634a:	6846      	ldr	r6, [r0, #4]
 801634c:	fb04 2219 	mls	r2, r4, r9, r2
 8016350:	fb03 f202 	mul.w	r2, r3, r2
 8016354:	6132      	str	r2, [r6, #16]
 8016356:	6802      	ldr	r2, [r0, #0]
 8016358:	f3c2 2217 	ubfx	r2, r2, #8, #24
 801635c:	2a02      	cmp	r2, #2
 801635e:	fb0e f607 	mul.w	r6, lr, r7
 8016362:	d911      	bls.n	8016388 <core_compute_offsets+0xd4>
 8016364:	9a03      	ldr	r2, [sp, #12]
 8016366:	4545      	cmp	r5, r8
 8016368:	bf14      	ite	ne
 801636a:	2200      	movne	r2, #0
 801636c:	f002 0201 	andeq.w	r2, r2, #1
 8016370:	ea0c 0202 	and.w	r2, ip, r2
 8016374:	1b92      	subs	r2, r2, r6
 8016376:	fb04 240c 	mla	r4, r4, ip, r2
 801637a:	6842      	ldr	r2, [r0, #4]
 801637c:	fb03 f404 	mul.w	r4, r3, r4
 8016380:	6094      	str	r4, [r2, #8]
 8016382:	6802      	ldr	r2, [r0, #0]
 8016384:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8016388:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 801638c:	428c      	cmp	r4, r1
 801638e:	d118      	bne.n	80163c2 <core_compute_offsets+0x10e>
 8016390:	b1bf      	cbz	r7, 80163c2 <core_compute_offsets+0x10e>
 8016392:	9903      	ldr	r1, [sp, #12]
 8016394:	ea01 010c 	and.w	r1, r1, ip
 8016398:	2a03      	cmp	r2, #3
 801639a:	d90f      	bls.n	80163bc <core_compute_offsets+0x108>
 801639c:	fb0e f505 	mul.w	r5, lr, r5
 80163a0:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 80163a4:	ebb2 0c04 	subs.w	ip, r2, r4
 80163a8:	6842      	ldr	r2, [r0, #4]
 80163aa:	bf18      	it	ne
 80163ac:	f04f 0c01 	movne.w	ip, #1
 80163b0:	fb0c 1115 	mls	r1, ip, r5, r1
 80163b4:	440e      	add	r6, r1
 80163b6:	fb06 f303 	mul.w	r3, r6, r3
 80163ba:	60d3      	str	r3, [r2, #12]
 80163bc:	b005      	add	sp, #20
 80163be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c2:	2100      	movs	r1, #0
 80163c4:	e7e8      	b.n	8016398 <core_compute_offsets+0xe4>
 80163c6:	46a6      	mov	lr, r4
 80163c8:	f04f 0901 	mov.w	r9, #1
 80163cc:	e786      	b.n	80162dc <core_compute_offsets+0x28>
 80163ce:	bf00      	nop

080163d0 <malloc>:
 80163d0:	4b02      	ldr	r3, [pc, #8]	; (80163dc <malloc+0xc>)
 80163d2:	4601      	mov	r1, r0
 80163d4:	6818      	ldr	r0, [r3, #0]
 80163d6:	f000 b823 	b.w	8016420 <_malloc_r>
 80163da:	bf00      	nop
 80163dc:	20004f90 	.word	0x20004f90

080163e0 <sbrk_aligned>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	4e0e      	ldr	r6, [pc, #56]	; (801641c <sbrk_aligned+0x3c>)
 80163e4:	460c      	mov	r4, r1
 80163e6:	6831      	ldr	r1, [r6, #0]
 80163e8:	4605      	mov	r5, r0
 80163ea:	b911      	cbnz	r1, 80163f2 <sbrk_aligned+0x12>
 80163ec:	f000 feba 	bl	8017164 <_sbrk_r>
 80163f0:	6030      	str	r0, [r6, #0]
 80163f2:	4621      	mov	r1, r4
 80163f4:	4628      	mov	r0, r5
 80163f6:	f000 feb5 	bl	8017164 <_sbrk_r>
 80163fa:	1c43      	adds	r3, r0, #1
 80163fc:	d00a      	beq.n	8016414 <sbrk_aligned+0x34>
 80163fe:	1cc4      	adds	r4, r0, #3
 8016400:	f024 0403 	bic.w	r4, r4, #3
 8016404:	42a0      	cmp	r0, r4
 8016406:	d007      	beq.n	8016418 <sbrk_aligned+0x38>
 8016408:	1a21      	subs	r1, r4, r0
 801640a:	4628      	mov	r0, r5
 801640c:	f000 feaa 	bl	8017164 <_sbrk_r>
 8016410:	3001      	adds	r0, #1
 8016412:	d101      	bne.n	8016418 <sbrk_aligned+0x38>
 8016414:	f04f 34ff 	mov.w	r4, #4294967295
 8016418:	4620      	mov	r0, r4
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	20026710 	.word	0x20026710

08016420 <_malloc_r>:
 8016420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016424:	1ccd      	adds	r5, r1, #3
 8016426:	f025 0503 	bic.w	r5, r5, #3
 801642a:	3508      	adds	r5, #8
 801642c:	2d0c      	cmp	r5, #12
 801642e:	bf38      	it	cc
 8016430:	250c      	movcc	r5, #12
 8016432:	2d00      	cmp	r5, #0
 8016434:	4607      	mov	r7, r0
 8016436:	db01      	blt.n	801643c <_malloc_r+0x1c>
 8016438:	42a9      	cmp	r1, r5
 801643a:	d905      	bls.n	8016448 <_malloc_r+0x28>
 801643c:	230c      	movs	r3, #12
 801643e:	603b      	str	r3, [r7, #0]
 8016440:	2600      	movs	r6, #0
 8016442:	4630      	mov	r0, r6
 8016444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801651c <_malloc_r+0xfc>
 801644c:	f000 f868 	bl	8016520 <__malloc_lock>
 8016450:	f8d8 3000 	ldr.w	r3, [r8]
 8016454:	461c      	mov	r4, r3
 8016456:	bb5c      	cbnz	r4, 80164b0 <_malloc_r+0x90>
 8016458:	4629      	mov	r1, r5
 801645a:	4638      	mov	r0, r7
 801645c:	f7ff ffc0 	bl	80163e0 <sbrk_aligned>
 8016460:	1c43      	adds	r3, r0, #1
 8016462:	4604      	mov	r4, r0
 8016464:	d155      	bne.n	8016512 <_malloc_r+0xf2>
 8016466:	f8d8 4000 	ldr.w	r4, [r8]
 801646a:	4626      	mov	r6, r4
 801646c:	2e00      	cmp	r6, #0
 801646e:	d145      	bne.n	80164fc <_malloc_r+0xdc>
 8016470:	2c00      	cmp	r4, #0
 8016472:	d048      	beq.n	8016506 <_malloc_r+0xe6>
 8016474:	6823      	ldr	r3, [r4, #0]
 8016476:	4631      	mov	r1, r6
 8016478:	4638      	mov	r0, r7
 801647a:	eb04 0903 	add.w	r9, r4, r3
 801647e:	f000 fe71 	bl	8017164 <_sbrk_r>
 8016482:	4581      	cmp	r9, r0
 8016484:	d13f      	bne.n	8016506 <_malloc_r+0xe6>
 8016486:	6821      	ldr	r1, [r4, #0]
 8016488:	1a6d      	subs	r5, r5, r1
 801648a:	4629      	mov	r1, r5
 801648c:	4638      	mov	r0, r7
 801648e:	f7ff ffa7 	bl	80163e0 <sbrk_aligned>
 8016492:	3001      	adds	r0, #1
 8016494:	d037      	beq.n	8016506 <_malloc_r+0xe6>
 8016496:	6823      	ldr	r3, [r4, #0]
 8016498:	442b      	add	r3, r5
 801649a:	6023      	str	r3, [r4, #0]
 801649c:	f8d8 3000 	ldr.w	r3, [r8]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d038      	beq.n	8016516 <_malloc_r+0xf6>
 80164a4:	685a      	ldr	r2, [r3, #4]
 80164a6:	42a2      	cmp	r2, r4
 80164a8:	d12b      	bne.n	8016502 <_malloc_r+0xe2>
 80164aa:	2200      	movs	r2, #0
 80164ac:	605a      	str	r2, [r3, #4]
 80164ae:	e00f      	b.n	80164d0 <_malloc_r+0xb0>
 80164b0:	6822      	ldr	r2, [r4, #0]
 80164b2:	1b52      	subs	r2, r2, r5
 80164b4:	d41f      	bmi.n	80164f6 <_malloc_r+0xd6>
 80164b6:	2a0b      	cmp	r2, #11
 80164b8:	d917      	bls.n	80164ea <_malloc_r+0xca>
 80164ba:	1961      	adds	r1, r4, r5
 80164bc:	42a3      	cmp	r3, r4
 80164be:	6025      	str	r5, [r4, #0]
 80164c0:	bf18      	it	ne
 80164c2:	6059      	strne	r1, [r3, #4]
 80164c4:	6863      	ldr	r3, [r4, #4]
 80164c6:	bf08      	it	eq
 80164c8:	f8c8 1000 	streq.w	r1, [r8]
 80164cc:	5162      	str	r2, [r4, r5]
 80164ce:	604b      	str	r3, [r1, #4]
 80164d0:	4638      	mov	r0, r7
 80164d2:	f104 060b 	add.w	r6, r4, #11
 80164d6:	f000 f829 	bl	801652c <__malloc_unlock>
 80164da:	f026 0607 	bic.w	r6, r6, #7
 80164de:	1d23      	adds	r3, r4, #4
 80164e0:	1af2      	subs	r2, r6, r3
 80164e2:	d0ae      	beq.n	8016442 <_malloc_r+0x22>
 80164e4:	1b9b      	subs	r3, r3, r6
 80164e6:	50a3      	str	r3, [r4, r2]
 80164e8:	e7ab      	b.n	8016442 <_malloc_r+0x22>
 80164ea:	42a3      	cmp	r3, r4
 80164ec:	6862      	ldr	r2, [r4, #4]
 80164ee:	d1dd      	bne.n	80164ac <_malloc_r+0x8c>
 80164f0:	f8c8 2000 	str.w	r2, [r8]
 80164f4:	e7ec      	b.n	80164d0 <_malloc_r+0xb0>
 80164f6:	4623      	mov	r3, r4
 80164f8:	6864      	ldr	r4, [r4, #4]
 80164fa:	e7ac      	b.n	8016456 <_malloc_r+0x36>
 80164fc:	4634      	mov	r4, r6
 80164fe:	6876      	ldr	r6, [r6, #4]
 8016500:	e7b4      	b.n	801646c <_malloc_r+0x4c>
 8016502:	4613      	mov	r3, r2
 8016504:	e7cc      	b.n	80164a0 <_malloc_r+0x80>
 8016506:	230c      	movs	r3, #12
 8016508:	603b      	str	r3, [r7, #0]
 801650a:	4638      	mov	r0, r7
 801650c:	f000 f80e 	bl	801652c <__malloc_unlock>
 8016510:	e797      	b.n	8016442 <_malloc_r+0x22>
 8016512:	6025      	str	r5, [r4, #0]
 8016514:	e7dc      	b.n	80164d0 <_malloc_r+0xb0>
 8016516:	605b      	str	r3, [r3, #4]
 8016518:	deff      	udf	#255	; 0xff
 801651a:	bf00      	nop
 801651c:	2002670c 	.word	0x2002670c

08016520 <__malloc_lock>:
 8016520:	4801      	ldr	r0, [pc, #4]	; (8016528 <__malloc_lock+0x8>)
 8016522:	f000 be6c 	b.w	80171fe <__retarget_lock_acquire_recursive>
 8016526:	bf00      	nop
 8016528:	20026854 	.word	0x20026854

0801652c <__malloc_unlock>:
 801652c:	4801      	ldr	r0, [pc, #4]	; (8016534 <__malloc_unlock+0x8>)
 801652e:	f000 be67 	b.w	8017200 <__retarget_lock_release_recursive>
 8016532:	bf00      	nop
 8016534:	20026854 	.word	0x20026854

08016538 <_realloc_r>:
 8016538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801653c:	4680      	mov	r8, r0
 801653e:	4614      	mov	r4, r2
 8016540:	460e      	mov	r6, r1
 8016542:	b921      	cbnz	r1, 801654e <_realloc_r+0x16>
 8016544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016548:	4611      	mov	r1, r2
 801654a:	f7ff bf69 	b.w	8016420 <_malloc_r>
 801654e:	b92a      	cbnz	r2, 801655c <_realloc_r+0x24>
 8016550:	f001 fce0 	bl	8017f14 <_free_r>
 8016554:	4625      	mov	r5, r4
 8016556:	4628      	mov	r0, r5
 8016558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801655c:	f002 f8a2 	bl	80186a4 <_malloc_usable_size_r>
 8016560:	4284      	cmp	r4, r0
 8016562:	4607      	mov	r7, r0
 8016564:	d802      	bhi.n	801656c <_realloc_r+0x34>
 8016566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801656a:	d812      	bhi.n	8016592 <_realloc_r+0x5a>
 801656c:	4621      	mov	r1, r4
 801656e:	4640      	mov	r0, r8
 8016570:	f7ff ff56 	bl	8016420 <_malloc_r>
 8016574:	4605      	mov	r5, r0
 8016576:	2800      	cmp	r0, #0
 8016578:	d0ed      	beq.n	8016556 <_realloc_r+0x1e>
 801657a:	42bc      	cmp	r4, r7
 801657c:	4622      	mov	r2, r4
 801657e:	4631      	mov	r1, r6
 8016580:	bf28      	it	cs
 8016582:	463a      	movcs	r2, r7
 8016584:	f000 fe3d 	bl	8017202 <memcpy>
 8016588:	4631      	mov	r1, r6
 801658a:	4640      	mov	r0, r8
 801658c:	f001 fcc2 	bl	8017f14 <_free_r>
 8016590:	e7e1      	b.n	8016556 <_realloc_r+0x1e>
 8016592:	4635      	mov	r5, r6
 8016594:	e7df      	b.n	8016556 <_realloc_r+0x1e>

08016596 <__cvt>:
 8016596:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801659a:	ec55 4b10 	vmov	r4, r5, d0
 801659e:	2d00      	cmp	r5, #0
 80165a0:	460e      	mov	r6, r1
 80165a2:	4619      	mov	r1, r3
 80165a4:	462b      	mov	r3, r5
 80165a6:	bfbb      	ittet	lt
 80165a8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80165ac:	461d      	movlt	r5, r3
 80165ae:	2300      	movge	r3, #0
 80165b0:	232d      	movlt	r3, #45	; 0x2d
 80165b2:	700b      	strb	r3, [r1, #0]
 80165b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80165ba:	4691      	mov	r9, r2
 80165bc:	f023 0820 	bic.w	r8, r3, #32
 80165c0:	bfbc      	itt	lt
 80165c2:	4622      	movlt	r2, r4
 80165c4:	4614      	movlt	r4, r2
 80165c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80165ca:	d005      	beq.n	80165d8 <__cvt+0x42>
 80165cc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80165d0:	d100      	bne.n	80165d4 <__cvt+0x3e>
 80165d2:	3601      	adds	r6, #1
 80165d4:	2102      	movs	r1, #2
 80165d6:	e000      	b.n	80165da <__cvt+0x44>
 80165d8:	2103      	movs	r1, #3
 80165da:	ab03      	add	r3, sp, #12
 80165dc:	9301      	str	r3, [sp, #4]
 80165de:	ab02      	add	r3, sp, #8
 80165e0:	9300      	str	r3, [sp, #0]
 80165e2:	ec45 4b10 	vmov	d0, r4, r5
 80165e6:	4653      	mov	r3, sl
 80165e8:	4632      	mov	r2, r6
 80165ea:	f000 fea1 	bl	8017330 <_dtoa_r>
 80165ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80165f2:	4607      	mov	r7, r0
 80165f4:	d102      	bne.n	80165fc <__cvt+0x66>
 80165f6:	f019 0f01 	tst.w	r9, #1
 80165fa:	d022      	beq.n	8016642 <__cvt+0xac>
 80165fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016600:	eb07 0906 	add.w	r9, r7, r6
 8016604:	d110      	bne.n	8016628 <__cvt+0x92>
 8016606:	783b      	ldrb	r3, [r7, #0]
 8016608:	2b30      	cmp	r3, #48	; 0x30
 801660a:	d10a      	bne.n	8016622 <__cvt+0x8c>
 801660c:	2200      	movs	r2, #0
 801660e:	2300      	movs	r3, #0
 8016610:	4620      	mov	r0, r4
 8016612:	4629      	mov	r1, r5
 8016614:	f7ea fa78 	bl	8000b08 <__aeabi_dcmpeq>
 8016618:	b918      	cbnz	r0, 8016622 <__cvt+0x8c>
 801661a:	f1c6 0601 	rsb	r6, r6, #1
 801661e:	f8ca 6000 	str.w	r6, [sl]
 8016622:	f8da 3000 	ldr.w	r3, [sl]
 8016626:	4499      	add	r9, r3
 8016628:	2200      	movs	r2, #0
 801662a:	2300      	movs	r3, #0
 801662c:	4620      	mov	r0, r4
 801662e:	4629      	mov	r1, r5
 8016630:	f7ea fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 8016634:	b108      	cbz	r0, 801663a <__cvt+0xa4>
 8016636:	f8cd 900c 	str.w	r9, [sp, #12]
 801663a:	2230      	movs	r2, #48	; 0x30
 801663c:	9b03      	ldr	r3, [sp, #12]
 801663e:	454b      	cmp	r3, r9
 8016640:	d307      	bcc.n	8016652 <__cvt+0xbc>
 8016642:	9b03      	ldr	r3, [sp, #12]
 8016644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016646:	1bdb      	subs	r3, r3, r7
 8016648:	4638      	mov	r0, r7
 801664a:	6013      	str	r3, [r2, #0]
 801664c:	b004      	add	sp, #16
 801664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016652:	1c59      	adds	r1, r3, #1
 8016654:	9103      	str	r1, [sp, #12]
 8016656:	701a      	strb	r2, [r3, #0]
 8016658:	e7f0      	b.n	801663c <__cvt+0xa6>

0801665a <__exponent>:
 801665a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801665c:	4603      	mov	r3, r0
 801665e:	2900      	cmp	r1, #0
 8016660:	bfb8      	it	lt
 8016662:	4249      	neglt	r1, r1
 8016664:	f803 2b02 	strb.w	r2, [r3], #2
 8016668:	bfb4      	ite	lt
 801666a:	222d      	movlt	r2, #45	; 0x2d
 801666c:	222b      	movge	r2, #43	; 0x2b
 801666e:	2909      	cmp	r1, #9
 8016670:	7042      	strb	r2, [r0, #1]
 8016672:	dd2a      	ble.n	80166ca <__exponent+0x70>
 8016674:	f10d 0207 	add.w	r2, sp, #7
 8016678:	4617      	mov	r7, r2
 801667a:	260a      	movs	r6, #10
 801667c:	4694      	mov	ip, r2
 801667e:	fb91 f5f6 	sdiv	r5, r1, r6
 8016682:	fb06 1415 	mls	r4, r6, r5, r1
 8016686:	3430      	adds	r4, #48	; 0x30
 8016688:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801668c:	460c      	mov	r4, r1
 801668e:	2c63      	cmp	r4, #99	; 0x63
 8016690:	f102 32ff 	add.w	r2, r2, #4294967295
 8016694:	4629      	mov	r1, r5
 8016696:	dcf1      	bgt.n	801667c <__exponent+0x22>
 8016698:	3130      	adds	r1, #48	; 0x30
 801669a:	f1ac 0402 	sub.w	r4, ip, #2
 801669e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80166a2:	1c41      	adds	r1, r0, #1
 80166a4:	4622      	mov	r2, r4
 80166a6:	42ba      	cmp	r2, r7
 80166a8:	d30a      	bcc.n	80166c0 <__exponent+0x66>
 80166aa:	f10d 0209 	add.w	r2, sp, #9
 80166ae:	eba2 020c 	sub.w	r2, r2, ip
 80166b2:	42bc      	cmp	r4, r7
 80166b4:	bf88      	it	hi
 80166b6:	2200      	movhi	r2, #0
 80166b8:	4413      	add	r3, r2
 80166ba:	1a18      	subs	r0, r3, r0
 80166bc:	b003      	add	sp, #12
 80166be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80166c4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80166c8:	e7ed      	b.n	80166a6 <__exponent+0x4c>
 80166ca:	2330      	movs	r3, #48	; 0x30
 80166cc:	3130      	adds	r1, #48	; 0x30
 80166ce:	7083      	strb	r3, [r0, #2]
 80166d0:	70c1      	strb	r1, [r0, #3]
 80166d2:	1d03      	adds	r3, r0, #4
 80166d4:	e7f1      	b.n	80166ba <__exponent+0x60>
	...

080166d8 <_printf_float>:
 80166d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166dc:	ed2d 8b02 	vpush	{d8}
 80166e0:	b08d      	sub	sp, #52	; 0x34
 80166e2:	460c      	mov	r4, r1
 80166e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80166e8:	4616      	mov	r6, r2
 80166ea:	461f      	mov	r7, r3
 80166ec:	4605      	mov	r5, r0
 80166ee:	f000 fd01 	bl	80170f4 <_localeconv_r>
 80166f2:	f8d0 a000 	ldr.w	sl, [r0]
 80166f6:	4650      	mov	r0, sl
 80166f8:	f7e9 fdda 	bl	80002b0 <strlen>
 80166fc:	2300      	movs	r3, #0
 80166fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016700:	6823      	ldr	r3, [r4, #0]
 8016702:	9305      	str	r3, [sp, #20]
 8016704:	f8d8 3000 	ldr.w	r3, [r8]
 8016708:	f894 b018 	ldrb.w	fp, [r4, #24]
 801670c:	3307      	adds	r3, #7
 801670e:	f023 0307 	bic.w	r3, r3, #7
 8016712:	f103 0208 	add.w	r2, r3, #8
 8016716:	f8c8 2000 	str.w	r2, [r8]
 801671a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801671e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016722:	9307      	str	r3, [sp, #28]
 8016724:	f8cd 8018 	str.w	r8, [sp, #24]
 8016728:	ee08 0a10 	vmov	s16, r0
 801672c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016734:	4b9e      	ldr	r3, [pc, #632]	; (80169b0 <_printf_float+0x2d8>)
 8016736:	f04f 32ff 	mov.w	r2, #4294967295
 801673a:	f7ea fa17 	bl	8000b6c <__aeabi_dcmpun>
 801673e:	bb88      	cbnz	r0, 80167a4 <_printf_float+0xcc>
 8016740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016744:	4b9a      	ldr	r3, [pc, #616]	; (80169b0 <_printf_float+0x2d8>)
 8016746:	f04f 32ff 	mov.w	r2, #4294967295
 801674a:	f7ea f9f1 	bl	8000b30 <__aeabi_dcmple>
 801674e:	bb48      	cbnz	r0, 80167a4 <_printf_float+0xcc>
 8016750:	2200      	movs	r2, #0
 8016752:	2300      	movs	r3, #0
 8016754:	4640      	mov	r0, r8
 8016756:	4649      	mov	r1, r9
 8016758:	f7ea f9e0 	bl	8000b1c <__aeabi_dcmplt>
 801675c:	b110      	cbz	r0, 8016764 <_printf_float+0x8c>
 801675e:	232d      	movs	r3, #45	; 0x2d
 8016760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016764:	4a93      	ldr	r2, [pc, #588]	; (80169b4 <_printf_float+0x2dc>)
 8016766:	4b94      	ldr	r3, [pc, #592]	; (80169b8 <_printf_float+0x2e0>)
 8016768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801676c:	bf94      	ite	ls
 801676e:	4690      	movls	r8, r2
 8016770:	4698      	movhi	r8, r3
 8016772:	2303      	movs	r3, #3
 8016774:	6123      	str	r3, [r4, #16]
 8016776:	9b05      	ldr	r3, [sp, #20]
 8016778:	f023 0304 	bic.w	r3, r3, #4
 801677c:	6023      	str	r3, [r4, #0]
 801677e:	f04f 0900 	mov.w	r9, #0
 8016782:	9700      	str	r7, [sp, #0]
 8016784:	4633      	mov	r3, r6
 8016786:	aa0b      	add	r2, sp, #44	; 0x2c
 8016788:	4621      	mov	r1, r4
 801678a:	4628      	mov	r0, r5
 801678c:	f000 f9da 	bl	8016b44 <_printf_common>
 8016790:	3001      	adds	r0, #1
 8016792:	f040 8090 	bne.w	80168b6 <_printf_float+0x1de>
 8016796:	f04f 30ff 	mov.w	r0, #4294967295
 801679a:	b00d      	add	sp, #52	; 0x34
 801679c:	ecbd 8b02 	vpop	{d8}
 80167a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a4:	4642      	mov	r2, r8
 80167a6:	464b      	mov	r3, r9
 80167a8:	4640      	mov	r0, r8
 80167aa:	4649      	mov	r1, r9
 80167ac:	f7ea f9de 	bl	8000b6c <__aeabi_dcmpun>
 80167b0:	b140      	cbz	r0, 80167c4 <_printf_float+0xec>
 80167b2:	464b      	mov	r3, r9
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	bfbc      	itt	lt
 80167b8:	232d      	movlt	r3, #45	; 0x2d
 80167ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80167be:	4a7f      	ldr	r2, [pc, #508]	; (80169bc <_printf_float+0x2e4>)
 80167c0:	4b7f      	ldr	r3, [pc, #508]	; (80169c0 <_printf_float+0x2e8>)
 80167c2:	e7d1      	b.n	8016768 <_printf_float+0x90>
 80167c4:	6863      	ldr	r3, [r4, #4]
 80167c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80167ca:	9206      	str	r2, [sp, #24]
 80167cc:	1c5a      	adds	r2, r3, #1
 80167ce:	d13f      	bne.n	8016850 <_printf_float+0x178>
 80167d0:	2306      	movs	r3, #6
 80167d2:	6063      	str	r3, [r4, #4]
 80167d4:	9b05      	ldr	r3, [sp, #20]
 80167d6:	6861      	ldr	r1, [r4, #4]
 80167d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80167dc:	2300      	movs	r3, #0
 80167de:	9303      	str	r3, [sp, #12]
 80167e0:	ab0a      	add	r3, sp, #40	; 0x28
 80167e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80167e6:	ab09      	add	r3, sp, #36	; 0x24
 80167e8:	ec49 8b10 	vmov	d0, r8, r9
 80167ec:	9300      	str	r3, [sp, #0]
 80167ee:	6022      	str	r2, [r4, #0]
 80167f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80167f4:	4628      	mov	r0, r5
 80167f6:	f7ff fece 	bl	8016596 <__cvt>
 80167fa:	9b06      	ldr	r3, [sp, #24]
 80167fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167fe:	2b47      	cmp	r3, #71	; 0x47
 8016800:	4680      	mov	r8, r0
 8016802:	d108      	bne.n	8016816 <_printf_float+0x13e>
 8016804:	1cc8      	adds	r0, r1, #3
 8016806:	db02      	blt.n	801680e <_printf_float+0x136>
 8016808:	6863      	ldr	r3, [r4, #4]
 801680a:	4299      	cmp	r1, r3
 801680c:	dd41      	ble.n	8016892 <_printf_float+0x1ba>
 801680e:	f1ab 0302 	sub.w	r3, fp, #2
 8016812:	fa5f fb83 	uxtb.w	fp, r3
 8016816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801681a:	d820      	bhi.n	801685e <_printf_float+0x186>
 801681c:	3901      	subs	r1, #1
 801681e:	465a      	mov	r2, fp
 8016820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016824:	9109      	str	r1, [sp, #36]	; 0x24
 8016826:	f7ff ff18 	bl	801665a <__exponent>
 801682a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801682c:	1813      	adds	r3, r2, r0
 801682e:	2a01      	cmp	r2, #1
 8016830:	4681      	mov	r9, r0
 8016832:	6123      	str	r3, [r4, #16]
 8016834:	dc02      	bgt.n	801683c <_printf_float+0x164>
 8016836:	6822      	ldr	r2, [r4, #0]
 8016838:	07d2      	lsls	r2, r2, #31
 801683a:	d501      	bpl.n	8016840 <_printf_float+0x168>
 801683c:	3301      	adds	r3, #1
 801683e:	6123      	str	r3, [r4, #16]
 8016840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016844:	2b00      	cmp	r3, #0
 8016846:	d09c      	beq.n	8016782 <_printf_float+0xaa>
 8016848:	232d      	movs	r3, #45	; 0x2d
 801684a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801684e:	e798      	b.n	8016782 <_printf_float+0xaa>
 8016850:	9a06      	ldr	r2, [sp, #24]
 8016852:	2a47      	cmp	r2, #71	; 0x47
 8016854:	d1be      	bne.n	80167d4 <_printf_float+0xfc>
 8016856:	2b00      	cmp	r3, #0
 8016858:	d1bc      	bne.n	80167d4 <_printf_float+0xfc>
 801685a:	2301      	movs	r3, #1
 801685c:	e7b9      	b.n	80167d2 <_printf_float+0xfa>
 801685e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016862:	d118      	bne.n	8016896 <_printf_float+0x1be>
 8016864:	2900      	cmp	r1, #0
 8016866:	6863      	ldr	r3, [r4, #4]
 8016868:	dd0b      	ble.n	8016882 <_printf_float+0x1aa>
 801686a:	6121      	str	r1, [r4, #16]
 801686c:	b913      	cbnz	r3, 8016874 <_printf_float+0x19c>
 801686e:	6822      	ldr	r2, [r4, #0]
 8016870:	07d0      	lsls	r0, r2, #31
 8016872:	d502      	bpl.n	801687a <_printf_float+0x1a2>
 8016874:	3301      	adds	r3, #1
 8016876:	440b      	add	r3, r1
 8016878:	6123      	str	r3, [r4, #16]
 801687a:	65a1      	str	r1, [r4, #88]	; 0x58
 801687c:	f04f 0900 	mov.w	r9, #0
 8016880:	e7de      	b.n	8016840 <_printf_float+0x168>
 8016882:	b913      	cbnz	r3, 801688a <_printf_float+0x1b2>
 8016884:	6822      	ldr	r2, [r4, #0]
 8016886:	07d2      	lsls	r2, r2, #31
 8016888:	d501      	bpl.n	801688e <_printf_float+0x1b6>
 801688a:	3302      	adds	r3, #2
 801688c:	e7f4      	b.n	8016878 <_printf_float+0x1a0>
 801688e:	2301      	movs	r3, #1
 8016890:	e7f2      	b.n	8016878 <_printf_float+0x1a0>
 8016892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016898:	4299      	cmp	r1, r3
 801689a:	db05      	blt.n	80168a8 <_printf_float+0x1d0>
 801689c:	6823      	ldr	r3, [r4, #0]
 801689e:	6121      	str	r1, [r4, #16]
 80168a0:	07d8      	lsls	r0, r3, #31
 80168a2:	d5ea      	bpl.n	801687a <_printf_float+0x1a2>
 80168a4:	1c4b      	adds	r3, r1, #1
 80168a6:	e7e7      	b.n	8016878 <_printf_float+0x1a0>
 80168a8:	2900      	cmp	r1, #0
 80168aa:	bfd4      	ite	le
 80168ac:	f1c1 0202 	rsble	r2, r1, #2
 80168b0:	2201      	movgt	r2, #1
 80168b2:	4413      	add	r3, r2
 80168b4:	e7e0      	b.n	8016878 <_printf_float+0x1a0>
 80168b6:	6823      	ldr	r3, [r4, #0]
 80168b8:	055a      	lsls	r2, r3, #21
 80168ba:	d407      	bmi.n	80168cc <_printf_float+0x1f4>
 80168bc:	6923      	ldr	r3, [r4, #16]
 80168be:	4642      	mov	r2, r8
 80168c0:	4631      	mov	r1, r6
 80168c2:	4628      	mov	r0, r5
 80168c4:	47b8      	blx	r7
 80168c6:	3001      	adds	r0, #1
 80168c8:	d12c      	bne.n	8016924 <_printf_float+0x24c>
 80168ca:	e764      	b.n	8016796 <_printf_float+0xbe>
 80168cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80168d0:	f240 80e0 	bls.w	8016a94 <_printf_float+0x3bc>
 80168d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80168d8:	2200      	movs	r2, #0
 80168da:	2300      	movs	r3, #0
 80168dc:	f7ea f914 	bl	8000b08 <__aeabi_dcmpeq>
 80168e0:	2800      	cmp	r0, #0
 80168e2:	d034      	beq.n	801694e <_printf_float+0x276>
 80168e4:	4a37      	ldr	r2, [pc, #220]	; (80169c4 <_printf_float+0x2ec>)
 80168e6:	2301      	movs	r3, #1
 80168e8:	4631      	mov	r1, r6
 80168ea:	4628      	mov	r0, r5
 80168ec:	47b8      	blx	r7
 80168ee:	3001      	adds	r0, #1
 80168f0:	f43f af51 	beq.w	8016796 <_printf_float+0xbe>
 80168f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80168f8:	429a      	cmp	r2, r3
 80168fa:	db02      	blt.n	8016902 <_printf_float+0x22a>
 80168fc:	6823      	ldr	r3, [r4, #0]
 80168fe:	07d8      	lsls	r0, r3, #31
 8016900:	d510      	bpl.n	8016924 <_printf_float+0x24c>
 8016902:	ee18 3a10 	vmov	r3, s16
 8016906:	4652      	mov	r2, sl
 8016908:	4631      	mov	r1, r6
 801690a:	4628      	mov	r0, r5
 801690c:	47b8      	blx	r7
 801690e:	3001      	adds	r0, #1
 8016910:	f43f af41 	beq.w	8016796 <_printf_float+0xbe>
 8016914:	f04f 0800 	mov.w	r8, #0
 8016918:	f104 091a 	add.w	r9, r4, #26
 801691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801691e:	3b01      	subs	r3, #1
 8016920:	4543      	cmp	r3, r8
 8016922:	dc09      	bgt.n	8016938 <_printf_float+0x260>
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	079b      	lsls	r3, r3, #30
 8016928:	f100 8107 	bmi.w	8016b3a <_printf_float+0x462>
 801692c:	68e0      	ldr	r0, [r4, #12]
 801692e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016930:	4298      	cmp	r0, r3
 8016932:	bfb8      	it	lt
 8016934:	4618      	movlt	r0, r3
 8016936:	e730      	b.n	801679a <_printf_float+0xc2>
 8016938:	2301      	movs	r3, #1
 801693a:	464a      	mov	r2, r9
 801693c:	4631      	mov	r1, r6
 801693e:	4628      	mov	r0, r5
 8016940:	47b8      	blx	r7
 8016942:	3001      	adds	r0, #1
 8016944:	f43f af27 	beq.w	8016796 <_printf_float+0xbe>
 8016948:	f108 0801 	add.w	r8, r8, #1
 801694c:	e7e6      	b.n	801691c <_printf_float+0x244>
 801694e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016950:	2b00      	cmp	r3, #0
 8016952:	dc39      	bgt.n	80169c8 <_printf_float+0x2f0>
 8016954:	4a1b      	ldr	r2, [pc, #108]	; (80169c4 <_printf_float+0x2ec>)
 8016956:	2301      	movs	r3, #1
 8016958:	4631      	mov	r1, r6
 801695a:	4628      	mov	r0, r5
 801695c:	47b8      	blx	r7
 801695e:	3001      	adds	r0, #1
 8016960:	f43f af19 	beq.w	8016796 <_printf_float+0xbe>
 8016964:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016968:	4313      	orrs	r3, r2
 801696a:	d102      	bne.n	8016972 <_printf_float+0x29a>
 801696c:	6823      	ldr	r3, [r4, #0]
 801696e:	07d9      	lsls	r1, r3, #31
 8016970:	d5d8      	bpl.n	8016924 <_printf_float+0x24c>
 8016972:	ee18 3a10 	vmov	r3, s16
 8016976:	4652      	mov	r2, sl
 8016978:	4631      	mov	r1, r6
 801697a:	4628      	mov	r0, r5
 801697c:	47b8      	blx	r7
 801697e:	3001      	adds	r0, #1
 8016980:	f43f af09 	beq.w	8016796 <_printf_float+0xbe>
 8016984:	f04f 0900 	mov.w	r9, #0
 8016988:	f104 0a1a 	add.w	sl, r4, #26
 801698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801698e:	425b      	negs	r3, r3
 8016990:	454b      	cmp	r3, r9
 8016992:	dc01      	bgt.n	8016998 <_printf_float+0x2c0>
 8016994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016996:	e792      	b.n	80168be <_printf_float+0x1e6>
 8016998:	2301      	movs	r3, #1
 801699a:	4652      	mov	r2, sl
 801699c:	4631      	mov	r1, r6
 801699e:	4628      	mov	r0, r5
 80169a0:	47b8      	blx	r7
 80169a2:	3001      	adds	r0, #1
 80169a4:	f43f aef7 	beq.w	8016796 <_printf_float+0xbe>
 80169a8:	f109 0901 	add.w	r9, r9, #1
 80169ac:	e7ee      	b.n	801698c <_printf_float+0x2b4>
 80169ae:	bf00      	nop
 80169b0:	7fefffff 	.word	0x7fefffff
 80169b4:	08093d60 	.word	0x08093d60
 80169b8:	08093d64 	.word	0x08093d64
 80169bc:	08093d68 	.word	0x08093d68
 80169c0:	08093d6c 	.word	0x08093d6c
 80169c4:	08093d70 	.word	0x08093d70
 80169c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169cc:	429a      	cmp	r2, r3
 80169ce:	bfa8      	it	ge
 80169d0:	461a      	movge	r2, r3
 80169d2:	2a00      	cmp	r2, #0
 80169d4:	4691      	mov	r9, r2
 80169d6:	dc37      	bgt.n	8016a48 <_printf_float+0x370>
 80169d8:	f04f 0b00 	mov.w	fp, #0
 80169dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80169e0:	f104 021a 	add.w	r2, r4, #26
 80169e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169e6:	9305      	str	r3, [sp, #20]
 80169e8:	eba3 0309 	sub.w	r3, r3, r9
 80169ec:	455b      	cmp	r3, fp
 80169ee:	dc33      	bgt.n	8016a58 <_printf_float+0x380>
 80169f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80169f4:	429a      	cmp	r2, r3
 80169f6:	db3b      	blt.n	8016a70 <_printf_float+0x398>
 80169f8:	6823      	ldr	r3, [r4, #0]
 80169fa:	07da      	lsls	r2, r3, #31
 80169fc:	d438      	bmi.n	8016a70 <_printf_float+0x398>
 80169fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016a02:	eba2 0903 	sub.w	r9, r2, r3
 8016a06:	9b05      	ldr	r3, [sp, #20]
 8016a08:	1ad2      	subs	r2, r2, r3
 8016a0a:	4591      	cmp	r9, r2
 8016a0c:	bfa8      	it	ge
 8016a0e:	4691      	movge	r9, r2
 8016a10:	f1b9 0f00 	cmp.w	r9, #0
 8016a14:	dc35      	bgt.n	8016a82 <_printf_float+0x3aa>
 8016a16:	f04f 0800 	mov.w	r8, #0
 8016a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a1e:	f104 0a1a 	add.w	sl, r4, #26
 8016a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a26:	1a9b      	subs	r3, r3, r2
 8016a28:	eba3 0309 	sub.w	r3, r3, r9
 8016a2c:	4543      	cmp	r3, r8
 8016a2e:	f77f af79 	ble.w	8016924 <_printf_float+0x24c>
 8016a32:	2301      	movs	r3, #1
 8016a34:	4652      	mov	r2, sl
 8016a36:	4631      	mov	r1, r6
 8016a38:	4628      	mov	r0, r5
 8016a3a:	47b8      	blx	r7
 8016a3c:	3001      	adds	r0, #1
 8016a3e:	f43f aeaa 	beq.w	8016796 <_printf_float+0xbe>
 8016a42:	f108 0801 	add.w	r8, r8, #1
 8016a46:	e7ec      	b.n	8016a22 <_printf_float+0x34a>
 8016a48:	4613      	mov	r3, r2
 8016a4a:	4631      	mov	r1, r6
 8016a4c:	4642      	mov	r2, r8
 8016a4e:	4628      	mov	r0, r5
 8016a50:	47b8      	blx	r7
 8016a52:	3001      	adds	r0, #1
 8016a54:	d1c0      	bne.n	80169d8 <_printf_float+0x300>
 8016a56:	e69e      	b.n	8016796 <_printf_float+0xbe>
 8016a58:	2301      	movs	r3, #1
 8016a5a:	4631      	mov	r1, r6
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	9205      	str	r2, [sp, #20]
 8016a60:	47b8      	blx	r7
 8016a62:	3001      	adds	r0, #1
 8016a64:	f43f ae97 	beq.w	8016796 <_printf_float+0xbe>
 8016a68:	9a05      	ldr	r2, [sp, #20]
 8016a6a:	f10b 0b01 	add.w	fp, fp, #1
 8016a6e:	e7b9      	b.n	80169e4 <_printf_float+0x30c>
 8016a70:	ee18 3a10 	vmov	r3, s16
 8016a74:	4652      	mov	r2, sl
 8016a76:	4631      	mov	r1, r6
 8016a78:	4628      	mov	r0, r5
 8016a7a:	47b8      	blx	r7
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	d1be      	bne.n	80169fe <_printf_float+0x326>
 8016a80:	e689      	b.n	8016796 <_printf_float+0xbe>
 8016a82:	9a05      	ldr	r2, [sp, #20]
 8016a84:	464b      	mov	r3, r9
 8016a86:	4442      	add	r2, r8
 8016a88:	4631      	mov	r1, r6
 8016a8a:	4628      	mov	r0, r5
 8016a8c:	47b8      	blx	r7
 8016a8e:	3001      	adds	r0, #1
 8016a90:	d1c1      	bne.n	8016a16 <_printf_float+0x33e>
 8016a92:	e680      	b.n	8016796 <_printf_float+0xbe>
 8016a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a96:	2a01      	cmp	r2, #1
 8016a98:	dc01      	bgt.n	8016a9e <_printf_float+0x3c6>
 8016a9a:	07db      	lsls	r3, r3, #31
 8016a9c:	d53a      	bpl.n	8016b14 <_printf_float+0x43c>
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	4642      	mov	r2, r8
 8016aa2:	4631      	mov	r1, r6
 8016aa4:	4628      	mov	r0, r5
 8016aa6:	47b8      	blx	r7
 8016aa8:	3001      	adds	r0, #1
 8016aaa:	f43f ae74 	beq.w	8016796 <_printf_float+0xbe>
 8016aae:	ee18 3a10 	vmov	r3, s16
 8016ab2:	4652      	mov	r2, sl
 8016ab4:	4631      	mov	r1, r6
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	47b8      	blx	r7
 8016aba:	3001      	adds	r0, #1
 8016abc:	f43f ae6b 	beq.w	8016796 <_printf_float+0xbe>
 8016ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016acc:	f7ea f81c 	bl	8000b08 <__aeabi_dcmpeq>
 8016ad0:	b9d8      	cbnz	r0, 8016b0a <_printf_float+0x432>
 8016ad2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016ad6:	f108 0201 	add.w	r2, r8, #1
 8016ada:	4631      	mov	r1, r6
 8016adc:	4628      	mov	r0, r5
 8016ade:	47b8      	blx	r7
 8016ae0:	3001      	adds	r0, #1
 8016ae2:	d10e      	bne.n	8016b02 <_printf_float+0x42a>
 8016ae4:	e657      	b.n	8016796 <_printf_float+0xbe>
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	4652      	mov	r2, sl
 8016aea:	4631      	mov	r1, r6
 8016aec:	4628      	mov	r0, r5
 8016aee:	47b8      	blx	r7
 8016af0:	3001      	adds	r0, #1
 8016af2:	f43f ae50 	beq.w	8016796 <_printf_float+0xbe>
 8016af6:	f108 0801 	add.w	r8, r8, #1
 8016afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016afc:	3b01      	subs	r3, #1
 8016afe:	4543      	cmp	r3, r8
 8016b00:	dcf1      	bgt.n	8016ae6 <_printf_float+0x40e>
 8016b02:	464b      	mov	r3, r9
 8016b04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016b08:	e6da      	b.n	80168c0 <_printf_float+0x1e8>
 8016b0a:	f04f 0800 	mov.w	r8, #0
 8016b0e:	f104 0a1a 	add.w	sl, r4, #26
 8016b12:	e7f2      	b.n	8016afa <_printf_float+0x422>
 8016b14:	2301      	movs	r3, #1
 8016b16:	4642      	mov	r2, r8
 8016b18:	e7df      	b.n	8016ada <_printf_float+0x402>
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	464a      	mov	r2, r9
 8016b1e:	4631      	mov	r1, r6
 8016b20:	4628      	mov	r0, r5
 8016b22:	47b8      	blx	r7
 8016b24:	3001      	adds	r0, #1
 8016b26:	f43f ae36 	beq.w	8016796 <_printf_float+0xbe>
 8016b2a:	f108 0801 	add.w	r8, r8, #1
 8016b2e:	68e3      	ldr	r3, [r4, #12]
 8016b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b32:	1a5b      	subs	r3, r3, r1
 8016b34:	4543      	cmp	r3, r8
 8016b36:	dcf0      	bgt.n	8016b1a <_printf_float+0x442>
 8016b38:	e6f8      	b.n	801692c <_printf_float+0x254>
 8016b3a:	f04f 0800 	mov.w	r8, #0
 8016b3e:	f104 0919 	add.w	r9, r4, #25
 8016b42:	e7f4      	b.n	8016b2e <_printf_float+0x456>

08016b44 <_printf_common>:
 8016b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b48:	4616      	mov	r6, r2
 8016b4a:	4699      	mov	r9, r3
 8016b4c:	688a      	ldr	r2, [r1, #8]
 8016b4e:	690b      	ldr	r3, [r1, #16]
 8016b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b54:	4293      	cmp	r3, r2
 8016b56:	bfb8      	it	lt
 8016b58:	4613      	movlt	r3, r2
 8016b5a:	6033      	str	r3, [r6, #0]
 8016b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b60:	4607      	mov	r7, r0
 8016b62:	460c      	mov	r4, r1
 8016b64:	b10a      	cbz	r2, 8016b6a <_printf_common+0x26>
 8016b66:	3301      	adds	r3, #1
 8016b68:	6033      	str	r3, [r6, #0]
 8016b6a:	6823      	ldr	r3, [r4, #0]
 8016b6c:	0699      	lsls	r1, r3, #26
 8016b6e:	bf42      	ittt	mi
 8016b70:	6833      	ldrmi	r3, [r6, #0]
 8016b72:	3302      	addmi	r3, #2
 8016b74:	6033      	strmi	r3, [r6, #0]
 8016b76:	6825      	ldr	r5, [r4, #0]
 8016b78:	f015 0506 	ands.w	r5, r5, #6
 8016b7c:	d106      	bne.n	8016b8c <_printf_common+0x48>
 8016b7e:	f104 0a19 	add.w	sl, r4, #25
 8016b82:	68e3      	ldr	r3, [r4, #12]
 8016b84:	6832      	ldr	r2, [r6, #0]
 8016b86:	1a9b      	subs	r3, r3, r2
 8016b88:	42ab      	cmp	r3, r5
 8016b8a:	dc26      	bgt.n	8016bda <_printf_common+0x96>
 8016b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016b90:	1e13      	subs	r3, r2, #0
 8016b92:	6822      	ldr	r2, [r4, #0]
 8016b94:	bf18      	it	ne
 8016b96:	2301      	movne	r3, #1
 8016b98:	0692      	lsls	r2, r2, #26
 8016b9a:	d42b      	bmi.n	8016bf4 <_printf_common+0xb0>
 8016b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ba0:	4649      	mov	r1, r9
 8016ba2:	4638      	mov	r0, r7
 8016ba4:	47c0      	blx	r8
 8016ba6:	3001      	adds	r0, #1
 8016ba8:	d01e      	beq.n	8016be8 <_printf_common+0xa4>
 8016baa:	6823      	ldr	r3, [r4, #0]
 8016bac:	6922      	ldr	r2, [r4, #16]
 8016bae:	f003 0306 	and.w	r3, r3, #6
 8016bb2:	2b04      	cmp	r3, #4
 8016bb4:	bf02      	ittt	eq
 8016bb6:	68e5      	ldreq	r5, [r4, #12]
 8016bb8:	6833      	ldreq	r3, [r6, #0]
 8016bba:	1aed      	subeq	r5, r5, r3
 8016bbc:	68a3      	ldr	r3, [r4, #8]
 8016bbe:	bf0c      	ite	eq
 8016bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bc4:	2500      	movne	r5, #0
 8016bc6:	4293      	cmp	r3, r2
 8016bc8:	bfc4      	itt	gt
 8016bca:	1a9b      	subgt	r3, r3, r2
 8016bcc:	18ed      	addgt	r5, r5, r3
 8016bce:	2600      	movs	r6, #0
 8016bd0:	341a      	adds	r4, #26
 8016bd2:	42b5      	cmp	r5, r6
 8016bd4:	d11a      	bne.n	8016c0c <_printf_common+0xc8>
 8016bd6:	2000      	movs	r0, #0
 8016bd8:	e008      	b.n	8016bec <_printf_common+0xa8>
 8016bda:	2301      	movs	r3, #1
 8016bdc:	4652      	mov	r2, sl
 8016bde:	4649      	mov	r1, r9
 8016be0:	4638      	mov	r0, r7
 8016be2:	47c0      	blx	r8
 8016be4:	3001      	adds	r0, #1
 8016be6:	d103      	bne.n	8016bf0 <_printf_common+0xac>
 8016be8:	f04f 30ff 	mov.w	r0, #4294967295
 8016bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf0:	3501      	adds	r5, #1
 8016bf2:	e7c6      	b.n	8016b82 <_printf_common+0x3e>
 8016bf4:	18e1      	adds	r1, r4, r3
 8016bf6:	1c5a      	adds	r2, r3, #1
 8016bf8:	2030      	movs	r0, #48	; 0x30
 8016bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016bfe:	4422      	add	r2, r4
 8016c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c08:	3302      	adds	r3, #2
 8016c0a:	e7c7      	b.n	8016b9c <_printf_common+0x58>
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	4622      	mov	r2, r4
 8016c10:	4649      	mov	r1, r9
 8016c12:	4638      	mov	r0, r7
 8016c14:	47c0      	blx	r8
 8016c16:	3001      	adds	r0, #1
 8016c18:	d0e6      	beq.n	8016be8 <_printf_common+0xa4>
 8016c1a:	3601      	adds	r6, #1
 8016c1c:	e7d9      	b.n	8016bd2 <_printf_common+0x8e>
	...

08016c20 <_printf_i>:
 8016c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c24:	7e0f      	ldrb	r7, [r1, #24]
 8016c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c28:	2f78      	cmp	r7, #120	; 0x78
 8016c2a:	4691      	mov	r9, r2
 8016c2c:	4680      	mov	r8, r0
 8016c2e:	460c      	mov	r4, r1
 8016c30:	469a      	mov	sl, r3
 8016c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016c36:	d807      	bhi.n	8016c48 <_printf_i+0x28>
 8016c38:	2f62      	cmp	r7, #98	; 0x62
 8016c3a:	d80a      	bhi.n	8016c52 <_printf_i+0x32>
 8016c3c:	2f00      	cmp	r7, #0
 8016c3e:	f000 80d4 	beq.w	8016dea <_printf_i+0x1ca>
 8016c42:	2f58      	cmp	r7, #88	; 0x58
 8016c44:	f000 80c0 	beq.w	8016dc8 <_printf_i+0x1a8>
 8016c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016c50:	e03a      	b.n	8016cc8 <_printf_i+0xa8>
 8016c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016c56:	2b15      	cmp	r3, #21
 8016c58:	d8f6      	bhi.n	8016c48 <_printf_i+0x28>
 8016c5a:	a101      	add	r1, pc, #4	; (adr r1, 8016c60 <_printf_i+0x40>)
 8016c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c60:	08016cb9 	.word	0x08016cb9
 8016c64:	08016ccd 	.word	0x08016ccd
 8016c68:	08016c49 	.word	0x08016c49
 8016c6c:	08016c49 	.word	0x08016c49
 8016c70:	08016c49 	.word	0x08016c49
 8016c74:	08016c49 	.word	0x08016c49
 8016c78:	08016ccd 	.word	0x08016ccd
 8016c7c:	08016c49 	.word	0x08016c49
 8016c80:	08016c49 	.word	0x08016c49
 8016c84:	08016c49 	.word	0x08016c49
 8016c88:	08016c49 	.word	0x08016c49
 8016c8c:	08016dd1 	.word	0x08016dd1
 8016c90:	08016cf9 	.word	0x08016cf9
 8016c94:	08016d8b 	.word	0x08016d8b
 8016c98:	08016c49 	.word	0x08016c49
 8016c9c:	08016c49 	.word	0x08016c49
 8016ca0:	08016df3 	.word	0x08016df3
 8016ca4:	08016c49 	.word	0x08016c49
 8016ca8:	08016cf9 	.word	0x08016cf9
 8016cac:	08016c49 	.word	0x08016c49
 8016cb0:	08016c49 	.word	0x08016c49
 8016cb4:	08016d93 	.word	0x08016d93
 8016cb8:	682b      	ldr	r3, [r5, #0]
 8016cba:	1d1a      	adds	r2, r3, #4
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	602a      	str	r2, [r5, #0]
 8016cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cc8:	2301      	movs	r3, #1
 8016cca:	e09f      	b.n	8016e0c <_printf_i+0x1ec>
 8016ccc:	6820      	ldr	r0, [r4, #0]
 8016cce:	682b      	ldr	r3, [r5, #0]
 8016cd0:	0607      	lsls	r7, r0, #24
 8016cd2:	f103 0104 	add.w	r1, r3, #4
 8016cd6:	6029      	str	r1, [r5, #0]
 8016cd8:	d501      	bpl.n	8016cde <_printf_i+0xbe>
 8016cda:	681e      	ldr	r6, [r3, #0]
 8016cdc:	e003      	b.n	8016ce6 <_printf_i+0xc6>
 8016cde:	0646      	lsls	r6, r0, #25
 8016ce0:	d5fb      	bpl.n	8016cda <_printf_i+0xba>
 8016ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016ce6:	2e00      	cmp	r6, #0
 8016ce8:	da03      	bge.n	8016cf2 <_printf_i+0xd2>
 8016cea:	232d      	movs	r3, #45	; 0x2d
 8016cec:	4276      	negs	r6, r6
 8016cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cf2:	485a      	ldr	r0, [pc, #360]	; (8016e5c <_printf_i+0x23c>)
 8016cf4:	230a      	movs	r3, #10
 8016cf6:	e012      	b.n	8016d1e <_printf_i+0xfe>
 8016cf8:	682b      	ldr	r3, [r5, #0]
 8016cfa:	6820      	ldr	r0, [r4, #0]
 8016cfc:	1d19      	adds	r1, r3, #4
 8016cfe:	6029      	str	r1, [r5, #0]
 8016d00:	0605      	lsls	r5, r0, #24
 8016d02:	d501      	bpl.n	8016d08 <_printf_i+0xe8>
 8016d04:	681e      	ldr	r6, [r3, #0]
 8016d06:	e002      	b.n	8016d0e <_printf_i+0xee>
 8016d08:	0641      	lsls	r1, r0, #25
 8016d0a:	d5fb      	bpl.n	8016d04 <_printf_i+0xe4>
 8016d0c:	881e      	ldrh	r6, [r3, #0]
 8016d0e:	4853      	ldr	r0, [pc, #332]	; (8016e5c <_printf_i+0x23c>)
 8016d10:	2f6f      	cmp	r7, #111	; 0x6f
 8016d12:	bf0c      	ite	eq
 8016d14:	2308      	moveq	r3, #8
 8016d16:	230a      	movne	r3, #10
 8016d18:	2100      	movs	r1, #0
 8016d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d1e:	6865      	ldr	r5, [r4, #4]
 8016d20:	60a5      	str	r5, [r4, #8]
 8016d22:	2d00      	cmp	r5, #0
 8016d24:	bfa2      	ittt	ge
 8016d26:	6821      	ldrge	r1, [r4, #0]
 8016d28:	f021 0104 	bicge.w	r1, r1, #4
 8016d2c:	6021      	strge	r1, [r4, #0]
 8016d2e:	b90e      	cbnz	r6, 8016d34 <_printf_i+0x114>
 8016d30:	2d00      	cmp	r5, #0
 8016d32:	d04b      	beq.n	8016dcc <_printf_i+0x1ac>
 8016d34:	4615      	mov	r5, r2
 8016d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8016d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8016d3e:	5dc7      	ldrb	r7, [r0, r7]
 8016d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016d44:	4637      	mov	r7, r6
 8016d46:	42bb      	cmp	r3, r7
 8016d48:	460e      	mov	r6, r1
 8016d4a:	d9f4      	bls.n	8016d36 <_printf_i+0x116>
 8016d4c:	2b08      	cmp	r3, #8
 8016d4e:	d10b      	bne.n	8016d68 <_printf_i+0x148>
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	07de      	lsls	r6, r3, #31
 8016d54:	d508      	bpl.n	8016d68 <_printf_i+0x148>
 8016d56:	6923      	ldr	r3, [r4, #16]
 8016d58:	6861      	ldr	r1, [r4, #4]
 8016d5a:	4299      	cmp	r1, r3
 8016d5c:	bfde      	ittt	le
 8016d5e:	2330      	movle	r3, #48	; 0x30
 8016d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016d68:	1b52      	subs	r2, r2, r5
 8016d6a:	6122      	str	r2, [r4, #16]
 8016d6c:	f8cd a000 	str.w	sl, [sp]
 8016d70:	464b      	mov	r3, r9
 8016d72:	aa03      	add	r2, sp, #12
 8016d74:	4621      	mov	r1, r4
 8016d76:	4640      	mov	r0, r8
 8016d78:	f7ff fee4 	bl	8016b44 <_printf_common>
 8016d7c:	3001      	adds	r0, #1
 8016d7e:	d14a      	bne.n	8016e16 <_printf_i+0x1f6>
 8016d80:	f04f 30ff 	mov.w	r0, #4294967295
 8016d84:	b004      	add	sp, #16
 8016d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d8a:	6823      	ldr	r3, [r4, #0]
 8016d8c:	f043 0320 	orr.w	r3, r3, #32
 8016d90:	6023      	str	r3, [r4, #0]
 8016d92:	4833      	ldr	r0, [pc, #204]	; (8016e60 <_printf_i+0x240>)
 8016d94:	2778      	movs	r7, #120	; 0x78
 8016d96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016d9a:	6823      	ldr	r3, [r4, #0]
 8016d9c:	6829      	ldr	r1, [r5, #0]
 8016d9e:	061f      	lsls	r7, r3, #24
 8016da0:	f851 6b04 	ldr.w	r6, [r1], #4
 8016da4:	d402      	bmi.n	8016dac <_printf_i+0x18c>
 8016da6:	065f      	lsls	r7, r3, #25
 8016da8:	bf48      	it	mi
 8016daa:	b2b6      	uxthmi	r6, r6
 8016dac:	07df      	lsls	r7, r3, #31
 8016dae:	bf48      	it	mi
 8016db0:	f043 0320 	orrmi.w	r3, r3, #32
 8016db4:	6029      	str	r1, [r5, #0]
 8016db6:	bf48      	it	mi
 8016db8:	6023      	strmi	r3, [r4, #0]
 8016dba:	b91e      	cbnz	r6, 8016dc4 <_printf_i+0x1a4>
 8016dbc:	6823      	ldr	r3, [r4, #0]
 8016dbe:	f023 0320 	bic.w	r3, r3, #32
 8016dc2:	6023      	str	r3, [r4, #0]
 8016dc4:	2310      	movs	r3, #16
 8016dc6:	e7a7      	b.n	8016d18 <_printf_i+0xf8>
 8016dc8:	4824      	ldr	r0, [pc, #144]	; (8016e5c <_printf_i+0x23c>)
 8016dca:	e7e4      	b.n	8016d96 <_printf_i+0x176>
 8016dcc:	4615      	mov	r5, r2
 8016dce:	e7bd      	b.n	8016d4c <_printf_i+0x12c>
 8016dd0:	682b      	ldr	r3, [r5, #0]
 8016dd2:	6826      	ldr	r6, [r4, #0]
 8016dd4:	6961      	ldr	r1, [r4, #20]
 8016dd6:	1d18      	adds	r0, r3, #4
 8016dd8:	6028      	str	r0, [r5, #0]
 8016dda:	0635      	lsls	r5, r6, #24
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	d501      	bpl.n	8016de4 <_printf_i+0x1c4>
 8016de0:	6019      	str	r1, [r3, #0]
 8016de2:	e002      	b.n	8016dea <_printf_i+0x1ca>
 8016de4:	0670      	lsls	r0, r6, #25
 8016de6:	d5fb      	bpl.n	8016de0 <_printf_i+0x1c0>
 8016de8:	8019      	strh	r1, [r3, #0]
 8016dea:	2300      	movs	r3, #0
 8016dec:	6123      	str	r3, [r4, #16]
 8016dee:	4615      	mov	r5, r2
 8016df0:	e7bc      	b.n	8016d6c <_printf_i+0x14c>
 8016df2:	682b      	ldr	r3, [r5, #0]
 8016df4:	1d1a      	adds	r2, r3, #4
 8016df6:	602a      	str	r2, [r5, #0]
 8016df8:	681d      	ldr	r5, [r3, #0]
 8016dfa:	6862      	ldr	r2, [r4, #4]
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	4628      	mov	r0, r5
 8016e00:	f7e9 fa06 	bl	8000210 <memchr>
 8016e04:	b108      	cbz	r0, 8016e0a <_printf_i+0x1ea>
 8016e06:	1b40      	subs	r0, r0, r5
 8016e08:	6060      	str	r0, [r4, #4]
 8016e0a:	6863      	ldr	r3, [r4, #4]
 8016e0c:	6123      	str	r3, [r4, #16]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e14:	e7aa      	b.n	8016d6c <_printf_i+0x14c>
 8016e16:	6923      	ldr	r3, [r4, #16]
 8016e18:	462a      	mov	r2, r5
 8016e1a:	4649      	mov	r1, r9
 8016e1c:	4640      	mov	r0, r8
 8016e1e:	47d0      	blx	sl
 8016e20:	3001      	adds	r0, #1
 8016e22:	d0ad      	beq.n	8016d80 <_printf_i+0x160>
 8016e24:	6823      	ldr	r3, [r4, #0]
 8016e26:	079b      	lsls	r3, r3, #30
 8016e28:	d413      	bmi.n	8016e52 <_printf_i+0x232>
 8016e2a:	68e0      	ldr	r0, [r4, #12]
 8016e2c:	9b03      	ldr	r3, [sp, #12]
 8016e2e:	4298      	cmp	r0, r3
 8016e30:	bfb8      	it	lt
 8016e32:	4618      	movlt	r0, r3
 8016e34:	e7a6      	b.n	8016d84 <_printf_i+0x164>
 8016e36:	2301      	movs	r3, #1
 8016e38:	4632      	mov	r2, r6
 8016e3a:	4649      	mov	r1, r9
 8016e3c:	4640      	mov	r0, r8
 8016e3e:	47d0      	blx	sl
 8016e40:	3001      	adds	r0, #1
 8016e42:	d09d      	beq.n	8016d80 <_printf_i+0x160>
 8016e44:	3501      	adds	r5, #1
 8016e46:	68e3      	ldr	r3, [r4, #12]
 8016e48:	9903      	ldr	r1, [sp, #12]
 8016e4a:	1a5b      	subs	r3, r3, r1
 8016e4c:	42ab      	cmp	r3, r5
 8016e4e:	dcf2      	bgt.n	8016e36 <_printf_i+0x216>
 8016e50:	e7eb      	b.n	8016e2a <_printf_i+0x20a>
 8016e52:	2500      	movs	r5, #0
 8016e54:	f104 0619 	add.w	r6, r4, #25
 8016e58:	e7f5      	b.n	8016e46 <_printf_i+0x226>
 8016e5a:	bf00      	nop
 8016e5c:	08093d72 	.word	0x08093d72
 8016e60:	08093d83 	.word	0x08093d83

08016e64 <std>:
 8016e64:	2300      	movs	r3, #0
 8016e66:	b510      	push	{r4, lr}
 8016e68:	4604      	mov	r4, r0
 8016e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e72:	6083      	str	r3, [r0, #8]
 8016e74:	8181      	strh	r1, [r0, #12]
 8016e76:	6643      	str	r3, [r0, #100]	; 0x64
 8016e78:	81c2      	strh	r2, [r0, #14]
 8016e7a:	6183      	str	r3, [r0, #24]
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	2208      	movs	r2, #8
 8016e80:	305c      	adds	r0, #92	; 0x5c
 8016e82:	f000 f92e 	bl	80170e2 <memset>
 8016e86:	4b0d      	ldr	r3, [pc, #52]	; (8016ebc <std+0x58>)
 8016e88:	6263      	str	r3, [r4, #36]	; 0x24
 8016e8a:	4b0d      	ldr	r3, [pc, #52]	; (8016ec0 <std+0x5c>)
 8016e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e8e:	4b0d      	ldr	r3, [pc, #52]	; (8016ec4 <std+0x60>)
 8016e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e92:	4b0d      	ldr	r3, [pc, #52]	; (8016ec8 <std+0x64>)
 8016e94:	6323      	str	r3, [r4, #48]	; 0x30
 8016e96:	4b0d      	ldr	r3, [pc, #52]	; (8016ecc <std+0x68>)
 8016e98:	6224      	str	r4, [r4, #32]
 8016e9a:	429c      	cmp	r4, r3
 8016e9c:	d006      	beq.n	8016eac <std+0x48>
 8016e9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016ea2:	4294      	cmp	r4, r2
 8016ea4:	d002      	beq.n	8016eac <std+0x48>
 8016ea6:	33d0      	adds	r3, #208	; 0xd0
 8016ea8:	429c      	cmp	r4, r3
 8016eaa:	d105      	bne.n	8016eb8 <std+0x54>
 8016eac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016eb4:	f000 b9a2 	b.w	80171fc <__retarget_lock_init_recursive>
 8016eb8:	bd10      	pop	{r4, pc}
 8016eba:	bf00      	nop
 8016ebc:	08017029 	.word	0x08017029
 8016ec0:	0801704b 	.word	0x0801704b
 8016ec4:	08017083 	.word	0x08017083
 8016ec8:	080170a7 	.word	0x080170a7
 8016ecc:	20026714 	.word	0x20026714

08016ed0 <stdio_exit_handler>:
 8016ed0:	4a02      	ldr	r2, [pc, #8]	; (8016edc <stdio_exit_handler+0xc>)
 8016ed2:	4903      	ldr	r1, [pc, #12]	; (8016ee0 <stdio_exit_handler+0x10>)
 8016ed4:	4803      	ldr	r0, [pc, #12]	; (8016ee4 <stdio_exit_handler+0x14>)
 8016ed6:	f000 b869 	b.w	8016fac <_fwalk_sglue>
 8016eda:	bf00      	nop
 8016edc:	20004f38 	.word	0x20004f38
 8016ee0:	08018a71 	.word	0x08018a71
 8016ee4:	20004f44 	.word	0x20004f44

08016ee8 <cleanup_stdio>:
 8016ee8:	6841      	ldr	r1, [r0, #4]
 8016eea:	4b0c      	ldr	r3, [pc, #48]	; (8016f1c <cleanup_stdio+0x34>)
 8016eec:	4299      	cmp	r1, r3
 8016eee:	b510      	push	{r4, lr}
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	d001      	beq.n	8016ef8 <cleanup_stdio+0x10>
 8016ef4:	f001 fdbc 	bl	8018a70 <_fflush_r>
 8016ef8:	68a1      	ldr	r1, [r4, #8]
 8016efa:	4b09      	ldr	r3, [pc, #36]	; (8016f20 <cleanup_stdio+0x38>)
 8016efc:	4299      	cmp	r1, r3
 8016efe:	d002      	beq.n	8016f06 <cleanup_stdio+0x1e>
 8016f00:	4620      	mov	r0, r4
 8016f02:	f001 fdb5 	bl	8018a70 <_fflush_r>
 8016f06:	68e1      	ldr	r1, [r4, #12]
 8016f08:	4b06      	ldr	r3, [pc, #24]	; (8016f24 <cleanup_stdio+0x3c>)
 8016f0a:	4299      	cmp	r1, r3
 8016f0c:	d004      	beq.n	8016f18 <cleanup_stdio+0x30>
 8016f0e:	4620      	mov	r0, r4
 8016f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f14:	f001 bdac 	b.w	8018a70 <_fflush_r>
 8016f18:	bd10      	pop	{r4, pc}
 8016f1a:	bf00      	nop
 8016f1c:	20026714 	.word	0x20026714
 8016f20:	2002677c 	.word	0x2002677c
 8016f24:	200267e4 	.word	0x200267e4

08016f28 <global_stdio_init.part.0>:
 8016f28:	b510      	push	{r4, lr}
 8016f2a:	4b0b      	ldr	r3, [pc, #44]	; (8016f58 <global_stdio_init.part.0+0x30>)
 8016f2c:	4c0b      	ldr	r4, [pc, #44]	; (8016f5c <global_stdio_init.part.0+0x34>)
 8016f2e:	4a0c      	ldr	r2, [pc, #48]	; (8016f60 <global_stdio_init.part.0+0x38>)
 8016f30:	601a      	str	r2, [r3, #0]
 8016f32:	4620      	mov	r0, r4
 8016f34:	2200      	movs	r2, #0
 8016f36:	2104      	movs	r1, #4
 8016f38:	f7ff ff94 	bl	8016e64 <std>
 8016f3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016f40:	2201      	movs	r2, #1
 8016f42:	2109      	movs	r1, #9
 8016f44:	f7ff ff8e 	bl	8016e64 <std>
 8016f48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016f4c:	2202      	movs	r2, #2
 8016f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f52:	2112      	movs	r1, #18
 8016f54:	f7ff bf86 	b.w	8016e64 <std>
 8016f58:	2002684c 	.word	0x2002684c
 8016f5c:	20026714 	.word	0x20026714
 8016f60:	08016ed1 	.word	0x08016ed1

08016f64 <__sfp_lock_acquire>:
 8016f64:	4801      	ldr	r0, [pc, #4]	; (8016f6c <__sfp_lock_acquire+0x8>)
 8016f66:	f000 b94a 	b.w	80171fe <__retarget_lock_acquire_recursive>
 8016f6a:	bf00      	nop
 8016f6c:	20026855 	.word	0x20026855

08016f70 <__sfp_lock_release>:
 8016f70:	4801      	ldr	r0, [pc, #4]	; (8016f78 <__sfp_lock_release+0x8>)
 8016f72:	f000 b945 	b.w	8017200 <__retarget_lock_release_recursive>
 8016f76:	bf00      	nop
 8016f78:	20026855 	.word	0x20026855

08016f7c <__sinit>:
 8016f7c:	b510      	push	{r4, lr}
 8016f7e:	4604      	mov	r4, r0
 8016f80:	f7ff fff0 	bl	8016f64 <__sfp_lock_acquire>
 8016f84:	6a23      	ldr	r3, [r4, #32]
 8016f86:	b11b      	cbz	r3, 8016f90 <__sinit+0x14>
 8016f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f8c:	f7ff bff0 	b.w	8016f70 <__sfp_lock_release>
 8016f90:	4b04      	ldr	r3, [pc, #16]	; (8016fa4 <__sinit+0x28>)
 8016f92:	6223      	str	r3, [r4, #32]
 8016f94:	4b04      	ldr	r3, [pc, #16]	; (8016fa8 <__sinit+0x2c>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d1f5      	bne.n	8016f88 <__sinit+0xc>
 8016f9c:	f7ff ffc4 	bl	8016f28 <global_stdio_init.part.0>
 8016fa0:	e7f2      	b.n	8016f88 <__sinit+0xc>
 8016fa2:	bf00      	nop
 8016fa4:	08016ee9 	.word	0x08016ee9
 8016fa8:	2002684c 	.word	0x2002684c

08016fac <_fwalk_sglue>:
 8016fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fb0:	4607      	mov	r7, r0
 8016fb2:	4688      	mov	r8, r1
 8016fb4:	4614      	mov	r4, r2
 8016fb6:	2600      	movs	r6, #0
 8016fb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016fbc:	f1b9 0901 	subs.w	r9, r9, #1
 8016fc0:	d505      	bpl.n	8016fce <_fwalk_sglue+0x22>
 8016fc2:	6824      	ldr	r4, [r4, #0]
 8016fc4:	2c00      	cmp	r4, #0
 8016fc6:	d1f7      	bne.n	8016fb8 <_fwalk_sglue+0xc>
 8016fc8:	4630      	mov	r0, r6
 8016fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fce:	89ab      	ldrh	r3, [r5, #12]
 8016fd0:	2b01      	cmp	r3, #1
 8016fd2:	d907      	bls.n	8016fe4 <_fwalk_sglue+0x38>
 8016fd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016fd8:	3301      	adds	r3, #1
 8016fda:	d003      	beq.n	8016fe4 <_fwalk_sglue+0x38>
 8016fdc:	4629      	mov	r1, r5
 8016fde:	4638      	mov	r0, r7
 8016fe0:	47c0      	blx	r8
 8016fe2:	4306      	orrs	r6, r0
 8016fe4:	3568      	adds	r5, #104	; 0x68
 8016fe6:	e7e9      	b.n	8016fbc <_fwalk_sglue+0x10>

08016fe8 <siprintf>:
 8016fe8:	b40e      	push	{r1, r2, r3}
 8016fea:	b500      	push	{lr}
 8016fec:	b09c      	sub	sp, #112	; 0x70
 8016fee:	ab1d      	add	r3, sp, #116	; 0x74
 8016ff0:	9002      	str	r0, [sp, #8]
 8016ff2:	9006      	str	r0, [sp, #24]
 8016ff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ff8:	4809      	ldr	r0, [pc, #36]	; (8017020 <siprintf+0x38>)
 8016ffa:	9107      	str	r1, [sp, #28]
 8016ffc:	9104      	str	r1, [sp, #16]
 8016ffe:	4909      	ldr	r1, [pc, #36]	; (8017024 <siprintf+0x3c>)
 8017000:	f853 2b04 	ldr.w	r2, [r3], #4
 8017004:	9105      	str	r1, [sp, #20]
 8017006:	6800      	ldr	r0, [r0, #0]
 8017008:	9301      	str	r3, [sp, #4]
 801700a:	a902      	add	r1, sp, #8
 801700c:	f001 fbac 	bl	8018768 <_svfiprintf_r>
 8017010:	9b02      	ldr	r3, [sp, #8]
 8017012:	2200      	movs	r2, #0
 8017014:	701a      	strb	r2, [r3, #0]
 8017016:	b01c      	add	sp, #112	; 0x70
 8017018:	f85d eb04 	ldr.w	lr, [sp], #4
 801701c:	b003      	add	sp, #12
 801701e:	4770      	bx	lr
 8017020:	20004f90 	.word	0x20004f90
 8017024:	ffff0208 	.word	0xffff0208

08017028 <__sread>:
 8017028:	b510      	push	{r4, lr}
 801702a:	460c      	mov	r4, r1
 801702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017030:	f000 f886 	bl	8017140 <_read_r>
 8017034:	2800      	cmp	r0, #0
 8017036:	bfab      	itete	ge
 8017038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801703a:	89a3      	ldrhlt	r3, [r4, #12]
 801703c:	181b      	addge	r3, r3, r0
 801703e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017042:	bfac      	ite	ge
 8017044:	6563      	strge	r3, [r4, #84]	; 0x54
 8017046:	81a3      	strhlt	r3, [r4, #12]
 8017048:	bd10      	pop	{r4, pc}

0801704a <__swrite>:
 801704a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801704e:	461f      	mov	r7, r3
 8017050:	898b      	ldrh	r3, [r1, #12]
 8017052:	05db      	lsls	r3, r3, #23
 8017054:	4605      	mov	r5, r0
 8017056:	460c      	mov	r4, r1
 8017058:	4616      	mov	r6, r2
 801705a:	d505      	bpl.n	8017068 <__swrite+0x1e>
 801705c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017060:	2302      	movs	r3, #2
 8017062:	2200      	movs	r2, #0
 8017064:	f000 f85a 	bl	801711c <_lseek_r>
 8017068:	89a3      	ldrh	r3, [r4, #12]
 801706a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801706e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017072:	81a3      	strh	r3, [r4, #12]
 8017074:	4632      	mov	r2, r6
 8017076:	463b      	mov	r3, r7
 8017078:	4628      	mov	r0, r5
 801707a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801707e:	f000 b881 	b.w	8017184 <_write_r>

08017082 <__sseek>:
 8017082:	b510      	push	{r4, lr}
 8017084:	460c      	mov	r4, r1
 8017086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801708a:	f000 f847 	bl	801711c <_lseek_r>
 801708e:	1c43      	adds	r3, r0, #1
 8017090:	89a3      	ldrh	r3, [r4, #12]
 8017092:	bf15      	itete	ne
 8017094:	6560      	strne	r0, [r4, #84]	; 0x54
 8017096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801709a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801709e:	81a3      	strheq	r3, [r4, #12]
 80170a0:	bf18      	it	ne
 80170a2:	81a3      	strhne	r3, [r4, #12]
 80170a4:	bd10      	pop	{r4, pc}

080170a6 <__sclose>:
 80170a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170aa:	f000 b827 	b.w	80170fc <_close_r>

080170ae <memmove>:
 80170ae:	4288      	cmp	r0, r1
 80170b0:	b510      	push	{r4, lr}
 80170b2:	eb01 0402 	add.w	r4, r1, r2
 80170b6:	d902      	bls.n	80170be <memmove+0x10>
 80170b8:	4284      	cmp	r4, r0
 80170ba:	4623      	mov	r3, r4
 80170bc:	d807      	bhi.n	80170ce <memmove+0x20>
 80170be:	1e43      	subs	r3, r0, #1
 80170c0:	42a1      	cmp	r1, r4
 80170c2:	d008      	beq.n	80170d6 <memmove+0x28>
 80170c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80170cc:	e7f8      	b.n	80170c0 <memmove+0x12>
 80170ce:	4402      	add	r2, r0
 80170d0:	4601      	mov	r1, r0
 80170d2:	428a      	cmp	r2, r1
 80170d4:	d100      	bne.n	80170d8 <memmove+0x2a>
 80170d6:	bd10      	pop	{r4, pc}
 80170d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80170dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170e0:	e7f7      	b.n	80170d2 <memmove+0x24>

080170e2 <memset>:
 80170e2:	4402      	add	r2, r0
 80170e4:	4603      	mov	r3, r0
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d100      	bne.n	80170ec <memset+0xa>
 80170ea:	4770      	bx	lr
 80170ec:	f803 1b01 	strb.w	r1, [r3], #1
 80170f0:	e7f9      	b.n	80170e6 <memset+0x4>
	...

080170f4 <_localeconv_r>:
 80170f4:	4800      	ldr	r0, [pc, #0]	; (80170f8 <_localeconv_r+0x4>)
 80170f6:	4770      	bx	lr
 80170f8:	20005084 	.word	0x20005084

080170fc <_close_r>:
 80170fc:	b538      	push	{r3, r4, r5, lr}
 80170fe:	4d06      	ldr	r5, [pc, #24]	; (8017118 <_close_r+0x1c>)
 8017100:	2300      	movs	r3, #0
 8017102:	4604      	mov	r4, r0
 8017104:	4608      	mov	r0, r1
 8017106:	602b      	str	r3, [r5, #0]
 8017108:	f001 ffe8 	bl	80190dc <_close>
 801710c:	1c43      	adds	r3, r0, #1
 801710e:	d102      	bne.n	8017116 <_close_r+0x1a>
 8017110:	682b      	ldr	r3, [r5, #0]
 8017112:	b103      	cbz	r3, 8017116 <_close_r+0x1a>
 8017114:	6023      	str	r3, [r4, #0]
 8017116:	bd38      	pop	{r3, r4, r5, pc}
 8017118:	20026850 	.word	0x20026850

0801711c <_lseek_r>:
 801711c:	b538      	push	{r3, r4, r5, lr}
 801711e:	4d07      	ldr	r5, [pc, #28]	; (801713c <_lseek_r+0x20>)
 8017120:	4604      	mov	r4, r0
 8017122:	4608      	mov	r0, r1
 8017124:	4611      	mov	r1, r2
 8017126:	2200      	movs	r2, #0
 8017128:	602a      	str	r2, [r5, #0]
 801712a:	461a      	mov	r2, r3
 801712c:	f001 fffe 	bl	801912c <_lseek>
 8017130:	1c43      	adds	r3, r0, #1
 8017132:	d102      	bne.n	801713a <_lseek_r+0x1e>
 8017134:	682b      	ldr	r3, [r5, #0]
 8017136:	b103      	cbz	r3, 801713a <_lseek_r+0x1e>
 8017138:	6023      	str	r3, [r4, #0]
 801713a:	bd38      	pop	{r3, r4, r5, pc}
 801713c:	20026850 	.word	0x20026850

08017140 <_read_r>:
 8017140:	b538      	push	{r3, r4, r5, lr}
 8017142:	4d07      	ldr	r5, [pc, #28]	; (8017160 <_read_r+0x20>)
 8017144:	4604      	mov	r4, r0
 8017146:	4608      	mov	r0, r1
 8017148:	4611      	mov	r1, r2
 801714a:	2200      	movs	r2, #0
 801714c:	602a      	str	r2, [r5, #0]
 801714e:	461a      	mov	r2, r3
 8017150:	f001 fff4 	bl	801913c <_read>
 8017154:	1c43      	adds	r3, r0, #1
 8017156:	d102      	bne.n	801715e <_read_r+0x1e>
 8017158:	682b      	ldr	r3, [r5, #0]
 801715a:	b103      	cbz	r3, 801715e <_read_r+0x1e>
 801715c:	6023      	str	r3, [r4, #0]
 801715e:	bd38      	pop	{r3, r4, r5, pc}
 8017160:	20026850 	.word	0x20026850

08017164 <_sbrk_r>:
 8017164:	b538      	push	{r3, r4, r5, lr}
 8017166:	4d06      	ldr	r5, [pc, #24]	; (8017180 <_sbrk_r+0x1c>)
 8017168:	2300      	movs	r3, #0
 801716a:	4604      	mov	r4, r0
 801716c:	4608      	mov	r0, r1
 801716e:	602b      	str	r3, [r5, #0]
 8017170:	f7ed f91c 	bl	80043ac <_sbrk>
 8017174:	1c43      	adds	r3, r0, #1
 8017176:	d102      	bne.n	801717e <_sbrk_r+0x1a>
 8017178:	682b      	ldr	r3, [r5, #0]
 801717a:	b103      	cbz	r3, 801717e <_sbrk_r+0x1a>
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	bd38      	pop	{r3, r4, r5, pc}
 8017180:	20026850 	.word	0x20026850

08017184 <_write_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	4d07      	ldr	r5, [pc, #28]	; (80171a4 <_write_r+0x20>)
 8017188:	4604      	mov	r4, r0
 801718a:	4608      	mov	r0, r1
 801718c:	4611      	mov	r1, r2
 801718e:	2200      	movs	r2, #0
 8017190:	602a      	str	r2, [r5, #0]
 8017192:	461a      	mov	r2, r3
 8017194:	f001 ffda 	bl	801914c <_write>
 8017198:	1c43      	adds	r3, r0, #1
 801719a:	d102      	bne.n	80171a2 <_write_r+0x1e>
 801719c:	682b      	ldr	r3, [r5, #0]
 801719e:	b103      	cbz	r3, 80171a2 <_write_r+0x1e>
 80171a0:	6023      	str	r3, [r4, #0]
 80171a2:	bd38      	pop	{r3, r4, r5, pc}
 80171a4:	20026850 	.word	0x20026850

080171a8 <__errno>:
 80171a8:	4b01      	ldr	r3, [pc, #4]	; (80171b0 <__errno+0x8>)
 80171aa:	6818      	ldr	r0, [r3, #0]
 80171ac:	4770      	bx	lr
 80171ae:	bf00      	nop
 80171b0:	20004f90 	.word	0x20004f90

080171b4 <__libc_init_array>:
 80171b4:	b570      	push	{r4, r5, r6, lr}
 80171b6:	4d0d      	ldr	r5, [pc, #52]	; (80171ec <__libc_init_array+0x38>)
 80171b8:	4c0d      	ldr	r4, [pc, #52]	; (80171f0 <__libc_init_array+0x3c>)
 80171ba:	1b64      	subs	r4, r4, r5
 80171bc:	10a4      	asrs	r4, r4, #2
 80171be:	2600      	movs	r6, #0
 80171c0:	42a6      	cmp	r6, r4
 80171c2:	d109      	bne.n	80171d8 <__libc_init_array+0x24>
 80171c4:	4d0b      	ldr	r5, [pc, #44]	; (80171f4 <__libc_init_array+0x40>)
 80171c6:	4c0c      	ldr	r4, [pc, #48]	; (80171f8 <__libc_init_array+0x44>)
 80171c8:	f001 ffca 	bl	8019160 <_init>
 80171cc:	1b64      	subs	r4, r4, r5
 80171ce:	10a4      	asrs	r4, r4, #2
 80171d0:	2600      	movs	r6, #0
 80171d2:	42a6      	cmp	r6, r4
 80171d4:	d105      	bne.n	80171e2 <__libc_init_array+0x2e>
 80171d6:	bd70      	pop	{r4, r5, r6, pc}
 80171d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80171dc:	4798      	blx	r3
 80171de:	3601      	adds	r6, #1
 80171e0:	e7ee      	b.n	80171c0 <__libc_init_array+0xc>
 80171e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80171e6:	4798      	blx	r3
 80171e8:	3601      	adds	r6, #1
 80171ea:	e7f2      	b.n	80171d2 <__libc_init_array+0x1e>
 80171ec:	080940dc 	.word	0x080940dc
 80171f0:	080940dc 	.word	0x080940dc
 80171f4:	080940dc 	.word	0x080940dc
 80171f8:	080940e0 	.word	0x080940e0

080171fc <__retarget_lock_init_recursive>:
 80171fc:	4770      	bx	lr

080171fe <__retarget_lock_acquire_recursive>:
 80171fe:	4770      	bx	lr

08017200 <__retarget_lock_release_recursive>:
 8017200:	4770      	bx	lr

08017202 <memcpy>:
 8017202:	440a      	add	r2, r1
 8017204:	4291      	cmp	r1, r2
 8017206:	f100 33ff 	add.w	r3, r0, #4294967295
 801720a:	d100      	bne.n	801720e <memcpy+0xc>
 801720c:	4770      	bx	lr
 801720e:	b510      	push	{r4, lr}
 8017210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017214:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017218:	4291      	cmp	r1, r2
 801721a:	d1f9      	bne.n	8017210 <memcpy+0xe>
 801721c:	bd10      	pop	{r4, pc}

0801721e <quorem>:
 801721e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017222:	6903      	ldr	r3, [r0, #16]
 8017224:	690c      	ldr	r4, [r1, #16]
 8017226:	42a3      	cmp	r3, r4
 8017228:	4607      	mov	r7, r0
 801722a:	db7e      	blt.n	801732a <quorem+0x10c>
 801722c:	3c01      	subs	r4, #1
 801722e:	f101 0814 	add.w	r8, r1, #20
 8017232:	f100 0514 	add.w	r5, r0, #20
 8017236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801723a:	9301      	str	r3, [sp, #4]
 801723c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017244:	3301      	adds	r3, #1
 8017246:	429a      	cmp	r2, r3
 8017248:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801724c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017250:	fbb2 f6f3 	udiv	r6, r2, r3
 8017254:	d331      	bcc.n	80172ba <quorem+0x9c>
 8017256:	f04f 0e00 	mov.w	lr, #0
 801725a:	4640      	mov	r0, r8
 801725c:	46ac      	mov	ip, r5
 801725e:	46f2      	mov	sl, lr
 8017260:	f850 2b04 	ldr.w	r2, [r0], #4
 8017264:	b293      	uxth	r3, r2
 8017266:	fb06 e303 	mla	r3, r6, r3, lr
 801726a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801726e:	0c1a      	lsrs	r2, r3, #16
 8017270:	b29b      	uxth	r3, r3
 8017272:	ebaa 0303 	sub.w	r3, sl, r3
 8017276:	f8dc a000 	ldr.w	sl, [ip]
 801727a:	fa13 f38a 	uxtah	r3, r3, sl
 801727e:	fb06 220e 	mla	r2, r6, lr, r2
 8017282:	9300      	str	r3, [sp, #0]
 8017284:	9b00      	ldr	r3, [sp, #0]
 8017286:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801728a:	b292      	uxth	r2, r2
 801728c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017294:	f8bd 3000 	ldrh.w	r3, [sp]
 8017298:	4581      	cmp	r9, r0
 801729a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801729e:	f84c 3b04 	str.w	r3, [ip], #4
 80172a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80172a6:	d2db      	bcs.n	8017260 <quorem+0x42>
 80172a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80172ac:	b92b      	cbnz	r3, 80172ba <quorem+0x9c>
 80172ae:	9b01      	ldr	r3, [sp, #4]
 80172b0:	3b04      	subs	r3, #4
 80172b2:	429d      	cmp	r5, r3
 80172b4:	461a      	mov	r2, r3
 80172b6:	d32c      	bcc.n	8017312 <quorem+0xf4>
 80172b8:	613c      	str	r4, [r7, #16]
 80172ba:	4638      	mov	r0, r7
 80172bc:	f001 f8f2 	bl	80184a4 <__mcmp>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	db22      	blt.n	801730a <quorem+0xec>
 80172c4:	3601      	adds	r6, #1
 80172c6:	4629      	mov	r1, r5
 80172c8:	2000      	movs	r0, #0
 80172ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80172ce:	f8d1 c000 	ldr.w	ip, [r1]
 80172d2:	b293      	uxth	r3, r2
 80172d4:	1ac3      	subs	r3, r0, r3
 80172d6:	0c12      	lsrs	r2, r2, #16
 80172d8:	fa13 f38c 	uxtah	r3, r3, ip
 80172dc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80172e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80172e4:	b29b      	uxth	r3, r3
 80172e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172ea:	45c1      	cmp	r9, r8
 80172ec:	f841 3b04 	str.w	r3, [r1], #4
 80172f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80172f4:	d2e9      	bcs.n	80172ca <quorem+0xac>
 80172f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172fe:	b922      	cbnz	r2, 801730a <quorem+0xec>
 8017300:	3b04      	subs	r3, #4
 8017302:	429d      	cmp	r5, r3
 8017304:	461a      	mov	r2, r3
 8017306:	d30a      	bcc.n	801731e <quorem+0x100>
 8017308:	613c      	str	r4, [r7, #16]
 801730a:	4630      	mov	r0, r6
 801730c:	b003      	add	sp, #12
 801730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017312:	6812      	ldr	r2, [r2, #0]
 8017314:	3b04      	subs	r3, #4
 8017316:	2a00      	cmp	r2, #0
 8017318:	d1ce      	bne.n	80172b8 <quorem+0x9a>
 801731a:	3c01      	subs	r4, #1
 801731c:	e7c9      	b.n	80172b2 <quorem+0x94>
 801731e:	6812      	ldr	r2, [r2, #0]
 8017320:	3b04      	subs	r3, #4
 8017322:	2a00      	cmp	r2, #0
 8017324:	d1f0      	bne.n	8017308 <quorem+0xea>
 8017326:	3c01      	subs	r4, #1
 8017328:	e7eb      	b.n	8017302 <quorem+0xe4>
 801732a:	2000      	movs	r0, #0
 801732c:	e7ee      	b.n	801730c <quorem+0xee>
	...

08017330 <_dtoa_r>:
 8017330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017334:	ed2d 8b04 	vpush	{d8-d9}
 8017338:	69c5      	ldr	r5, [r0, #28]
 801733a:	b093      	sub	sp, #76	; 0x4c
 801733c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017340:	ec57 6b10 	vmov	r6, r7, d0
 8017344:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017348:	9107      	str	r1, [sp, #28]
 801734a:	4604      	mov	r4, r0
 801734c:	920a      	str	r2, [sp, #40]	; 0x28
 801734e:	930d      	str	r3, [sp, #52]	; 0x34
 8017350:	b975      	cbnz	r5, 8017370 <_dtoa_r+0x40>
 8017352:	2010      	movs	r0, #16
 8017354:	f7ff f83c 	bl	80163d0 <malloc>
 8017358:	4602      	mov	r2, r0
 801735a:	61e0      	str	r0, [r4, #28]
 801735c:	b920      	cbnz	r0, 8017368 <_dtoa_r+0x38>
 801735e:	4bae      	ldr	r3, [pc, #696]	; (8017618 <_dtoa_r+0x2e8>)
 8017360:	21ef      	movs	r1, #239	; 0xef
 8017362:	48ae      	ldr	r0, [pc, #696]	; (801761c <_dtoa_r+0x2ec>)
 8017364:	f001 fbac 	bl	8018ac0 <__assert_func>
 8017368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801736c:	6005      	str	r5, [r0, #0]
 801736e:	60c5      	str	r5, [r0, #12]
 8017370:	69e3      	ldr	r3, [r4, #28]
 8017372:	6819      	ldr	r1, [r3, #0]
 8017374:	b151      	cbz	r1, 801738c <_dtoa_r+0x5c>
 8017376:	685a      	ldr	r2, [r3, #4]
 8017378:	604a      	str	r2, [r1, #4]
 801737a:	2301      	movs	r3, #1
 801737c:	4093      	lsls	r3, r2
 801737e:	608b      	str	r3, [r1, #8]
 8017380:	4620      	mov	r0, r4
 8017382:	f000 fe53 	bl	801802c <_Bfree>
 8017386:	69e3      	ldr	r3, [r4, #28]
 8017388:	2200      	movs	r2, #0
 801738a:	601a      	str	r2, [r3, #0]
 801738c:	1e3b      	subs	r3, r7, #0
 801738e:	bfbb      	ittet	lt
 8017390:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017394:	9303      	strlt	r3, [sp, #12]
 8017396:	2300      	movge	r3, #0
 8017398:	2201      	movlt	r2, #1
 801739a:	bfac      	ite	ge
 801739c:	f8c8 3000 	strge.w	r3, [r8]
 80173a0:	f8c8 2000 	strlt.w	r2, [r8]
 80173a4:	4b9e      	ldr	r3, [pc, #632]	; (8017620 <_dtoa_r+0x2f0>)
 80173a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80173aa:	ea33 0308 	bics.w	r3, r3, r8
 80173ae:	d11b      	bne.n	80173e8 <_dtoa_r+0xb8>
 80173b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80173b6:	6013      	str	r3, [r2, #0]
 80173b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80173bc:	4333      	orrs	r3, r6
 80173be:	f000 8593 	beq.w	8017ee8 <_dtoa_r+0xbb8>
 80173c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173c4:	b963      	cbnz	r3, 80173e0 <_dtoa_r+0xb0>
 80173c6:	4b97      	ldr	r3, [pc, #604]	; (8017624 <_dtoa_r+0x2f4>)
 80173c8:	e027      	b.n	801741a <_dtoa_r+0xea>
 80173ca:	4b97      	ldr	r3, [pc, #604]	; (8017628 <_dtoa_r+0x2f8>)
 80173cc:	9300      	str	r3, [sp, #0]
 80173ce:	3308      	adds	r3, #8
 80173d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80173d2:	6013      	str	r3, [r2, #0]
 80173d4:	9800      	ldr	r0, [sp, #0]
 80173d6:	b013      	add	sp, #76	; 0x4c
 80173d8:	ecbd 8b04 	vpop	{d8-d9}
 80173dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173e0:	4b90      	ldr	r3, [pc, #576]	; (8017624 <_dtoa_r+0x2f4>)
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	3303      	adds	r3, #3
 80173e6:	e7f3      	b.n	80173d0 <_dtoa_r+0xa0>
 80173e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80173ec:	2200      	movs	r2, #0
 80173ee:	ec51 0b17 	vmov	r0, r1, d7
 80173f2:	eeb0 8a47 	vmov.f32	s16, s14
 80173f6:	eef0 8a67 	vmov.f32	s17, s15
 80173fa:	2300      	movs	r3, #0
 80173fc:	f7e9 fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8017400:	4681      	mov	r9, r0
 8017402:	b160      	cbz	r0, 801741e <_dtoa_r+0xee>
 8017404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017406:	2301      	movs	r3, #1
 8017408:	6013      	str	r3, [r2, #0]
 801740a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801740c:	2b00      	cmp	r3, #0
 801740e:	f000 8568 	beq.w	8017ee2 <_dtoa_r+0xbb2>
 8017412:	4b86      	ldr	r3, [pc, #536]	; (801762c <_dtoa_r+0x2fc>)
 8017414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017416:	6013      	str	r3, [r2, #0]
 8017418:	3b01      	subs	r3, #1
 801741a:	9300      	str	r3, [sp, #0]
 801741c:	e7da      	b.n	80173d4 <_dtoa_r+0xa4>
 801741e:	aa10      	add	r2, sp, #64	; 0x40
 8017420:	a911      	add	r1, sp, #68	; 0x44
 8017422:	4620      	mov	r0, r4
 8017424:	eeb0 0a48 	vmov.f32	s0, s16
 8017428:	eef0 0a68 	vmov.f32	s1, s17
 801742c:	f001 f8e0 	bl	80185f0 <__d2b>
 8017430:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017434:	4682      	mov	sl, r0
 8017436:	2d00      	cmp	r5, #0
 8017438:	d07f      	beq.n	801753a <_dtoa_r+0x20a>
 801743a:	ee18 3a90 	vmov	r3, s17
 801743e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017442:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017446:	ec51 0b18 	vmov	r0, r1, d8
 801744a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801744e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017452:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017456:	4619      	mov	r1, r3
 8017458:	2200      	movs	r2, #0
 801745a:	4b75      	ldr	r3, [pc, #468]	; (8017630 <_dtoa_r+0x300>)
 801745c:	f7e8 ff34 	bl	80002c8 <__aeabi_dsub>
 8017460:	a367      	add	r3, pc, #412	; (adr r3, 8017600 <_dtoa_r+0x2d0>)
 8017462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017466:	f7e9 f8e7 	bl	8000638 <__aeabi_dmul>
 801746a:	a367      	add	r3, pc, #412	; (adr r3, 8017608 <_dtoa_r+0x2d8>)
 801746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017470:	f7e8 ff2c 	bl	80002cc <__adddf3>
 8017474:	4606      	mov	r6, r0
 8017476:	4628      	mov	r0, r5
 8017478:	460f      	mov	r7, r1
 801747a:	f7e9 f873 	bl	8000564 <__aeabi_i2d>
 801747e:	a364      	add	r3, pc, #400	; (adr r3, 8017610 <_dtoa_r+0x2e0>)
 8017480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017484:	f7e9 f8d8 	bl	8000638 <__aeabi_dmul>
 8017488:	4602      	mov	r2, r0
 801748a:	460b      	mov	r3, r1
 801748c:	4630      	mov	r0, r6
 801748e:	4639      	mov	r1, r7
 8017490:	f7e8 ff1c 	bl	80002cc <__adddf3>
 8017494:	4606      	mov	r6, r0
 8017496:	460f      	mov	r7, r1
 8017498:	f7e9 fb7e 	bl	8000b98 <__aeabi_d2iz>
 801749c:	2200      	movs	r2, #0
 801749e:	4683      	mov	fp, r0
 80174a0:	2300      	movs	r3, #0
 80174a2:	4630      	mov	r0, r6
 80174a4:	4639      	mov	r1, r7
 80174a6:	f7e9 fb39 	bl	8000b1c <__aeabi_dcmplt>
 80174aa:	b148      	cbz	r0, 80174c0 <_dtoa_r+0x190>
 80174ac:	4658      	mov	r0, fp
 80174ae:	f7e9 f859 	bl	8000564 <__aeabi_i2d>
 80174b2:	4632      	mov	r2, r6
 80174b4:	463b      	mov	r3, r7
 80174b6:	f7e9 fb27 	bl	8000b08 <__aeabi_dcmpeq>
 80174ba:	b908      	cbnz	r0, 80174c0 <_dtoa_r+0x190>
 80174bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174c0:	f1bb 0f16 	cmp.w	fp, #22
 80174c4:	d857      	bhi.n	8017576 <_dtoa_r+0x246>
 80174c6:	4b5b      	ldr	r3, [pc, #364]	; (8017634 <_dtoa_r+0x304>)
 80174c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80174cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174d0:	ec51 0b18 	vmov	r0, r1, d8
 80174d4:	f7e9 fb22 	bl	8000b1c <__aeabi_dcmplt>
 80174d8:	2800      	cmp	r0, #0
 80174da:	d04e      	beq.n	801757a <_dtoa_r+0x24a>
 80174dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174e0:	2300      	movs	r3, #0
 80174e2:	930c      	str	r3, [sp, #48]	; 0x30
 80174e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174e6:	1b5b      	subs	r3, r3, r5
 80174e8:	1e5a      	subs	r2, r3, #1
 80174ea:	bf45      	ittet	mi
 80174ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80174f0:	9305      	strmi	r3, [sp, #20]
 80174f2:	2300      	movpl	r3, #0
 80174f4:	2300      	movmi	r3, #0
 80174f6:	9206      	str	r2, [sp, #24]
 80174f8:	bf54      	ite	pl
 80174fa:	9305      	strpl	r3, [sp, #20]
 80174fc:	9306      	strmi	r3, [sp, #24]
 80174fe:	f1bb 0f00 	cmp.w	fp, #0
 8017502:	db3c      	blt.n	801757e <_dtoa_r+0x24e>
 8017504:	9b06      	ldr	r3, [sp, #24]
 8017506:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801750a:	445b      	add	r3, fp
 801750c:	9306      	str	r3, [sp, #24]
 801750e:	2300      	movs	r3, #0
 8017510:	9308      	str	r3, [sp, #32]
 8017512:	9b07      	ldr	r3, [sp, #28]
 8017514:	2b09      	cmp	r3, #9
 8017516:	d868      	bhi.n	80175ea <_dtoa_r+0x2ba>
 8017518:	2b05      	cmp	r3, #5
 801751a:	bfc4      	itt	gt
 801751c:	3b04      	subgt	r3, #4
 801751e:	9307      	strgt	r3, [sp, #28]
 8017520:	9b07      	ldr	r3, [sp, #28]
 8017522:	f1a3 0302 	sub.w	r3, r3, #2
 8017526:	bfcc      	ite	gt
 8017528:	2500      	movgt	r5, #0
 801752a:	2501      	movle	r5, #1
 801752c:	2b03      	cmp	r3, #3
 801752e:	f200 8085 	bhi.w	801763c <_dtoa_r+0x30c>
 8017532:	e8df f003 	tbb	[pc, r3]
 8017536:	3b2e      	.short	0x3b2e
 8017538:	5839      	.short	0x5839
 801753a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801753e:	441d      	add	r5, r3
 8017540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017544:	2b20      	cmp	r3, #32
 8017546:	bfc1      	itttt	gt
 8017548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801754c:	fa08 f803 	lslgt.w	r8, r8, r3
 8017550:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017554:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017558:	bfd6      	itet	le
 801755a:	f1c3 0320 	rsble	r3, r3, #32
 801755e:	ea48 0003 	orrgt.w	r0, r8, r3
 8017562:	fa06 f003 	lslle.w	r0, r6, r3
 8017566:	f7e8 ffed 	bl	8000544 <__aeabi_ui2d>
 801756a:	2201      	movs	r2, #1
 801756c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017570:	3d01      	subs	r5, #1
 8017572:	920e      	str	r2, [sp, #56]	; 0x38
 8017574:	e76f      	b.n	8017456 <_dtoa_r+0x126>
 8017576:	2301      	movs	r3, #1
 8017578:	e7b3      	b.n	80174e2 <_dtoa_r+0x1b2>
 801757a:	900c      	str	r0, [sp, #48]	; 0x30
 801757c:	e7b2      	b.n	80174e4 <_dtoa_r+0x1b4>
 801757e:	9b05      	ldr	r3, [sp, #20]
 8017580:	eba3 030b 	sub.w	r3, r3, fp
 8017584:	9305      	str	r3, [sp, #20]
 8017586:	f1cb 0300 	rsb	r3, fp, #0
 801758a:	9308      	str	r3, [sp, #32]
 801758c:	2300      	movs	r3, #0
 801758e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017590:	e7bf      	b.n	8017512 <_dtoa_r+0x1e2>
 8017592:	2300      	movs	r3, #0
 8017594:	9309      	str	r3, [sp, #36]	; 0x24
 8017596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017598:	2b00      	cmp	r3, #0
 801759a:	dc52      	bgt.n	8017642 <_dtoa_r+0x312>
 801759c:	2301      	movs	r3, #1
 801759e:	9301      	str	r3, [sp, #4]
 80175a0:	9304      	str	r3, [sp, #16]
 80175a2:	461a      	mov	r2, r3
 80175a4:	920a      	str	r2, [sp, #40]	; 0x28
 80175a6:	e00b      	b.n	80175c0 <_dtoa_r+0x290>
 80175a8:	2301      	movs	r3, #1
 80175aa:	e7f3      	b.n	8017594 <_dtoa_r+0x264>
 80175ac:	2300      	movs	r3, #0
 80175ae:	9309      	str	r3, [sp, #36]	; 0x24
 80175b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175b2:	445b      	add	r3, fp
 80175b4:	9301      	str	r3, [sp, #4]
 80175b6:	3301      	adds	r3, #1
 80175b8:	2b01      	cmp	r3, #1
 80175ba:	9304      	str	r3, [sp, #16]
 80175bc:	bfb8      	it	lt
 80175be:	2301      	movlt	r3, #1
 80175c0:	69e0      	ldr	r0, [r4, #28]
 80175c2:	2100      	movs	r1, #0
 80175c4:	2204      	movs	r2, #4
 80175c6:	f102 0614 	add.w	r6, r2, #20
 80175ca:	429e      	cmp	r6, r3
 80175cc:	d93d      	bls.n	801764a <_dtoa_r+0x31a>
 80175ce:	6041      	str	r1, [r0, #4]
 80175d0:	4620      	mov	r0, r4
 80175d2:	f000 fceb 	bl	8017fac <_Balloc>
 80175d6:	9000      	str	r0, [sp, #0]
 80175d8:	2800      	cmp	r0, #0
 80175da:	d139      	bne.n	8017650 <_dtoa_r+0x320>
 80175dc:	4b16      	ldr	r3, [pc, #88]	; (8017638 <_dtoa_r+0x308>)
 80175de:	4602      	mov	r2, r0
 80175e0:	f240 11af 	movw	r1, #431	; 0x1af
 80175e4:	e6bd      	b.n	8017362 <_dtoa_r+0x32>
 80175e6:	2301      	movs	r3, #1
 80175e8:	e7e1      	b.n	80175ae <_dtoa_r+0x27e>
 80175ea:	2501      	movs	r5, #1
 80175ec:	2300      	movs	r3, #0
 80175ee:	9307      	str	r3, [sp, #28]
 80175f0:	9509      	str	r5, [sp, #36]	; 0x24
 80175f2:	f04f 33ff 	mov.w	r3, #4294967295
 80175f6:	9301      	str	r3, [sp, #4]
 80175f8:	9304      	str	r3, [sp, #16]
 80175fa:	2200      	movs	r2, #0
 80175fc:	2312      	movs	r3, #18
 80175fe:	e7d1      	b.n	80175a4 <_dtoa_r+0x274>
 8017600:	636f4361 	.word	0x636f4361
 8017604:	3fd287a7 	.word	0x3fd287a7
 8017608:	8b60c8b3 	.word	0x8b60c8b3
 801760c:	3fc68a28 	.word	0x3fc68a28
 8017610:	509f79fb 	.word	0x509f79fb
 8017614:	3fd34413 	.word	0x3fd34413
 8017618:	08093da1 	.word	0x08093da1
 801761c:	08093db8 	.word	0x08093db8
 8017620:	7ff00000 	.word	0x7ff00000
 8017624:	08093d9d 	.word	0x08093d9d
 8017628:	08093d94 	.word	0x08093d94
 801762c:	08093d71 	.word	0x08093d71
 8017630:	3ff80000 	.word	0x3ff80000
 8017634:	08093ea8 	.word	0x08093ea8
 8017638:	08093e10 	.word	0x08093e10
 801763c:	2301      	movs	r3, #1
 801763e:	9309      	str	r3, [sp, #36]	; 0x24
 8017640:	e7d7      	b.n	80175f2 <_dtoa_r+0x2c2>
 8017642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017644:	9301      	str	r3, [sp, #4]
 8017646:	9304      	str	r3, [sp, #16]
 8017648:	e7ba      	b.n	80175c0 <_dtoa_r+0x290>
 801764a:	3101      	adds	r1, #1
 801764c:	0052      	lsls	r2, r2, #1
 801764e:	e7ba      	b.n	80175c6 <_dtoa_r+0x296>
 8017650:	69e3      	ldr	r3, [r4, #28]
 8017652:	9a00      	ldr	r2, [sp, #0]
 8017654:	601a      	str	r2, [r3, #0]
 8017656:	9b04      	ldr	r3, [sp, #16]
 8017658:	2b0e      	cmp	r3, #14
 801765a:	f200 80a8 	bhi.w	80177ae <_dtoa_r+0x47e>
 801765e:	2d00      	cmp	r5, #0
 8017660:	f000 80a5 	beq.w	80177ae <_dtoa_r+0x47e>
 8017664:	f1bb 0f00 	cmp.w	fp, #0
 8017668:	dd38      	ble.n	80176dc <_dtoa_r+0x3ac>
 801766a:	4bc0      	ldr	r3, [pc, #768]	; (801796c <_dtoa_r+0x63c>)
 801766c:	f00b 020f 	and.w	r2, fp, #15
 8017670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017674:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017678:	e9d3 6700 	ldrd	r6, r7, [r3]
 801767c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017680:	d019      	beq.n	80176b6 <_dtoa_r+0x386>
 8017682:	4bbb      	ldr	r3, [pc, #748]	; (8017970 <_dtoa_r+0x640>)
 8017684:	ec51 0b18 	vmov	r0, r1, d8
 8017688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801768c:	f7e9 f8fe 	bl	800088c <__aeabi_ddiv>
 8017690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017694:	f008 080f 	and.w	r8, r8, #15
 8017698:	2503      	movs	r5, #3
 801769a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017970 <_dtoa_r+0x640>
 801769e:	f1b8 0f00 	cmp.w	r8, #0
 80176a2:	d10a      	bne.n	80176ba <_dtoa_r+0x38a>
 80176a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176a8:	4632      	mov	r2, r6
 80176aa:	463b      	mov	r3, r7
 80176ac:	f7e9 f8ee 	bl	800088c <__aeabi_ddiv>
 80176b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176b4:	e02b      	b.n	801770e <_dtoa_r+0x3de>
 80176b6:	2502      	movs	r5, #2
 80176b8:	e7ef      	b.n	801769a <_dtoa_r+0x36a>
 80176ba:	f018 0f01 	tst.w	r8, #1
 80176be:	d008      	beq.n	80176d2 <_dtoa_r+0x3a2>
 80176c0:	4630      	mov	r0, r6
 80176c2:	4639      	mov	r1, r7
 80176c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80176c8:	f7e8 ffb6 	bl	8000638 <__aeabi_dmul>
 80176cc:	3501      	adds	r5, #1
 80176ce:	4606      	mov	r6, r0
 80176d0:	460f      	mov	r7, r1
 80176d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80176d6:	f109 0908 	add.w	r9, r9, #8
 80176da:	e7e0      	b.n	801769e <_dtoa_r+0x36e>
 80176dc:	f000 809f 	beq.w	801781e <_dtoa_r+0x4ee>
 80176e0:	f1cb 0600 	rsb	r6, fp, #0
 80176e4:	4ba1      	ldr	r3, [pc, #644]	; (801796c <_dtoa_r+0x63c>)
 80176e6:	4fa2      	ldr	r7, [pc, #648]	; (8017970 <_dtoa_r+0x640>)
 80176e8:	f006 020f 	and.w	r2, r6, #15
 80176ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176f4:	ec51 0b18 	vmov	r0, r1, d8
 80176f8:	f7e8 ff9e 	bl	8000638 <__aeabi_dmul>
 80176fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017700:	1136      	asrs	r6, r6, #4
 8017702:	2300      	movs	r3, #0
 8017704:	2502      	movs	r5, #2
 8017706:	2e00      	cmp	r6, #0
 8017708:	d17e      	bne.n	8017808 <_dtoa_r+0x4d8>
 801770a:	2b00      	cmp	r3, #0
 801770c:	d1d0      	bne.n	80176b0 <_dtoa_r+0x380>
 801770e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017710:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017714:	2b00      	cmp	r3, #0
 8017716:	f000 8084 	beq.w	8017822 <_dtoa_r+0x4f2>
 801771a:	4b96      	ldr	r3, [pc, #600]	; (8017974 <_dtoa_r+0x644>)
 801771c:	2200      	movs	r2, #0
 801771e:	4640      	mov	r0, r8
 8017720:	4649      	mov	r1, r9
 8017722:	f7e9 f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8017726:	2800      	cmp	r0, #0
 8017728:	d07b      	beq.n	8017822 <_dtoa_r+0x4f2>
 801772a:	9b04      	ldr	r3, [sp, #16]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d078      	beq.n	8017822 <_dtoa_r+0x4f2>
 8017730:	9b01      	ldr	r3, [sp, #4]
 8017732:	2b00      	cmp	r3, #0
 8017734:	dd39      	ble.n	80177aa <_dtoa_r+0x47a>
 8017736:	4b90      	ldr	r3, [pc, #576]	; (8017978 <_dtoa_r+0x648>)
 8017738:	2200      	movs	r2, #0
 801773a:	4640      	mov	r0, r8
 801773c:	4649      	mov	r1, r9
 801773e:	f7e8 ff7b 	bl	8000638 <__aeabi_dmul>
 8017742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017746:	9e01      	ldr	r6, [sp, #4]
 8017748:	f10b 37ff 	add.w	r7, fp, #4294967295
 801774c:	3501      	adds	r5, #1
 801774e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017752:	4628      	mov	r0, r5
 8017754:	f7e8 ff06 	bl	8000564 <__aeabi_i2d>
 8017758:	4642      	mov	r2, r8
 801775a:	464b      	mov	r3, r9
 801775c:	f7e8 ff6c 	bl	8000638 <__aeabi_dmul>
 8017760:	4b86      	ldr	r3, [pc, #536]	; (801797c <_dtoa_r+0x64c>)
 8017762:	2200      	movs	r2, #0
 8017764:	f7e8 fdb2 	bl	80002cc <__adddf3>
 8017768:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801776c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017770:	9303      	str	r3, [sp, #12]
 8017772:	2e00      	cmp	r6, #0
 8017774:	d158      	bne.n	8017828 <_dtoa_r+0x4f8>
 8017776:	4b82      	ldr	r3, [pc, #520]	; (8017980 <_dtoa_r+0x650>)
 8017778:	2200      	movs	r2, #0
 801777a:	4640      	mov	r0, r8
 801777c:	4649      	mov	r1, r9
 801777e:	f7e8 fda3 	bl	80002c8 <__aeabi_dsub>
 8017782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017786:	4680      	mov	r8, r0
 8017788:	4689      	mov	r9, r1
 801778a:	f7e9 f9e5 	bl	8000b58 <__aeabi_dcmpgt>
 801778e:	2800      	cmp	r0, #0
 8017790:	f040 8296 	bne.w	8017cc0 <_dtoa_r+0x990>
 8017794:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017798:	4640      	mov	r0, r8
 801779a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801779e:	4649      	mov	r1, r9
 80177a0:	f7e9 f9bc 	bl	8000b1c <__aeabi_dcmplt>
 80177a4:	2800      	cmp	r0, #0
 80177a6:	f040 8289 	bne.w	8017cbc <_dtoa_r+0x98c>
 80177aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80177ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	f2c0 814e 	blt.w	8017a52 <_dtoa_r+0x722>
 80177b6:	f1bb 0f0e 	cmp.w	fp, #14
 80177ba:	f300 814a 	bgt.w	8017a52 <_dtoa_r+0x722>
 80177be:	4b6b      	ldr	r3, [pc, #428]	; (801796c <_dtoa_r+0x63c>)
 80177c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80177c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80177c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	f280 80dc 	bge.w	8017988 <_dtoa_r+0x658>
 80177d0:	9b04      	ldr	r3, [sp, #16]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f300 80d8 	bgt.w	8017988 <_dtoa_r+0x658>
 80177d8:	f040 826f 	bne.w	8017cba <_dtoa_r+0x98a>
 80177dc:	4b68      	ldr	r3, [pc, #416]	; (8017980 <_dtoa_r+0x650>)
 80177de:	2200      	movs	r2, #0
 80177e0:	4640      	mov	r0, r8
 80177e2:	4649      	mov	r1, r9
 80177e4:	f7e8 ff28 	bl	8000638 <__aeabi_dmul>
 80177e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177ec:	f7e9 f9aa 	bl	8000b44 <__aeabi_dcmpge>
 80177f0:	9e04      	ldr	r6, [sp, #16]
 80177f2:	4637      	mov	r7, r6
 80177f4:	2800      	cmp	r0, #0
 80177f6:	f040 8245 	bne.w	8017c84 <_dtoa_r+0x954>
 80177fa:	9d00      	ldr	r5, [sp, #0]
 80177fc:	2331      	movs	r3, #49	; 0x31
 80177fe:	f805 3b01 	strb.w	r3, [r5], #1
 8017802:	f10b 0b01 	add.w	fp, fp, #1
 8017806:	e241      	b.n	8017c8c <_dtoa_r+0x95c>
 8017808:	07f2      	lsls	r2, r6, #31
 801780a:	d505      	bpl.n	8017818 <_dtoa_r+0x4e8>
 801780c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017810:	f7e8 ff12 	bl	8000638 <__aeabi_dmul>
 8017814:	3501      	adds	r5, #1
 8017816:	2301      	movs	r3, #1
 8017818:	1076      	asrs	r6, r6, #1
 801781a:	3708      	adds	r7, #8
 801781c:	e773      	b.n	8017706 <_dtoa_r+0x3d6>
 801781e:	2502      	movs	r5, #2
 8017820:	e775      	b.n	801770e <_dtoa_r+0x3de>
 8017822:	9e04      	ldr	r6, [sp, #16]
 8017824:	465f      	mov	r7, fp
 8017826:	e792      	b.n	801774e <_dtoa_r+0x41e>
 8017828:	9900      	ldr	r1, [sp, #0]
 801782a:	4b50      	ldr	r3, [pc, #320]	; (801796c <_dtoa_r+0x63c>)
 801782c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017830:	4431      	add	r1, r6
 8017832:	9102      	str	r1, [sp, #8]
 8017834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017836:	eeb0 9a47 	vmov.f32	s18, s14
 801783a:	eef0 9a67 	vmov.f32	s19, s15
 801783e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017846:	2900      	cmp	r1, #0
 8017848:	d044      	beq.n	80178d4 <_dtoa_r+0x5a4>
 801784a:	494e      	ldr	r1, [pc, #312]	; (8017984 <_dtoa_r+0x654>)
 801784c:	2000      	movs	r0, #0
 801784e:	f7e9 f81d 	bl	800088c <__aeabi_ddiv>
 8017852:	ec53 2b19 	vmov	r2, r3, d9
 8017856:	f7e8 fd37 	bl	80002c8 <__aeabi_dsub>
 801785a:	9d00      	ldr	r5, [sp, #0]
 801785c:	ec41 0b19 	vmov	d9, r0, r1
 8017860:	4649      	mov	r1, r9
 8017862:	4640      	mov	r0, r8
 8017864:	f7e9 f998 	bl	8000b98 <__aeabi_d2iz>
 8017868:	4606      	mov	r6, r0
 801786a:	f7e8 fe7b 	bl	8000564 <__aeabi_i2d>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	4640      	mov	r0, r8
 8017874:	4649      	mov	r1, r9
 8017876:	f7e8 fd27 	bl	80002c8 <__aeabi_dsub>
 801787a:	3630      	adds	r6, #48	; 0x30
 801787c:	f805 6b01 	strb.w	r6, [r5], #1
 8017880:	ec53 2b19 	vmov	r2, r3, d9
 8017884:	4680      	mov	r8, r0
 8017886:	4689      	mov	r9, r1
 8017888:	f7e9 f948 	bl	8000b1c <__aeabi_dcmplt>
 801788c:	2800      	cmp	r0, #0
 801788e:	d164      	bne.n	801795a <_dtoa_r+0x62a>
 8017890:	4642      	mov	r2, r8
 8017892:	464b      	mov	r3, r9
 8017894:	4937      	ldr	r1, [pc, #220]	; (8017974 <_dtoa_r+0x644>)
 8017896:	2000      	movs	r0, #0
 8017898:	f7e8 fd16 	bl	80002c8 <__aeabi_dsub>
 801789c:	ec53 2b19 	vmov	r2, r3, d9
 80178a0:	f7e9 f93c 	bl	8000b1c <__aeabi_dcmplt>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	f040 80b6 	bne.w	8017a16 <_dtoa_r+0x6e6>
 80178aa:	9b02      	ldr	r3, [sp, #8]
 80178ac:	429d      	cmp	r5, r3
 80178ae:	f43f af7c 	beq.w	80177aa <_dtoa_r+0x47a>
 80178b2:	4b31      	ldr	r3, [pc, #196]	; (8017978 <_dtoa_r+0x648>)
 80178b4:	ec51 0b19 	vmov	r0, r1, d9
 80178b8:	2200      	movs	r2, #0
 80178ba:	f7e8 febd 	bl	8000638 <__aeabi_dmul>
 80178be:	4b2e      	ldr	r3, [pc, #184]	; (8017978 <_dtoa_r+0x648>)
 80178c0:	ec41 0b19 	vmov	d9, r0, r1
 80178c4:	2200      	movs	r2, #0
 80178c6:	4640      	mov	r0, r8
 80178c8:	4649      	mov	r1, r9
 80178ca:	f7e8 feb5 	bl	8000638 <__aeabi_dmul>
 80178ce:	4680      	mov	r8, r0
 80178d0:	4689      	mov	r9, r1
 80178d2:	e7c5      	b.n	8017860 <_dtoa_r+0x530>
 80178d4:	ec51 0b17 	vmov	r0, r1, d7
 80178d8:	f7e8 feae 	bl	8000638 <__aeabi_dmul>
 80178dc:	9b02      	ldr	r3, [sp, #8]
 80178de:	9d00      	ldr	r5, [sp, #0]
 80178e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80178e2:	ec41 0b19 	vmov	d9, r0, r1
 80178e6:	4649      	mov	r1, r9
 80178e8:	4640      	mov	r0, r8
 80178ea:	f7e9 f955 	bl	8000b98 <__aeabi_d2iz>
 80178ee:	4606      	mov	r6, r0
 80178f0:	f7e8 fe38 	bl	8000564 <__aeabi_i2d>
 80178f4:	3630      	adds	r6, #48	; 0x30
 80178f6:	4602      	mov	r2, r0
 80178f8:	460b      	mov	r3, r1
 80178fa:	4640      	mov	r0, r8
 80178fc:	4649      	mov	r1, r9
 80178fe:	f7e8 fce3 	bl	80002c8 <__aeabi_dsub>
 8017902:	f805 6b01 	strb.w	r6, [r5], #1
 8017906:	9b02      	ldr	r3, [sp, #8]
 8017908:	429d      	cmp	r5, r3
 801790a:	4680      	mov	r8, r0
 801790c:	4689      	mov	r9, r1
 801790e:	f04f 0200 	mov.w	r2, #0
 8017912:	d124      	bne.n	801795e <_dtoa_r+0x62e>
 8017914:	4b1b      	ldr	r3, [pc, #108]	; (8017984 <_dtoa_r+0x654>)
 8017916:	ec51 0b19 	vmov	r0, r1, d9
 801791a:	f7e8 fcd7 	bl	80002cc <__adddf3>
 801791e:	4602      	mov	r2, r0
 8017920:	460b      	mov	r3, r1
 8017922:	4640      	mov	r0, r8
 8017924:	4649      	mov	r1, r9
 8017926:	f7e9 f917 	bl	8000b58 <__aeabi_dcmpgt>
 801792a:	2800      	cmp	r0, #0
 801792c:	d173      	bne.n	8017a16 <_dtoa_r+0x6e6>
 801792e:	ec53 2b19 	vmov	r2, r3, d9
 8017932:	4914      	ldr	r1, [pc, #80]	; (8017984 <_dtoa_r+0x654>)
 8017934:	2000      	movs	r0, #0
 8017936:	f7e8 fcc7 	bl	80002c8 <__aeabi_dsub>
 801793a:	4602      	mov	r2, r0
 801793c:	460b      	mov	r3, r1
 801793e:	4640      	mov	r0, r8
 8017940:	4649      	mov	r1, r9
 8017942:	f7e9 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8017946:	2800      	cmp	r0, #0
 8017948:	f43f af2f 	beq.w	80177aa <_dtoa_r+0x47a>
 801794c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801794e:	1e6b      	subs	r3, r5, #1
 8017950:	930f      	str	r3, [sp, #60]	; 0x3c
 8017952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017956:	2b30      	cmp	r3, #48	; 0x30
 8017958:	d0f8      	beq.n	801794c <_dtoa_r+0x61c>
 801795a:	46bb      	mov	fp, r7
 801795c:	e04a      	b.n	80179f4 <_dtoa_r+0x6c4>
 801795e:	4b06      	ldr	r3, [pc, #24]	; (8017978 <_dtoa_r+0x648>)
 8017960:	f7e8 fe6a 	bl	8000638 <__aeabi_dmul>
 8017964:	4680      	mov	r8, r0
 8017966:	4689      	mov	r9, r1
 8017968:	e7bd      	b.n	80178e6 <_dtoa_r+0x5b6>
 801796a:	bf00      	nop
 801796c:	08093ea8 	.word	0x08093ea8
 8017970:	08093e80 	.word	0x08093e80
 8017974:	3ff00000 	.word	0x3ff00000
 8017978:	40240000 	.word	0x40240000
 801797c:	401c0000 	.word	0x401c0000
 8017980:	40140000 	.word	0x40140000
 8017984:	3fe00000 	.word	0x3fe00000
 8017988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801798c:	9d00      	ldr	r5, [sp, #0]
 801798e:	4642      	mov	r2, r8
 8017990:	464b      	mov	r3, r9
 8017992:	4630      	mov	r0, r6
 8017994:	4639      	mov	r1, r7
 8017996:	f7e8 ff79 	bl	800088c <__aeabi_ddiv>
 801799a:	f7e9 f8fd 	bl	8000b98 <__aeabi_d2iz>
 801799e:	9001      	str	r0, [sp, #4]
 80179a0:	f7e8 fde0 	bl	8000564 <__aeabi_i2d>
 80179a4:	4642      	mov	r2, r8
 80179a6:	464b      	mov	r3, r9
 80179a8:	f7e8 fe46 	bl	8000638 <__aeabi_dmul>
 80179ac:	4602      	mov	r2, r0
 80179ae:	460b      	mov	r3, r1
 80179b0:	4630      	mov	r0, r6
 80179b2:	4639      	mov	r1, r7
 80179b4:	f7e8 fc88 	bl	80002c8 <__aeabi_dsub>
 80179b8:	9e01      	ldr	r6, [sp, #4]
 80179ba:	9f04      	ldr	r7, [sp, #16]
 80179bc:	3630      	adds	r6, #48	; 0x30
 80179be:	f805 6b01 	strb.w	r6, [r5], #1
 80179c2:	9e00      	ldr	r6, [sp, #0]
 80179c4:	1bae      	subs	r6, r5, r6
 80179c6:	42b7      	cmp	r7, r6
 80179c8:	4602      	mov	r2, r0
 80179ca:	460b      	mov	r3, r1
 80179cc:	d134      	bne.n	8017a38 <_dtoa_r+0x708>
 80179ce:	f7e8 fc7d 	bl	80002cc <__adddf3>
 80179d2:	4642      	mov	r2, r8
 80179d4:	464b      	mov	r3, r9
 80179d6:	4606      	mov	r6, r0
 80179d8:	460f      	mov	r7, r1
 80179da:	f7e9 f8bd 	bl	8000b58 <__aeabi_dcmpgt>
 80179de:	b9c8      	cbnz	r0, 8017a14 <_dtoa_r+0x6e4>
 80179e0:	4642      	mov	r2, r8
 80179e2:	464b      	mov	r3, r9
 80179e4:	4630      	mov	r0, r6
 80179e6:	4639      	mov	r1, r7
 80179e8:	f7e9 f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80179ec:	b110      	cbz	r0, 80179f4 <_dtoa_r+0x6c4>
 80179ee:	9b01      	ldr	r3, [sp, #4]
 80179f0:	07db      	lsls	r3, r3, #31
 80179f2:	d40f      	bmi.n	8017a14 <_dtoa_r+0x6e4>
 80179f4:	4651      	mov	r1, sl
 80179f6:	4620      	mov	r0, r4
 80179f8:	f000 fb18 	bl	801802c <_Bfree>
 80179fc:	2300      	movs	r3, #0
 80179fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a00:	702b      	strb	r3, [r5, #0]
 8017a02:	f10b 0301 	add.w	r3, fp, #1
 8017a06:	6013      	str	r3, [r2, #0]
 8017a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	f43f ace2 	beq.w	80173d4 <_dtoa_r+0xa4>
 8017a10:	601d      	str	r5, [r3, #0]
 8017a12:	e4df      	b.n	80173d4 <_dtoa_r+0xa4>
 8017a14:	465f      	mov	r7, fp
 8017a16:	462b      	mov	r3, r5
 8017a18:	461d      	mov	r5, r3
 8017a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017a1e:	2a39      	cmp	r2, #57	; 0x39
 8017a20:	d106      	bne.n	8017a30 <_dtoa_r+0x700>
 8017a22:	9a00      	ldr	r2, [sp, #0]
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d1f7      	bne.n	8017a18 <_dtoa_r+0x6e8>
 8017a28:	9900      	ldr	r1, [sp, #0]
 8017a2a:	2230      	movs	r2, #48	; 0x30
 8017a2c:	3701      	adds	r7, #1
 8017a2e:	700a      	strb	r2, [r1, #0]
 8017a30:	781a      	ldrb	r2, [r3, #0]
 8017a32:	3201      	adds	r2, #1
 8017a34:	701a      	strb	r2, [r3, #0]
 8017a36:	e790      	b.n	801795a <_dtoa_r+0x62a>
 8017a38:	4ba3      	ldr	r3, [pc, #652]	; (8017cc8 <_dtoa_r+0x998>)
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	f7e8 fdfc 	bl	8000638 <__aeabi_dmul>
 8017a40:	2200      	movs	r2, #0
 8017a42:	2300      	movs	r3, #0
 8017a44:	4606      	mov	r6, r0
 8017a46:	460f      	mov	r7, r1
 8017a48:	f7e9 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8017a4c:	2800      	cmp	r0, #0
 8017a4e:	d09e      	beq.n	801798e <_dtoa_r+0x65e>
 8017a50:	e7d0      	b.n	80179f4 <_dtoa_r+0x6c4>
 8017a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a54:	2a00      	cmp	r2, #0
 8017a56:	f000 80ca 	beq.w	8017bee <_dtoa_r+0x8be>
 8017a5a:	9a07      	ldr	r2, [sp, #28]
 8017a5c:	2a01      	cmp	r2, #1
 8017a5e:	f300 80ad 	bgt.w	8017bbc <_dtoa_r+0x88c>
 8017a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a64:	2a00      	cmp	r2, #0
 8017a66:	f000 80a5 	beq.w	8017bb4 <_dtoa_r+0x884>
 8017a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017a6e:	9e08      	ldr	r6, [sp, #32]
 8017a70:	9d05      	ldr	r5, [sp, #20]
 8017a72:	9a05      	ldr	r2, [sp, #20]
 8017a74:	441a      	add	r2, r3
 8017a76:	9205      	str	r2, [sp, #20]
 8017a78:	9a06      	ldr	r2, [sp, #24]
 8017a7a:	2101      	movs	r1, #1
 8017a7c:	441a      	add	r2, r3
 8017a7e:	4620      	mov	r0, r4
 8017a80:	9206      	str	r2, [sp, #24]
 8017a82:	f000 fb89 	bl	8018198 <__i2b>
 8017a86:	4607      	mov	r7, r0
 8017a88:	b165      	cbz	r5, 8017aa4 <_dtoa_r+0x774>
 8017a8a:	9b06      	ldr	r3, [sp, #24]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	dd09      	ble.n	8017aa4 <_dtoa_r+0x774>
 8017a90:	42ab      	cmp	r3, r5
 8017a92:	9a05      	ldr	r2, [sp, #20]
 8017a94:	bfa8      	it	ge
 8017a96:	462b      	movge	r3, r5
 8017a98:	1ad2      	subs	r2, r2, r3
 8017a9a:	9205      	str	r2, [sp, #20]
 8017a9c:	9a06      	ldr	r2, [sp, #24]
 8017a9e:	1aed      	subs	r5, r5, r3
 8017aa0:	1ad3      	subs	r3, r2, r3
 8017aa2:	9306      	str	r3, [sp, #24]
 8017aa4:	9b08      	ldr	r3, [sp, #32]
 8017aa6:	b1f3      	cbz	r3, 8017ae6 <_dtoa_r+0x7b6>
 8017aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	f000 80a3 	beq.w	8017bf6 <_dtoa_r+0x8c6>
 8017ab0:	2e00      	cmp	r6, #0
 8017ab2:	dd10      	ble.n	8017ad6 <_dtoa_r+0x7a6>
 8017ab4:	4639      	mov	r1, r7
 8017ab6:	4632      	mov	r2, r6
 8017ab8:	4620      	mov	r0, r4
 8017aba:	f000 fc2d 	bl	8018318 <__pow5mult>
 8017abe:	4652      	mov	r2, sl
 8017ac0:	4601      	mov	r1, r0
 8017ac2:	4607      	mov	r7, r0
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	f000 fb7d 	bl	80181c4 <__multiply>
 8017aca:	4651      	mov	r1, sl
 8017acc:	4680      	mov	r8, r0
 8017ace:	4620      	mov	r0, r4
 8017ad0:	f000 faac 	bl	801802c <_Bfree>
 8017ad4:	46c2      	mov	sl, r8
 8017ad6:	9b08      	ldr	r3, [sp, #32]
 8017ad8:	1b9a      	subs	r2, r3, r6
 8017ada:	d004      	beq.n	8017ae6 <_dtoa_r+0x7b6>
 8017adc:	4651      	mov	r1, sl
 8017ade:	4620      	mov	r0, r4
 8017ae0:	f000 fc1a 	bl	8018318 <__pow5mult>
 8017ae4:	4682      	mov	sl, r0
 8017ae6:	2101      	movs	r1, #1
 8017ae8:	4620      	mov	r0, r4
 8017aea:	f000 fb55 	bl	8018198 <__i2b>
 8017aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	4606      	mov	r6, r0
 8017af4:	f340 8081 	ble.w	8017bfa <_dtoa_r+0x8ca>
 8017af8:	461a      	mov	r2, r3
 8017afa:	4601      	mov	r1, r0
 8017afc:	4620      	mov	r0, r4
 8017afe:	f000 fc0b 	bl	8018318 <__pow5mult>
 8017b02:	9b07      	ldr	r3, [sp, #28]
 8017b04:	2b01      	cmp	r3, #1
 8017b06:	4606      	mov	r6, r0
 8017b08:	dd7a      	ble.n	8017c00 <_dtoa_r+0x8d0>
 8017b0a:	f04f 0800 	mov.w	r8, #0
 8017b0e:	6933      	ldr	r3, [r6, #16]
 8017b10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017b14:	6918      	ldr	r0, [r3, #16]
 8017b16:	f000 faf1 	bl	80180fc <__hi0bits>
 8017b1a:	f1c0 0020 	rsb	r0, r0, #32
 8017b1e:	9b06      	ldr	r3, [sp, #24]
 8017b20:	4418      	add	r0, r3
 8017b22:	f010 001f 	ands.w	r0, r0, #31
 8017b26:	f000 8094 	beq.w	8017c52 <_dtoa_r+0x922>
 8017b2a:	f1c0 0320 	rsb	r3, r0, #32
 8017b2e:	2b04      	cmp	r3, #4
 8017b30:	f340 8085 	ble.w	8017c3e <_dtoa_r+0x90e>
 8017b34:	9b05      	ldr	r3, [sp, #20]
 8017b36:	f1c0 001c 	rsb	r0, r0, #28
 8017b3a:	4403      	add	r3, r0
 8017b3c:	9305      	str	r3, [sp, #20]
 8017b3e:	9b06      	ldr	r3, [sp, #24]
 8017b40:	4403      	add	r3, r0
 8017b42:	4405      	add	r5, r0
 8017b44:	9306      	str	r3, [sp, #24]
 8017b46:	9b05      	ldr	r3, [sp, #20]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	dd05      	ble.n	8017b58 <_dtoa_r+0x828>
 8017b4c:	4651      	mov	r1, sl
 8017b4e:	461a      	mov	r2, r3
 8017b50:	4620      	mov	r0, r4
 8017b52:	f000 fc3b 	bl	80183cc <__lshift>
 8017b56:	4682      	mov	sl, r0
 8017b58:	9b06      	ldr	r3, [sp, #24]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	dd05      	ble.n	8017b6a <_dtoa_r+0x83a>
 8017b5e:	4631      	mov	r1, r6
 8017b60:	461a      	mov	r2, r3
 8017b62:	4620      	mov	r0, r4
 8017b64:	f000 fc32 	bl	80183cc <__lshift>
 8017b68:	4606      	mov	r6, r0
 8017b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d072      	beq.n	8017c56 <_dtoa_r+0x926>
 8017b70:	4631      	mov	r1, r6
 8017b72:	4650      	mov	r0, sl
 8017b74:	f000 fc96 	bl	80184a4 <__mcmp>
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	da6c      	bge.n	8017c56 <_dtoa_r+0x926>
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	4651      	mov	r1, sl
 8017b80:	220a      	movs	r2, #10
 8017b82:	4620      	mov	r0, r4
 8017b84:	f000 fa74 	bl	8018070 <__multadd>
 8017b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017b8e:	4682      	mov	sl, r0
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	f000 81b0 	beq.w	8017ef6 <_dtoa_r+0xbc6>
 8017b96:	2300      	movs	r3, #0
 8017b98:	4639      	mov	r1, r7
 8017b9a:	220a      	movs	r2, #10
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f000 fa67 	bl	8018070 <__multadd>
 8017ba2:	9b01      	ldr	r3, [sp, #4]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	4607      	mov	r7, r0
 8017ba8:	f300 8096 	bgt.w	8017cd8 <_dtoa_r+0x9a8>
 8017bac:	9b07      	ldr	r3, [sp, #28]
 8017bae:	2b02      	cmp	r3, #2
 8017bb0:	dc59      	bgt.n	8017c66 <_dtoa_r+0x936>
 8017bb2:	e091      	b.n	8017cd8 <_dtoa_r+0x9a8>
 8017bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017bba:	e758      	b.n	8017a6e <_dtoa_r+0x73e>
 8017bbc:	9b04      	ldr	r3, [sp, #16]
 8017bbe:	1e5e      	subs	r6, r3, #1
 8017bc0:	9b08      	ldr	r3, [sp, #32]
 8017bc2:	42b3      	cmp	r3, r6
 8017bc4:	bfbf      	itttt	lt
 8017bc6:	9b08      	ldrlt	r3, [sp, #32]
 8017bc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017bca:	9608      	strlt	r6, [sp, #32]
 8017bcc:	1af3      	sublt	r3, r6, r3
 8017bce:	bfb4      	ite	lt
 8017bd0:	18d2      	addlt	r2, r2, r3
 8017bd2:	1b9e      	subge	r6, r3, r6
 8017bd4:	9b04      	ldr	r3, [sp, #16]
 8017bd6:	bfbc      	itt	lt
 8017bd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017bda:	2600      	movlt	r6, #0
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	bfb7      	itett	lt
 8017be0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017be4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017be8:	1a9d      	sublt	r5, r3, r2
 8017bea:	2300      	movlt	r3, #0
 8017bec:	e741      	b.n	8017a72 <_dtoa_r+0x742>
 8017bee:	9e08      	ldr	r6, [sp, #32]
 8017bf0:	9d05      	ldr	r5, [sp, #20]
 8017bf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017bf4:	e748      	b.n	8017a88 <_dtoa_r+0x758>
 8017bf6:	9a08      	ldr	r2, [sp, #32]
 8017bf8:	e770      	b.n	8017adc <_dtoa_r+0x7ac>
 8017bfa:	9b07      	ldr	r3, [sp, #28]
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	dc19      	bgt.n	8017c34 <_dtoa_r+0x904>
 8017c00:	9b02      	ldr	r3, [sp, #8]
 8017c02:	b9bb      	cbnz	r3, 8017c34 <_dtoa_r+0x904>
 8017c04:	9b03      	ldr	r3, [sp, #12]
 8017c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c0a:	b99b      	cbnz	r3, 8017c34 <_dtoa_r+0x904>
 8017c0c:	9b03      	ldr	r3, [sp, #12]
 8017c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c12:	0d1b      	lsrs	r3, r3, #20
 8017c14:	051b      	lsls	r3, r3, #20
 8017c16:	b183      	cbz	r3, 8017c3a <_dtoa_r+0x90a>
 8017c18:	9b05      	ldr	r3, [sp, #20]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	9305      	str	r3, [sp, #20]
 8017c1e:	9b06      	ldr	r3, [sp, #24]
 8017c20:	3301      	adds	r3, #1
 8017c22:	9306      	str	r3, [sp, #24]
 8017c24:	f04f 0801 	mov.w	r8, #1
 8017c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	f47f af6f 	bne.w	8017b0e <_dtoa_r+0x7de>
 8017c30:	2001      	movs	r0, #1
 8017c32:	e774      	b.n	8017b1e <_dtoa_r+0x7ee>
 8017c34:	f04f 0800 	mov.w	r8, #0
 8017c38:	e7f6      	b.n	8017c28 <_dtoa_r+0x8f8>
 8017c3a:	4698      	mov	r8, r3
 8017c3c:	e7f4      	b.n	8017c28 <_dtoa_r+0x8f8>
 8017c3e:	d082      	beq.n	8017b46 <_dtoa_r+0x816>
 8017c40:	9a05      	ldr	r2, [sp, #20]
 8017c42:	331c      	adds	r3, #28
 8017c44:	441a      	add	r2, r3
 8017c46:	9205      	str	r2, [sp, #20]
 8017c48:	9a06      	ldr	r2, [sp, #24]
 8017c4a:	441a      	add	r2, r3
 8017c4c:	441d      	add	r5, r3
 8017c4e:	9206      	str	r2, [sp, #24]
 8017c50:	e779      	b.n	8017b46 <_dtoa_r+0x816>
 8017c52:	4603      	mov	r3, r0
 8017c54:	e7f4      	b.n	8017c40 <_dtoa_r+0x910>
 8017c56:	9b04      	ldr	r3, [sp, #16]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	dc37      	bgt.n	8017ccc <_dtoa_r+0x99c>
 8017c5c:	9b07      	ldr	r3, [sp, #28]
 8017c5e:	2b02      	cmp	r3, #2
 8017c60:	dd34      	ble.n	8017ccc <_dtoa_r+0x99c>
 8017c62:	9b04      	ldr	r3, [sp, #16]
 8017c64:	9301      	str	r3, [sp, #4]
 8017c66:	9b01      	ldr	r3, [sp, #4]
 8017c68:	b963      	cbnz	r3, 8017c84 <_dtoa_r+0x954>
 8017c6a:	4631      	mov	r1, r6
 8017c6c:	2205      	movs	r2, #5
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f000 f9fe 	bl	8018070 <__multadd>
 8017c74:	4601      	mov	r1, r0
 8017c76:	4606      	mov	r6, r0
 8017c78:	4650      	mov	r0, sl
 8017c7a:	f000 fc13 	bl	80184a4 <__mcmp>
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	f73f adbb 	bgt.w	80177fa <_dtoa_r+0x4ca>
 8017c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c86:	9d00      	ldr	r5, [sp, #0]
 8017c88:	ea6f 0b03 	mvn.w	fp, r3
 8017c8c:	f04f 0800 	mov.w	r8, #0
 8017c90:	4631      	mov	r1, r6
 8017c92:	4620      	mov	r0, r4
 8017c94:	f000 f9ca 	bl	801802c <_Bfree>
 8017c98:	2f00      	cmp	r7, #0
 8017c9a:	f43f aeab 	beq.w	80179f4 <_dtoa_r+0x6c4>
 8017c9e:	f1b8 0f00 	cmp.w	r8, #0
 8017ca2:	d005      	beq.n	8017cb0 <_dtoa_r+0x980>
 8017ca4:	45b8      	cmp	r8, r7
 8017ca6:	d003      	beq.n	8017cb0 <_dtoa_r+0x980>
 8017ca8:	4641      	mov	r1, r8
 8017caa:	4620      	mov	r0, r4
 8017cac:	f000 f9be 	bl	801802c <_Bfree>
 8017cb0:	4639      	mov	r1, r7
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	f000 f9ba 	bl	801802c <_Bfree>
 8017cb8:	e69c      	b.n	80179f4 <_dtoa_r+0x6c4>
 8017cba:	2600      	movs	r6, #0
 8017cbc:	4637      	mov	r7, r6
 8017cbe:	e7e1      	b.n	8017c84 <_dtoa_r+0x954>
 8017cc0:	46bb      	mov	fp, r7
 8017cc2:	4637      	mov	r7, r6
 8017cc4:	e599      	b.n	80177fa <_dtoa_r+0x4ca>
 8017cc6:	bf00      	nop
 8017cc8:	40240000 	.word	0x40240000
 8017ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	f000 80c8 	beq.w	8017e64 <_dtoa_r+0xb34>
 8017cd4:	9b04      	ldr	r3, [sp, #16]
 8017cd6:	9301      	str	r3, [sp, #4]
 8017cd8:	2d00      	cmp	r5, #0
 8017cda:	dd05      	ble.n	8017ce8 <_dtoa_r+0x9b8>
 8017cdc:	4639      	mov	r1, r7
 8017cde:	462a      	mov	r2, r5
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	f000 fb73 	bl	80183cc <__lshift>
 8017ce6:	4607      	mov	r7, r0
 8017ce8:	f1b8 0f00 	cmp.w	r8, #0
 8017cec:	d05b      	beq.n	8017da6 <_dtoa_r+0xa76>
 8017cee:	6879      	ldr	r1, [r7, #4]
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f000 f95b 	bl	8017fac <_Balloc>
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	b928      	cbnz	r0, 8017d06 <_dtoa_r+0x9d6>
 8017cfa:	4b83      	ldr	r3, [pc, #524]	; (8017f08 <_dtoa_r+0xbd8>)
 8017cfc:	4602      	mov	r2, r0
 8017cfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017d02:	f7ff bb2e 	b.w	8017362 <_dtoa_r+0x32>
 8017d06:	693a      	ldr	r2, [r7, #16]
 8017d08:	3202      	adds	r2, #2
 8017d0a:	0092      	lsls	r2, r2, #2
 8017d0c:	f107 010c 	add.w	r1, r7, #12
 8017d10:	300c      	adds	r0, #12
 8017d12:	f7ff fa76 	bl	8017202 <memcpy>
 8017d16:	2201      	movs	r2, #1
 8017d18:	4629      	mov	r1, r5
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f000 fb56 	bl	80183cc <__lshift>
 8017d20:	9b00      	ldr	r3, [sp, #0]
 8017d22:	3301      	adds	r3, #1
 8017d24:	9304      	str	r3, [sp, #16]
 8017d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d2a:	4413      	add	r3, r2
 8017d2c:	9308      	str	r3, [sp, #32]
 8017d2e:	9b02      	ldr	r3, [sp, #8]
 8017d30:	f003 0301 	and.w	r3, r3, #1
 8017d34:	46b8      	mov	r8, r7
 8017d36:	9306      	str	r3, [sp, #24]
 8017d38:	4607      	mov	r7, r0
 8017d3a:	9b04      	ldr	r3, [sp, #16]
 8017d3c:	4631      	mov	r1, r6
 8017d3e:	3b01      	subs	r3, #1
 8017d40:	4650      	mov	r0, sl
 8017d42:	9301      	str	r3, [sp, #4]
 8017d44:	f7ff fa6b 	bl	801721e <quorem>
 8017d48:	4641      	mov	r1, r8
 8017d4a:	9002      	str	r0, [sp, #8]
 8017d4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017d50:	4650      	mov	r0, sl
 8017d52:	f000 fba7 	bl	80184a4 <__mcmp>
 8017d56:	463a      	mov	r2, r7
 8017d58:	9005      	str	r0, [sp, #20]
 8017d5a:	4631      	mov	r1, r6
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	f000 fbbd 	bl	80184dc <__mdiff>
 8017d62:	68c2      	ldr	r2, [r0, #12]
 8017d64:	4605      	mov	r5, r0
 8017d66:	bb02      	cbnz	r2, 8017daa <_dtoa_r+0xa7a>
 8017d68:	4601      	mov	r1, r0
 8017d6a:	4650      	mov	r0, sl
 8017d6c:	f000 fb9a 	bl	80184a4 <__mcmp>
 8017d70:	4602      	mov	r2, r0
 8017d72:	4629      	mov	r1, r5
 8017d74:	4620      	mov	r0, r4
 8017d76:	9209      	str	r2, [sp, #36]	; 0x24
 8017d78:	f000 f958 	bl	801802c <_Bfree>
 8017d7c:	9b07      	ldr	r3, [sp, #28]
 8017d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d80:	9d04      	ldr	r5, [sp, #16]
 8017d82:	ea43 0102 	orr.w	r1, r3, r2
 8017d86:	9b06      	ldr	r3, [sp, #24]
 8017d88:	4319      	orrs	r1, r3
 8017d8a:	d110      	bne.n	8017dae <_dtoa_r+0xa7e>
 8017d8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017d90:	d029      	beq.n	8017de6 <_dtoa_r+0xab6>
 8017d92:	9b05      	ldr	r3, [sp, #20]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	dd02      	ble.n	8017d9e <_dtoa_r+0xa6e>
 8017d98:	9b02      	ldr	r3, [sp, #8]
 8017d9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017d9e:	9b01      	ldr	r3, [sp, #4]
 8017da0:	f883 9000 	strb.w	r9, [r3]
 8017da4:	e774      	b.n	8017c90 <_dtoa_r+0x960>
 8017da6:	4638      	mov	r0, r7
 8017da8:	e7ba      	b.n	8017d20 <_dtoa_r+0x9f0>
 8017daa:	2201      	movs	r2, #1
 8017dac:	e7e1      	b.n	8017d72 <_dtoa_r+0xa42>
 8017dae:	9b05      	ldr	r3, [sp, #20]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	db04      	blt.n	8017dbe <_dtoa_r+0xa8e>
 8017db4:	9907      	ldr	r1, [sp, #28]
 8017db6:	430b      	orrs	r3, r1
 8017db8:	9906      	ldr	r1, [sp, #24]
 8017dba:	430b      	orrs	r3, r1
 8017dbc:	d120      	bne.n	8017e00 <_dtoa_r+0xad0>
 8017dbe:	2a00      	cmp	r2, #0
 8017dc0:	dded      	ble.n	8017d9e <_dtoa_r+0xa6e>
 8017dc2:	4651      	mov	r1, sl
 8017dc4:	2201      	movs	r2, #1
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f000 fb00 	bl	80183cc <__lshift>
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4682      	mov	sl, r0
 8017dd0:	f000 fb68 	bl	80184a4 <__mcmp>
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	dc03      	bgt.n	8017de0 <_dtoa_r+0xab0>
 8017dd8:	d1e1      	bne.n	8017d9e <_dtoa_r+0xa6e>
 8017dda:	f019 0f01 	tst.w	r9, #1
 8017dde:	d0de      	beq.n	8017d9e <_dtoa_r+0xa6e>
 8017de0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017de4:	d1d8      	bne.n	8017d98 <_dtoa_r+0xa68>
 8017de6:	9a01      	ldr	r2, [sp, #4]
 8017de8:	2339      	movs	r3, #57	; 0x39
 8017dea:	7013      	strb	r3, [r2, #0]
 8017dec:	462b      	mov	r3, r5
 8017dee:	461d      	mov	r5, r3
 8017df0:	3b01      	subs	r3, #1
 8017df2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017df6:	2a39      	cmp	r2, #57	; 0x39
 8017df8:	d06c      	beq.n	8017ed4 <_dtoa_r+0xba4>
 8017dfa:	3201      	adds	r2, #1
 8017dfc:	701a      	strb	r2, [r3, #0]
 8017dfe:	e747      	b.n	8017c90 <_dtoa_r+0x960>
 8017e00:	2a00      	cmp	r2, #0
 8017e02:	dd07      	ble.n	8017e14 <_dtoa_r+0xae4>
 8017e04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017e08:	d0ed      	beq.n	8017de6 <_dtoa_r+0xab6>
 8017e0a:	9a01      	ldr	r2, [sp, #4]
 8017e0c:	f109 0301 	add.w	r3, r9, #1
 8017e10:	7013      	strb	r3, [r2, #0]
 8017e12:	e73d      	b.n	8017c90 <_dtoa_r+0x960>
 8017e14:	9b04      	ldr	r3, [sp, #16]
 8017e16:	9a08      	ldr	r2, [sp, #32]
 8017e18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d043      	beq.n	8017ea8 <_dtoa_r+0xb78>
 8017e20:	4651      	mov	r1, sl
 8017e22:	2300      	movs	r3, #0
 8017e24:	220a      	movs	r2, #10
 8017e26:	4620      	mov	r0, r4
 8017e28:	f000 f922 	bl	8018070 <__multadd>
 8017e2c:	45b8      	cmp	r8, r7
 8017e2e:	4682      	mov	sl, r0
 8017e30:	f04f 0300 	mov.w	r3, #0
 8017e34:	f04f 020a 	mov.w	r2, #10
 8017e38:	4641      	mov	r1, r8
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	d107      	bne.n	8017e4e <_dtoa_r+0xb1e>
 8017e3e:	f000 f917 	bl	8018070 <__multadd>
 8017e42:	4680      	mov	r8, r0
 8017e44:	4607      	mov	r7, r0
 8017e46:	9b04      	ldr	r3, [sp, #16]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	9304      	str	r3, [sp, #16]
 8017e4c:	e775      	b.n	8017d3a <_dtoa_r+0xa0a>
 8017e4e:	f000 f90f 	bl	8018070 <__multadd>
 8017e52:	4639      	mov	r1, r7
 8017e54:	4680      	mov	r8, r0
 8017e56:	2300      	movs	r3, #0
 8017e58:	220a      	movs	r2, #10
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f000 f908 	bl	8018070 <__multadd>
 8017e60:	4607      	mov	r7, r0
 8017e62:	e7f0      	b.n	8017e46 <_dtoa_r+0xb16>
 8017e64:	9b04      	ldr	r3, [sp, #16]
 8017e66:	9301      	str	r3, [sp, #4]
 8017e68:	9d00      	ldr	r5, [sp, #0]
 8017e6a:	4631      	mov	r1, r6
 8017e6c:	4650      	mov	r0, sl
 8017e6e:	f7ff f9d6 	bl	801721e <quorem>
 8017e72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017e76:	9b00      	ldr	r3, [sp, #0]
 8017e78:	f805 9b01 	strb.w	r9, [r5], #1
 8017e7c:	1aea      	subs	r2, r5, r3
 8017e7e:	9b01      	ldr	r3, [sp, #4]
 8017e80:	4293      	cmp	r3, r2
 8017e82:	dd07      	ble.n	8017e94 <_dtoa_r+0xb64>
 8017e84:	4651      	mov	r1, sl
 8017e86:	2300      	movs	r3, #0
 8017e88:	220a      	movs	r2, #10
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f000 f8f0 	bl	8018070 <__multadd>
 8017e90:	4682      	mov	sl, r0
 8017e92:	e7ea      	b.n	8017e6a <_dtoa_r+0xb3a>
 8017e94:	9b01      	ldr	r3, [sp, #4]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	bfc8      	it	gt
 8017e9a:	461d      	movgt	r5, r3
 8017e9c:	9b00      	ldr	r3, [sp, #0]
 8017e9e:	bfd8      	it	le
 8017ea0:	2501      	movle	r5, #1
 8017ea2:	441d      	add	r5, r3
 8017ea4:	f04f 0800 	mov.w	r8, #0
 8017ea8:	4651      	mov	r1, sl
 8017eaa:	2201      	movs	r2, #1
 8017eac:	4620      	mov	r0, r4
 8017eae:	f000 fa8d 	bl	80183cc <__lshift>
 8017eb2:	4631      	mov	r1, r6
 8017eb4:	4682      	mov	sl, r0
 8017eb6:	f000 faf5 	bl	80184a4 <__mcmp>
 8017eba:	2800      	cmp	r0, #0
 8017ebc:	dc96      	bgt.n	8017dec <_dtoa_r+0xabc>
 8017ebe:	d102      	bne.n	8017ec6 <_dtoa_r+0xb96>
 8017ec0:	f019 0f01 	tst.w	r9, #1
 8017ec4:	d192      	bne.n	8017dec <_dtoa_r+0xabc>
 8017ec6:	462b      	mov	r3, r5
 8017ec8:	461d      	mov	r5, r3
 8017eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017ece:	2a30      	cmp	r2, #48	; 0x30
 8017ed0:	d0fa      	beq.n	8017ec8 <_dtoa_r+0xb98>
 8017ed2:	e6dd      	b.n	8017c90 <_dtoa_r+0x960>
 8017ed4:	9a00      	ldr	r2, [sp, #0]
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d189      	bne.n	8017dee <_dtoa_r+0xabe>
 8017eda:	f10b 0b01 	add.w	fp, fp, #1
 8017ede:	2331      	movs	r3, #49	; 0x31
 8017ee0:	e796      	b.n	8017e10 <_dtoa_r+0xae0>
 8017ee2:	4b0a      	ldr	r3, [pc, #40]	; (8017f0c <_dtoa_r+0xbdc>)
 8017ee4:	f7ff ba99 	b.w	801741a <_dtoa_r+0xea>
 8017ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	f47f aa6d 	bne.w	80173ca <_dtoa_r+0x9a>
 8017ef0:	4b07      	ldr	r3, [pc, #28]	; (8017f10 <_dtoa_r+0xbe0>)
 8017ef2:	f7ff ba92 	b.w	801741a <_dtoa_r+0xea>
 8017ef6:	9b01      	ldr	r3, [sp, #4]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	dcb5      	bgt.n	8017e68 <_dtoa_r+0xb38>
 8017efc:	9b07      	ldr	r3, [sp, #28]
 8017efe:	2b02      	cmp	r3, #2
 8017f00:	f73f aeb1 	bgt.w	8017c66 <_dtoa_r+0x936>
 8017f04:	e7b0      	b.n	8017e68 <_dtoa_r+0xb38>
 8017f06:	bf00      	nop
 8017f08:	08093e10 	.word	0x08093e10
 8017f0c:	08093d70 	.word	0x08093d70
 8017f10:	08093d94 	.word	0x08093d94

08017f14 <_free_r>:
 8017f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017f16:	2900      	cmp	r1, #0
 8017f18:	d044      	beq.n	8017fa4 <_free_r+0x90>
 8017f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f1e:	9001      	str	r0, [sp, #4]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	f1a1 0404 	sub.w	r4, r1, #4
 8017f26:	bfb8      	it	lt
 8017f28:	18e4      	addlt	r4, r4, r3
 8017f2a:	f7fe faf9 	bl	8016520 <__malloc_lock>
 8017f2e:	4a1e      	ldr	r2, [pc, #120]	; (8017fa8 <_free_r+0x94>)
 8017f30:	9801      	ldr	r0, [sp, #4]
 8017f32:	6813      	ldr	r3, [r2, #0]
 8017f34:	b933      	cbnz	r3, 8017f44 <_free_r+0x30>
 8017f36:	6063      	str	r3, [r4, #4]
 8017f38:	6014      	str	r4, [r2, #0]
 8017f3a:	b003      	add	sp, #12
 8017f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f40:	f7fe baf4 	b.w	801652c <__malloc_unlock>
 8017f44:	42a3      	cmp	r3, r4
 8017f46:	d908      	bls.n	8017f5a <_free_r+0x46>
 8017f48:	6825      	ldr	r5, [r4, #0]
 8017f4a:	1961      	adds	r1, r4, r5
 8017f4c:	428b      	cmp	r3, r1
 8017f4e:	bf01      	itttt	eq
 8017f50:	6819      	ldreq	r1, [r3, #0]
 8017f52:	685b      	ldreq	r3, [r3, #4]
 8017f54:	1949      	addeq	r1, r1, r5
 8017f56:	6021      	streq	r1, [r4, #0]
 8017f58:	e7ed      	b.n	8017f36 <_free_r+0x22>
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	b10b      	cbz	r3, 8017f64 <_free_r+0x50>
 8017f60:	42a3      	cmp	r3, r4
 8017f62:	d9fa      	bls.n	8017f5a <_free_r+0x46>
 8017f64:	6811      	ldr	r1, [r2, #0]
 8017f66:	1855      	adds	r5, r2, r1
 8017f68:	42a5      	cmp	r5, r4
 8017f6a:	d10b      	bne.n	8017f84 <_free_r+0x70>
 8017f6c:	6824      	ldr	r4, [r4, #0]
 8017f6e:	4421      	add	r1, r4
 8017f70:	1854      	adds	r4, r2, r1
 8017f72:	42a3      	cmp	r3, r4
 8017f74:	6011      	str	r1, [r2, #0]
 8017f76:	d1e0      	bne.n	8017f3a <_free_r+0x26>
 8017f78:	681c      	ldr	r4, [r3, #0]
 8017f7a:	685b      	ldr	r3, [r3, #4]
 8017f7c:	6053      	str	r3, [r2, #4]
 8017f7e:	440c      	add	r4, r1
 8017f80:	6014      	str	r4, [r2, #0]
 8017f82:	e7da      	b.n	8017f3a <_free_r+0x26>
 8017f84:	d902      	bls.n	8017f8c <_free_r+0x78>
 8017f86:	230c      	movs	r3, #12
 8017f88:	6003      	str	r3, [r0, #0]
 8017f8a:	e7d6      	b.n	8017f3a <_free_r+0x26>
 8017f8c:	6825      	ldr	r5, [r4, #0]
 8017f8e:	1961      	adds	r1, r4, r5
 8017f90:	428b      	cmp	r3, r1
 8017f92:	bf04      	itt	eq
 8017f94:	6819      	ldreq	r1, [r3, #0]
 8017f96:	685b      	ldreq	r3, [r3, #4]
 8017f98:	6063      	str	r3, [r4, #4]
 8017f9a:	bf04      	itt	eq
 8017f9c:	1949      	addeq	r1, r1, r5
 8017f9e:	6021      	streq	r1, [r4, #0]
 8017fa0:	6054      	str	r4, [r2, #4]
 8017fa2:	e7ca      	b.n	8017f3a <_free_r+0x26>
 8017fa4:	b003      	add	sp, #12
 8017fa6:	bd30      	pop	{r4, r5, pc}
 8017fa8:	2002670c 	.word	0x2002670c

08017fac <_Balloc>:
 8017fac:	b570      	push	{r4, r5, r6, lr}
 8017fae:	69c6      	ldr	r6, [r0, #28]
 8017fb0:	4604      	mov	r4, r0
 8017fb2:	460d      	mov	r5, r1
 8017fb4:	b976      	cbnz	r6, 8017fd4 <_Balloc+0x28>
 8017fb6:	2010      	movs	r0, #16
 8017fb8:	f7fe fa0a 	bl	80163d0 <malloc>
 8017fbc:	4602      	mov	r2, r0
 8017fbe:	61e0      	str	r0, [r4, #28]
 8017fc0:	b920      	cbnz	r0, 8017fcc <_Balloc+0x20>
 8017fc2:	4b18      	ldr	r3, [pc, #96]	; (8018024 <_Balloc+0x78>)
 8017fc4:	4818      	ldr	r0, [pc, #96]	; (8018028 <_Balloc+0x7c>)
 8017fc6:	216b      	movs	r1, #107	; 0x6b
 8017fc8:	f000 fd7a 	bl	8018ac0 <__assert_func>
 8017fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fd0:	6006      	str	r6, [r0, #0]
 8017fd2:	60c6      	str	r6, [r0, #12]
 8017fd4:	69e6      	ldr	r6, [r4, #28]
 8017fd6:	68f3      	ldr	r3, [r6, #12]
 8017fd8:	b183      	cbz	r3, 8017ffc <_Balloc+0x50>
 8017fda:	69e3      	ldr	r3, [r4, #28]
 8017fdc:	68db      	ldr	r3, [r3, #12]
 8017fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017fe2:	b9b8      	cbnz	r0, 8018014 <_Balloc+0x68>
 8017fe4:	2101      	movs	r1, #1
 8017fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8017fea:	1d72      	adds	r2, r6, #5
 8017fec:	0092      	lsls	r2, r2, #2
 8017fee:	4620      	mov	r0, r4
 8017ff0:	f000 fd84 	bl	8018afc <_calloc_r>
 8017ff4:	b160      	cbz	r0, 8018010 <_Balloc+0x64>
 8017ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017ffa:	e00e      	b.n	801801a <_Balloc+0x6e>
 8017ffc:	2221      	movs	r2, #33	; 0x21
 8017ffe:	2104      	movs	r1, #4
 8018000:	4620      	mov	r0, r4
 8018002:	f000 fd7b 	bl	8018afc <_calloc_r>
 8018006:	69e3      	ldr	r3, [r4, #28]
 8018008:	60f0      	str	r0, [r6, #12]
 801800a:	68db      	ldr	r3, [r3, #12]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d1e4      	bne.n	8017fda <_Balloc+0x2e>
 8018010:	2000      	movs	r0, #0
 8018012:	bd70      	pop	{r4, r5, r6, pc}
 8018014:	6802      	ldr	r2, [r0, #0]
 8018016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801801a:	2300      	movs	r3, #0
 801801c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018020:	e7f7      	b.n	8018012 <_Balloc+0x66>
 8018022:	bf00      	nop
 8018024:	08093da1 	.word	0x08093da1
 8018028:	08093e21 	.word	0x08093e21

0801802c <_Bfree>:
 801802c:	b570      	push	{r4, r5, r6, lr}
 801802e:	69c6      	ldr	r6, [r0, #28]
 8018030:	4605      	mov	r5, r0
 8018032:	460c      	mov	r4, r1
 8018034:	b976      	cbnz	r6, 8018054 <_Bfree+0x28>
 8018036:	2010      	movs	r0, #16
 8018038:	f7fe f9ca 	bl	80163d0 <malloc>
 801803c:	4602      	mov	r2, r0
 801803e:	61e8      	str	r0, [r5, #28]
 8018040:	b920      	cbnz	r0, 801804c <_Bfree+0x20>
 8018042:	4b09      	ldr	r3, [pc, #36]	; (8018068 <_Bfree+0x3c>)
 8018044:	4809      	ldr	r0, [pc, #36]	; (801806c <_Bfree+0x40>)
 8018046:	218f      	movs	r1, #143	; 0x8f
 8018048:	f000 fd3a 	bl	8018ac0 <__assert_func>
 801804c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018050:	6006      	str	r6, [r0, #0]
 8018052:	60c6      	str	r6, [r0, #12]
 8018054:	b13c      	cbz	r4, 8018066 <_Bfree+0x3a>
 8018056:	69eb      	ldr	r3, [r5, #28]
 8018058:	6862      	ldr	r2, [r4, #4]
 801805a:	68db      	ldr	r3, [r3, #12]
 801805c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018060:	6021      	str	r1, [r4, #0]
 8018062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018066:	bd70      	pop	{r4, r5, r6, pc}
 8018068:	08093da1 	.word	0x08093da1
 801806c:	08093e21 	.word	0x08093e21

08018070 <__multadd>:
 8018070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018074:	690d      	ldr	r5, [r1, #16]
 8018076:	4607      	mov	r7, r0
 8018078:	460c      	mov	r4, r1
 801807a:	461e      	mov	r6, r3
 801807c:	f101 0c14 	add.w	ip, r1, #20
 8018080:	2000      	movs	r0, #0
 8018082:	f8dc 3000 	ldr.w	r3, [ip]
 8018086:	b299      	uxth	r1, r3
 8018088:	fb02 6101 	mla	r1, r2, r1, r6
 801808c:	0c1e      	lsrs	r6, r3, #16
 801808e:	0c0b      	lsrs	r3, r1, #16
 8018090:	fb02 3306 	mla	r3, r2, r6, r3
 8018094:	b289      	uxth	r1, r1
 8018096:	3001      	adds	r0, #1
 8018098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801809c:	4285      	cmp	r5, r0
 801809e:	f84c 1b04 	str.w	r1, [ip], #4
 80180a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80180a6:	dcec      	bgt.n	8018082 <__multadd+0x12>
 80180a8:	b30e      	cbz	r6, 80180ee <__multadd+0x7e>
 80180aa:	68a3      	ldr	r3, [r4, #8]
 80180ac:	42ab      	cmp	r3, r5
 80180ae:	dc19      	bgt.n	80180e4 <__multadd+0x74>
 80180b0:	6861      	ldr	r1, [r4, #4]
 80180b2:	4638      	mov	r0, r7
 80180b4:	3101      	adds	r1, #1
 80180b6:	f7ff ff79 	bl	8017fac <_Balloc>
 80180ba:	4680      	mov	r8, r0
 80180bc:	b928      	cbnz	r0, 80180ca <__multadd+0x5a>
 80180be:	4602      	mov	r2, r0
 80180c0:	4b0c      	ldr	r3, [pc, #48]	; (80180f4 <__multadd+0x84>)
 80180c2:	480d      	ldr	r0, [pc, #52]	; (80180f8 <__multadd+0x88>)
 80180c4:	21ba      	movs	r1, #186	; 0xba
 80180c6:	f000 fcfb 	bl	8018ac0 <__assert_func>
 80180ca:	6922      	ldr	r2, [r4, #16]
 80180cc:	3202      	adds	r2, #2
 80180ce:	f104 010c 	add.w	r1, r4, #12
 80180d2:	0092      	lsls	r2, r2, #2
 80180d4:	300c      	adds	r0, #12
 80180d6:	f7ff f894 	bl	8017202 <memcpy>
 80180da:	4621      	mov	r1, r4
 80180dc:	4638      	mov	r0, r7
 80180de:	f7ff ffa5 	bl	801802c <_Bfree>
 80180e2:	4644      	mov	r4, r8
 80180e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80180e8:	3501      	adds	r5, #1
 80180ea:	615e      	str	r6, [r3, #20]
 80180ec:	6125      	str	r5, [r4, #16]
 80180ee:	4620      	mov	r0, r4
 80180f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f4:	08093e10 	.word	0x08093e10
 80180f8:	08093e21 	.word	0x08093e21

080180fc <__hi0bits>:
 80180fc:	0c03      	lsrs	r3, r0, #16
 80180fe:	041b      	lsls	r3, r3, #16
 8018100:	b9d3      	cbnz	r3, 8018138 <__hi0bits+0x3c>
 8018102:	0400      	lsls	r0, r0, #16
 8018104:	2310      	movs	r3, #16
 8018106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801810a:	bf04      	itt	eq
 801810c:	0200      	lsleq	r0, r0, #8
 801810e:	3308      	addeq	r3, #8
 8018110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018114:	bf04      	itt	eq
 8018116:	0100      	lsleq	r0, r0, #4
 8018118:	3304      	addeq	r3, #4
 801811a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801811e:	bf04      	itt	eq
 8018120:	0080      	lsleq	r0, r0, #2
 8018122:	3302      	addeq	r3, #2
 8018124:	2800      	cmp	r0, #0
 8018126:	db05      	blt.n	8018134 <__hi0bits+0x38>
 8018128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801812c:	f103 0301 	add.w	r3, r3, #1
 8018130:	bf08      	it	eq
 8018132:	2320      	moveq	r3, #32
 8018134:	4618      	mov	r0, r3
 8018136:	4770      	bx	lr
 8018138:	2300      	movs	r3, #0
 801813a:	e7e4      	b.n	8018106 <__hi0bits+0xa>

0801813c <__lo0bits>:
 801813c:	6803      	ldr	r3, [r0, #0]
 801813e:	f013 0207 	ands.w	r2, r3, #7
 8018142:	d00c      	beq.n	801815e <__lo0bits+0x22>
 8018144:	07d9      	lsls	r1, r3, #31
 8018146:	d422      	bmi.n	801818e <__lo0bits+0x52>
 8018148:	079a      	lsls	r2, r3, #30
 801814a:	bf49      	itett	mi
 801814c:	085b      	lsrmi	r3, r3, #1
 801814e:	089b      	lsrpl	r3, r3, #2
 8018150:	6003      	strmi	r3, [r0, #0]
 8018152:	2201      	movmi	r2, #1
 8018154:	bf5c      	itt	pl
 8018156:	6003      	strpl	r3, [r0, #0]
 8018158:	2202      	movpl	r2, #2
 801815a:	4610      	mov	r0, r2
 801815c:	4770      	bx	lr
 801815e:	b299      	uxth	r1, r3
 8018160:	b909      	cbnz	r1, 8018166 <__lo0bits+0x2a>
 8018162:	0c1b      	lsrs	r3, r3, #16
 8018164:	2210      	movs	r2, #16
 8018166:	b2d9      	uxtb	r1, r3
 8018168:	b909      	cbnz	r1, 801816e <__lo0bits+0x32>
 801816a:	3208      	adds	r2, #8
 801816c:	0a1b      	lsrs	r3, r3, #8
 801816e:	0719      	lsls	r1, r3, #28
 8018170:	bf04      	itt	eq
 8018172:	091b      	lsreq	r3, r3, #4
 8018174:	3204      	addeq	r2, #4
 8018176:	0799      	lsls	r1, r3, #30
 8018178:	bf04      	itt	eq
 801817a:	089b      	lsreq	r3, r3, #2
 801817c:	3202      	addeq	r2, #2
 801817e:	07d9      	lsls	r1, r3, #31
 8018180:	d403      	bmi.n	801818a <__lo0bits+0x4e>
 8018182:	085b      	lsrs	r3, r3, #1
 8018184:	f102 0201 	add.w	r2, r2, #1
 8018188:	d003      	beq.n	8018192 <__lo0bits+0x56>
 801818a:	6003      	str	r3, [r0, #0]
 801818c:	e7e5      	b.n	801815a <__lo0bits+0x1e>
 801818e:	2200      	movs	r2, #0
 8018190:	e7e3      	b.n	801815a <__lo0bits+0x1e>
 8018192:	2220      	movs	r2, #32
 8018194:	e7e1      	b.n	801815a <__lo0bits+0x1e>
	...

08018198 <__i2b>:
 8018198:	b510      	push	{r4, lr}
 801819a:	460c      	mov	r4, r1
 801819c:	2101      	movs	r1, #1
 801819e:	f7ff ff05 	bl	8017fac <_Balloc>
 80181a2:	4602      	mov	r2, r0
 80181a4:	b928      	cbnz	r0, 80181b2 <__i2b+0x1a>
 80181a6:	4b05      	ldr	r3, [pc, #20]	; (80181bc <__i2b+0x24>)
 80181a8:	4805      	ldr	r0, [pc, #20]	; (80181c0 <__i2b+0x28>)
 80181aa:	f240 1145 	movw	r1, #325	; 0x145
 80181ae:	f000 fc87 	bl	8018ac0 <__assert_func>
 80181b2:	2301      	movs	r3, #1
 80181b4:	6144      	str	r4, [r0, #20]
 80181b6:	6103      	str	r3, [r0, #16]
 80181b8:	bd10      	pop	{r4, pc}
 80181ba:	bf00      	nop
 80181bc:	08093e10 	.word	0x08093e10
 80181c0:	08093e21 	.word	0x08093e21

080181c4 <__multiply>:
 80181c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c8:	4691      	mov	r9, r2
 80181ca:	690a      	ldr	r2, [r1, #16]
 80181cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80181d0:	429a      	cmp	r2, r3
 80181d2:	bfb8      	it	lt
 80181d4:	460b      	movlt	r3, r1
 80181d6:	460c      	mov	r4, r1
 80181d8:	bfbc      	itt	lt
 80181da:	464c      	movlt	r4, r9
 80181dc:	4699      	movlt	r9, r3
 80181de:	6927      	ldr	r7, [r4, #16]
 80181e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80181e4:	68a3      	ldr	r3, [r4, #8]
 80181e6:	6861      	ldr	r1, [r4, #4]
 80181e8:	eb07 060a 	add.w	r6, r7, sl
 80181ec:	42b3      	cmp	r3, r6
 80181ee:	b085      	sub	sp, #20
 80181f0:	bfb8      	it	lt
 80181f2:	3101      	addlt	r1, #1
 80181f4:	f7ff feda 	bl	8017fac <_Balloc>
 80181f8:	b930      	cbnz	r0, 8018208 <__multiply+0x44>
 80181fa:	4602      	mov	r2, r0
 80181fc:	4b44      	ldr	r3, [pc, #272]	; (8018310 <__multiply+0x14c>)
 80181fe:	4845      	ldr	r0, [pc, #276]	; (8018314 <__multiply+0x150>)
 8018200:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018204:	f000 fc5c 	bl	8018ac0 <__assert_func>
 8018208:	f100 0514 	add.w	r5, r0, #20
 801820c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018210:	462b      	mov	r3, r5
 8018212:	2200      	movs	r2, #0
 8018214:	4543      	cmp	r3, r8
 8018216:	d321      	bcc.n	801825c <__multiply+0x98>
 8018218:	f104 0314 	add.w	r3, r4, #20
 801821c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018220:	f109 0314 	add.w	r3, r9, #20
 8018224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018228:	9202      	str	r2, [sp, #8]
 801822a:	1b3a      	subs	r2, r7, r4
 801822c:	3a15      	subs	r2, #21
 801822e:	f022 0203 	bic.w	r2, r2, #3
 8018232:	3204      	adds	r2, #4
 8018234:	f104 0115 	add.w	r1, r4, #21
 8018238:	428f      	cmp	r7, r1
 801823a:	bf38      	it	cc
 801823c:	2204      	movcc	r2, #4
 801823e:	9201      	str	r2, [sp, #4]
 8018240:	9a02      	ldr	r2, [sp, #8]
 8018242:	9303      	str	r3, [sp, #12]
 8018244:	429a      	cmp	r2, r3
 8018246:	d80c      	bhi.n	8018262 <__multiply+0x9e>
 8018248:	2e00      	cmp	r6, #0
 801824a:	dd03      	ble.n	8018254 <__multiply+0x90>
 801824c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018250:	2b00      	cmp	r3, #0
 8018252:	d05b      	beq.n	801830c <__multiply+0x148>
 8018254:	6106      	str	r6, [r0, #16]
 8018256:	b005      	add	sp, #20
 8018258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825c:	f843 2b04 	str.w	r2, [r3], #4
 8018260:	e7d8      	b.n	8018214 <__multiply+0x50>
 8018262:	f8b3 a000 	ldrh.w	sl, [r3]
 8018266:	f1ba 0f00 	cmp.w	sl, #0
 801826a:	d024      	beq.n	80182b6 <__multiply+0xf2>
 801826c:	f104 0e14 	add.w	lr, r4, #20
 8018270:	46a9      	mov	r9, r5
 8018272:	f04f 0c00 	mov.w	ip, #0
 8018276:	f85e 2b04 	ldr.w	r2, [lr], #4
 801827a:	f8d9 1000 	ldr.w	r1, [r9]
 801827e:	fa1f fb82 	uxth.w	fp, r2
 8018282:	b289      	uxth	r1, r1
 8018284:	fb0a 110b 	mla	r1, sl, fp, r1
 8018288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801828c:	f8d9 2000 	ldr.w	r2, [r9]
 8018290:	4461      	add	r1, ip
 8018292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018296:	fb0a c20b 	mla	r2, sl, fp, ip
 801829a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801829e:	b289      	uxth	r1, r1
 80182a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182a4:	4577      	cmp	r7, lr
 80182a6:	f849 1b04 	str.w	r1, [r9], #4
 80182aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182ae:	d8e2      	bhi.n	8018276 <__multiply+0xb2>
 80182b0:	9a01      	ldr	r2, [sp, #4]
 80182b2:	f845 c002 	str.w	ip, [r5, r2]
 80182b6:	9a03      	ldr	r2, [sp, #12]
 80182b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80182bc:	3304      	adds	r3, #4
 80182be:	f1b9 0f00 	cmp.w	r9, #0
 80182c2:	d021      	beq.n	8018308 <__multiply+0x144>
 80182c4:	6829      	ldr	r1, [r5, #0]
 80182c6:	f104 0c14 	add.w	ip, r4, #20
 80182ca:	46ae      	mov	lr, r5
 80182cc:	f04f 0a00 	mov.w	sl, #0
 80182d0:	f8bc b000 	ldrh.w	fp, [ip]
 80182d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80182d8:	fb09 220b 	mla	r2, r9, fp, r2
 80182dc:	4452      	add	r2, sl
 80182de:	b289      	uxth	r1, r1
 80182e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182e4:	f84e 1b04 	str.w	r1, [lr], #4
 80182e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80182ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80182f0:	f8be 1000 	ldrh.w	r1, [lr]
 80182f4:	fb09 110a 	mla	r1, r9, sl, r1
 80182f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80182fc:	4567      	cmp	r7, ip
 80182fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018302:	d8e5      	bhi.n	80182d0 <__multiply+0x10c>
 8018304:	9a01      	ldr	r2, [sp, #4]
 8018306:	50a9      	str	r1, [r5, r2]
 8018308:	3504      	adds	r5, #4
 801830a:	e799      	b.n	8018240 <__multiply+0x7c>
 801830c:	3e01      	subs	r6, #1
 801830e:	e79b      	b.n	8018248 <__multiply+0x84>
 8018310:	08093e10 	.word	0x08093e10
 8018314:	08093e21 	.word	0x08093e21

08018318 <__pow5mult>:
 8018318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801831c:	4615      	mov	r5, r2
 801831e:	f012 0203 	ands.w	r2, r2, #3
 8018322:	4606      	mov	r6, r0
 8018324:	460f      	mov	r7, r1
 8018326:	d007      	beq.n	8018338 <__pow5mult+0x20>
 8018328:	4c25      	ldr	r4, [pc, #148]	; (80183c0 <__pow5mult+0xa8>)
 801832a:	3a01      	subs	r2, #1
 801832c:	2300      	movs	r3, #0
 801832e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018332:	f7ff fe9d 	bl	8018070 <__multadd>
 8018336:	4607      	mov	r7, r0
 8018338:	10ad      	asrs	r5, r5, #2
 801833a:	d03d      	beq.n	80183b8 <__pow5mult+0xa0>
 801833c:	69f4      	ldr	r4, [r6, #28]
 801833e:	b97c      	cbnz	r4, 8018360 <__pow5mult+0x48>
 8018340:	2010      	movs	r0, #16
 8018342:	f7fe f845 	bl	80163d0 <malloc>
 8018346:	4602      	mov	r2, r0
 8018348:	61f0      	str	r0, [r6, #28]
 801834a:	b928      	cbnz	r0, 8018358 <__pow5mult+0x40>
 801834c:	4b1d      	ldr	r3, [pc, #116]	; (80183c4 <__pow5mult+0xac>)
 801834e:	481e      	ldr	r0, [pc, #120]	; (80183c8 <__pow5mult+0xb0>)
 8018350:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018354:	f000 fbb4 	bl	8018ac0 <__assert_func>
 8018358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801835c:	6004      	str	r4, [r0, #0]
 801835e:	60c4      	str	r4, [r0, #12]
 8018360:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018368:	b94c      	cbnz	r4, 801837e <__pow5mult+0x66>
 801836a:	f240 2171 	movw	r1, #625	; 0x271
 801836e:	4630      	mov	r0, r6
 8018370:	f7ff ff12 	bl	8018198 <__i2b>
 8018374:	2300      	movs	r3, #0
 8018376:	f8c8 0008 	str.w	r0, [r8, #8]
 801837a:	4604      	mov	r4, r0
 801837c:	6003      	str	r3, [r0, #0]
 801837e:	f04f 0900 	mov.w	r9, #0
 8018382:	07eb      	lsls	r3, r5, #31
 8018384:	d50a      	bpl.n	801839c <__pow5mult+0x84>
 8018386:	4639      	mov	r1, r7
 8018388:	4622      	mov	r2, r4
 801838a:	4630      	mov	r0, r6
 801838c:	f7ff ff1a 	bl	80181c4 <__multiply>
 8018390:	4639      	mov	r1, r7
 8018392:	4680      	mov	r8, r0
 8018394:	4630      	mov	r0, r6
 8018396:	f7ff fe49 	bl	801802c <_Bfree>
 801839a:	4647      	mov	r7, r8
 801839c:	106d      	asrs	r5, r5, #1
 801839e:	d00b      	beq.n	80183b8 <__pow5mult+0xa0>
 80183a0:	6820      	ldr	r0, [r4, #0]
 80183a2:	b938      	cbnz	r0, 80183b4 <__pow5mult+0x9c>
 80183a4:	4622      	mov	r2, r4
 80183a6:	4621      	mov	r1, r4
 80183a8:	4630      	mov	r0, r6
 80183aa:	f7ff ff0b 	bl	80181c4 <__multiply>
 80183ae:	6020      	str	r0, [r4, #0]
 80183b0:	f8c0 9000 	str.w	r9, [r0]
 80183b4:	4604      	mov	r4, r0
 80183b6:	e7e4      	b.n	8018382 <__pow5mult+0x6a>
 80183b8:	4638      	mov	r0, r7
 80183ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183be:	bf00      	nop
 80183c0:	08093f70 	.word	0x08093f70
 80183c4:	08093da1 	.word	0x08093da1
 80183c8:	08093e21 	.word	0x08093e21

080183cc <__lshift>:
 80183cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183d0:	460c      	mov	r4, r1
 80183d2:	6849      	ldr	r1, [r1, #4]
 80183d4:	6923      	ldr	r3, [r4, #16]
 80183d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80183da:	68a3      	ldr	r3, [r4, #8]
 80183dc:	4607      	mov	r7, r0
 80183de:	4691      	mov	r9, r2
 80183e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80183e4:	f108 0601 	add.w	r6, r8, #1
 80183e8:	42b3      	cmp	r3, r6
 80183ea:	db0b      	blt.n	8018404 <__lshift+0x38>
 80183ec:	4638      	mov	r0, r7
 80183ee:	f7ff fddd 	bl	8017fac <_Balloc>
 80183f2:	4605      	mov	r5, r0
 80183f4:	b948      	cbnz	r0, 801840a <__lshift+0x3e>
 80183f6:	4602      	mov	r2, r0
 80183f8:	4b28      	ldr	r3, [pc, #160]	; (801849c <__lshift+0xd0>)
 80183fa:	4829      	ldr	r0, [pc, #164]	; (80184a0 <__lshift+0xd4>)
 80183fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018400:	f000 fb5e 	bl	8018ac0 <__assert_func>
 8018404:	3101      	adds	r1, #1
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	e7ee      	b.n	80183e8 <__lshift+0x1c>
 801840a:	2300      	movs	r3, #0
 801840c:	f100 0114 	add.w	r1, r0, #20
 8018410:	f100 0210 	add.w	r2, r0, #16
 8018414:	4618      	mov	r0, r3
 8018416:	4553      	cmp	r3, sl
 8018418:	db33      	blt.n	8018482 <__lshift+0xb6>
 801841a:	6920      	ldr	r0, [r4, #16]
 801841c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018420:	f104 0314 	add.w	r3, r4, #20
 8018424:	f019 091f 	ands.w	r9, r9, #31
 8018428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801842c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018430:	d02b      	beq.n	801848a <__lshift+0xbe>
 8018432:	f1c9 0e20 	rsb	lr, r9, #32
 8018436:	468a      	mov	sl, r1
 8018438:	2200      	movs	r2, #0
 801843a:	6818      	ldr	r0, [r3, #0]
 801843c:	fa00 f009 	lsl.w	r0, r0, r9
 8018440:	4310      	orrs	r0, r2
 8018442:	f84a 0b04 	str.w	r0, [sl], #4
 8018446:	f853 2b04 	ldr.w	r2, [r3], #4
 801844a:	459c      	cmp	ip, r3
 801844c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018450:	d8f3      	bhi.n	801843a <__lshift+0x6e>
 8018452:	ebac 0304 	sub.w	r3, ip, r4
 8018456:	3b15      	subs	r3, #21
 8018458:	f023 0303 	bic.w	r3, r3, #3
 801845c:	3304      	adds	r3, #4
 801845e:	f104 0015 	add.w	r0, r4, #21
 8018462:	4584      	cmp	ip, r0
 8018464:	bf38      	it	cc
 8018466:	2304      	movcc	r3, #4
 8018468:	50ca      	str	r2, [r1, r3]
 801846a:	b10a      	cbz	r2, 8018470 <__lshift+0xa4>
 801846c:	f108 0602 	add.w	r6, r8, #2
 8018470:	3e01      	subs	r6, #1
 8018472:	4638      	mov	r0, r7
 8018474:	612e      	str	r6, [r5, #16]
 8018476:	4621      	mov	r1, r4
 8018478:	f7ff fdd8 	bl	801802c <_Bfree>
 801847c:	4628      	mov	r0, r5
 801847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018482:	f842 0f04 	str.w	r0, [r2, #4]!
 8018486:	3301      	adds	r3, #1
 8018488:	e7c5      	b.n	8018416 <__lshift+0x4a>
 801848a:	3904      	subs	r1, #4
 801848c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018490:	f841 2f04 	str.w	r2, [r1, #4]!
 8018494:	459c      	cmp	ip, r3
 8018496:	d8f9      	bhi.n	801848c <__lshift+0xc0>
 8018498:	e7ea      	b.n	8018470 <__lshift+0xa4>
 801849a:	bf00      	nop
 801849c:	08093e10 	.word	0x08093e10
 80184a0:	08093e21 	.word	0x08093e21

080184a4 <__mcmp>:
 80184a4:	b530      	push	{r4, r5, lr}
 80184a6:	6902      	ldr	r2, [r0, #16]
 80184a8:	690c      	ldr	r4, [r1, #16]
 80184aa:	1b12      	subs	r2, r2, r4
 80184ac:	d10e      	bne.n	80184cc <__mcmp+0x28>
 80184ae:	f100 0314 	add.w	r3, r0, #20
 80184b2:	3114      	adds	r1, #20
 80184b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80184b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80184bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80184c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80184c4:	42a5      	cmp	r5, r4
 80184c6:	d003      	beq.n	80184d0 <__mcmp+0x2c>
 80184c8:	d305      	bcc.n	80184d6 <__mcmp+0x32>
 80184ca:	2201      	movs	r2, #1
 80184cc:	4610      	mov	r0, r2
 80184ce:	bd30      	pop	{r4, r5, pc}
 80184d0:	4283      	cmp	r3, r0
 80184d2:	d3f3      	bcc.n	80184bc <__mcmp+0x18>
 80184d4:	e7fa      	b.n	80184cc <__mcmp+0x28>
 80184d6:	f04f 32ff 	mov.w	r2, #4294967295
 80184da:	e7f7      	b.n	80184cc <__mcmp+0x28>

080184dc <__mdiff>:
 80184dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e0:	460c      	mov	r4, r1
 80184e2:	4606      	mov	r6, r0
 80184e4:	4611      	mov	r1, r2
 80184e6:	4620      	mov	r0, r4
 80184e8:	4690      	mov	r8, r2
 80184ea:	f7ff ffdb 	bl	80184a4 <__mcmp>
 80184ee:	1e05      	subs	r5, r0, #0
 80184f0:	d110      	bne.n	8018514 <__mdiff+0x38>
 80184f2:	4629      	mov	r1, r5
 80184f4:	4630      	mov	r0, r6
 80184f6:	f7ff fd59 	bl	8017fac <_Balloc>
 80184fa:	b930      	cbnz	r0, 801850a <__mdiff+0x2e>
 80184fc:	4b3a      	ldr	r3, [pc, #232]	; (80185e8 <__mdiff+0x10c>)
 80184fe:	4602      	mov	r2, r0
 8018500:	f240 2137 	movw	r1, #567	; 0x237
 8018504:	4839      	ldr	r0, [pc, #228]	; (80185ec <__mdiff+0x110>)
 8018506:	f000 fadb 	bl	8018ac0 <__assert_func>
 801850a:	2301      	movs	r3, #1
 801850c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018514:	bfa4      	itt	ge
 8018516:	4643      	movge	r3, r8
 8018518:	46a0      	movge	r8, r4
 801851a:	4630      	mov	r0, r6
 801851c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018520:	bfa6      	itte	ge
 8018522:	461c      	movge	r4, r3
 8018524:	2500      	movge	r5, #0
 8018526:	2501      	movlt	r5, #1
 8018528:	f7ff fd40 	bl	8017fac <_Balloc>
 801852c:	b920      	cbnz	r0, 8018538 <__mdiff+0x5c>
 801852e:	4b2e      	ldr	r3, [pc, #184]	; (80185e8 <__mdiff+0x10c>)
 8018530:	4602      	mov	r2, r0
 8018532:	f240 2145 	movw	r1, #581	; 0x245
 8018536:	e7e5      	b.n	8018504 <__mdiff+0x28>
 8018538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801853c:	6926      	ldr	r6, [r4, #16]
 801853e:	60c5      	str	r5, [r0, #12]
 8018540:	f104 0914 	add.w	r9, r4, #20
 8018544:	f108 0514 	add.w	r5, r8, #20
 8018548:	f100 0e14 	add.w	lr, r0, #20
 801854c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018554:	f108 0210 	add.w	r2, r8, #16
 8018558:	46f2      	mov	sl, lr
 801855a:	2100      	movs	r1, #0
 801855c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018564:	fa11 f88b 	uxtah	r8, r1, fp
 8018568:	b299      	uxth	r1, r3
 801856a:	0c1b      	lsrs	r3, r3, #16
 801856c:	eba8 0801 	sub.w	r8, r8, r1
 8018570:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018574:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018578:	fa1f f888 	uxth.w	r8, r8
 801857c:	1419      	asrs	r1, r3, #16
 801857e:	454e      	cmp	r6, r9
 8018580:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018584:	f84a 3b04 	str.w	r3, [sl], #4
 8018588:	d8e8      	bhi.n	801855c <__mdiff+0x80>
 801858a:	1b33      	subs	r3, r6, r4
 801858c:	3b15      	subs	r3, #21
 801858e:	f023 0303 	bic.w	r3, r3, #3
 8018592:	3304      	adds	r3, #4
 8018594:	3415      	adds	r4, #21
 8018596:	42a6      	cmp	r6, r4
 8018598:	bf38      	it	cc
 801859a:	2304      	movcc	r3, #4
 801859c:	441d      	add	r5, r3
 801859e:	4473      	add	r3, lr
 80185a0:	469e      	mov	lr, r3
 80185a2:	462e      	mov	r6, r5
 80185a4:	4566      	cmp	r6, ip
 80185a6:	d30e      	bcc.n	80185c6 <__mdiff+0xea>
 80185a8:	f10c 0203 	add.w	r2, ip, #3
 80185ac:	1b52      	subs	r2, r2, r5
 80185ae:	f022 0203 	bic.w	r2, r2, #3
 80185b2:	3d03      	subs	r5, #3
 80185b4:	45ac      	cmp	ip, r5
 80185b6:	bf38      	it	cc
 80185b8:	2200      	movcc	r2, #0
 80185ba:	4413      	add	r3, r2
 80185bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80185c0:	b17a      	cbz	r2, 80185e2 <__mdiff+0x106>
 80185c2:	6107      	str	r7, [r0, #16]
 80185c4:	e7a4      	b.n	8018510 <__mdiff+0x34>
 80185c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80185ca:	fa11 f288 	uxtah	r2, r1, r8
 80185ce:	1414      	asrs	r4, r2, #16
 80185d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80185d4:	b292      	uxth	r2, r2
 80185d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80185da:	f84e 2b04 	str.w	r2, [lr], #4
 80185de:	1421      	asrs	r1, r4, #16
 80185e0:	e7e0      	b.n	80185a4 <__mdiff+0xc8>
 80185e2:	3f01      	subs	r7, #1
 80185e4:	e7ea      	b.n	80185bc <__mdiff+0xe0>
 80185e6:	bf00      	nop
 80185e8:	08093e10 	.word	0x08093e10
 80185ec:	08093e21 	.word	0x08093e21

080185f0 <__d2b>:
 80185f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80185f4:	460f      	mov	r7, r1
 80185f6:	2101      	movs	r1, #1
 80185f8:	ec59 8b10 	vmov	r8, r9, d0
 80185fc:	4616      	mov	r6, r2
 80185fe:	f7ff fcd5 	bl	8017fac <_Balloc>
 8018602:	4604      	mov	r4, r0
 8018604:	b930      	cbnz	r0, 8018614 <__d2b+0x24>
 8018606:	4602      	mov	r2, r0
 8018608:	4b24      	ldr	r3, [pc, #144]	; (801869c <__d2b+0xac>)
 801860a:	4825      	ldr	r0, [pc, #148]	; (80186a0 <__d2b+0xb0>)
 801860c:	f240 310f 	movw	r1, #783	; 0x30f
 8018610:	f000 fa56 	bl	8018ac0 <__assert_func>
 8018614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801861c:	bb2d      	cbnz	r5, 801866a <__d2b+0x7a>
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	f1b8 0300 	subs.w	r3, r8, #0
 8018624:	d026      	beq.n	8018674 <__d2b+0x84>
 8018626:	4668      	mov	r0, sp
 8018628:	9300      	str	r3, [sp, #0]
 801862a:	f7ff fd87 	bl	801813c <__lo0bits>
 801862e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018632:	b1e8      	cbz	r0, 8018670 <__d2b+0x80>
 8018634:	f1c0 0320 	rsb	r3, r0, #32
 8018638:	fa02 f303 	lsl.w	r3, r2, r3
 801863c:	430b      	orrs	r3, r1
 801863e:	40c2      	lsrs	r2, r0
 8018640:	6163      	str	r3, [r4, #20]
 8018642:	9201      	str	r2, [sp, #4]
 8018644:	9b01      	ldr	r3, [sp, #4]
 8018646:	61a3      	str	r3, [r4, #24]
 8018648:	2b00      	cmp	r3, #0
 801864a:	bf14      	ite	ne
 801864c:	2202      	movne	r2, #2
 801864e:	2201      	moveq	r2, #1
 8018650:	6122      	str	r2, [r4, #16]
 8018652:	b1bd      	cbz	r5, 8018684 <__d2b+0x94>
 8018654:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018658:	4405      	add	r5, r0
 801865a:	603d      	str	r5, [r7, #0]
 801865c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018660:	6030      	str	r0, [r6, #0]
 8018662:	4620      	mov	r0, r4
 8018664:	b003      	add	sp, #12
 8018666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801866a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801866e:	e7d6      	b.n	801861e <__d2b+0x2e>
 8018670:	6161      	str	r1, [r4, #20]
 8018672:	e7e7      	b.n	8018644 <__d2b+0x54>
 8018674:	a801      	add	r0, sp, #4
 8018676:	f7ff fd61 	bl	801813c <__lo0bits>
 801867a:	9b01      	ldr	r3, [sp, #4]
 801867c:	6163      	str	r3, [r4, #20]
 801867e:	3020      	adds	r0, #32
 8018680:	2201      	movs	r2, #1
 8018682:	e7e5      	b.n	8018650 <__d2b+0x60>
 8018684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801868c:	6038      	str	r0, [r7, #0]
 801868e:	6918      	ldr	r0, [r3, #16]
 8018690:	f7ff fd34 	bl	80180fc <__hi0bits>
 8018694:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018698:	e7e2      	b.n	8018660 <__d2b+0x70>
 801869a:	bf00      	nop
 801869c:	08093e10 	.word	0x08093e10
 80186a0:	08093e21 	.word	0x08093e21

080186a4 <_malloc_usable_size_r>:
 80186a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186a8:	1f18      	subs	r0, r3, #4
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	bfbc      	itt	lt
 80186ae:	580b      	ldrlt	r3, [r1, r0]
 80186b0:	18c0      	addlt	r0, r0, r3
 80186b2:	4770      	bx	lr

080186b4 <__ssputs_r>:
 80186b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b8:	688e      	ldr	r6, [r1, #8]
 80186ba:	461f      	mov	r7, r3
 80186bc:	42be      	cmp	r6, r7
 80186be:	680b      	ldr	r3, [r1, #0]
 80186c0:	4682      	mov	sl, r0
 80186c2:	460c      	mov	r4, r1
 80186c4:	4690      	mov	r8, r2
 80186c6:	d82c      	bhi.n	8018722 <__ssputs_r+0x6e>
 80186c8:	898a      	ldrh	r2, [r1, #12]
 80186ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80186ce:	d026      	beq.n	801871e <__ssputs_r+0x6a>
 80186d0:	6965      	ldr	r5, [r4, #20]
 80186d2:	6909      	ldr	r1, [r1, #16]
 80186d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80186d8:	eba3 0901 	sub.w	r9, r3, r1
 80186dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80186e0:	1c7b      	adds	r3, r7, #1
 80186e2:	444b      	add	r3, r9
 80186e4:	106d      	asrs	r5, r5, #1
 80186e6:	429d      	cmp	r5, r3
 80186e8:	bf38      	it	cc
 80186ea:	461d      	movcc	r5, r3
 80186ec:	0553      	lsls	r3, r2, #21
 80186ee:	d527      	bpl.n	8018740 <__ssputs_r+0x8c>
 80186f0:	4629      	mov	r1, r5
 80186f2:	f7fd fe95 	bl	8016420 <_malloc_r>
 80186f6:	4606      	mov	r6, r0
 80186f8:	b360      	cbz	r0, 8018754 <__ssputs_r+0xa0>
 80186fa:	6921      	ldr	r1, [r4, #16]
 80186fc:	464a      	mov	r2, r9
 80186fe:	f7fe fd80 	bl	8017202 <memcpy>
 8018702:	89a3      	ldrh	r3, [r4, #12]
 8018704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801870c:	81a3      	strh	r3, [r4, #12]
 801870e:	6126      	str	r6, [r4, #16]
 8018710:	6165      	str	r5, [r4, #20]
 8018712:	444e      	add	r6, r9
 8018714:	eba5 0509 	sub.w	r5, r5, r9
 8018718:	6026      	str	r6, [r4, #0]
 801871a:	60a5      	str	r5, [r4, #8]
 801871c:	463e      	mov	r6, r7
 801871e:	42be      	cmp	r6, r7
 8018720:	d900      	bls.n	8018724 <__ssputs_r+0x70>
 8018722:	463e      	mov	r6, r7
 8018724:	6820      	ldr	r0, [r4, #0]
 8018726:	4632      	mov	r2, r6
 8018728:	4641      	mov	r1, r8
 801872a:	f7fe fcc0 	bl	80170ae <memmove>
 801872e:	68a3      	ldr	r3, [r4, #8]
 8018730:	1b9b      	subs	r3, r3, r6
 8018732:	60a3      	str	r3, [r4, #8]
 8018734:	6823      	ldr	r3, [r4, #0]
 8018736:	4433      	add	r3, r6
 8018738:	6023      	str	r3, [r4, #0]
 801873a:	2000      	movs	r0, #0
 801873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018740:	462a      	mov	r2, r5
 8018742:	f7fd fef9 	bl	8016538 <_realloc_r>
 8018746:	4606      	mov	r6, r0
 8018748:	2800      	cmp	r0, #0
 801874a:	d1e0      	bne.n	801870e <__ssputs_r+0x5a>
 801874c:	6921      	ldr	r1, [r4, #16]
 801874e:	4650      	mov	r0, sl
 8018750:	f7ff fbe0 	bl	8017f14 <_free_r>
 8018754:	230c      	movs	r3, #12
 8018756:	f8ca 3000 	str.w	r3, [sl]
 801875a:	89a3      	ldrh	r3, [r4, #12]
 801875c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018760:	81a3      	strh	r3, [r4, #12]
 8018762:	f04f 30ff 	mov.w	r0, #4294967295
 8018766:	e7e9      	b.n	801873c <__ssputs_r+0x88>

08018768 <_svfiprintf_r>:
 8018768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876c:	4698      	mov	r8, r3
 801876e:	898b      	ldrh	r3, [r1, #12]
 8018770:	061b      	lsls	r3, r3, #24
 8018772:	b09d      	sub	sp, #116	; 0x74
 8018774:	4607      	mov	r7, r0
 8018776:	460d      	mov	r5, r1
 8018778:	4614      	mov	r4, r2
 801877a:	d50e      	bpl.n	801879a <_svfiprintf_r+0x32>
 801877c:	690b      	ldr	r3, [r1, #16]
 801877e:	b963      	cbnz	r3, 801879a <_svfiprintf_r+0x32>
 8018780:	2140      	movs	r1, #64	; 0x40
 8018782:	f7fd fe4d 	bl	8016420 <_malloc_r>
 8018786:	6028      	str	r0, [r5, #0]
 8018788:	6128      	str	r0, [r5, #16]
 801878a:	b920      	cbnz	r0, 8018796 <_svfiprintf_r+0x2e>
 801878c:	230c      	movs	r3, #12
 801878e:	603b      	str	r3, [r7, #0]
 8018790:	f04f 30ff 	mov.w	r0, #4294967295
 8018794:	e0d0      	b.n	8018938 <_svfiprintf_r+0x1d0>
 8018796:	2340      	movs	r3, #64	; 0x40
 8018798:	616b      	str	r3, [r5, #20]
 801879a:	2300      	movs	r3, #0
 801879c:	9309      	str	r3, [sp, #36]	; 0x24
 801879e:	2320      	movs	r3, #32
 80187a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80187a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80187a8:	2330      	movs	r3, #48	; 0x30
 80187aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018950 <_svfiprintf_r+0x1e8>
 80187ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80187b2:	f04f 0901 	mov.w	r9, #1
 80187b6:	4623      	mov	r3, r4
 80187b8:	469a      	mov	sl, r3
 80187ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187be:	b10a      	cbz	r2, 80187c4 <_svfiprintf_r+0x5c>
 80187c0:	2a25      	cmp	r2, #37	; 0x25
 80187c2:	d1f9      	bne.n	80187b8 <_svfiprintf_r+0x50>
 80187c4:	ebba 0b04 	subs.w	fp, sl, r4
 80187c8:	d00b      	beq.n	80187e2 <_svfiprintf_r+0x7a>
 80187ca:	465b      	mov	r3, fp
 80187cc:	4622      	mov	r2, r4
 80187ce:	4629      	mov	r1, r5
 80187d0:	4638      	mov	r0, r7
 80187d2:	f7ff ff6f 	bl	80186b4 <__ssputs_r>
 80187d6:	3001      	adds	r0, #1
 80187d8:	f000 80a9 	beq.w	801892e <_svfiprintf_r+0x1c6>
 80187dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187de:	445a      	add	r2, fp
 80187e0:	9209      	str	r2, [sp, #36]	; 0x24
 80187e2:	f89a 3000 	ldrb.w	r3, [sl]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	f000 80a1 	beq.w	801892e <_svfiprintf_r+0x1c6>
 80187ec:	2300      	movs	r3, #0
 80187ee:	f04f 32ff 	mov.w	r2, #4294967295
 80187f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80187f6:	f10a 0a01 	add.w	sl, sl, #1
 80187fa:	9304      	str	r3, [sp, #16]
 80187fc:	9307      	str	r3, [sp, #28]
 80187fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018802:	931a      	str	r3, [sp, #104]	; 0x68
 8018804:	4654      	mov	r4, sl
 8018806:	2205      	movs	r2, #5
 8018808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801880c:	4850      	ldr	r0, [pc, #320]	; (8018950 <_svfiprintf_r+0x1e8>)
 801880e:	f7e7 fcff 	bl	8000210 <memchr>
 8018812:	9a04      	ldr	r2, [sp, #16]
 8018814:	b9d8      	cbnz	r0, 801884e <_svfiprintf_r+0xe6>
 8018816:	06d0      	lsls	r0, r2, #27
 8018818:	bf44      	itt	mi
 801881a:	2320      	movmi	r3, #32
 801881c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018820:	0711      	lsls	r1, r2, #28
 8018822:	bf44      	itt	mi
 8018824:	232b      	movmi	r3, #43	; 0x2b
 8018826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801882a:	f89a 3000 	ldrb.w	r3, [sl]
 801882e:	2b2a      	cmp	r3, #42	; 0x2a
 8018830:	d015      	beq.n	801885e <_svfiprintf_r+0xf6>
 8018832:	9a07      	ldr	r2, [sp, #28]
 8018834:	4654      	mov	r4, sl
 8018836:	2000      	movs	r0, #0
 8018838:	f04f 0c0a 	mov.w	ip, #10
 801883c:	4621      	mov	r1, r4
 801883e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018842:	3b30      	subs	r3, #48	; 0x30
 8018844:	2b09      	cmp	r3, #9
 8018846:	d94d      	bls.n	80188e4 <_svfiprintf_r+0x17c>
 8018848:	b1b0      	cbz	r0, 8018878 <_svfiprintf_r+0x110>
 801884a:	9207      	str	r2, [sp, #28]
 801884c:	e014      	b.n	8018878 <_svfiprintf_r+0x110>
 801884e:	eba0 0308 	sub.w	r3, r0, r8
 8018852:	fa09 f303 	lsl.w	r3, r9, r3
 8018856:	4313      	orrs	r3, r2
 8018858:	9304      	str	r3, [sp, #16]
 801885a:	46a2      	mov	sl, r4
 801885c:	e7d2      	b.n	8018804 <_svfiprintf_r+0x9c>
 801885e:	9b03      	ldr	r3, [sp, #12]
 8018860:	1d19      	adds	r1, r3, #4
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	9103      	str	r1, [sp, #12]
 8018866:	2b00      	cmp	r3, #0
 8018868:	bfbb      	ittet	lt
 801886a:	425b      	neglt	r3, r3
 801886c:	f042 0202 	orrlt.w	r2, r2, #2
 8018870:	9307      	strge	r3, [sp, #28]
 8018872:	9307      	strlt	r3, [sp, #28]
 8018874:	bfb8      	it	lt
 8018876:	9204      	strlt	r2, [sp, #16]
 8018878:	7823      	ldrb	r3, [r4, #0]
 801887a:	2b2e      	cmp	r3, #46	; 0x2e
 801887c:	d10c      	bne.n	8018898 <_svfiprintf_r+0x130>
 801887e:	7863      	ldrb	r3, [r4, #1]
 8018880:	2b2a      	cmp	r3, #42	; 0x2a
 8018882:	d134      	bne.n	80188ee <_svfiprintf_r+0x186>
 8018884:	9b03      	ldr	r3, [sp, #12]
 8018886:	1d1a      	adds	r2, r3, #4
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	9203      	str	r2, [sp, #12]
 801888c:	2b00      	cmp	r3, #0
 801888e:	bfb8      	it	lt
 8018890:	f04f 33ff 	movlt.w	r3, #4294967295
 8018894:	3402      	adds	r4, #2
 8018896:	9305      	str	r3, [sp, #20]
 8018898:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018960 <_svfiprintf_r+0x1f8>
 801889c:	7821      	ldrb	r1, [r4, #0]
 801889e:	2203      	movs	r2, #3
 80188a0:	4650      	mov	r0, sl
 80188a2:	f7e7 fcb5 	bl	8000210 <memchr>
 80188a6:	b138      	cbz	r0, 80188b8 <_svfiprintf_r+0x150>
 80188a8:	9b04      	ldr	r3, [sp, #16]
 80188aa:	eba0 000a 	sub.w	r0, r0, sl
 80188ae:	2240      	movs	r2, #64	; 0x40
 80188b0:	4082      	lsls	r2, r0
 80188b2:	4313      	orrs	r3, r2
 80188b4:	3401      	adds	r4, #1
 80188b6:	9304      	str	r3, [sp, #16]
 80188b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188bc:	4825      	ldr	r0, [pc, #148]	; (8018954 <_svfiprintf_r+0x1ec>)
 80188be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80188c2:	2206      	movs	r2, #6
 80188c4:	f7e7 fca4 	bl	8000210 <memchr>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	d038      	beq.n	801893e <_svfiprintf_r+0x1d6>
 80188cc:	4b22      	ldr	r3, [pc, #136]	; (8018958 <_svfiprintf_r+0x1f0>)
 80188ce:	bb1b      	cbnz	r3, 8018918 <_svfiprintf_r+0x1b0>
 80188d0:	9b03      	ldr	r3, [sp, #12]
 80188d2:	3307      	adds	r3, #7
 80188d4:	f023 0307 	bic.w	r3, r3, #7
 80188d8:	3308      	adds	r3, #8
 80188da:	9303      	str	r3, [sp, #12]
 80188dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188de:	4433      	add	r3, r6
 80188e0:	9309      	str	r3, [sp, #36]	; 0x24
 80188e2:	e768      	b.n	80187b6 <_svfiprintf_r+0x4e>
 80188e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80188e8:	460c      	mov	r4, r1
 80188ea:	2001      	movs	r0, #1
 80188ec:	e7a6      	b.n	801883c <_svfiprintf_r+0xd4>
 80188ee:	2300      	movs	r3, #0
 80188f0:	3401      	adds	r4, #1
 80188f2:	9305      	str	r3, [sp, #20]
 80188f4:	4619      	mov	r1, r3
 80188f6:	f04f 0c0a 	mov.w	ip, #10
 80188fa:	4620      	mov	r0, r4
 80188fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018900:	3a30      	subs	r2, #48	; 0x30
 8018902:	2a09      	cmp	r2, #9
 8018904:	d903      	bls.n	801890e <_svfiprintf_r+0x1a6>
 8018906:	2b00      	cmp	r3, #0
 8018908:	d0c6      	beq.n	8018898 <_svfiprintf_r+0x130>
 801890a:	9105      	str	r1, [sp, #20]
 801890c:	e7c4      	b.n	8018898 <_svfiprintf_r+0x130>
 801890e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018912:	4604      	mov	r4, r0
 8018914:	2301      	movs	r3, #1
 8018916:	e7f0      	b.n	80188fa <_svfiprintf_r+0x192>
 8018918:	ab03      	add	r3, sp, #12
 801891a:	9300      	str	r3, [sp, #0]
 801891c:	462a      	mov	r2, r5
 801891e:	4b0f      	ldr	r3, [pc, #60]	; (801895c <_svfiprintf_r+0x1f4>)
 8018920:	a904      	add	r1, sp, #16
 8018922:	4638      	mov	r0, r7
 8018924:	f7fd fed8 	bl	80166d8 <_printf_float>
 8018928:	1c42      	adds	r2, r0, #1
 801892a:	4606      	mov	r6, r0
 801892c:	d1d6      	bne.n	80188dc <_svfiprintf_r+0x174>
 801892e:	89ab      	ldrh	r3, [r5, #12]
 8018930:	065b      	lsls	r3, r3, #25
 8018932:	f53f af2d 	bmi.w	8018790 <_svfiprintf_r+0x28>
 8018936:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018938:	b01d      	add	sp, #116	; 0x74
 801893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801893e:	ab03      	add	r3, sp, #12
 8018940:	9300      	str	r3, [sp, #0]
 8018942:	462a      	mov	r2, r5
 8018944:	4b05      	ldr	r3, [pc, #20]	; (801895c <_svfiprintf_r+0x1f4>)
 8018946:	a904      	add	r1, sp, #16
 8018948:	4638      	mov	r0, r7
 801894a:	f7fe f969 	bl	8016c20 <_printf_i>
 801894e:	e7eb      	b.n	8018928 <_svfiprintf_r+0x1c0>
 8018950:	08093f7c 	.word	0x08093f7c
 8018954:	08093f86 	.word	0x08093f86
 8018958:	080166d9 	.word	0x080166d9
 801895c:	080186b5 	.word	0x080186b5
 8018960:	08093f82 	.word	0x08093f82

08018964 <__sflush_r>:
 8018964:	898a      	ldrh	r2, [r1, #12]
 8018966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801896a:	4605      	mov	r5, r0
 801896c:	0710      	lsls	r0, r2, #28
 801896e:	460c      	mov	r4, r1
 8018970:	d458      	bmi.n	8018a24 <__sflush_r+0xc0>
 8018972:	684b      	ldr	r3, [r1, #4]
 8018974:	2b00      	cmp	r3, #0
 8018976:	dc05      	bgt.n	8018984 <__sflush_r+0x20>
 8018978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801897a:	2b00      	cmp	r3, #0
 801897c:	dc02      	bgt.n	8018984 <__sflush_r+0x20>
 801897e:	2000      	movs	r0, #0
 8018980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018986:	2e00      	cmp	r6, #0
 8018988:	d0f9      	beq.n	801897e <__sflush_r+0x1a>
 801898a:	2300      	movs	r3, #0
 801898c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018990:	682f      	ldr	r7, [r5, #0]
 8018992:	6a21      	ldr	r1, [r4, #32]
 8018994:	602b      	str	r3, [r5, #0]
 8018996:	d032      	beq.n	80189fe <__sflush_r+0x9a>
 8018998:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801899a:	89a3      	ldrh	r3, [r4, #12]
 801899c:	075a      	lsls	r2, r3, #29
 801899e:	d505      	bpl.n	80189ac <__sflush_r+0x48>
 80189a0:	6863      	ldr	r3, [r4, #4]
 80189a2:	1ac0      	subs	r0, r0, r3
 80189a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80189a6:	b10b      	cbz	r3, 80189ac <__sflush_r+0x48>
 80189a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80189aa:	1ac0      	subs	r0, r0, r3
 80189ac:	2300      	movs	r3, #0
 80189ae:	4602      	mov	r2, r0
 80189b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80189b2:	6a21      	ldr	r1, [r4, #32]
 80189b4:	4628      	mov	r0, r5
 80189b6:	47b0      	blx	r6
 80189b8:	1c43      	adds	r3, r0, #1
 80189ba:	89a3      	ldrh	r3, [r4, #12]
 80189bc:	d106      	bne.n	80189cc <__sflush_r+0x68>
 80189be:	6829      	ldr	r1, [r5, #0]
 80189c0:	291d      	cmp	r1, #29
 80189c2:	d82b      	bhi.n	8018a1c <__sflush_r+0xb8>
 80189c4:	4a29      	ldr	r2, [pc, #164]	; (8018a6c <__sflush_r+0x108>)
 80189c6:	410a      	asrs	r2, r1
 80189c8:	07d6      	lsls	r6, r2, #31
 80189ca:	d427      	bmi.n	8018a1c <__sflush_r+0xb8>
 80189cc:	2200      	movs	r2, #0
 80189ce:	6062      	str	r2, [r4, #4]
 80189d0:	04d9      	lsls	r1, r3, #19
 80189d2:	6922      	ldr	r2, [r4, #16]
 80189d4:	6022      	str	r2, [r4, #0]
 80189d6:	d504      	bpl.n	80189e2 <__sflush_r+0x7e>
 80189d8:	1c42      	adds	r2, r0, #1
 80189da:	d101      	bne.n	80189e0 <__sflush_r+0x7c>
 80189dc:	682b      	ldr	r3, [r5, #0]
 80189de:	b903      	cbnz	r3, 80189e2 <__sflush_r+0x7e>
 80189e0:	6560      	str	r0, [r4, #84]	; 0x54
 80189e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80189e4:	602f      	str	r7, [r5, #0]
 80189e6:	2900      	cmp	r1, #0
 80189e8:	d0c9      	beq.n	801897e <__sflush_r+0x1a>
 80189ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80189ee:	4299      	cmp	r1, r3
 80189f0:	d002      	beq.n	80189f8 <__sflush_r+0x94>
 80189f2:	4628      	mov	r0, r5
 80189f4:	f7ff fa8e 	bl	8017f14 <_free_r>
 80189f8:	2000      	movs	r0, #0
 80189fa:	6360      	str	r0, [r4, #52]	; 0x34
 80189fc:	e7c0      	b.n	8018980 <__sflush_r+0x1c>
 80189fe:	2301      	movs	r3, #1
 8018a00:	4628      	mov	r0, r5
 8018a02:	47b0      	blx	r6
 8018a04:	1c41      	adds	r1, r0, #1
 8018a06:	d1c8      	bne.n	801899a <__sflush_r+0x36>
 8018a08:	682b      	ldr	r3, [r5, #0]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d0c5      	beq.n	801899a <__sflush_r+0x36>
 8018a0e:	2b1d      	cmp	r3, #29
 8018a10:	d001      	beq.n	8018a16 <__sflush_r+0xb2>
 8018a12:	2b16      	cmp	r3, #22
 8018a14:	d101      	bne.n	8018a1a <__sflush_r+0xb6>
 8018a16:	602f      	str	r7, [r5, #0]
 8018a18:	e7b1      	b.n	801897e <__sflush_r+0x1a>
 8018a1a:	89a3      	ldrh	r3, [r4, #12]
 8018a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a20:	81a3      	strh	r3, [r4, #12]
 8018a22:	e7ad      	b.n	8018980 <__sflush_r+0x1c>
 8018a24:	690f      	ldr	r7, [r1, #16]
 8018a26:	2f00      	cmp	r7, #0
 8018a28:	d0a9      	beq.n	801897e <__sflush_r+0x1a>
 8018a2a:	0793      	lsls	r3, r2, #30
 8018a2c:	680e      	ldr	r6, [r1, #0]
 8018a2e:	bf08      	it	eq
 8018a30:	694b      	ldreq	r3, [r1, #20]
 8018a32:	600f      	str	r7, [r1, #0]
 8018a34:	bf18      	it	ne
 8018a36:	2300      	movne	r3, #0
 8018a38:	eba6 0807 	sub.w	r8, r6, r7
 8018a3c:	608b      	str	r3, [r1, #8]
 8018a3e:	f1b8 0f00 	cmp.w	r8, #0
 8018a42:	dd9c      	ble.n	801897e <__sflush_r+0x1a>
 8018a44:	6a21      	ldr	r1, [r4, #32]
 8018a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018a48:	4643      	mov	r3, r8
 8018a4a:	463a      	mov	r2, r7
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	47b0      	blx	r6
 8018a50:	2800      	cmp	r0, #0
 8018a52:	dc06      	bgt.n	8018a62 <__sflush_r+0xfe>
 8018a54:	89a3      	ldrh	r3, [r4, #12]
 8018a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a5a:	81a3      	strh	r3, [r4, #12]
 8018a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a60:	e78e      	b.n	8018980 <__sflush_r+0x1c>
 8018a62:	4407      	add	r7, r0
 8018a64:	eba8 0800 	sub.w	r8, r8, r0
 8018a68:	e7e9      	b.n	8018a3e <__sflush_r+0xda>
 8018a6a:	bf00      	nop
 8018a6c:	dfbffffe 	.word	0xdfbffffe

08018a70 <_fflush_r>:
 8018a70:	b538      	push	{r3, r4, r5, lr}
 8018a72:	690b      	ldr	r3, [r1, #16]
 8018a74:	4605      	mov	r5, r0
 8018a76:	460c      	mov	r4, r1
 8018a78:	b913      	cbnz	r3, 8018a80 <_fflush_r+0x10>
 8018a7a:	2500      	movs	r5, #0
 8018a7c:	4628      	mov	r0, r5
 8018a7e:	bd38      	pop	{r3, r4, r5, pc}
 8018a80:	b118      	cbz	r0, 8018a8a <_fflush_r+0x1a>
 8018a82:	6a03      	ldr	r3, [r0, #32]
 8018a84:	b90b      	cbnz	r3, 8018a8a <_fflush_r+0x1a>
 8018a86:	f7fe fa79 	bl	8016f7c <__sinit>
 8018a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d0f3      	beq.n	8018a7a <_fflush_r+0xa>
 8018a92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018a94:	07d0      	lsls	r0, r2, #31
 8018a96:	d404      	bmi.n	8018aa2 <_fflush_r+0x32>
 8018a98:	0599      	lsls	r1, r3, #22
 8018a9a:	d402      	bmi.n	8018aa2 <_fflush_r+0x32>
 8018a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a9e:	f7fe fbae 	bl	80171fe <__retarget_lock_acquire_recursive>
 8018aa2:	4628      	mov	r0, r5
 8018aa4:	4621      	mov	r1, r4
 8018aa6:	f7ff ff5d 	bl	8018964 <__sflush_r>
 8018aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018aac:	07da      	lsls	r2, r3, #31
 8018aae:	4605      	mov	r5, r0
 8018ab0:	d4e4      	bmi.n	8018a7c <_fflush_r+0xc>
 8018ab2:	89a3      	ldrh	r3, [r4, #12]
 8018ab4:	059b      	lsls	r3, r3, #22
 8018ab6:	d4e1      	bmi.n	8018a7c <_fflush_r+0xc>
 8018ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018aba:	f7fe fba1 	bl	8017200 <__retarget_lock_release_recursive>
 8018abe:	e7dd      	b.n	8018a7c <_fflush_r+0xc>

08018ac0 <__assert_func>:
 8018ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018ac2:	4614      	mov	r4, r2
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	4b09      	ldr	r3, [pc, #36]	; (8018aec <__assert_func+0x2c>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	4605      	mov	r5, r0
 8018acc:	68d8      	ldr	r0, [r3, #12]
 8018ace:	b14c      	cbz	r4, 8018ae4 <__assert_func+0x24>
 8018ad0:	4b07      	ldr	r3, [pc, #28]	; (8018af0 <__assert_func+0x30>)
 8018ad2:	9100      	str	r1, [sp, #0]
 8018ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ad8:	4906      	ldr	r1, [pc, #24]	; (8018af4 <__assert_func+0x34>)
 8018ada:	462b      	mov	r3, r5
 8018adc:	f000 f844 	bl	8018b68 <fiprintf>
 8018ae0:	f000 f854 	bl	8018b8c <abort>
 8018ae4:	4b04      	ldr	r3, [pc, #16]	; (8018af8 <__assert_func+0x38>)
 8018ae6:	461c      	mov	r4, r3
 8018ae8:	e7f3      	b.n	8018ad2 <__assert_func+0x12>
 8018aea:	bf00      	nop
 8018aec:	20004f90 	.word	0x20004f90
 8018af0:	08093f97 	.word	0x08093f97
 8018af4:	08093fa4 	.word	0x08093fa4
 8018af8:	08093fd2 	.word	0x08093fd2

08018afc <_calloc_r>:
 8018afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018afe:	fba1 2402 	umull	r2, r4, r1, r2
 8018b02:	b94c      	cbnz	r4, 8018b18 <_calloc_r+0x1c>
 8018b04:	4611      	mov	r1, r2
 8018b06:	9201      	str	r2, [sp, #4]
 8018b08:	f7fd fc8a 	bl	8016420 <_malloc_r>
 8018b0c:	9a01      	ldr	r2, [sp, #4]
 8018b0e:	4605      	mov	r5, r0
 8018b10:	b930      	cbnz	r0, 8018b20 <_calloc_r+0x24>
 8018b12:	4628      	mov	r0, r5
 8018b14:	b003      	add	sp, #12
 8018b16:	bd30      	pop	{r4, r5, pc}
 8018b18:	220c      	movs	r2, #12
 8018b1a:	6002      	str	r2, [r0, #0]
 8018b1c:	2500      	movs	r5, #0
 8018b1e:	e7f8      	b.n	8018b12 <_calloc_r+0x16>
 8018b20:	4621      	mov	r1, r4
 8018b22:	f7fe fade 	bl	80170e2 <memset>
 8018b26:	e7f4      	b.n	8018b12 <_calloc_r+0x16>

08018b28 <__ascii_mbtowc>:
 8018b28:	b082      	sub	sp, #8
 8018b2a:	b901      	cbnz	r1, 8018b2e <__ascii_mbtowc+0x6>
 8018b2c:	a901      	add	r1, sp, #4
 8018b2e:	b142      	cbz	r2, 8018b42 <__ascii_mbtowc+0x1a>
 8018b30:	b14b      	cbz	r3, 8018b46 <__ascii_mbtowc+0x1e>
 8018b32:	7813      	ldrb	r3, [r2, #0]
 8018b34:	600b      	str	r3, [r1, #0]
 8018b36:	7812      	ldrb	r2, [r2, #0]
 8018b38:	1e10      	subs	r0, r2, #0
 8018b3a:	bf18      	it	ne
 8018b3c:	2001      	movne	r0, #1
 8018b3e:	b002      	add	sp, #8
 8018b40:	4770      	bx	lr
 8018b42:	4610      	mov	r0, r2
 8018b44:	e7fb      	b.n	8018b3e <__ascii_mbtowc+0x16>
 8018b46:	f06f 0001 	mvn.w	r0, #1
 8018b4a:	e7f8      	b.n	8018b3e <__ascii_mbtowc+0x16>

08018b4c <__ascii_wctomb>:
 8018b4c:	b149      	cbz	r1, 8018b62 <__ascii_wctomb+0x16>
 8018b4e:	2aff      	cmp	r2, #255	; 0xff
 8018b50:	bf85      	ittet	hi
 8018b52:	238a      	movhi	r3, #138	; 0x8a
 8018b54:	6003      	strhi	r3, [r0, #0]
 8018b56:	700a      	strbls	r2, [r1, #0]
 8018b58:	f04f 30ff 	movhi.w	r0, #4294967295
 8018b5c:	bf98      	it	ls
 8018b5e:	2001      	movls	r0, #1
 8018b60:	4770      	bx	lr
 8018b62:	4608      	mov	r0, r1
 8018b64:	4770      	bx	lr
	...

08018b68 <fiprintf>:
 8018b68:	b40e      	push	{r1, r2, r3}
 8018b6a:	b503      	push	{r0, r1, lr}
 8018b6c:	4601      	mov	r1, r0
 8018b6e:	ab03      	add	r3, sp, #12
 8018b70:	4805      	ldr	r0, [pc, #20]	; (8018b88 <fiprintf+0x20>)
 8018b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b76:	6800      	ldr	r0, [r0, #0]
 8018b78:	9301      	str	r3, [sp, #4]
 8018b7a:	f000 f837 	bl	8018bec <_vfiprintf_r>
 8018b7e:	b002      	add	sp, #8
 8018b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b84:	b003      	add	sp, #12
 8018b86:	4770      	bx	lr
 8018b88:	20004f90 	.word	0x20004f90

08018b8c <abort>:
 8018b8c:	b508      	push	{r3, lr}
 8018b8e:	2006      	movs	r0, #6
 8018b90:	f000 fa04 	bl	8018f9c <raise>
 8018b94:	2001      	movs	r0, #1
 8018b96:	f000 fae1 	bl	801915c <_exit>

08018b9a <__sfputc_r>:
 8018b9a:	6893      	ldr	r3, [r2, #8]
 8018b9c:	3b01      	subs	r3, #1
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	b410      	push	{r4}
 8018ba2:	6093      	str	r3, [r2, #8]
 8018ba4:	da08      	bge.n	8018bb8 <__sfputc_r+0x1e>
 8018ba6:	6994      	ldr	r4, [r2, #24]
 8018ba8:	42a3      	cmp	r3, r4
 8018baa:	db01      	blt.n	8018bb0 <__sfputc_r+0x16>
 8018bac:	290a      	cmp	r1, #10
 8018bae:	d103      	bne.n	8018bb8 <__sfputc_r+0x1e>
 8018bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018bb4:	f000 b934 	b.w	8018e20 <__swbuf_r>
 8018bb8:	6813      	ldr	r3, [r2, #0]
 8018bba:	1c58      	adds	r0, r3, #1
 8018bbc:	6010      	str	r0, [r2, #0]
 8018bbe:	7019      	strb	r1, [r3, #0]
 8018bc0:	4608      	mov	r0, r1
 8018bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018bc6:	4770      	bx	lr

08018bc8 <__sfputs_r>:
 8018bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bca:	4606      	mov	r6, r0
 8018bcc:	460f      	mov	r7, r1
 8018bce:	4614      	mov	r4, r2
 8018bd0:	18d5      	adds	r5, r2, r3
 8018bd2:	42ac      	cmp	r4, r5
 8018bd4:	d101      	bne.n	8018bda <__sfputs_r+0x12>
 8018bd6:	2000      	movs	r0, #0
 8018bd8:	e007      	b.n	8018bea <__sfputs_r+0x22>
 8018bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bde:	463a      	mov	r2, r7
 8018be0:	4630      	mov	r0, r6
 8018be2:	f7ff ffda 	bl	8018b9a <__sfputc_r>
 8018be6:	1c43      	adds	r3, r0, #1
 8018be8:	d1f3      	bne.n	8018bd2 <__sfputs_r+0xa>
 8018bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018bec <_vfiprintf_r>:
 8018bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf0:	460d      	mov	r5, r1
 8018bf2:	b09d      	sub	sp, #116	; 0x74
 8018bf4:	4614      	mov	r4, r2
 8018bf6:	4698      	mov	r8, r3
 8018bf8:	4606      	mov	r6, r0
 8018bfa:	b118      	cbz	r0, 8018c04 <_vfiprintf_r+0x18>
 8018bfc:	6a03      	ldr	r3, [r0, #32]
 8018bfe:	b90b      	cbnz	r3, 8018c04 <_vfiprintf_r+0x18>
 8018c00:	f7fe f9bc 	bl	8016f7c <__sinit>
 8018c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c06:	07d9      	lsls	r1, r3, #31
 8018c08:	d405      	bmi.n	8018c16 <_vfiprintf_r+0x2a>
 8018c0a:	89ab      	ldrh	r3, [r5, #12]
 8018c0c:	059a      	lsls	r2, r3, #22
 8018c0e:	d402      	bmi.n	8018c16 <_vfiprintf_r+0x2a>
 8018c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c12:	f7fe faf4 	bl	80171fe <__retarget_lock_acquire_recursive>
 8018c16:	89ab      	ldrh	r3, [r5, #12]
 8018c18:	071b      	lsls	r3, r3, #28
 8018c1a:	d501      	bpl.n	8018c20 <_vfiprintf_r+0x34>
 8018c1c:	692b      	ldr	r3, [r5, #16]
 8018c1e:	b99b      	cbnz	r3, 8018c48 <_vfiprintf_r+0x5c>
 8018c20:	4629      	mov	r1, r5
 8018c22:	4630      	mov	r0, r6
 8018c24:	f000 f93a 	bl	8018e9c <__swsetup_r>
 8018c28:	b170      	cbz	r0, 8018c48 <_vfiprintf_r+0x5c>
 8018c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c2c:	07dc      	lsls	r4, r3, #31
 8018c2e:	d504      	bpl.n	8018c3a <_vfiprintf_r+0x4e>
 8018c30:	f04f 30ff 	mov.w	r0, #4294967295
 8018c34:	b01d      	add	sp, #116	; 0x74
 8018c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c3a:	89ab      	ldrh	r3, [r5, #12]
 8018c3c:	0598      	lsls	r0, r3, #22
 8018c3e:	d4f7      	bmi.n	8018c30 <_vfiprintf_r+0x44>
 8018c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c42:	f7fe fadd 	bl	8017200 <__retarget_lock_release_recursive>
 8018c46:	e7f3      	b.n	8018c30 <_vfiprintf_r+0x44>
 8018c48:	2300      	movs	r3, #0
 8018c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c4c:	2320      	movs	r3, #32
 8018c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c56:	2330      	movs	r3, #48	; 0x30
 8018c58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018e0c <_vfiprintf_r+0x220>
 8018c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c60:	f04f 0901 	mov.w	r9, #1
 8018c64:	4623      	mov	r3, r4
 8018c66:	469a      	mov	sl, r3
 8018c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c6c:	b10a      	cbz	r2, 8018c72 <_vfiprintf_r+0x86>
 8018c6e:	2a25      	cmp	r2, #37	; 0x25
 8018c70:	d1f9      	bne.n	8018c66 <_vfiprintf_r+0x7a>
 8018c72:	ebba 0b04 	subs.w	fp, sl, r4
 8018c76:	d00b      	beq.n	8018c90 <_vfiprintf_r+0xa4>
 8018c78:	465b      	mov	r3, fp
 8018c7a:	4622      	mov	r2, r4
 8018c7c:	4629      	mov	r1, r5
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f7ff ffa2 	bl	8018bc8 <__sfputs_r>
 8018c84:	3001      	adds	r0, #1
 8018c86:	f000 80a9 	beq.w	8018ddc <_vfiprintf_r+0x1f0>
 8018c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c8c:	445a      	add	r2, fp
 8018c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8018c90:	f89a 3000 	ldrb.w	r3, [sl]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	f000 80a1 	beq.w	8018ddc <_vfiprintf_r+0x1f0>
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8018ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ca4:	f10a 0a01 	add.w	sl, sl, #1
 8018ca8:	9304      	str	r3, [sp, #16]
 8018caa:	9307      	str	r3, [sp, #28]
 8018cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8018cb2:	4654      	mov	r4, sl
 8018cb4:	2205      	movs	r2, #5
 8018cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cba:	4854      	ldr	r0, [pc, #336]	; (8018e0c <_vfiprintf_r+0x220>)
 8018cbc:	f7e7 faa8 	bl	8000210 <memchr>
 8018cc0:	9a04      	ldr	r2, [sp, #16]
 8018cc2:	b9d8      	cbnz	r0, 8018cfc <_vfiprintf_r+0x110>
 8018cc4:	06d1      	lsls	r1, r2, #27
 8018cc6:	bf44      	itt	mi
 8018cc8:	2320      	movmi	r3, #32
 8018cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018cce:	0713      	lsls	r3, r2, #28
 8018cd0:	bf44      	itt	mi
 8018cd2:	232b      	movmi	r3, #43	; 0x2b
 8018cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8018cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8018cde:	d015      	beq.n	8018d0c <_vfiprintf_r+0x120>
 8018ce0:	9a07      	ldr	r2, [sp, #28]
 8018ce2:	4654      	mov	r4, sl
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	f04f 0c0a 	mov.w	ip, #10
 8018cea:	4621      	mov	r1, r4
 8018cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018cf0:	3b30      	subs	r3, #48	; 0x30
 8018cf2:	2b09      	cmp	r3, #9
 8018cf4:	d94d      	bls.n	8018d92 <_vfiprintf_r+0x1a6>
 8018cf6:	b1b0      	cbz	r0, 8018d26 <_vfiprintf_r+0x13a>
 8018cf8:	9207      	str	r2, [sp, #28]
 8018cfa:	e014      	b.n	8018d26 <_vfiprintf_r+0x13a>
 8018cfc:	eba0 0308 	sub.w	r3, r0, r8
 8018d00:	fa09 f303 	lsl.w	r3, r9, r3
 8018d04:	4313      	orrs	r3, r2
 8018d06:	9304      	str	r3, [sp, #16]
 8018d08:	46a2      	mov	sl, r4
 8018d0a:	e7d2      	b.n	8018cb2 <_vfiprintf_r+0xc6>
 8018d0c:	9b03      	ldr	r3, [sp, #12]
 8018d0e:	1d19      	adds	r1, r3, #4
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	9103      	str	r1, [sp, #12]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	bfbb      	ittet	lt
 8018d18:	425b      	neglt	r3, r3
 8018d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8018d1e:	9307      	strge	r3, [sp, #28]
 8018d20:	9307      	strlt	r3, [sp, #28]
 8018d22:	bfb8      	it	lt
 8018d24:	9204      	strlt	r2, [sp, #16]
 8018d26:	7823      	ldrb	r3, [r4, #0]
 8018d28:	2b2e      	cmp	r3, #46	; 0x2e
 8018d2a:	d10c      	bne.n	8018d46 <_vfiprintf_r+0x15a>
 8018d2c:	7863      	ldrb	r3, [r4, #1]
 8018d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8018d30:	d134      	bne.n	8018d9c <_vfiprintf_r+0x1b0>
 8018d32:	9b03      	ldr	r3, [sp, #12]
 8018d34:	1d1a      	adds	r2, r3, #4
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	9203      	str	r2, [sp, #12]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	bfb8      	it	lt
 8018d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018d42:	3402      	adds	r4, #2
 8018d44:	9305      	str	r3, [sp, #20]
 8018d46:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018e1c <_vfiprintf_r+0x230>
 8018d4a:	7821      	ldrb	r1, [r4, #0]
 8018d4c:	2203      	movs	r2, #3
 8018d4e:	4650      	mov	r0, sl
 8018d50:	f7e7 fa5e 	bl	8000210 <memchr>
 8018d54:	b138      	cbz	r0, 8018d66 <_vfiprintf_r+0x17a>
 8018d56:	9b04      	ldr	r3, [sp, #16]
 8018d58:	eba0 000a 	sub.w	r0, r0, sl
 8018d5c:	2240      	movs	r2, #64	; 0x40
 8018d5e:	4082      	lsls	r2, r0
 8018d60:	4313      	orrs	r3, r2
 8018d62:	3401      	adds	r4, #1
 8018d64:	9304      	str	r3, [sp, #16]
 8018d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d6a:	4829      	ldr	r0, [pc, #164]	; (8018e10 <_vfiprintf_r+0x224>)
 8018d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d70:	2206      	movs	r2, #6
 8018d72:	f7e7 fa4d 	bl	8000210 <memchr>
 8018d76:	2800      	cmp	r0, #0
 8018d78:	d03f      	beq.n	8018dfa <_vfiprintf_r+0x20e>
 8018d7a:	4b26      	ldr	r3, [pc, #152]	; (8018e14 <_vfiprintf_r+0x228>)
 8018d7c:	bb1b      	cbnz	r3, 8018dc6 <_vfiprintf_r+0x1da>
 8018d7e:	9b03      	ldr	r3, [sp, #12]
 8018d80:	3307      	adds	r3, #7
 8018d82:	f023 0307 	bic.w	r3, r3, #7
 8018d86:	3308      	adds	r3, #8
 8018d88:	9303      	str	r3, [sp, #12]
 8018d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d8c:	443b      	add	r3, r7
 8018d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8018d90:	e768      	b.n	8018c64 <_vfiprintf_r+0x78>
 8018d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d96:	460c      	mov	r4, r1
 8018d98:	2001      	movs	r0, #1
 8018d9a:	e7a6      	b.n	8018cea <_vfiprintf_r+0xfe>
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	3401      	adds	r4, #1
 8018da0:	9305      	str	r3, [sp, #20]
 8018da2:	4619      	mov	r1, r3
 8018da4:	f04f 0c0a 	mov.w	ip, #10
 8018da8:	4620      	mov	r0, r4
 8018daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018dae:	3a30      	subs	r2, #48	; 0x30
 8018db0:	2a09      	cmp	r2, #9
 8018db2:	d903      	bls.n	8018dbc <_vfiprintf_r+0x1d0>
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d0c6      	beq.n	8018d46 <_vfiprintf_r+0x15a>
 8018db8:	9105      	str	r1, [sp, #20]
 8018dba:	e7c4      	b.n	8018d46 <_vfiprintf_r+0x15a>
 8018dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	e7f0      	b.n	8018da8 <_vfiprintf_r+0x1bc>
 8018dc6:	ab03      	add	r3, sp, #12
 8018dc8:	9300      	str	r3, [sp, #0]
 8018dca:	462a      	mov	r2, r5
 8018dcc:	4b12      	ldr	r3, [pc, #72]	; (8018e18 <_vfiprintf_r+0x22c>)
 8018dce:	a904      	add	r1, sp, #16
 8018dd0:	4630      	mov	r0, r6
 8018dd2:	f7fd fc81 	bl	80166d8 <_printf_float>
 8018dd6:	4607      	mov	r7, r0
 8018dd8:	1c78      	adds	r0, r7, #1
 8018dda:	d1d6      	bne.n	8018d8a <_vfiprintf_r+0x19e>
 8018ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018dde:	07d9      	lsls	r1, r3, #31
 8018de0:	d405      	bmi.n	8018dee <_vfiprintf_r+0x202>
 8018de2:	89ab      	ldrh	r3, [r5, #12]
 8018de4:	059a      	lsls	r2, r3, #22
 8018de6:	d402      	bmi.n	8018dee <_vfiprintf_r+0x202>
 8018de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018dea:	f7fe fa09 	bl	8017200 <__retarget_lock_release_recursive>
 8018dee:	89ab      	ldrh	r3, [r5, #12]
 8018df0:	065b      	lsls	r3, r3, #25
 8018df2:	f53f af1d 	bmi.w	8018c30 <_vfiprintf_r+0x44>
 8018df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018df8:	e71c      	b.n	8018c34 <_vfiprintf_r+0x48>
 8018dfa:	ab03      	add	r3, sp, #12
 8018dfc:	9300      	str	r3, [sp, #0]
 8018dfe:	462a      	mov	r2, r5
 8018e00:	4b05      	ldr	r3, [pc, #20]	; (8018e18 <_vfiprintf_r+0x22c>)
 8018e02:	a904      	add	r1, sp, #16
 8018e04:	4630      	mov	r0, r6
 8018e06:	f7fd ff0b 	bl	8016c20 <_printf_i>
 8018e0a:	e7e4      	b.n	8018dd6 <_vfiprintf_r+0x1ea>
 8018e0c:	08093f7c 	.word	0x08093f7c
 8018e10:	08093f86 	.word	0x08093f86
 8018e14:	080166d9 	.word	0x080166d9
 8018e18:	08018bc9 	.word	0x08018bc9
 8018e1c:	08093f82 	.word	0x08093f82

08018e20 <__swbuf_r>:
 8018e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e22:	460e      	mov	r6, r1
 8018e24:	4614      	mov	r4, r2
 8018e26:	4605      	mov	r5, r0
 8018e28:	b118      	cbz	r0, 8018e32 <__swbuf_r+0x12>
 8018e2a:	6a03      	ldr	r3, [r0, #32]
 8018e2c:	b90b      	cbnz	r3, 8018e32 <__swbuf_r+0x12>
 8018e2e:	f7fe f8a5 	bl	8016f7c <__sinit>
 8018e32:	69a3      	ldr	r3, [r4, #24]
 8018e34:	60a3      	str	r3, [r4, #8]
 8018e36:	89a3      	ldrh	r3, [r4, #12]
 8018e38:	071a      	lsls	r2, r3, #28
 8018e3a:	d525      	bpl.n	8018e88 <__swbuf_r+0x68>
 8018e3c:	6923      	ldr	r3, [r4, #16]
 8018e3e:	b31b      	cbz	r3, 8018e88 <__swbuf_r+0x68>
 8018e40:	6823      	ldr	r3, [r4, #0]
 8018e42:	6922      	ldr	r2, [r4, #16]
 8018e44:	1a98      	subs	r0, r3, r2
 8018e46:	6963      	ldr	r3, [r4, #20]
 8018e48:	b2f6      	uxtb	r6, r6
 8018e4a:	4283      	cmp	r3, r0
 8018e4c:	4637      	mov	r7, r6
 8018e4e:	dc04      	bgt.n	8018e5a <__swbuf_r+0x3a>
 8018e50:	4621      	mov	r1, r4
 8018e52:	4628      	mov	r0, r5
 8018e54:	f7ff fe0c 	bl	8018a70 <_fflush_r>
 8018e58:	b9e0      	cbnz	r0, 8018e94 <__swbuf_r+0x74>
 8018e5a:	68a3      	ldr	r3, [r4, #8]
 8018e5c:	3b01      	subs	r3, #1
 8018e5e:	60a3      	str	r3, [r4, #8]
 8018e60:	6823      	ldr	r3, [r4, #0]
 8018e62:	1c5a      	adds	r2, r3, #1
 8018e64:	6022      	str	r2, [r4, #0]
 8018e66:	701e      	strb	r6, [r3, #0]
 8018e68:	6962      	ldr	r2, [r4, #20]
 8018e6a:	1c43      	adds	r3, r0, #1
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d004      	beq.n	8018e7a <__swbuf_r+0x5a>
 8018e70:	89a3      	ldrh	r3, [r4, #12]
 8018e72:	07db      	lsls	r3, r3, #31
 8018e74:	d506      	bpl.n	8018e84 <__swbuf_r+0x64>
 8018e76:	2e0a      	cmp	r6, #10
 8018e78:	d104      	bne.n	8018e84 <__swbuf_r+0x64>
 8018e7a:	4621      	mov	r1, r4
 8018e7c:	4628      	mov	r0, r5
 8018e7e:	f7ff fdf7 	bl	8018a70 <_fflush_r>
 8018e82:	b938      	cbnz	r0, 8018e94 <__swbuf_r+0x74>
 8018e84:	4638      	mov	r0, r7
 8018e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e88:	4621      	mov	r1, r4
 8018e8a:	4628      	mov	r0, r5
 8018e8c:	f000 f806 	bl	8018e9c <__swsetup_r>
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d0d5      	beq.n	8018e40 <__swbuf_r+0x20>
 8018e94:	f04f 37ff 	mov.w	r7, #4294967295
 8018e98:	e7f4      	b.n	8018e84 <__swbuf_r+0x64>
	...

08018e9c <__swsetup_r>:
 8018e9c:	b538      	push	{r3, r4, r5, lr}
 8018e9e:	4b2a      	ldr	r3, [pc, #168]	; (8018f48 <__swsetup_r+0xac>)
 8018ea0:	4605      	mov	r5, r0
 8018ea2:	6818      	ldr	r0, [r3, #0]
 8018ea4:	460c      	mov	r4, r1
 8018ea6:	b118      	cbz	r0, 8018eb0 <__swsetup_r+0x14>
 8018ea8:	6a03      	ldr	r3, [r0, #32]
 8018eaa:	b90b      	cbnz	r3, 8018eb0 <__swsetup_r+0x14>
 8018eac:	f7fe f866 	bl	8016f7c <__sinit>
 8018eb0:	89a3      	ldrh	r3, [r4, #12]
 8018eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018eb6:	0718      	lsls	r0, r3, #28
 8018eb8:	d422      	bmi.n	8018f00 <__swsetup_r+0x64>
 8018eba:	06d9      	lsls	r1, r3, #27
 8018ebc:	d407      	bmi.n	8018ece <__swsetup_r+0x32>
 8018ebe:	2309      	movs	r3, #9
 8018ec0:	602b      	str	r3, [r5, #0]
 8018ec2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018ec6:	81a3      	strh	r3, [r4, #12]
 8018ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8018ecc:	e034      	b.n	8018f38 <__swsetup_r+0x9c>
 8018ece:	0758      	lsls	r0, r3, #29
 8018ed0:	d512      	bpl.n	8018ef8 <__swsetup_r+0x5c>
 8018ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ed4:	b141      	cbz	r1, 8018ee8 <__swsetup_r+0x4c>
 8018ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018eda:	4299      	cmp	r1, r3
 8018edc:	d002      	beq.n	8018ee4 <__swsetup_r+0x48>
 8018ede:	4628      	mov	r0, r5
 8018ee0:	f7ff f818 	bl	8017f14 <_free_r>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	6363      	str	r3, [r4, #52]	; 0x34
 8018ee8:	89a3      	ldrh	r3, [r4, #12]
 8018eea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018eee:	81a3      	strh	r3, [r4, #12]
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	6063      	str	r3, [r4, #4]
 8018ef4:	6923      	ldr	r3, [r4, #16]
 8018ef6:	6023      	str	r3, [r4, #0]
 8018ef8:	89a3      	ldrh	r3, [r4, #12]
 8018efa:	f043 0308 	orr.w	r3, r3, #8
 8018efe:	81a3      	strh	r3, [r4, #12]
 8018f00:	6923      	ldr	r3, [r4, #16]
 8018f02:	b94b      	cbnz	r3, 8018f18 <__swsetup_r+0x7c>
 8018f04:	89a3      	ldrh	r3, [r4, #12]
 8018f06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018f0e:	d003      	beq.n	8018f18 <__swsetup_r+0x7c>
 8018f10:	4621      	mov	r1, r4
 8018f12:	4628      	mov	r0, r5
 8018f14:	f000 f884 	bl	8019020 <__smakebuf_r>
 8018f18:	89a0      	ldrh	r0, [r4, #12]
 8018f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018f1e:	f010 0301 	ands.w	r3, r0, #1
 8018f22:	d00a      	beq.n	8018f3a <__swsetup_r+0x9e>
 8018f24:	2300      	movs	r3, #0
 8018f26:	60a3      	str	r3, [r4, #8]
 8018f28:	6963      	ldr	r3, [r4, #20]
 8018f2a:	425b      	negs	r3, r3
 8018f2c:	61a3      	str	r3, [r4, #24]
 8018f2e:	6923      	ldr	r3, [r4, #16]
 8018f30:	b943      	cbnz	r3, 8018f44 <__swsetup_r+0xa8>
 8018f32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018f36:	d1c4      	bne.n	8018ec2 <__swsetup_r+0x26>
 8018f38:	bd38      	pop	{r3, r4, r5, pc}
 8018f3a:	0781      	lsls	r1, r0, #30
 8018f3c:	bf58      	it	pl
 8018f3e:	6963      	ldrpl	r3, [r4, #20]
 8018f40:	60a3      	str	r3, [r4, #8]
 8018f42:	e7f4      	b.n	8018f2e <__swsetup_r+0x92>
 8018f44:	2000      	movs	r0, #0
 8018f46:	e7f7      	b.n	8018f38 <__swsetup_r+0x9c>
 8018f48:	20004f90 	.word	0x20004f90

08018f4c <_raise_r>:
 8018f4c:	291f      	cmp	r1, #31
 8018f4e:	b538      	push	{r3, r4, r5, lr}
 8018f50:	4604      	mov	r4, r0
 8018f52:	460d      	mov	r5, r1
 8018f54:	d904      	bls.n	8018f60 <_raise_r+0x14>
 8018f56:	2316      	movs	r3, #22
 8018f58:	6003      	str	r3, [r0, #0]
 8018f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8018f5e:	bd38      	pop	{r3, r4, r5, pc}
 8018f60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018f62:	b112      	cbz	r2, 8018f6a <_raise_r+0x1e>
 8018f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018f68:	b94b      	cbnz	r3, 8018f7e <_raise_r+0x32>
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f000 f830 	bl	8018fd0 <_getpid_r>
 8018f70:	462a      	mov	r2, r5
 8018f72:	4601      	mov	r1, r0
 8018f74:	4620      	mov	r0, r4
 8018f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f7a:	f000 b817 	b.w	8018fac <_kill_r>
 8018f7e:	2b01      	cmp	r3, #1
 8018f80:	d00a      	beq.n	8018f98 <_raise_r+0x4c>
 8018f82:	1c59      	adds	r1, r3, #1
 8018f84:	d103      	bne.n	8018f8e <_raise_r+0x42>
 8018f86:	2316      	movs	r3, #22
 8018f88:	6003      	str	r3, [r0, #0]
 8018f8a:	2001      	movs	r0, #1
 8018f8c:	e7e7      	b.n	8018f5e <_raise_r+0x12>
 8018f8e:	2400      	movs	r4, #0
 8018f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018f94:	4628      	mov	r0, r5
 8018f96:	4798      	blx	r3
 8018f98:	2000      	movs	r0, #0
 8018f9a:	e7e0      	b.n	8018f5e <_raise_r+0x12>

08018f9c <raise>:
 8018f9c:	4b02      	ldr	r3, [pc, #8]	; (8018fa8 <raise+0xc>)
 8018f9e:	4601      	mov	r1, r0
 8018fa0:	6818      	ldr	r0, [r3, #0]
 8018fa2:	f7ff bfd3 	b.w	8018f4c <_raise_r>
 8018fa6:	bf00      	nop
 8018fa8:	20004f90 	.word	0x20004f90

08018fac <_kill_r>:
 8018fac:	b538      	push	{r3, r4, r5, lr}
 8018fae:	4d07      	ldr	r5, [pc, #28]	; (8018fcc <_kill_r+0x20>)
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	4604      	mov	r4, r0
 8018fb4:	4608      	mov	r0, r1
 8018fb6:	4611      	mov	r1, r2
 8018fb8:	602b      	str	r3, [r5, #0]
 8018fba:	f000 f8af 	bl	801911c <_kill>
 8018fbe:	1c43      	adds	r3, r0, #1
 8018fc0:	d102      	bne.n	8018fc8 <_kill_r+0x1c>
 8018fc2:	682b      	ldr	r3, [r5, #0]
 8018fc4:	b103      	cbz	r3, 8018fc8 <_kill_r+0x1c>
 8018fc6:	6023      	str	r3, [r4, #0]
 8018fc8:	bd38      	pop	{r3, r4, r5, pc}
 8018fca:	bf00      	nop
 8018fcc:	20026850 	.word	0x20026850

08018fd0 <_getpid_r>:
 8018fd0:	f000 b894 	b.w	80190fc <_getpid>

08018fd4 <__swhatbuf_r>:
 8018fd4:	b570      	push	{r4, r5, r6, lr}
 8018fd6:	460c      	mov	r4, r1
 8018fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fdc:	2900      	cmp	r1, #0
 8018fde:	b096      	sub	sp, #88	; 0x58
 8018fe0:	4615      	mov	r5, r2
 8018fe2:	461e      	mov	r6, r3
 8018fe4:	da0d      	bge.n	8019002 <__swhatbuf_r+0x2e>
 8018fe6:	89a3      	ldrh	r3, [r4, #12]
 8018fe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018fec:	f04f 0100 	mov.w	r1, #0
 8018ff0:	bf0c      	ite	eq
 8018ff2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018ff6:	2340      	movne	r3, #64	; 0x40
 8018ff8:	2000      	movs	r0, #0
 8018ffa:	6031      	str	r1, [r6, #0]
 8018ffc:	602b      	str	r3, [r5, #0]
 8018ffe:	b016      	add	sp, #88	; 0x58
 8019000:	bd70      	pop	{r4, r5, r6, pc}
 8019002:	466a      	mov	r2, sp
 8019004:	f000 f848 	bl	8019098 <_fstat_r>
 8019008:	2800      	cmp	r0, #0
 801900a:	dbec      	blt.n	8018fe6 <__swhatbuf_r+0x12>
 801900c:	9901      	ldr	r1, [sp, #4]
 801900e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019012:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019016:	4259      	negs	r1, r3
 8019018:	4159      	adcs	r1, r3
 801901a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801901e:	e7eb      	b.n	8018ff8 <__swhatbuf_r+0x24>

08019020 <__smakebuf_r>:
 8019020:	898b      	ldrh	r3, [r1, #12]
 8019022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019024:	079d      	lsls	r5, r3, #30
 8019026:	4606      	mov	r6, r0
 8019028:	460c      	mov	r4, r1
 801902a:	d507      	bpl.n	801903c <__smakebuf_r+0x1c>
 801902c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019030:	6023      	str	r3, [r4, #0]
 8019032:	6123      	str	r3, [r4, #16]
 8019034:	2301      	movs	r3, #1
 8019036:	6163      	str	r3, [r4, #20]
 8019038:	b002      	add	sp, #8
 801903a:	bd70      	pop	{r4, r5, r6, pc}
 801903c:	ab01      	add	r3, sp, #4
 801903e:	466a      	mov	r2, sp
 8019040:	f7ff ffc8 	bl	8018fd4 <__swhatbuf_r>
 8019044:	9900      	ldr	r1, [sp, #0]
 8019046:	4605      	mov	r5, r0
 8019048:	4630      	mov	r0, r6
 801904a:	f7fd f9e9 	bl	8016420 <_malloc_r>
 801904e:	b948      	cbnz	r0, 8019064 <__smakebuf_r+0x44>
 8019050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019054:	059a      	lsls	r2, r3, #22
 8019056:	d4ef      	bmi.n	8019038 <__smakebuf_r+0x18>
 8019058:	f023 0303 	bic.w	r3, r3, #3
 801905c:	f043 0302 	orr.w	r3, r3, #2
 8019060:	81a3      	strh	r3, [r4, #12]
 8019062:	e7e3      	b.n	801902c <__smakebuf_r+0xc>
 8019064:	89a3      	ldrh	r3, [r4, #12]
 8019066:	6020      	str	r0, [r4, #0]
 8019068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801906c:	81a3      	strh	r3, [r4, #12]
 801906e:	9b00      	ldr	r3, [sp, #0]
 8019070:	6163      	str	r3, [r4, #20]
 8019072:	9b01      	ldr	r3, [sp, #4]
 8019074:	6120      	str	r0, [r4, #16]
 8019076:	b15b      	cbz	r3, 8019090 <__smakebuf_r+0x70>
 8019078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801907c:	4630      	mov	r0, r6
 801907e:	f000 f81d 	bl	80190bc <_isatty_r>
 8019082:	b128      	cbz	r0, 8019090 <__smakebuf_r+0x70>
 8019084:	89a3      	ldrh	r3, [r4, #12]
 8019086:	f023 0303 	bic.w	r3, r3, #3
 801908a:	f043 0301 	orr.w	r3, r3, #1
 801908e:	81a3      	strh	r3, [r4, #12]
 8019090:	89a3      	ldrh	r3, [r4, #12]
 8019092:	431d      	orrs	r5, r3
 8019094:	81a5      	strh	r5, [r4, #12]
 8019096:	e7cf      	b.n	8019038 <__smakebuf_r+0x18>

08019098 <_fstat_r>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	4d07      	ldr	r5, [pc, #28]	; (80190b8 <_fstat_r+0x20>)
 801909c:	2300      	movs	r3, #0
 801909e:	4604      	mov	r4, r0
 80190a0:	4608      	mov	r0, r1
 80190a2:	4611      	mov	r1, r2
 80190a4:	602b      	str	r3, [r5, #0]
 80190a6:	f000 f821 	bl	80190ec <_fstat>
 80190aa:	1c43      	adds	r3, r0, #1
 80190ac:	d102      	bne.n	80190b4 <_fstat_r+0x1c>
 80190ae:	682b      	ldr	r3, [r5, #0]
 80190b0:	b103      	cbz	r3, 80190b4 <_fstat_r+0x1c>
 80190b2:	6023      	str	r3, [r4, #0]
 80190b4:	bd38      	pop	{r3, r4, r5, pc}
 80190b6:	bf00      	nop
 80190b8:	20026850 	.word	0x20026850

080190bc <_isatty_r>:
 80190bc:	b538      	push	{r3, r4, r5, lr}
 80190be:	4d06      	ldr	r5, [pc, #24]	; (80190d8 <_isatty_r+0x1c>)
 80190c0:	2300      	movs	r3, #0
 80190c2:	4604      	mov	r4, r0
 80190c4:	4608      	mov	r0, r1
 80190c6:	602b      	str	r3, [r5, #0]
 80190c8:	f000 f820 	bl	801910c <_isatty>
 80190cc:	1c43      	adds	r3, r0, #1
 80190ce:	d102      	bne.n	80190d6 <_isatty_r+0x1a>
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	b103      	cbz	r3, 80190d6 <_isatty_r+0x1a>
 80190d4:	6023      	str	r3, [r4, #0]
 80190d6:	bd38      	pop	{r3, r4, r5, pc}
 80190d8:	20026850 	.word	0x20026850

080190dc <_close>:
 80190dc:	4b02      	ldr	r3, [pc, #8]	; (80190e8 <_close+0xc>)
 80190de:	2258      	movs	r2, #88	; 0x58
 80190e0:	601a      	str	r2, [r3, #0]
 80190e2:	f04f 30ff 	mov.w	r0, #4294967295
 80190e6:	4770      	bx	lr
 80190e8:	20026850 	.word	0x20026850

080190ec <_fstat>:
 80190ec:	4b02      	ldr	r3, [pc, #8]	; (80190f8 <_fstat+0xc>)
 80190ee:	2258      	movs	r2, #88	; 0x58
 80190f0:	601a      	str	r2, [r3, #0]
 80190f2:	f04f 30ff 	mov.w	r0, #4294967295
 80190f6:	4770      	bx	lr
 80190f8:	20026850 	.word	0x20026850

080190fc <_getpid>:
 80190fc:	4b02      	ldr	r3, [pc, #8]	; (8019108 <_getpid+0xc>)
 80190fe:	2258      	movs	r2, #88	; 0x58
 8019100:	601a      	str	r2, [r3, #0]
 8019102:	f04f 30ff 	mov.w	r0, #4294967295
 8019106:	4770      	bx	lr
 8019108:	20026850 	.word	0x20026850

0801910c <_isatty>:
 801910c:	4b02      	ldr	r3, [pc, #8]	; (8019118 <_isatty+0xc>)
 801910e:	2258      	movs	r2, #88	; 0x58
 8019110:	601a      	str	r2, [r3, #0]
 8019112:	2000      	movs	r0, #0
 8019114:	4770      	bx	lr
 8019116:	bf00      	nop
 8019118:	20026850 	.word	0x20026850

0801911c <_kill>:
 801911c:	4b02      	ldr	r3, [pc, #8]	; (8019128 <_kill+0xc>)
 801911e:	2258      	movs	r2, #88	; 0x58
 8019120:	601a      	str	r2, [r3, #0]
 8019122:	f04f 30ff 	mov.w	r0, #4294967295
 8019126:	4770      	bx	lr
 8019128:	20026850 	.word	0x20026850

0801912c <_lseek>:
 801912c:	4b02      	ldr	r3, [pc, #8]	; (8019138 <_lseek+0xc>)
 801912e:	2258      	movs	r2, #88	; 0x58
 8019130:	601a      	str	r2, [r3, #0]
 8019132:	f04f 30ff 	mov.w	r0, #4294967295
 8019136:	4770      	bx	lr
 8019138:	20026850 	.word	0x20026850

0801913c <_read>:
 801913c:	4b02      	ldr	r3, [pc, #8]	; (8019148 <_read+0xc>)
 801913e:	2258      	movs	r2, #88	; 0x58
 8019140:	601a      	str	r2, [r3, #0]
 8019142:	f04f 30ff 	mov.w	r0, #4294967295
 8019146:	4770      	bx	lr
 8019148:	20026850 	.word	0x20026850

0801914c <_write>:
 801914c:	4b02      	ldr	r3, [pc, #8]	; (8019158 <_write+0xc>)
 801914e:	2258      	movs	r2, #88	; 0x58
 8019150:	601a      	str	r2, [r3, #0]
 8019152:	f04f 30ff 	mov.w	r0, #4294967295
 8019156:	4770      	bx	lr
 8019158:	20026850 	.word	0x20026850

0801915c <_exit>:
 801915c:	e7fe      	b.n	801915c <_exit>
	...

08019160 <_init>:
 8019160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019162:	bf00      	nop
 8019164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019166:	bc08      	pop	{r3}
 8019168:	469e      	mov	lr, r3
 801916a:	4770      	bx	lr

0801916c <_fini>:
 801916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801916e:	bf00      	nop
 8019170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019172:	bc08      	pop	{r3}
 8019174:	469e      	mov	lr, r3
 8019176:	4770      	bx	lr
